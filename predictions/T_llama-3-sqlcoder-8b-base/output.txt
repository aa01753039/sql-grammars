### TaskGenerate a SQL query to answer [QUESTION]How many clubs are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many clubs are there?[/QUESTION][SQL]SELECT COUNT(*) FROM club;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of clubs.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of clubs.[/QUESTION][SQL]SELECT COUNT(*) FROM club;
### TaskGenerate a SQL query to answer [QUESTION]List the name of clubs in ascending alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of clubs in ascending alphabetical order.[/QUESTION][SQL]SELECT c.name FROM club c ORDER BY c.name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of clubs, ordered alphabetically?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of clubs, ordered alphabetically?[/QUESTION][SQL]SELECT c.name FROM club c ORDER BY c.name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the managers and captains of clubs?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the managers and captains of clubs?[/QUESTION][SQL]SELECT c.Name AS Club_Name, p.Name AS Player_Name FROM club c JOIN player p ON c.Manager = CAST(p.Player_ID AS text) OR c.Captain = CAST(p.Player_ID AS text);
### TaskGenerate a SQL query to answer [QUESTION]Return the managers and captains of all clubs.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the managers and captains of all clubs.[/QUESTION][SQL]SELECT c.Name AS Club_Name, c.Manager AS Manager, c.Captain AS Captain FROM club c ORDER BY c.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the name of clubs whose manufacturer is not "Nike"[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of clubs whose manufacturer is not "Nike"[/QUESTION][SQL]SELECT c.name FROM club c WHERE c.manufacturer!= 'Nike' ORDER BY c.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of clubs who do not have the manufacturer Nike?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of clubs who do not have the manufacturer Nike?[/QUESTION][SQL]SELECT c.Name FROM club c WHERE c.Manufacturer!= 'Nike' ORDER BY c.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of players in ascending order of wins count?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of players in ascending order of wins count?[/QUESTION][SQL]SELECT p.name, p.wins_count FROM player p ORDER BY p.wins_count ASC;
### TaskGenerate a SQL query to answer [QUESTION]Return the names of players in order of count of wins, ascending.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of players in order of count of wins, ascending.[/QUESTION][SQL]SELECT p.Name FROM player p ORDER BY p.Wins_count ASC;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the player with the highest earnings?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the player with the highest earnings?[/QUESTION][SQL]SELECT p.Name FROM player p WHERE p.Earnings = (SELECT MAX(p2.Earnings) FROM player p2);
### TaskGenerate a SQL query to answer [QUESTION]Return the name of the player who earns the most money.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the name of the player who earns the most money.[/QUESTION][SQL]SELECT p.Name FROM player p ORDER BY p.Earnings DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct countries of players with earnings higher than 1200000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct countries of players with earnings higher than 1200000?[/QUESTION][SQL]SELECT DISTINCT p.Country FROM player p WHERE p.Earnings > 1200000 ORDER BY p.Country NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]From which countries are players who make more than 1200000 from?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]From which countries are players who make more than 1200000 from?[/QUESTION][SQL]SELECT p.country FROM player p WHERE p.earnings > 1200000 ORDER BY p.country NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the country of the player with the highest earnings among players that have more than 2 win counts?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the country of the player with the highest earnings among players that have more than 2 win counts?[/QUESTION][SQL]SELECT p.Country FROM player p WHERE p.Wins_count > 2 ORDER BY p.Earnings DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Of players who have more than 2 wins, what is the country of the player who makes the most?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Of players who have more than 2 wins, what is the country of the player who makes the most?[/QUESTION][SQL]SELECT p.Country FROM player p WHERE p.Wins_count > 2 ORDER BY p.Earnings DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show names of players and names of clubs they are in.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names of players and names of clubs they are in.[/QUESTION][SQL]SELECT p.Name AS player_name, c.Name AS club_name FROM Player p JOIN Club c ON p.Club_ID = c.Club_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of players and the corresponding clubs that they are in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of players and the corresponding clubs that they are in?[/QUESTION][SQL]SELECT p.name AS player_name, c.name AS club_name FROM player p JOIN club c ON p.club_id = c.club_id;
### TaskGenerate a SQL query to answer [QUESTION]Show names of clubs that have players with more than 2 win counts.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names of clubs that have players with more than 2 win counts.[/QUESTION][SQL]SELECT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2 GROUP BY c.Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of clubs that have players who have won more than twice?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of clubs that have players who have won more than twice?[/QUESTION][SQL]SELECT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2 GROUP BY c.Name;
### TaskGenerate a SQL query to answer [QUESTION]Show names of players from the club with manager "Sam Allardyce".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names of players from the club with manager "Sam Allardyce".[/QUESTION][SQL]SELECT p.Name FROM player p JOIN club c ON p.Club_ID = c.Club_ID WHERE LOWER(c.Manager) ='sam allardyce';
### TaskGenerate a SQL query to answer [QUESTION]What are the names of players from the club managed by Sam Allardyce?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of players from the club managed by Sam Allardyce?[/QUESTION][SQL]SELECT p.Name FROM player p JOIN club c ON p.Club_ID = c.Club_ID WHERE LOWER(c.Manager) ='sam allardyce';
### TaskGenerate a SQL query to answer [QUESTION]Show names of clubs in descending order of average earnings of players belonging.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names of clubs in descending order of average earnings of players belonging.[/QUESTION][SQL]SELECT c.Name, AVG(p.Earnings) AS avg_earnings FROM club c JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY avg_earnings DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of clubs, ordered descending by the average earnings of players within each?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of clubs, ordered descending by the average earnings of players within each?[/QUESTION][SQL]SELECT c.Name, AVG(p.Earnings) AS avg_earnings FROM player p JOIN club c ON p.Club_ID = c.Club_ID GROUP BY c.Name ORDER BY avg_earnings DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show different manufacturers and the number of clubs they are associated with.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show different manufacturers and the number of clubs they are associated with.[/QUESTION][SQL]SELECT c.manufacturer, COUNT(c.club_id) AS num_clubs FROM club c GROUP BY c.manufacturer ORDER BY num_clubs DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many clubs use each manufacturer?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many clubs use each manufacturer?[/QUESTION][SQL]SELECT c.manufacturer, COUNT(c.club_id) AS number_of_clubs FROM club c GROUP BY c.manufacturer ORDER BY number_of_clubs DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Please show the most common manufacturer of clubs.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the most common manufacturer of clubs.[/QUESTION][SQL]SELECT m.manufacturer, COUNT(*) AS count FROM club c JOIN (SELECT manufacturer FROM club GROUP BY manufacturer ORDER BY COUNT(*) DESC LIMIT 1) m ON c.manufacturer = m.manufacturer GROUP BY m.manufacturer;
### TaskGenerate a SQL query to answer [QUESTION]Which manufacturer is most common among clubs?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which manufacturer is most common among clubs?[/QUESTION][SQL]SELECT c.manufacturer, COUNT(c.club_id) AS count_clubs FROM club c GROUP BY c.manufacturer ORDER BY count_clubs DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the manufacturers that are associated with more than one club.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the manufacturers that are associated with more than one club.[/QUESTION][SQL]SELECT DISTINCT m.manufacturer FROM club c JOIN (SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(manufacturer) > 1) m ON c.manufacturer = m.manufacturer ORDER BY m.manufacturer NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which manufacturers work for more than 1 club?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which manufacturers work for more than 1 club?[/QUESTION][SQL]SELECT c.Manufacturer FROM club c GROUP BY c.Manufacturer HAVING COUNT(c.Club_ID) > 1 ORDER BY c.Manufacturer NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the country that have more than one player.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the country that have more than one player.[/QUESTION][SQL]SELECT p.country FROM player p GROUP BY p.country HAVING COUNT(p.player_id) > 1 ORDER BY p.country NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which countries have produced more than one player?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which countries have produced more than one player?[/QUESTION][SQL]SELECT p.country FROM player p GROUP BY p.country HAVING COUNT(p.player_id) > 1 ORDER BY p.country NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the name of clubs that do not have players.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of clubs that do not have players.[/QUESTION][SQL]SELECT c.Name FROM club c WHERE NOT EXISTS (SELECT 1 FROM player p WHERE p.Club_ID = c.Club_ID)
### TaskGenerate a SQL query to answer [QUESTION]What are the names of clubs that do not have any players?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of clubs that do not have any players?[/QUESTION][SQL]SELECT c.Name FROM club c WHERE c.Club_ID NOT IN (SELECT p.Club_ID FROM player p)
### TaskGenerate a SQL query to answer [QUESTION]Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.[/QUESTION][SQL]SELECT p.country FROM player p WHERE p.earnings > 1400000 OR p.earnings < 1100000 ORDER BY p.country NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?[/QUESTION][SQL]SELECT p.Country FROM player p WHERE p.Earnings > 1400000 AND EXISTS (SELECT 1 FROM player p2 WHERE p2.Country = p.Country AND p2.Earnings < 1100000) GROUP BY p.Country;
### TaskGenerate a SQL query to answer [QUESTION]What is the number of distinct countries of all players?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the number of distinct countries of all players?[/QUESTION][SQL]SELECT COUNT(DISTINCT p.Country) FROM player p;
### TaskGenerate a SQL query to answer [QUESTION]How many different countries are players from?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different countries are players from?[/QUESTION][SQL]SELECT COUNT(DISTINCT p.Country) FROM player p;
### TaskGenerate a SQL query to answer [QUESTION]Show the earnings of players from country "Australia" or "Zimbabwe".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the earnings of players from country "Australia" or "Zimbabwe".[/QUESTION][SQL]SELECT SUM(p.Earnings) AS total_earnings FROM player p WHERE LOWER(p.Country) IN ('australia', 'zimbabwe');
### TaskGenerate a SQL query to answer [QUESTION]What are the earnings of players from either of the countries of Australia or Zimbabwe?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "club" ("Club_ID" int,"Name" text,"Manager" text,"Captain" text,"Manufacturer" text,"Sponsor" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "player" ("Player_ID" real,"Name" text,"Country" text,"Earnings" real,"Events_number" int,"Wins_count" int,"Club_ID" int,PRIMARY KEY ("Player_ID"),FOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the earnings of players from either of the countries of Australia or Zimbabwe?[/QUESTION][SQL]SELECT SUM(p.Earnings) AS total_earnings FROM player p WHERE LOWER(p.Country) IN ('australia', 'zimbabwe');
### TaskGenerate a SQL query to answer [QUESTION]List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.[/QUESTION][SQL]SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE (SELECT COUNT(o2.order_id) FROM Orders o2 WHERE o2.customer_id = c.customer_id) > 2 AND (SELECT COUNT(oi.order_item_id) FROM Order_Items oi WHERE oi.order_id IN (SELECT order_id FROM Orders WHERE customer_id = c.customer_id)) >= 3 GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?[/QUESTION][SQL]SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name HAVING COUNT(o.order_id) > 2 AND SUM(CASE WHEN oi.product_id IS NOT NULL THEN 1 ELSE 0 END) >= 3;
### TaskGenerate a SQL query to answer [QUESTION]For the orders with any produts, how many products does each orders contain? List the order id, status and the number.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For the orders with any produts, how many products does each orders contain? List the order id, status and the number.[/QUESTION][SQL]SELECT o.order_id, o.order_status_code, COUNT(oi.product_id) AS product_count FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code ORDER BY o.order_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For every order, how many products does it contain, and what are the orders' statuses and ids?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For every order, how many products does it contain, and what are the orders' statuses and ids?[/QUESTION][SQL]SELECT o.order_id, COUNT(oi.product_id) AS product_count, o.order_status_code FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code ORDER BY o.order_id;
### TaskGenerate a SQL query to answer [QUESTION]List the dates of the orders which were placed at the earliest time or have more than 1 items.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the dates of the orders which were placed at the earliest time or have more than 1 items.[/QUESTION][SQL]SELECT o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.order_item_id) > 1 ORDER BY o.date_order_placed ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the dates of the earliest order and the dates of all orders with more than 1 item?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the dates of the earliest order and the dates of all orders with more than 1 item?[/QUESTION][SQL]SELECT MIN(o.date_order_placed), COUNT(*) AS total_orders_with_multiple_items FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(oi.order_item_id) > 1;
### TaskGenerate a SQL query to answer [QUESTION]Which customers did not make any orders? List the first name, middle initial and last name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customers did not make any orders? List the first name, middle initial and last name.[/QUESTION][SQL]SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c WHERE c.customer_id NOT IN (SELECT o.customer_id FROM Orders o)
### TaskGenerate a SQL query to answer [QUESTION]WHat are the first and last names, and middle initials of all customers who did not make any orders?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]WHat are the first and last names, and middle initials of all customers who did not make any orders?[/QUESTION][SQL]SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c WHERE c.customer_id NOT IN (SELECT o.customer_id FROM Orders o);
### TaskGenerate a SQL query to answer [QUESTION]What are the id, name, price and color of the products which have not been ordered for at least twice?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the id, name, price and color of the products which have not been ordered for at least twice?[/QUESTION][SQL]SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi GROUP BY oi.product_id HAVING COUNT(oi.order_id) >= 2);
### TaskGenerate a SQL query to answer [QUESTION]What are the ids, names, prices, and colors of all products that have been listed in less than two orders?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids, names, prices, and colors of all products that have been listed in less than two orders?[/QUESTION][SQL]SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name, p.product_price, p.product_color HAVING COUNT(oi.order_id) < 2 ORDER BY p.product_id;
### TaskGenerate a SQL query to answer [QUESTION]Which orders have at least 2 products on it? List the order id and date.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which orders have at least 2 products on it? List the order id and date.[/QUESTION][SQL]SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.product_id) >= 2 ORDER BY o.order_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and dates of the orders with at least two products?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and dates of the orders with at least two products?[/QUESTION][SQL]SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.product_id) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]Which product are listed in orders most frequently? List the id, product name and price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which product are listed in orders most frequently? List the id, product name and price.[/QUESTION][SQL]SELECT p.product_id, p.product_name, p.product_price, COUNT(o.order_id) AS order_count FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id GROUP BY p.product_id, p.product_name, p.product_price ORDER BY order_count DESC LIMIT 5;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids, names, and prices of all products that are ordered most frequently?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids, names, and prices of all products that are ordered most frequently?[/QUESTION][SQL]SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name, p.product_price ORDER BY COUNT(oi.order_item_id) DESC LIMIT 5;
### TaskGenerate a SQL query to answer [QUESTION]Which order have the least sum of the product prices. List the order id and sum.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which order have the least sum of the product prices. List the order id and sum.[/QUESTION][SQL]SELECT oi.order_id, SUM(p.product_price) AS total_product_price FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id GROUP BY oi.order_id ORDER BY total_product_price ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the order that total cost the least, and how much is the total cost?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the order that total cost the least, and how much is the total cost?[/QUESTION][SQL]SELECT o.order_id, SUM(p.product_price * oi.order_item_quantity) AS total_cost FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id ORDER BY total_cost ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the most popular payment method?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most popular payment method?[/QUESTION][SQL]SELECT cpm.payment_method_code, COUNT(cpm.payment_method_code) AS total_count FROM Customer_Payment_Methods cpm GROUP BY cpm.payment_method_code ORDER BY total_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the payment method that most customers use?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the payment method that most customers use?[/QUESTION][SQL]SELECT cpm.payment_method_code FROM Customer_Payment_Methods cpm GROUP BY cpm.payment_method_code ORDER BY COUNT(cpm.customer_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many number of products does each gender of customers buy? List the gender and the number[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many number of products does each gender of customers buy? List the gender and the number[/QUESTION][SQL]SELECT c.gender_code, COUNT(o.order_id) AS total_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY total_orders DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many products does each gender buy?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many products does each gender buy?[/QUESTION][SQL]SELECT c.gender_code, COUNT(o.order_id) AS total_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY total_orders DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many orders has each gender of customers placed?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many orders has each gender of customers placed?[/QUESTION][SQL]SELECT c.gender_code, COUNT(o.order_id) AS number_of_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY number_of_orders DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many orders has each gender placed?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many orders has each gender placed?[/QUESTION][SQL]SELECT c.gender_code, COUNT(o.order_id) AS number_of_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY number_of_orders DESC;
### TaskGenerate a SQL query to answer [QUESTION]List the customers' first name, middle initial, last name and payment methods.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the customers' first name, middle initial, last name and payment methods.[/QUESTION][SQL]SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM Customers c JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id
### TaskGenerate a SQL query to answer [QUESTION]What are the first names, middle initials, last names, and payment methods of all customers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first names, middle initials, last names, and payment methods of all customers?[/QUESTION][SQL]SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM Customers c JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id;
### TaskGenerate a SQL query to answer [QUESTION]List the invoices' status, date and the date of shipment.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the invoices' status, date and the date of shipment.[/QUESTION][SQL]SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices AS i JOIN Shipments AS s ON i.invoice_number = s.invoice_number ORDER BY i.invoice_date DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the statuses, dates, and shipment dates for all invoices?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the statuses, dates, and shipment dates for all invoices?[/QUESTION][SQL]SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices i LEFT JOIN Shipments s ON i.invoice_number = s.invoice_number ORDER BY i.invoice_number;
### TaskGenerate a SQL query to answer [QUESTION]List the names of the products being shipped and the corresponding shipment date.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of the products being shipped and the corresponding shipment date.[/QUESTION][SQL]SELECT p.product_name, s.shipment_date FROM Shipments s JOIN Shipment_Items si ON s.shipment_id = si.shipment_id JOIN Order_Items oi ON si.order_item_id = oi.order_item_id JOIN Products p ON oi.product_id = p.product_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the products tht have been shipped, and on what days were they shipped?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the products tht have been shipped, and on what days were they shipped?[/QUESTION][SQL]SELECT p.product_name, s.shipment_date FROM Shipments s JOIN Shipment_Items si ON s.shipment_id = si.shipment_id JOIN Order_Items oi ON si.order_item_id = oi.order_item_id JOIN Products p ON oi.product_id = p.product_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?[/QUESTION][SQL]SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?[/QUESTION][SQL]SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the product name and the color of the ordered items which have been shipped?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the product name and the color of the ordered items which have been shipped?[/QUESTION][SQL]SELECT p.product_name, p.product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id WHERE oi.order_item_status_code ='shipped' ORDER BY p.product_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and colors of all products that have been shipped?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and colors of all products that have been shipped?[/QUESTION][SQL]SELECT p.product_name, p.product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id;
### TaskGenerate a SQL query to answer [QUESTION]List all the distinct product names, price and descriptions which are bought by female customers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all the distinct product names, price and descriptions which are bought by female customers.[/QUESTION][SQL]SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE LOWER(c.gender_code) = 'f' ORDER BY p.product_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the different names, prices, and descriptions for all products bought by female customers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different names, prices, and descriptions for all products bought by female customers?[/QUESTION][SQL]SELECT p.product_name, p.product_price, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE LOWER(c.gender_code) = 'f' GROUP BY p.product_name, p.product_price, p.product_description ORDER BY p.product_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are invoices status of all the orders which have not been shipped?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are invoices status of all the orders which have not been shipped?[/QUESTION][SQL]SELECT i.invoice_status_code FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number WHERE s.shipment_date IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the invoice statuses for all orderes that have not been shipped out yet?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the invoice statuses for all orderes that have not been shipped out yet?[/QUESTION][SQL]SELECT o.order_id, i.invoice_status_code FROM Orders o LEFT JOIN Shipments s ON o.order_id = s.order_id LEFT JOIN Invoices i ON s.invoice_number = i.invoice_number WHERE s.order_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the total cost of all the orders? List the order id, date, and total cost.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the total cost of all the orders? List the order id, date, and total cost.[/QUESTION][SQL]SELECT o.order_id, o.date_order_placed, SUM(p.product_price * oi.order_item_status_code::INTEGER) AS total_cost FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed ORDER BY o.order_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For each order, what is its id, date, and total amount paid?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each order, what is its id, date, and total amount paid?[/QUESTION][SQL]SELECT o.order_id, o.date_order_placed, SUM(p.product_price) AS total_amount_paid FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed ORDER BY o.order_id;
### TaskGenerate a SQL query to answer [QUESTION]How many customers have placed any order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers have placed any order?[/QUESTION][SQL]SELECT COUNT(DISTINCT o.customer_id) FROM Orders o;
### TaskGenerate a SQL query to answer [QUESTION]How many different customers have ordered things?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different customers have ordered things?[/QUESTION][SQL]SELECT COUNT(DISTINCT o.customer_id) FROM Orders o;
### TaskGenerate a SQL query to answer [QUESTION]How many item states are there in the orders?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many item states are there in the orders?[/QUESTION][SQL]SELECT COUNT(DISTINCT oi.order_item_status_code) FROM Order_Items oi;
### TaskGenerate a SQL query to answer [QUESTION]How many different item status codes are there listed in ordered items?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different item status codes are there listed in ordered items?[/QUESTION][SQL]SELECT COUNT(DISTINCT oi.order_item_status_code) FROM Order_Items oi;
### TaskGenerate a SQL query to answer [QUESTION]How many different payment methods are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different payment methods are there?[/QUESTION][SQL]SELECT COUNT(DISTINCT cp.payment_method_code) FROM Customer_Payment_Methods cp;
### TaskGenerate a SQL query to answer [QUESTION]How many different payment methods can customers choose from?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different payment methods can customers choose from?[/QUESTION][SQL]SELECT COUNT(DISTINCT cp.payment_method_code) FROM Customer_Payment_Methods cp;
### TaskGenerate a SQL query to answer [QUESTION]What are the login names and passwords of the customers whose phone number have the prefix '+12'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the login names and passwords of the customers whose phone number have the prefix '+12'?[/QUESTION][SQL]SELECT c.login_name, c.login_password FROM Customers c WHERE c.phone_number LIKE '+12%' ORDER BY c.customer_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the usernames and passwords of all customers whose phone number starts with '+12'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the usernames and passwords of all customers whose phone number starts with '+12'?[/QUESTION][SQL]SELECT c.login_name, c.login_password FROM Customers c WHERE c.phone_number LIKE '+12%' ORDER BY c.customer_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the product sizes of the products whose name has the substring 'Dell'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the product sizes of the products whose name has the substring 'Dell'?[/QUESTION][SQL]SELECT p.product_size FROM Products p WHERE p.product_name ILIKE '%Dell%' ORDER BY p.product_size;
### TaskGenerate a SQL query to answer [QUESTION]What are the sizes of all products whose name includes the word 'Dell'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the sizes of all products whose name includes the word 'Dell'?[/QUESTION][SQL]SELECT p.product_size FROM Products p WHERE LOWER(p.product_name) LIKE '%dell%' ORDER BY p.product_size;
### TaskGenerate a SQL query to answer [QUESTION]What are the product price and the product size of the products whose price is above average?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the product price and the product size of the products whose price is above average?[/QUESTION][SQL]SELECT p.product_price, p.product_size FROM Products p WHERE p.product_price > (SELECT AVG(product_price) FROM Products);
### TaskGenerate a SQL query to answer [QUESTION]What are the prices and sizes of all products whose price is above the mean?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the prices and sizes of all products whose price is above the mean?[/QUESTION][SQL]SELECT p.product_id, p.product_price, p.product_size FROM Products p WHERE p.product_price > (SELECT AVG(product_price) FROM Products);
### TaskGenerate a SQL query to answer [QUESTION]How many kinds of products have not been sold?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many kinds of products have not been sold?[/QUESTION][SQL]SELECT COUNT(DISTINCT p.product_id) FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What is the number of products that have not been ordered yet?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the number of products that have not been ordered yet?[/QUESTION][SQL]SELECT COUNT(p.product_id) FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi);
### TaskGenerate a SQL query to answer [QUESTION]How many customers do not have any payment method?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers do not have any payment method?[/QUESTION][SQL]SELECT COUNT(DISTINCT c.customer_id) FROM Customers c LEFT JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id WHERE cp.customer_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]How many customers do not have a listed payment method?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers do not have a listed payment method?[/QUESTION][SQL]SELECT COUNT(DISTINCT c.customer_id) FROM Customers c LEFT JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id WHERE cp.customer_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are all the order status and all the dates of orders?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the order status and all the dates of orders?[/QUESTION][SQL]SELECT o.order_status_code, o.date_order_placed FROM Orders o ORDER BY o.date_order_placed;
### TaskGenerate a SQL query to answer [QUESTION]What are the status codes and dates placed for all of the orders?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the status codes and dates placed for all of the orders?[/QUESTION][SQL]SELECT o.order_status_code, o.date_order_placed FROM Orders o ORDER BY o.date_order_placed;
### TaskGenerate a SQL query to answer [QUESTION]List the address, town and county information of the customers who live in the USA.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the address, town and county information of the customers who live in the USA.[/QUESTION][SQL]SELECT c.address_line_1, c.town_city, c.county FROM Customers c WHERE LOWER(c.country) = 'usa' ORDER BY c.customer_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the addresses, towns, and county information for all customers who live in the United States?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the addresses, towns, and county information for all customers who live in the United States?[/QUESTION][SQL]SELECT c.address_line_1, c.town_city, c.county FROM Customers c WHERE LOWER(c.country) = 'united states' ORDER BY c.customer_id;
### TaskGenerate a SQL query to answer [QUESTION]List all the pairs of buyer first names and product names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all the pairs of buyer first names and product names.[/QUESTION][SQL]SELECT c.customer_first_name AS customer_first_name, p.product_name AS product_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the first names of all buyers and what products did they buy? List them in pairs.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first names of all buyers and what products did they buy? List them in pairs.[/QUESTION][SQL]SELECT c.customer_first_name, p.product_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id;
### TaskGenerate a SQL query to answer [QUESTION]How many items are shipped?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many items are shipped?[/QUESTION][SQL]SELECT COUNT(DISTINCT si.order_item_id) AS total_items_shipped FROM Shipment_Items si;
### TaskGenerate a SQL query to answer [QUESTION]How many products have been shipped?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many products have been shipped?[/QUESTION][SQL]SELECT COUNT(DISTINCT oi.product_id) AS total_products_shipped FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the product average price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the product average price?[/QUESTION][SQL]SELECT AVG(p.product_price) AS average_product_price FROM Products p;
### TaskGenerate a SQL query to answer [QUESTION]How much do the products cost on average?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How much do the products cost on average?[/QUESTION][SQL]SELECT AVG(p.product_price) AS average_product_price FROM Products p;
### TaskGenerate a SQL query to answer [QUESTION]What is the average price of the products being ordered?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average price of the products being ordered?[/QUESTION][SQL]SELECT AVG(p.product_price) AS average_product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the price of all products being ordered on average?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the price of all products being ordered on average?[/QUESTION][SQL]SELECT AVG(p.product_price) AS average_product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the email address, town and county of the customers who are of the least common gender?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the email address, town and county of the customers who are of the least common gender?[/QUESTION][SQL]SELECT c.email_address, c.town_city, c.county FROM Customers c JOIN (SELECT gender_code, COUNT(*) AS count_gender FROM Customers GROUP BY gender_code ORDER BY count_gender ASC LIMIT 1) g ON c.gender_code = g.gender_code;
### TaskGenerate a SQL query to answer [QUESTION]What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?[/QUESTION][SQL]SELECT c.email_address, c.town_city, c.county FROM Customers c JOIN (SELECT o.customer_id, COUNT(o.order_id) AS order_count FROM Orders o GROUP BY o.customer_id ORDER BY order_count ASC LIMIT 1) AS oc ON c.customer_id = oc.customer_id;
### TaskGenerate a SQL query to answer [QUESTION]List the order date of the orders who are placed by customers with at least 2 payment methods.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the order date of the orders who are placed by customers with at least 2 payment methods.[/QUESTION][SQL]SELECT o.date_order_placed FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE c.customer_id IN (SELECT cp.customer_id FROM Customer_Payment_Methods cp GROUP BY cp.customer_id HAVING COUNT(DISTINCT cp.payment_method_code) >= 2);
### TaskGenerate a SQL query to answer [QUESTION]What is the date of all orders that have been placed by customers with at least 2 payment methods?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the date of all orders that have been placed by customers with at least 2 payment methods?[/QUESTION][SQL]SELECT o.date_order_placed FROM Orders o JOIN Customer_Payment_Methods cpm ON o.customer_id = cpm.customer_id GROUP BY o.order_id HAVING COUNT(DISTINCT cpm.payment_method_code) >= 2 ORDER BY o.date_order_placed;
### TaskGenerate a SQL query to answer [QUESTION]What is the most uncommon order status?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most uncommon order status?[/QUESTION][SQL]SELECT o.order_status_code FROM Orders o GROUP BY o.order_status_code ORDER BY COUNT(o.order_status_code) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the least common order status?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the least common order status?[/QUESTION][SQL]SELECT o.order_status_code FROM Orders o GROUP BY o.order_status_code ORDER BY COUNT(o.order_status_code) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]For all the products sold for more than 3 times, list their id and description.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For all the products sold for more than 3 times, list their id and description.[/QUESTION][SQL]SELECT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_description HAVING COUNT(oi.order_item_id) > 3 ORDER BY p.product_id;
### TaskGenerate a SQL query to answer [QUESTION]For all products sold more than 3 times, what are their ids and descriptions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For all products sold more than 3 times, what are their ids and descriptions?[/QUESTION][SQL]SELECT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_description HAVING COUNT(oi.order_item_id) > 3 ORDER BY p.product_id;
### TaskGenerate a SQL query to answer [QUESTION]List the invoice dates and ids of the invoices causing at least 2 shipments.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the invoice dates and ids of the invoices causing at least 2 shipments.[/QUESTION][SQL]SELECT i.invoice_date, i.invoice_number FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_number, i.invoice_date HAVING COUNT(s.shipment_id) >= 2 ORDER BY i.invoice_date;
### TaskGenerate a SQL query to answer [QUESTION]What are the dates and ids of the invoices that are related to at least 2 shipments?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the dates and ids of the invoices that are related to at least 2 shipments?[/QUESTION][SQL]SELECT i.invoice_date, s.shipment_id FROM Shipments s JOIN Invoices i ON s.invoice_number = i.invoice_number GROUP BY i.invoice_date, s.shipment_id HAVING COUNT(s.shipment_id) >= 2 ORDER BY i.invoice_date;
### TaskGenerate a SQL query to answer [QUESTION]what are all shipment tracking numbers and shipment dates?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]what are all shipment tracking numbers and shipment dates?[/QUESTION][SQL]SELECT s.shipment_tracking_number, s.shipment_date FROM Shipments s ORDER BY s.shipment_date NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the tracking numbers and dates for all shipments listed?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the tracking numbers and dates for all shipments listed?[/QUESTION][SQL]SELECT s.shipment_tracking_number, s.shipment_date FROM Shipments s ORDER BY s.shipment_date DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the color, description and size of the products priced below the maximum price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the color, description and size of the products priced below the maximum price.[/QUESTION][SQL]SELECT p.product_color, p.product_description, p.product_size FROM Products p WHERE p.product_price < (SELECT MAX(product_price) FROM Products);
### TaskGenerate a SQL query to answer [QUESTION]What are the colors, descriptions, and sizes for all products that are not at the maximum price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`parent_product_id` INTEGER,`product_name` VARCHAR(80),`product_price` DECIMAL(19,4) DEFAULT 0,`product_color` VARCHAR(50),`product_size` VARCHAR(50),`product_description` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`gender_code` VARCHAR(1) NOT NULL,`customer_first_name` VARCHAR(50),`customer_middle_initial` VARCHAR(1),`customer_last_name` VARCHAR(50),`email_address` VARCHAR(255),`login_name` VARCHAR(80),`login_password` VARCHAR(20),`phone_number` VARCHAR(255),`address_line_1` VARCHAR(255),`town_city` VARCHAR(50),`county` VARCHAR(50),`country` VARCHAR(50))CREATE TABLE `Customer_Payment_Methods` (`customer_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Invoices` (`invoice_number` INTEGER PRIMARY KEY,`invoice_status_code` VARCHAR(10) NOT NULL,`invoice_date` DATETIME)CREATE TABLE `Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_status_code` VARCHAR(10) NOT NULL,`date_order_placed` DATETIME NOT NULL,FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER PRIMARY KEY,`product_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`order_item_status_code` VARCHAR(10) NOT NULL,FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipments` (`shipment_id` INTEGER PRIMARY KEY,`order_id` INTEGER NOT NULL,`invoice_number` INTEGER NOT NULL,`shipment_tracking_number` VARCHAR(80),`shipment_date` DATETIME,FOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),FOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` ))CREATE TABLE `Shipment_Items` (`shipment_id` INTEGER NOT NULL,`order_item_id` INTEGER NOT NULL,PRIMARY KEY (`shipment_id`,`order_item_id`),FOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),FOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the colors, descriptions, and sizes for all products that are not at the maximum price?[/QUESTION][SQL]SELECT p.product_color, p.product_description, p.product_size FROM Products p WHERE p.product_price < (SELECT MAX(product_price) FROM Products);
### TaskGenerate a SQL query to answer [QUESTION]Return the names of directors who are older than the average age.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of directors who are older than the average age.[/QUESTION][SQL]SELECT d.Name FROM director d WHERE d.Age > (SELECT AVG(Age) FROM director);
### TaskGenerate a SQL query to answer [QUESTION]Find the the name of the oldest director.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the the name of the oldest director.[/QUESTION][SQL]SELECT d.Name FROM director d ORDER BY d.Age ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many channels have the word 'bbc' in their internet link?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many channels have the word 'bbc' in their internet link?[/QUESTION][SQL]SELECT COUNT(*) FROM channel WHERE LOWER(internet) LIKE '%bbc%';
### TaskGenerate a SQL query to answer [QUESTION]How many different digital terrestrial channels are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different digital terrestrial channels are there?[/QUESTION][SQL]SELECT COUNT(DISTINCT c.Digital_terrestrial_channel) FROM channel c;
### TaskGenerate a SQL query to answer [QUESTION]List all program titles in the order of starting year. List the most recent one first.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all program titles in the order of starting year. List the most recent one first.[/QUESTION][SQL]SELECT p.title FROM program p ORDER BY p.start_year DESC;
### TaskGenerate a SQL query to answer [QUESTION]Which director is in charge of the most programs?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which director is in charge of the most programs?[/QUESTION][SQL]SELECT d.Name, COUNT(p.Program_ID) AS NumberOfPrograms FROM program p JOIN director d ON p.Director_ID = d.Director_ID GROUP BY d.Name ORDER BY NumberOfPrograms DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and age of the director who is in charge of the most programs?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and age of the director who is in charge of the most programs?[/QUESTION][SQL]SELECT d.Name, d.Age FROM director d JOIN (SELECT p.Director_ID, COUNT(p.Program_ID) AS num_programs FROM program p GROUP BY p.Director_ID ORDER BY num_programs DESC LIMIT 1) AS p2 ON d.Director_ID = p2.Director_ID;
### TaskGenerate a SQL query to answer [QUESTION]Return the title of the program that began most recently.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the title of the program that began most recently.[/QUESTION][SQL]SELECT p.title FROM program p ORDER BY p.start_year DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and website link of the channels that have more than one program.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and website link of the channels that have more than one program.[/QUESTION][SQL]SELECT c.Name, COUNT(p.Program_ID) AS number_of_programs FROM channel c JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Name HAVING COUNT(p.Program_ID) > 1 ORDER BY number_of_programs DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of programs for each channel. Return the name of each channel as well.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of programs for each channel. Return the name of each channel as well.[/QUESTION][SQL]SELECT c.Name AS Channel_Name, COUNT(p.Program_ID) AS Number_of_Programs FROM program p JOIN channel c ON p.Channel_ID = c.Channel_ID GROUP BY c.Name ORDER BY Number_of_Programs DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of channels that do not run any program.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of channels that do not run any program.[/QUESTION][SQL]SELECT COUNT(*) FROM channel c WHERE NOT EXISTS (SELECT 1 FROM program p WHERE p.Channel_ID = c.Channel_ID)
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the director who is in the "Dracula" program?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the director who is in the "Dracula" program?[/QUESTION][SQL]SELECT d.Name FROM program p JOIN director d ON p.Director_ID = d.Director_ID WHERE LOWER(p.Title) = 'dracula';
### TaskGenerate a SQL query to answer [QUESTION]Find the name and internet web of the channel that is directed by the most directors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and internet web of the channel that is directed by the most directors.[/QUESTION][SQL]SELECT c.Name, COUNT(d.Director_ID) AS num_directors FROM director_admin da JOIN channel c ON da.Channel_ID = c.Channel_ID GROUP BY c.Name ORDER BY num_directors DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the directors whose age is between 30 and 60.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the directors whose age is between 30 and 60.[/QUESTION][SQL]SELECT d.Name FROM director d WHERE d.Age BETWEEN 30 AND 60 ORDER BY d.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]give me the name of channels that have both a director younger than 40 and a director older than 60.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]give me the name of channels that have both a director younger than 40 and a director older than 60.[/QUESTION][SQL]SELECT DISTINCT c.Name FROM channel c JOIN program p ON c.Channel_ID = p.Channel_ID JOIN director d ON p.Director_ID = d.Director_ID WHERE (d.Age < 40 AND d.Age > 60) ORDER BY c.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the id and name of the channel that is not directed by Hank Baskett.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "channel" ("Channel_ID" int,"Name" text,"Analogue_terrestrial_channel" text,"Digital_terrestrial_channel" text,"Internet" text,PRIMARY KEY ("Channel_ID"))CREATE TABLE "director" ("Director_ID" int,"Name" text,"Age" int,PRIMARY KEY ("Director_ID"))CREATE TABLE "program" ("Program_ID" int,"Start_Year" real,"Title" text,"Director_ID" int,"Channel_ID" int,PRIMARY KEY ("Program_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))CREATE TABLE "director_admin" ("Director_ID" int,"Channel_ID" int,"Is_first_director" bool,PRIMARY KEY ("Director_ID","Channel_ID"),FOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),FOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the id and name of the channel that is not directed by Hank Baskett.[/QUESTION][SQL]SELECT c.Channel_ID, c.Name FROM channel c WHERE NOT EXISTS (SELECT 1 FROM director d JOIN director_admin da ON d.Director_ID = da.Director_ID WHERE d.Name ilike '%Hank%Baskett%' AND da.Channel_ID = c.Channel_ID)
### TaskGenerate a SQL query to answer [QUESTION]How many radios are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many radios are there?[/QUESTION][SQL]SELECT COUNT(*) FROM radio;
### TaskGenerate a SQL query to answer [QUESTION]List the transmitters of radios in ascending order of erp kw.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the transmitters of radios in ascending order of erp kw.[/QUESTION][SQL]SELECT r.Transmitter FROM radio r ORDER BY CAST(r.ERP_kW AS FLOAT) ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and original air dates of tv shows?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and original air dates of tv shows?[/QUESTION][SQL]SELECT ts.tv_show_name, ts.original_airdate FROM tv_show ts ORDER BY ts.tv_show_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the station names of city channels whose affiliation is not "ABC".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the station names of city channels whose affiliation is not "ABC".[/QUESTION][SQL]SELECT cc.Station_name FROM city_channel cc WHERE LOWER(cc.Affiliation)!= 'abc' ORDER BY cc.Station_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.[/QUESTION][SQL]SELECT r.Transmitter FROM radio r WHERE (CAST(r.ERP_kW AS FLOAT) > 150 OR CAST(r.ERP_kW AS FLOAT) < 30);
### TaskGenerate a SQL query to answer [QUESTION]What is the transmitter of the radio with the largest ERP_kW?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the transmitter of the radio with the largest ERP_kW?[/QUESTION][SQL]SELECT r.Transmitter FROM radio r WHERE r.ERP_kW = (SELECT MAX(r2.ERP_kW) FROM radio r2);
### TaskGenerate a SQL query to answer [QUESTION]What is the average ERP across all radios?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average ERP across all radios?[/QUESTION][SQL]SELECT AVG(CAST(r.ERP_kW AS FLOAT)) FROM radio r;
### TaskGenerate a SQL query to answer [QUESTION]Show the different affiliations of city channels and the number of city channels with each affiliation.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the different affiliations of city channels and the number of city channels with each affiliation.[/QUESTION][SQL]SELECT cc.Affiliation, COUNT(*) AS Number_of_City_Channels FROM city_channel cc GROUP BY cc.Affiliation ORDER BY Number_of_City_Channels DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Please show the most common affiliation for city channels.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the most common affiliation for city channels.[/QUESTION][SQL]SELECT cc.Affiliation, COUNT(*) AS Count FROM city_channel cc GROUP BY cc.Affiliation ORDER BY Count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the affiliations shared by more than three city channels.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the affiliations shared by more than three city channels.[/QUESTION][SQL]SELECT c.Affiliation FROM city_channel c GROUP BY c.Affiliation HAVING COUNT(c.ID) > 3 ORDER BY c.Affiliation NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the cities and station names of city channels in ascending alphabetical order of station name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the cities and station names of city channels in ascending alphabetical order of station name.[/QUESTION][SQL]SELECT c.city, cc.station_name FROM city_channel cc JOIN city_channel_radio ccr ON cc.id = ccr.city_channel_id ORDER BY cc.station_name ASC;
### TaskGenerate a SQL query to answer [QUESTION]Show the transmitters of radios and the cities of the channels they are associated with.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the transmitters of radios and the cities of the channels they are associated with.[/QUESTION][SQL]SELECT r.Transmitter, c.City FROM radio r JOIN city_channel_radio cc ON r.Radio_ID = cc.Radio_ID JOIN city_channel c ON cc.City_channel_ID = c.ID;
### TaskGenerate a SQL query to answer [QUESTION]Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.[/QUESTION][SQL]SELECT r.Transmitter, c.Station_name, CAST(r.ERP_kW AS FLOAT) DESC FROM radio r JOIN city_channel_radio cc ON r.Radio_ID = cc.Radio_ID JOIN city_channel c ON cc.City_channel_ID = c.ID ORDER BY 3 DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show the transmitters of the radios and the number of city channels they are associated with.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the transmitters of the radios and the number of city channels they are associated with.[/QUESTION][SQL]SELECT r.Transmitter, COUNT(ccr.City_channel_ID) AS num_city_channels FROM radio r JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID GROUP BY r.Transmitter ORDER BY num_city_channels DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the distinct transmitters of radios that are not associated with any city channel.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "city_channel" ("ID" int,"City" text,"Station_name" text,"Owned_Since" real,"Affiliation" text,PRIMARY KEY ("ID"))CREATE TABLE "radio" ("Radio_ID" int,"Transmitter" text,"Radio_MHz" text,"2FM_MHz" text,"RnaG_MHz" text,"Lyric_FM_MHz" text,"ERP_kW" text,PRIMARY KEY ("Radio_ID"))CREATE TABLE "tv_show" ("tv_show_ID" int,"tv_show_name" text,"Sub_tittle" text,"Next_show_name" text,"Original_Airdate" text,PRIMARY KEY ("tv_show_ID"))CREATE TABLE "city_channel_radio" ("City_channel_ID" int,"Radio_ID" int,"Is_online" bool,PRIMARY KEY ("City_channel_ID","Radio_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`))CREATE TABLE "city_channel_tv_show" ("City_channel_ID" int,"tv_show_ID" int,"Is_online" bool,"Is_free" bool,PRIMARY KEY ("City_channel_ID","tv_show_ID"),FOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),FOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the distinct transmitters of radios that are not associated with any city channel.[/QUESTION][SQL]SELECT DISTINCT r.Transmitter FROM radio r WHERE r.Radio_ID NOT IN (SELECT cc.Radio_ID FROM city_channel_radio cc) ORDER BY r.Transmitter NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the model of the vehicle with maximum top speed whose power is higher than 6000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the model of the vehicle with maximum top speed whose power is higher than 6000?[/QUESTION][SQL]SELECT v.Model FROM vehicle v WHERE v.Power > 6000 ORDER BY v.Top_Speed DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.[/QUESTION][SQL]SELECT v.Model FROM vehicle v WHERE v.Power > 6000 ORDER BY v.Top_Speed DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the drivers who are citizens of the 'United States'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the drivers who are citizens of the 'United States'?[/QUESTION][SQL]SELECT d.Name FROM driver d WHERE LOWER(d.Citizenship) = 'united states' ORDER BY d.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the names of drivers with citizenship from the United States.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of drivers with citizenship from the United States.[/QUESTION][SQL]SELECT d.Name FROM driver d WHERE LOWER(d.Citizenship) = 'united states' ORDER BY d.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?[/QUESTION][SQL]SELECT d.Driver_ID, COUNT(vd.Vehicle_ID) AS num_vehicles FROM vehicle_driver vd JOIN driver d ON vd.Driver_ID = d.Driver_ID GROUP BY d.Driver_ID ORDER BY num_vehicles DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the id of the driver who has driven the most vehicles, and how many vehicles is this?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id of the driver who has driven the most vehicles, and how many vehicles is this?[/QUESTION][SQL]SELECT d.Driver_ID, COUNT(vd.Vehicle_ID) AS num_vehicles FROM vehicle_driver vd JOIN driver d ON vd.Driver_ID = d.Driver_ID GROUP BY d.Driver_ID ORDER BY num_vehicles DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?[/QUESTION][SQL]SELECT MAX(v.Power) AS max_power, AVG(v.Power) AS avg_power FROM vehicle v WHERE LOWER(v.Builder) = 'zhuzhou';
### TaskGenerate a SQL query to answer [QUESTION]Return the maximum and average power for the vehicles built by Zhuzhou.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the maximum and average power for the vehicles built by Zhuzhou.[/QUESTION][SQL]SELECT MAX(v.Power) AS max_power, AVG(v.Power) AS avg_power FROM vehicle v WHERE LOWER(v.Builder) = 'zhuzhou'
### TaskGenerate a SQL query to answer [QUESTION]What is the id of the vehicle driven for the least times for the vehicles ever used?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id of the vehicle driven for the least times for the vehicles ever used?[/QUESTION][SQL]SELECT vd.Vehicle_ID FROM (SELECT v.Vehicle_ID, COUNT(vd.Driver_ID) AS num_drivers FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID) AS subquery ORDER BY num_drivers ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the id of the vehicle that has been driven the fewest times.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the id of the vehicle that has been driven the fewest times.[/QUESTION][SQL]SELECT vd.Vehicle_ID FROM (SELECT v.Vehicle_ID, COUNT(*) AS num_drives FROM vehicle_driver vd JOIN driver d ON vd.Driver_ID = d.Driver_ID GROUP BY v.Vehicle_ID) AS subquery ORDER BY num_drives ASC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the top speed and power of the vehicle manufactured in the year of 1996?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the top speed and power of the vehicle manufactured in the year of 1996?[/QUESTION][SQL]SELECT v.top_speed, v.power FROM vehicle v WHERE v.build_year = '1996' ORDER BY v.top_speed DESC, v.power DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the top speed and power of the vehicle that was built in the year 1996.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the top speed and power of the vehicle that was built in the year 1996.[/QUESTION][SQL]SELECT v.top_speed, v.power FROM vehicle v WHERE v.build_year = '1996' ORDER BY v.top_speed DESC, v.power DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the build year, model name and builder of the vehicles?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the build year, model name and builder of the vehicles?[/QUESTION][SQL]SELECT v.build_year, v.model, v.builder FROM vehicle v;
### TaskGenerate a SQL query to answer [QUESTION]Give the build year, model, and builder of each vehicle.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the build year, model, and builder of each vehicle.[/QUESTION][SQL]SELECT v.build_year, v.model, v.builder FROM vehicle v ORDER BY v.build_year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many drivers have driven vehicles built in 2012?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many drivers have driven vehicles built in 2012?[/QUESTION][SQL]SELECT COUNT(DISTINCT vd.Driver_ID) FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = '2012';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different drivers who have driven vehicles built in 2012.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different drivers who have driven vehicles built in 2012.[/QUESTION][SQL]SELECT COUNT(DISTINCT vd.Driver_ID) FROM vehicle v JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID WHERE v.Build_Year = '2012';
### TaskGenerate a SQL query to answer [QUESTION]How many drivers have raced in 'NASCAR'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many drivers have raced in 'NASCAR'?[/QUESTION][SQL]SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d WHERE LOWER(d.Racing_Series) = 'nascar';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of drivers who have raced in NASCAR.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of drivers who have raced in NASCAR.[/QUESTION][SQL]SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d WHERE LOWER(d.Racing_Series) = 'nascar';
### TaskGenerate a SQL query to answer [QUESTION]What is the average top speed of vehicles?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average top speed of vehicles?[/QUESTION][SQL]SELECT AVG(v.Top_Speed) AS Average_Top_Speed FROM vehicle v;
### TaskGenerate a SQL query to answer [QUESTION]Return the average top speed across all vehicles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the average top speed across all vehicles.[/QUESTION][SQL]SELECT AVG(v.Top_Speed) AS Average_Top_Speed FROM vehicle v
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct driver names who have driven vehicles with power more than 5000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct driver names who have driven vehicles with power more than 5000?[/QUESTION][SQL]SELECT DISTINCT d.Name FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000;
### TaskGenerate a SQL query to answer [QUESTION]Return the names of drivers who have driven vehicles with power over 5000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of drivers who have driven vehicles with power over 5000.[/QUESTION][SQL]SELECT d.Name FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000;
### TaskGenerate a SQL query to answer [QUESTION]Which car models have total production larger than 100 or top speed higher than 150?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which car models have total production larger than 100 or top speed higher than 150?[/QUESTION][SQL]SELECT v.model FROM vehicle v WHERE (v.total_production::int > 100 OR v.top_speed > 150) ORDER BY v.model NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Give the models of cars that have a total production of over 100 or a top speed over 150.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the models of cars that have a total production of over 100 or a top speed over 150.[/QUESTION][SQL]SELECT v.model FROM vehicle v WHERE (v.total_production::int > 100 OR v.top_speed > 150) ORDER BY v.model NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the model names and build year of the cars with 'DJ' in its model name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the model names and build year of the cars with 'DJ' in its model name?[/QUESTION][SQL]SELECT v.model, v.build_year FROM vehicle v WHERE v.model ilike '%DJ%' ORDER BY v.model NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the model and build year of cars that include "DJ" in their model names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the model and build year of cars that include "DJ" in their model names.[/QUESTION][SQL]SELECT v.model, v.build_year FROM vehicle v WHERE v.model ilike '%DJ%' ORDER BY v.model NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the models which have not been driven by any drivers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the models which have not been driven by any drivers?[/QUESTION][SQL]SELECT v.Model FROM vehicle v WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID) ORDER BY v.Model NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the models of vehicles that have never been driven.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the models of vehicles that have never been driven.[/QUESTION][SQL]SELECT v.Model FROM vehicle v WHERE v.Vehicle_ID NOT IN (SELECT vd.Vehicle_ID FROM vehicle_driver vd)
### TaskGenerate a SQL query to answer [QUESTION]What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.[/QUESTION][SQL]SELECT v.Vehicle_ID, v.Model FROM vehicle v JOIN (SELECT vd.Vehicle_ID FROM vehicle_driver vd GROUP BY vd.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) >= 2) AS d ON v.Vehicle_ID = d.Vehicle_ID WHERE v.Builder ilike '%Ziyang%' ORDER BY v.Vehicle_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.[/QUESTION][SQL]SELECT v.model, COUNT(vd.driver_id) AS num_drivers FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id WHERE v.builder ilike '%Ziyang%' GROUP BY v.model HAVING COUNT(vd.driver_id) = 2 UNION SELECT v.model, COUNT(vd.driver_id) AS num_drivers FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id GROUP BY v.model HAVING COUNT(vd.driver_id) = 2 ORDER BY model NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?[/QUESTION][SQL]SELECT v.Vehicle_ID, v.Model FROM vehicle v JOIN (SELECT vd.Vehicle_ID FROM vehicle_driver vd GROUP BY vd.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) > 2 UNION SELECT vd.Vehicle_ID FROM vehicle_driver vd JOIN driver d ON vd.Driver_ID = d.Driver_ID WHERE LOWER(d.Name) = 'jeff gordon') AS t ON v.Vehicle_ID = t.Vehicle_ID ORDER BY v.Vehicle_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.[/QUESTION][SQL]SELECT v.model, COUNT(vd.vehicle_id) AS num_drivers FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id WHERE vd.driver_id IN (SELECT d.driver_id FROM driver d WHERE LOWER(d.name) = 'jeff gordon') GROUP BY v.model HAVING COUNT(vd.vehicle_id) > 2 ORDER BY num_drivers DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many vehicles have maximum top speed?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many vehicles have maximum top speed?[/QUESTION][SQL]SELECT COUNT(*) FROM (SELECT v.* FROM vehicle v ORDER BY v.Top_Speed DESC LIMIT 1) AS max_speed_vehicle;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of vehicles that have a top speed equal to the maximum across all vehicles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of vehicles that have a top speed equal to the maximum across all vehicles.[/QUESTION][SQL]SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle);
### TaskGenerate a SQL query to answer [QUESTION]Show all driver names in the alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all driver names in the alphabetical order.[/QUESTION][SQL]SELECT d.Name FROM driver d ORDER BY d.Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of drivers, returned in alphbetical order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of drivers, returned in alphbetical order?[/QUESTION][SQL]SELECT d.Name FROM driver d ORDER BY d.Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]How many drivers have been racing in each racing series?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many drivers have been racing in each racing series?[/QUESTION][SQL]SELECT d.Racing_Series, COUNT(d.Driver_ID) AS number_of_drivers FROM driver d GROUP BY d.Racing_Series ORDER BY number_of_drivers DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of drivers that have raced in each series.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of drivers that have raced in each series.[/QUESTION][SQL]SELECT d.Racing_Series, COUNT(d.Driver_ID) AS total_drivers FROM driver d GROUP BY d.Racing_Series ORDER BY total_drivers DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?[/QUESTION][SQL]SELECT d.Name, d.Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE LOWER(v.Model) = 'dj1';
### TaskGenerate a SQL query to answer [QUESTION]Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.[/QUESTION][SQL]SELECT d.Name, d.Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE LOWER(v.Model) = 'dj1' ORDER BY d.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many drivers have not driven any cars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many drivers have not driven any cars?[/QUESTION][SQL]SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d WHERE d.Driver_ID NOT IN (SELECT vd.Driver_ID FROM vehicle_driver vd);
### TaskGenerate a SQL query to answer [QUESTION]Count the number of drivers who have not driven any vehicles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "vehicle" ("Vehicle_ID" int,"Model" text,"Build_Year" text,"Top_Speed" int,"Power" int,"Builder" text,"Total_Production" text,PRIMARY KEY ("Vehicle_ID"))CREATE TABLE "driver" ("Driver_ID" int,"Name" text,"Citizenship" text,"Racing_Series" text,PRIMARY KEY ("Driver_ID"))CREATE TABLE "vehicle_driver" ("Driver_ID" int,"Vehicle_ID" int,PRIMARY KEY ("Driver_ID","Vehicle_ID"),FOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),FOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of drivers who have not driven any vehicles.[/QUESTION][SQL]SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d WHERE d.Driver_ID NOT IN (SELECT vd.Driver_ID FROM vehicle_driver vd);
### TaskGenerate a SQL query to answer [QUESTION]How many exams are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many exams are there?[/QUESTION][SQL]SELECT COUNT(*) FROM Exams;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of exams.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of exams.[/QUESTION][SQL]SELECT COUNT(*) FROM Exams;
### TaskGenerate a SQL query to answer [QUESTION]List the distinct subject code of exams in ascending alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the distinct subject code of exams in ascending alphabetical order.[/QUESTION][SQL]SELECT DISTINCT e.Subject_Code FROM Exams e ORDER BY e.Subject_Code ASC;
### TaskGenerate a SQL query to answer [QUESTION]Give me an alphabetically ordered list of the distinct subject code for exams.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me an alphabetically ordered list of the distinct subject code for exams.[/QUESTION][SQL]SELECT DISTINCT e.Subject_Code FROM Exams e ORDER BY e.Subject_Code ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and dates of the exams with subject code that is not "Database"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and dates of the exams with subject code that is not "Database"?[/QUESTION][SQL]SELECT e.Exam_Name, e.Exam_Date FROM Exams e WHERE e.Subject_Code!= 'Database' ORDER BY e.Exam_Date DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the exams whose subject code is not "Database". What are the exam dates and exam names?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the exams whose subject code is not "Database". What are the exam dates and exam names?[/QUESTION][SQL]SELECT e.Exam_ID, e.Exam_Date, e.Exam_Name FROM Exams e WHERE e.Subject_Code!= 'Database' ORDER BY e.Exam_Date;
### TaskGenerate a SQL query to answer [QUESTION]List the dates of the exams with subject code containing the word "data", in descending order of dates.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the dates of the exams with subject code containing the word "data", in descending order of dates.[/QUESTION][SQL]SELECT e.Exam_Date FROM Exams e WHERE e.Subject_Code ilike '%data%' ORDER BY e.Exam_Date DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the dates of the exams whose subject code contains the substring "data"? Return them in descending order of dates.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the dates of the exams whose subject code contains the substring "data"? Return them in descending order of dates.[/QUESTION][SQL]SELECT e.Exam_Date FROM Exams e WHERE e.Subject_Code ilike '%data%' ORDER BY e.Exam_Date DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the type of questions and their counts?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the type of questions and their counts?[/QUESTION][SQL]SELECT q.type_of_question_code, COUNT(*) AS number_of_questions FROM Questions q GROUP BY q.type_of_question_code ORDER BY number_of_questions DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For each question type, return its type code and its count of occurrence.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each question type, return its type code and its count of occurrence.[/QUESTION][SQL]SELECT q.type_of_question_code, COUNT(*) AS number_of_occurrences FROM questions q GROUP BY q.type_of_question_code ORDER BY number_of_occurrences DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct student answer texts that received comments "Normal"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct student answer texts that received comments "Normal"?[/QUESTION][SQL]SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE LOWER(sa.Comments) = 'normal' ORDER BY sa.Student_Answer_Text;
### TaskGenerate a SQL query to answer [QUESTION]List all the distinct student answer texts to which comments "Normal" were given?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all the distinct student answer texts to which comments "Normal" were given?[/QUESTION][SQL]SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE LOWER(sa.Comments) = 'normal' ORDER BY sa.Student_Answer_Text;
### TaskGenerate a SQL query to answer [QUESTION]How many different comments are there for student answers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different comments are there for student answers?[/QUESTION][SQL]SELECT COUNT(DISTINCT sa.Comments) FROM Student_Answers sa;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different comments for student answers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different comments for student answers.[/QUESTION][SQL]SELECT COUNT(DISTINCT sa.Comments) FROM Student_Answers sa;
### TaskGenerate a SQL query to answer [QUESTION]List all the student answer texts in descending order of count.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all the student answer texts in descending order of count.[/QUESTION][SQL]SELECT sa.Student_Answer_Text, COUNT(*) AS Count FROM Student_Answers sa GROUP BY sa.Student_Answer_Text ORDER BY Count DESC;
### TaskGenerate a SQL query to answer [QUESTION]Sort the student answer texts in descending order of their frequency of occurrence.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Sort the student answer texts in descending order of their frequency of occurrence.[/QUESTION][SQL]SELECT sa.Student_Answer_Text, COUNT(*) AS Frequency FROM Student_Answers sa GROUP BY sa.Student_Answer_Text ORDER BY Frequency DESC;
### TaskGenerate a SQL query to answer [QUESTION]Please show the first names of students and the dates of their answers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the first names of students and the dates of their answers.[/QUESTION][SQL]SELECT s.First_Name, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID;
### TaskGenerate a SQL query to answer [QUESTION]For each student answer, find the first name of the student and the date of the answer.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each student answer, find the first name of the student and the date of the answer.[/QUESTION][SQL]SELECT s.First_Name, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID;
### TaskGenerate a SQL query to answer [QUESTION]Please show the email addresses of students and the dates of their answers in descending order of dates.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the email addresses of students and the dates of their answers in descending order of dates.[/QUESTION][SQL]SELECT s.Email_Adress, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID ORDER BY sa.Date_of_Answer DESC;
### TaskGenerate a SQL query to answer [QUESTION]For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.[/QUESTION][SQL]SELECT s.Email_Adress, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID ORDER BY sa.Date_of_Answer DESC;
### TaskGenerate a SQL query to answer [QUESTION]Please show the least common assessment for students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the least common assessment for students.[/QUESTION][SQL]SELECT sa.Assessment FROM Student_Assessments sa GROUP BY sa.Assessment ORDER BY COUNT(sa.Student_Answer_ID) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which assessment has the smallest frequency count?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which assessment has the smallest frequency count?[/QUESTION][SQL]SELECT sa.Assessment, COUNT(*) AS Frequency FROM Student_Assessments sa GROUP BY sa.Assessment ORDER BY Frequency ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Please show the first names of the students that have at least two answer records.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the first names of the students that have at least two answer records.[/QUESTION][SQL]SELECT s.First_Name FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID GROUP BY s.First_Name HAVING COUNT(sa.Student_Answer_ID) >= 2 ORDER BY s.First_Name;
### TaskGenerate a SQL query to answer [QUESTION]Which students have 2 or more answer records? Give me their first names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students have 2 or more answer records? Give me their first names.[/QUESTION][SQL]SELECT s.First_Name FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID GROUP BY s.First_Name HAVING COUNT(sa.Student_Answer_ID) >= 2 ORDER BY s.First_Name;
### TaskGenerate a SQL query to answer [QUESTION]What is the most common valid answer text?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most common valid answer text?[/QUESTION][SQL]SELECT va.Valid_Answer_Text FROM Valid_Answers va GROUP BY va.Valid_Answer_Text ORDER BY COUNT(va.Valid_Answer_ID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the valid answer text that appeared most frequently.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the valid answer text that appeared most frequently.[/QUESTION][SQL]SELECT va.Valid_Answer_Text FROM Valid_Answers va JOIN (SELECT Valid_Answer_ID, COUNT(*) AS Count FROM Student_Assessments GROUP BY Valid_Answer_ID ORDER BY Count DESC LIMIT 1) sa ON va.Valid_Answer_ID = sa.Valid_Answer_ID;
### TaskGenerate a SQL query to answer [QUESTION]List the last names of the students whose gender is not "M".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the last names of the students whose gender is not "M".[/QUESTION][SQL]SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU!= 'M' ORDER BY s.Last_Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the last names of the students with gender other than "M"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the last names of the students with gender other than "M"?[/QUESTION][SQL]SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU!= 'M' ORDER BY s.Last_Name;
### TaskGenerate a SQL query to answer [QUESTION]List each gender and the corresponding number of students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List each gender and the corresponding number of students.[/QUESTION][SQL]SELECT s.Gender_MFU, COUNT(s.Student_ID) AS Number_Of_Students FROM Students s GROUP BY s.Gender_MFU ORDER BY Number_Of_Students DESC;
### TaskGenerate a SQL query to answer [QUESTION]For each gender, return the gender code and the number of students who identify as that gender.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each gender, return the gender code and the number of students who identify as that gender.[/QUESTION][SQL]SELECT s.Gender_MFU AS Gender, COUNT(s.Student_ID) AS Number_of_Students FROM Students s GROUP BY s.Gender_MFU ORDER BY s.Gender_MFU;
### TaskGenerate a SQL query to answer [QUESTION]List the last names of the students whose gender is "F" or "M".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the last names of the students whose gender is "F" or "M".[/QUESTION][SQL]SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU IN ('F', 'M') ORDER BY s.Last_Name;
### TaskGenerate a SQL query to answer [QUESTION]Which students identify their gender as "F" or "M"? Give me their last names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students identify their gender as "F" or "M"? Give me their last names.[/QUESTION][SQL]SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU IN ('F', 'M') ORDER BY s.Last_Name;
### TaskGenerate a SQL query to answer [QUESTION]List the first names of the students who do not have any answers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the first names of the students who do not have any answers.[/QUESTION][SQL]SELECT s.First_Name FROM Students s WHERE s.Student_ID NOT IN (SELECT sa.Student_ID FROM Student_Answers sa);
### TaskGenerate a SQL query to answer [QUESTION]Which students do not have any answers? Find their first names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students do not have any answers? Find their first names.[/QUESTION][SQL]SELECT s.First_Name FROM Students s WHERE s.Student_ID NOT IN (SELECT sa.Student_ID FROM Student_Answers sa);
### TaskGenerate a SQL query to answer [QUESTION]Show the student answer texts that received both "Normal" and "Absent" as comments.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the student answer texts that received both "Normal" and "Absent" as comments.[/QUESTION][SQL]SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments ilike '%Normal%' AND sa.Comments ilike '%Absent%';
### TaskGenerate a SQL query to answer [QUESTION]Which student answer texts were given both "Normal" and "Absent" as comments?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which student answer texts were given both "Normal" and "Absent" as comments?[/QUESTION][SQL]SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE LOWER(sa.Comments) IN ('normal', 'absent') GROUP BY sa.Student_Answer_Text HAVING COUNT(DISTINCT sa.Comments) = 2;
### TaskGenerate a SQL query to answer [QUESTION]Show the types of questions that have at least three questions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the types of questions that have at least three questions.[/QUESTION][SQL]SELECT q.Type_of_Question_Code FROM Questions q GROUP BY q.Type_of_Question_Code HAVING COUNT(q.Question_ID) >= 3 ORDER BY q.Type_of_Question_Code;
### TaskGenerate a SQL query to answer [QUESTION]Which types of questions have 3 or more questions? Return the questions type code.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which types of questions have 3 or more questions? Return the questions type code.[/QUESTION][SQL]SELECT q.Type_of_Question_Code FROM Questions q GROUP BY q.Type_of_Question_Code HAVING COUNT(q.Question_ID) >= 3 ORDER BY q.Type_of_Question_Code;
### TaskGenerate a SQL query to answer [QUESTION]Show all information on students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all information on students.[/QUESTION][SQL]SELECT * FROM Students;
### TaskGenerate a SQL query to answer [QUESTION]What is al the available information of each student?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (Student_ID INTEGER NOT NULL,First_Name VARCHAR(255),Middle_Name VARCHAR(255),Last_Name VARCHAR(255),Gender_MFU CHAR(1),Student_Address VARCHAR(255),Email_Adress VARCHAR(255),Cell_Mobile_Phone VARCHAR(255),Home_Phone VARCHAR(255),PRIMARY KEY (Student_ID))CREATE TABLE Questions (Question_ID INTEGER NOT NULL,Type_of_Question_Code VARCHAR(15) NOT NULL,Question_Text VARCHAR(255),PRIMARY KEY (Question_ID))CREATE TABLE Exams (Exam_ID INTEGER NOT NULL,Subject_Code CHAR(15) NOT NULL,Exam_Date DATETIME,Exam_Name VARCHAR(255),PRIMARY KEY (Exam_ID))CREATE TABLE Questions_in_Exams (Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,PRIMARY KEY (Exam_ID, Question_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),FOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID))CREATE TABLE Valid_Answers (Valid_Answer_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Valid_Answer_Text VARCHAR(255),PRIMARY KEY (Valid_Answer_ID),FOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID))CREATE TABLE Student_Answers (Student_Answer_ID INTEGER NOT NULL,Exam_ID INTEGER NOT NULL,Question_ID INTEGER NOT NULL,Student_ID INTEGER NOT NULL,Date_of_Answer DATETIME,Comments VARCHAR(255),Satisfactory_YN VARCHAR(1),Student_Answer_Text VARCHAR(255),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),FOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID))CREATE TABLE Student_Assessments (Student_Answer_ID VARCHAR(100) NOT NULL,Valid_Answer_ID INTEGER NOT NULL,Student_Answer_Text VARCHAR(255),Satisfactory_YN CHAR(1),Assessment VARCHAR(40),PRIMARY KEY (Student_Answer_ID),FOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is al the available information of each student?[/QUESTION][SQL]SELECT s.Student_ID, s.First_Name, s.Middle_Name, s.Last_Name, s.Gender_MFU, s.Student_Address, s.Email_Adress, s.Cell_Mobile_Phone, s.Home_Phone FROM Students s ORDER BY s.Student_ID;
### TaskGenerate a SQL query to answer [QUESTION]How many addresses do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many addresses do we have?[/QUESTION][SQL]SELECT COUNT(*) FROM Addresses;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of addresses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of addresses.[/QUESTION][SQL]SELECT COUNT(*) FROM Addresses;
### TaskGenerate a SQL query to answer [QUESTION]List all address ids and address details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all address ids and address details.[/QUESTION][SQL]SELECT a.address_id, a.address_details FROM Addresses a ORDER BY a.address_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are all the address ids and address details?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the address ids and address details?[/QUESTION][SQL]SELECT a.address_id, a.address_details FROM Addresses a ORDER BY a.address_id;
### TaskGenerate a SQL query to answer [QUESTION]How many products do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many products do we have?[/QUESTION][SQL]SELECT COUNT(*) FROM Products;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of products.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of products.[/QUESTION][SQL]SELECT COUNT(*) FROM Products;
### TaskGenerate a SQL query to answer [QUESTION]Show all product ids, product type codes, and product name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all product ids, product type codes, and product name.[/QUESTION][SQL]SELECT p.product_id, p.product_type_code, p.product_name FROM Products p ORDER BY p.product_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids, type codes, and names for all products?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids, type codes, and names for all products?[/QUESTION][SQL]SELECT p.product_id, p.product_type_code, p.product_name FROM Products p ORDER BY p.product_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the price for the product with name Monitor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the price for the product with name Monitor?[/QUESTION][SQL]SELECT p.product_price FROM Products p WHERE LOWER(p.product_name) ='monitor';
### TaskGenerate a SQL query to answer [QUESTION]Give the price of the Monitor product.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the price of the Monitor product.[/QUESTION][SQL]SELECT p.product_price FROM Products p WHERE LOWER(p.product_name) ='monitor';
### TaskGenerate a SQL query to answer [QUESTION]Show the minimum, average, maximum price for all products.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the minimum, average, maximum price for all products.[/QUESTION][SQL]SELECT MIN(p.product_price) AS min_price, AVG(p.product_price) AS avg_price, MAX(p.product_price) AS max_price FROM Products p
### TaskGenerate a SQL query to answer [QUESTION]What are the minimum, average, and maximum prices across all products?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the minimum, average, and maximum prices across all products?[/QUESTION][SQL]SELECT MIN(p.product_price) AS min_price, AVG(p.product_price) AS avg_price, MAX(p.product_price) AS max_price FROM Products p;
### TaskGenerate a SQL query to answer [QUESTION]What is the average price for products with type Clothes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average price for products with type Clothes?[/QUESTION][SQL]SELECT AVG(p.product_price) AS average_product_price FROM Products p WHERE LOWER(p.product_type_code) = 'clothes';
### TaskGenerate a SQL query to answer [QUESTION]Return the average price of Clothes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the average price of Clothes.[/QUESTION][SQL]SELECT AVG(p.product_price) AS average_price FROM Products p WHERE LOWER(p.product_type_code) = 'clothes';
### TaskGenerate a SQL query to answer [QUESTION]How many hardware type products do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many hardware type products do we have?[/QUESTION][SQL]SELECT COUNT(*) FROM Products p WHERE LOWER(p.product_type_code) = 'hardware';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of products of the type Hardware.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of products of the type Hardware.[/QUESTION][SQL]SELECT COUNT(p.product_id) FROM Products p WHERE LOWER(p.product_type_code) = 'hardware';
### TaskGenerate a SQL query to answer [QUESTION]Show all product names with price higher than the average.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all product names with price higher than the average.[/QUESTION][SQL]SELECT p.product_name FROM Products p WHERE p.product_price > (SELECT AVG(product_price) FROM Products);
### TaskGenerate a SQL query to answer [QUESTION]What are the names of products that have a price above the average for all products.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of products that have a price above the average for all products.[/QUESTION][SQL]SELECT p.product_name FROM Products p WHERE p.product_price > (SELECT AVG(product_price) FROM Products);
### TaskGenerate a SQL query to answer [QUESTION]Show all hardware product names with price higher than the average price of hardware type products.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all hardware product names with price higher than the average price of hardware type products.[/QUESTION][SQL]SELECT p.product_name FROM Products p WHERE p.product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware') ORDER BY p.product_price DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of Hardware product with prices above the average price of Hardware products.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of Hardware product with prices above the average price of Hardware products.[/QUESTION][SQL]SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' AND p.product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware') ORDER BY p.product_name;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the most expensive product with type Clothes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the most expensive product with type Clothes?[/QUESTION][SQL]SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Clothes' ORDER BY p.product_price DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the name of the most expensive Clothes product.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the name of the most expensive Clothes product.[/QUESTION][SQL]SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Clothes' ORDER BY p.product_price DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the product id and product name for the cheapest Hardware type product?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the product id and product name for the cheapest Hardware type product?[/QUESTION][SQL]SELECT p.product_id, p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the id and name of the cheapest Hardware product.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the id and name of the cheapest Hardware product.[/QUESTION][SQL]SELECT p.product_id, p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List all product names in descending order of price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all product names in descending order of price.[/QUESTION][SQL]SELECT p.product_name, p.product_price FROM Products p ORDER BY p.product_price DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the products, sorted by descending price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the products, sorted by descending price?[/QUESTION][SQL]SELECT p.product_name FROM Products p ORDER BY p.product_price DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show all hardware type products in ascending order of price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all hardware type products in ascending order of price.[/QUESTION][SQL]SELECT p.product_name, p.product_price FROM Products p WHERE p.product_type_code = 'hardware' ORDER BY p.product_price ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all Hardware products, sorted by price ascending?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all Hardware products, sorted by price ascending?[/QUESTION][SQL]SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC;
### TaskGenerate a SQL query to answer [QUESTION]List all product type codes and the number of products in each type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all product type codes and the number of products in each type.[/QUESTION][SQL]SELECT p.product_type_code, COUNT(p.product_id) AS total_products FROM Products p GROUP BY p.product_type_code ORDER BY total_products DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many products are there for each product type?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many products are there for each product type?[/QUESTION][SQL]SELECT p.product_type_code, COUNT(p.product_id) AS number_of_products FROM Products p GROUP BY p.product_type_code ORDER BY number_of_products DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all product type codes and the average price for each type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all product type codes and the average price for each type.[/QUESTION][SQL]SELECT p.product_type_code, AVG(p.product_price) AS average_price FROM Products p GROUP BY p.product_type_code ORDER BY p.product_type_code;
### TaskGenerate a SQL query to answer [QUESTION]What is the average price of products for each product type?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average price of products for each product type?[/QUESTION][SQL]SELECT p.product_type_code, AVG(p.product_price) AS average_product_price FROM Products p GROUP BY p.product_type_code ORDER BY p.product_type_code;
### TaskGenerate a SQL query to answer [QUESTION]What are the product type code with at least two products?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the product type code with at least two products?[/QUESTION][SQL]SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) >= 2 ORDER BY p.product_type_code;
### TaskGenerate a SQL query to answer [QUESTION]Give the product type codes of product types that have two or more products.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the product type codes of product types that have two or more products.[/QUESTION][SQL]SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) >= 2 ORDER BY p.product_type_code;
### TaskGenerate a SQL query to answer [QUESTION]What is the product type code with most number of products?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the product type code with most number of products?[/QUESTION][SQL]SELECT p.product_type_code, COUNT(p.product_id) AS product_count FROM Products p GROUP BY p.product_type_code ORDER BY product_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the most frequent product type code?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most frequent product type code?[/QUESTION][SQL]SELECT p.product_type_code, COUNT(p.product_type_code) AS frequency FROM Products p GROUP BY p.product_type_code ORDER BY frequency DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many customers do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers do we have?[/QUESTION][SQL]SELECT COUNT(*) FROM Customers;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of customers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of customers.[/QUESTION][SQL]SELECT COUNT(*) FROM Customers;
### TaskGenerate a SQL query to answer [QUESTION]Show all customer ids and customer names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all customer ids and customer names.[/QUESTION][SQL]SELECT c.customer_id, c.customer_name FROM Customers c ORDER BY c.customer_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and names of all customers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and names of all customers?[/QUESTION][SQL]SELECT c.customer_id, c.customer_name FROM Customers c ORDER BY c.customer_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the customer address, customer phone, and customer email for Jeromy?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the customer address, customer phone, and customer email for Jeromy?[/QUESTION][SQL]SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE LOWER(c.customer_name) = 'jeromy';
### TaskGenerate a SQL query to answer [QUESTION]Give the address, phone, and email for customers with the name Jeromy.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the address, phone, and email for customers with the name Jeromy.[/QUESTION][SQL]SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE LOWER(c.customer_name) = 'jeromy'
### TaskGenerate a SQL query to answer [QUESTION]Show all payment method codes and the number of customers in each code.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all payment method codes and the number of customers in each code.[/QUESTION][SQL]SELECT c.payment_method_code, COUNT(c.customer_id) AS customer_count FROM Customers c GROUP BY c.payment_method_code ORDER BY customer_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many customers use each payment method?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers use each payment method?[/QUESTION][SQL]SELECT c.payment_method_code, COUNT(c.customer_id) AS number_of_customers FROM Customers c GROUP BY c.payment_method_code ORDER BY number_of_customers DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the payment method code used by most number of customers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the payment method code used by most number of customers?[/QUESTION][SQL]SELECT c.payment_method_code, COUNT(c.customer_id) AS customer_count FROM Customers c GROUP BY c.payment_method_code ORDER BY customer_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the code of the payment method that is most commonly used.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the code of the payment method that is most commonly used.[/QUESTION][SQL]SELECT c.payment_method_code FROM Customers c GROUP BY c.payment_method_code ORDER BY COUNT(c.customer_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show all customer names with the  payment method code used by least number of customers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all customer names with the  payment method code used by least number of customers.[/QUESTION][SQL]SELECT c.customer_name, COUNT(c.payment_method_code) AS count_customers FROM Customers c GROUP BY c.payment_method_code ORDER BY count_customers ASC LIMIT 1
### TaskGenerate a SQL query to answer [QUESTION]What are the names of customers who use the least common payment method?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of customers who use the least common payment method?[/QUESTION][SQL]SELECT c.customer_name FROM Customers c JOIN (SELECT payment_method_code, COUNT(*) AS count FROM Customers GROUP BY payment_method_code ORDER BY count ASC LIMIT 1) p ON c.payment_method_code = p.payment_method_code;
### TaskGenerate a SQL query to answer [QUESTION]What is the payment method and customer number for customer named Jeromy?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the payment method and customer number for customer named Jeromy?[/QUESTION][SQL]SELECT c.payment_method_code, c.customer_number FROM Customers c WHERE LOWER(c.customer_name) = 'jeromy';
### TaskGenerate a SQL query to answer [QUESTION]Give the payment method code and customer number corresponding to the customer named Jeromy.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the payment method code and customer number corresponding to the customer named Jeromy.[/QUESTION][SQL]SELECT c.payment_method_code, c.customer_number FROM Customers c WHERE LOWER(c.customer_name) = 'jeromy'
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct payment methods used by customers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct payment methods used by customers?[/QUESTION][SQL]SELECT DISTINCT c.payment_method_code FROM Customers c ORDER BY c.payment_method_code;
### TaskGenerate a SQL query to answer [QUESTION]Give the different payment method codes that customers use.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the different payment method codes that customers use.[/QUESTION][SQL]SELECT DISTINCT c.payment_method_code FROM Customers c ORDER BY c.payment_method_code;
### TaskGenerate a SQL query to answer [QUESTION]Show the id and the product type for all products, order by product name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the id and the product type for all products, order by product name.[/QUESTION][SQL]SELECT p.product_id, p.product_type_code FROM Products p ORDER BY p.product_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and product types for all products, sorted alphabetically by product name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and product types for all products, sorted alphabetically by product name?[/QUESTION][SQL]SELECT p.product_id, p.product_type_code FROM Products p ORDER BY p.product_name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What is the product type with least number of products?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the product type with least number of products?[/QUESTION][SQL]SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_id) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the code of the product type that is least common?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the code of the product type that is least common?[/QUESTION][SQL]SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_id) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many customer orders do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customer orders do we have?[/QUESTION][SQL]SELECT COUNT(*) FROM Customer_Orders;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of customer orders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of customer orders.[/QUESTION][SQL]SELECT COUNT(*) FROM Customer_Orders co;
### TaskGenerate a SQL query to answer [QUESTION]Show the order ids, order dates, and order status codes for all orders by customer Jeromy.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the order ids, order dates, and order status codes for all orders by customer Jeromy.[/QUESTION][SQL]SELECT co.order_id, co.order_date, co.order_status_code FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id WHERE LOWER(c.customer_name) = 'jeromy';
### TaskGenerate a SQL query to answer [QUESTION]What were the ids, dates, and status codes for orders made by Jeromy?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What were the ids, dates, and status codes for orders made by Jeromy?[/QUESTION][SQL]SELECT co.order_id, co.order_date, co.order_status_code FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id WHERE LOWER(c.customer_name) = 'jeromy';
### TaskGenerate a SQL query to answer [QUESTION]Show all customer names, ids and the number of orders by each customer.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all customer names, ids and the number of orders by each customer.[/QUESTION][SQL]SELECT c.customer_name, c.customer_id, COUNT(co.order_id) AS order_count FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_name, c.customer_id ORDER BY order_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names, ids, and number of orders made for each customer?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names, ids, and number of orders made for each customer?[/QUESTION][SQL]SELECT c.customer_name, c.customer_id, COUNT(o.order_id) AS order_count FROM Customers c JOIN Customer_Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name, c.customer_id ORDER BY order_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the customer id, name, phone, and email for the customer with most orders?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the customer id, name, phone, and email for the customer with most orders?[/QUESTION][SQL]SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id, c.customer_name, c.customer_phone, c.customer_email ORDER BY COUNT(co.order_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the id, name, phone, and email corresponding to the customer who made the most orders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the id, name, phone, and email corresponding to the customer who made the most orders.[/QUESTION][SQL]SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN (SELECT co.customer_id, COUNT(co.order_id) AS order_count FROM Customer_Orders co GROUP BY co.customer_id ORDER BY order_count DESC LIMIT 1) o ON c.customer_id = o.customer_id;
### TaskGenerate a SQL query to answer [QUESTION]Show all order status and the number of orders in each status.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all order status and the number of orders in each status.[/QUESTION][SQL]SELECT co.order_status_code, COUNT(co.order_id) AS total_orders FROM Customer_Orders co GROUP BY co.order_status_code ORDER BY total_orders DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many orders have each order status code?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many orders have each order status code?[/QUESTION][SQL]SELECT oc.order_status_code, COUNT(*) AS number_of_orders FROM Customer_Orders oc GROUP BY oc.order_status_code ORDER BY number_of_orders DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the order status code that is most common?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the order status code that is most common?[/QUESTION][SQL]SELECT oc.order_status_code, COUNT(*) AS count FROM Customer_Orders oc GROUP BY oc.order_status_code ORDER BY count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the order status code that is most frequent across customer orders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the order status code that is most frequent across customer orders.[/QUESTION][SQL]SELECT co.order_status_code, COUNT(*) AS frequency FROM Customer_Orders co GROUP BY co.order_status_code ORDER BY frequency DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many customers do not have an order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers do not have an order?[/QUESTION][SQL]SELECT COUNT(DISTINCT c.customer_id) FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of customers who have not made an order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of customers who have not made an order.[/QUESTION][SQL]SELECT COUNT(DISTINCT c.customer_id) FROM Customers c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM Customer_Orders co);
### TaskGenerate a SQL query to answer [QUESTION]Show all product names without an order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all product names without an order.[/QUESTION][SQL]SELECT p.product_name FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi)
### TaskGenerate a SQL query to answer [QUESTION]What are the names of products that have not been ordered?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of products that have not been ordered?[/QUESTION][SQL]SELECT p.product_name FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi) ORDER BY p.product_name;
### TaskGenerate a SQL query to answer [QUESTION]How many products named Monitor have been ordered?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many products named Monitor have been ordered?[/QUESTION][SQL]SELECT COUNT(*) AS total_monitor_orders FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE LOWER(p.product_name) ='monitor';
### TaskGenerate a SQL query to answer [QUESTION]What is the total number of Monitor products that have been ordered?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total number of Monitor products that have been ordered?[/QUESTION][SQL]SELECT SUM(CAST(o.order_quantity AS INTEGER)) AS total_monitor_orders FROM Order_Items o JOIN Products p ON o.product_id = p.product_id WHERE LOWER(p.product_name) LIKE '%monitor%';
### TaskGenerate a SQL query to answer [QUESTION]How many customers have ordered the product named Monitor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers have ordered the product named Monitor?[/QUESTION][SQL]SELECT COUNT(DISTINCT c.customer_id) FROM Customer_Orders co JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id JOIN Customers c ON co.customer_id = c.customer_id WHERE LOWER(p.product_name) ='monitor';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different customers who have bought a Monitor Product.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different customers who have bought a Monitor Product.[/QUESTION][SQL]SELECT COUNT(DISTINCT c.customer_id) FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE LOWER(p.product_name) LIKE '%monitor%'
### TaskGenerate a SQL query to answer [QUESTION]How many customers have an order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers have an order?[/QUESTION][SQL]SELECT COUNT(DISTINCT co.customer_id) FROM Customer_Orders co;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of differnt customers who have made an order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of differnt customers who have made an order.[/QUESTION][SQL]SELECT COUNT(DISTINCT co.customer_id) FROM Customer_Orders co;
### TaskGenerate a SQL query to answer [QUESTION]Show all customer ids without an order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all customer ids without an order.[/QUESTION][SQL]SELECT c.customer_id FROM Customers c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM Customer_Orders co)
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of customers who have not made an order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of customers who have not made an order?[/QUESTION][SQL]SELECT c.customer_id FROM Customers c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM Customer_Orders co) ORDER BY c.customer_id;
### TaskGenerate a SQL query to answer [QUESTION]Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.[/QUESTION][SQL]SELECT co.order_date, co.order_id FROM Customer_Orders co JOIN Order_Items oi ON co.order_id = oi.order_id WHERE (oi.order_quantity::INTEGER > 6 OR (SELECT COUNT(*) FROM Order_Items o2 WHERE o2.order_id = co.order_id) > 3);
### TaskGenerate a SQL query to answer [QUESTION]What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?[/QUESTION][SQL]SELECT co.order_id, co.order_date FROM Customer_Orders co JOIN Order_Items oi ON co.order_id = oi.order_id WHERE (oi.order_quantity::INTEGER > 6 OR (SELECT COUNT(*) FROM Order_Items o2 WHERE o2.order_id = co.order_id) > 3);
### TaskGenerate a SQL query to answer [QUESTION]How many buildings are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many buildings are there?[/QUESTION][SQL]SELECT COUNT(*) FROM building;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of buildings.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of buildings.[/QUESTION][SQL]SELECT COUNT(*) FROM building;
### TaskGenerate a SQL query to answer [QUESTION]List the names of buildings in ascending order of number of stories.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of buildings in ascending order of number of stories.[/QUESTION][SQL]SELECT b.name FROM building b ORDER BY b.number_of_stories ASC;
### TaskGenerate a SQL query to answer [QUESTION]What is the list of building names, sorted by the number of stories of each building in ascending order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the list of building names, sorted by the number of stories of each building in ascending order?[/QUESTION][SQL]SELECT b.name, b.number_of_stories FROM building b ORDER BY b.number_of_stories ASC;
### TaskGenerate a SQL query to answer [QUESTION]List the addresses of buildings in descending order of building completion year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the addresses of buildings in descending order of building completion year.[/QUESTION][SQL]SELECT b.address FROM building b ORDER BY b.completed_year DESC;
### TaskGenerate a SQL query to answer [QUESTION]Sort the buildings in descending order of building completion year, and return the building addresses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Sort the buildings in descending order of building completion year, and return the building addresses.[/QUESTION][SQL]SELECT b.address FROM building b ORDER BY b.completed_year DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum number of stories of buildings not completed in 1980?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum number of stories of buildings not completed in 1980?[/QUESTION][SQL]SELECT MAX(b.Number_of_Stories) FROM building b WHERE b.Completed_Year!= 1980;
### TaskGenerate a SQL query to answer [QUESTION]Among the buildings not completed in 1980, what is the maximum number of stories?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Among the buildings not completed in 1980, what is the maximum number of stories?[/QUESTION][SQL]SELECT MAX(b.Number_of_Stories) FROM building b WHERE b.Completed_Year!= 1980;
### TaskGenerate a SQL query to answer [QUESTION]What is the average population for all regions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average population for all regions?[/QUESTION][SQL]SELECT AVG(r.Population) AS Average_Population FROM region r;
### TaskGenerate a SQL query to answer [QUESTION]Compute the average population of a region.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Compute the average population of a region.[/QUESTION][SQL]SELECT AVG(r.Population) AS Average_Population FROM region r;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of regions in ascending alphabetical order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of regions in ascending alphabetical order?[/QUESTION][SQL]SELECT r.name FROM region r ORDER BY r.name ASC;
### TaskGenerate a SQL query to answer [QUESTION]List the names of regions in alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of regions in alphabetical order.[/QUESTION][SQL]SELECT r.name FROM region r ORDER BY r.name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the capitals of the regions with area bigger than 10000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the capitals of the regions with area bigger than 10000?[/QUESTION][SQL]SELECT r.capital FROM region r WHERE r.area > 10000;
### TaskGenerate a SQL query to answer [QUESTION]Give me the capitals of the regions whose area is larger than 10000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the capitals of the regions whose area is larger than 10000.[/QUESTION][SQL]SELECT r.capital FROM region r WHERE r.area > 10000;
### TaskGenerate a SQL query to answer [QUESTION]List the capital of the region with the largest population.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the capital of the region with the largest population.[/QUESTION][SQL]SELECT r.capital FROM region r WHERE r.population = (SELECT MAX(r2.population) FROM region r2);
### TaskGenerate a SQL query to answer [QUESTION]Which region has the largest population? Give me the capital of the region.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which region has the largest population? Give me the capital of the region.[/QUESTION][SQL]SELECT r.name AS region_name, r.capital FROM region r WHERE r.population = (SELECT MAX(r2.population) FROM region r2);
### TaskGenerate a SQL query to answer [QUESTION]List the names of the regions with the top 5 largest areas.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of the regions with the top 5 largest areas.[/QUESTION][SQL]SELECT r.name FROM region r ORDER BY r.area DESC NULLS LAST LIMIT 5;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the 5 largest regions in terms of area?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the 5 largest regions in terms of area?[/QUESTION][SQL]SELECT r.name FROM region r ORDER BY r.area DESC NULLS LAST LIMIT 5;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of buildings and the names of regions they are in.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of buildings and the names of regions they are in.[/QUESTION][SQL]SELECT b.name AS building_name, r.name AS region_name FROM building b JOIN region r ON b.region_id = r.region_id;
### TaskGenerate a SQL query to answer [QUESTION]For each building, return the name of the building and the name of the region it belongs to.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each building, return the name of the building and the name of the region it belongs to.[/QUESTION][SQL]SELECT b.Name AS Building_Name, r.Name AS Region_Name FROM building b JOIN region r ON b.Region_ID = r.Region_ID;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of regions that have more than one building.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of regions that have more than one building.[/QUESTION][SQL]SELECT r.Name FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Name HAVING COUNT(b.Building_ID) > 1 ORDER BY r.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which regions have more than one building? Give me the names of the regions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which regions have more than one building? Give me the names of the regions.[/QUESTION][SQL]SELECT r.Name FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Name HAVING COUNT(b.Building_ID) > 1 ORDER BY r.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the capital of the region that has the most buildings.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the capital of the region that has the most buildings.[/QUESTION][SQL]SELECT r.Capital FROM region r JOIN (SELECT b.Region_ID, COUNT(b.Building_ID) AS Building_Count FROM building b GROUP BY b.Region_ID ORDER BY Building_Count DESC LIMIT 1) AS bc ON r.Region_ID = bc.Region_ID;
### TaskGenerate a SQL query to answer [QUESTION]Which region has the largest number of buildings? Show me the capital of the region.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which region has the largest number of buildings? Show me the capital of the region.[/QUESTION][SQL]SELECT r.Name AS Region, r.Capital FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Name, r.Capital ORDER BY COUNT(b.Building_ID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show addresses of buildings and the capitals of regions they are in.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show addresses of buildings and the capitals of regions they are in.[/QUESTION][SQL]SELECT b.address, r.capital FROM building b JOIN region r ON b.region_id = r.region_id;
### TaskGenerate a SQL query to answer [QUESTION]For each building, return the address of the building and the name of the region it belongs to.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each building, return the address of the building and the name of the region it belongs to.[/QUESTION][SQL]SELECT b.address, r.name AS region_name FROM building b JOIN region r ON b.region_id = r.region_id;
### TaskGenerate a SQL query to answer [QUESTION]Show the number of stories of buildings in the region with name "Abruzzo".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the number of stories of buildings in the region with name "Abruzzo".[/QUESTION][SQL]SELECT SUM(b.Number_of_Stories) AS total_number_of_stories FROM building b JOIN region r ON b.Region_ID = r.Region_ID WHERE LOWER(r.Name) = 'abruzzo';
### TaskGenerate a SQL query to answer [QUESTION]Return the number of stories for each building in the region named "Abruzzo".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the number of stories for each building in the region named "Abruzzo".[/QUESTION][SQL]SELECT b.name AS building_name, b.number_of_stories FROM building b JOIN region r ON b.region_id = r.region_id WHERE LOWER(r.name) = 'abruzzo' ORDER BY b.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Please show each completion year and the number of buildings completed in that year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show each completion year and the number of buildings completed in that year.[/QUESTION][SQL]SELECT b.Completed_Year, COUNT(b.Building_ID) AS NumberOfBuildings FROM building b GROUP BY b.Completed_Year ORDER BY b.Completed_Year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For completion year, return the year and the number of buildings completed.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For completion year, return the year and the number of buildings completed.[/QUESTION][SQL]SELECT b.Completed_Year, COUNT(b.Building_ID) AS NumberOfBuildings FROM building b GROUP BY b.Completed_Year ORDER BY b.Completed_Year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the year in which the most buildings are completed.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the year in which the most buildings are completed.[/QUESTION][SQL]SELECT b.Completed_Year, COUNT(b.Completed_Year) AS number_of_buildings FROM building b GROUP BY b.Completed_Year ORDER BY number_of_buildings DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]In which year did the most building constructions complete?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In which year did the most building constructions complete?[/QUESTION][SQL]SELECT b.Completed_Year, COUNT(b.Completed_Year) AS number_of_buildings FROM building b GROUP BY b.Completed_Year ORDER BY number_of_buildings DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the names of regions that do not have any buildings.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of regions that do not have any buildings.[/QUESTION][SQL]SELECT r.Name FROM region r WHERE NOT EXISTS (SELECT 1 FROM building b WHERE b.Region_ID = r.Region_ID)
### TaskGenerate a SQL query to answer [QUESTION]What are the names of regions in which there are no buildings?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of regions in which there are no buildings?[/QUESTION][SQL]SELECT r.Name FROM region r WHERE NOT EXISTS (SELECT 1 FROM building b WHERE b.Region_ID = r.Region_ID)
### TaskGenerate a SQL query to answer [QUESTION]Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.[/QUESTION][SQL]SELECT b.Completed_Year FROM building b WHERE b.Number_of_Stories > 20 AND b.Number_of_Stories < 15 ORDER BY b.Completed_Year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?[/QUESTION][SQL]SELECT DISTINCT b.Completed_Year FROM building b WHERE (b.Number_of_Stories > 20 OR b.Number_of_Stories < 15) ORDER BY b.Completed_Year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the distinct addresses of buildings.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the distinct addresses of buildings.[/QUESTION][SQL]SELECT DISTINCT b.Address FROM building b ORDER BY b.Address NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Give me a list of distinct building addresses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me a list of distinct building addresses.[/QUESTION][SQL]SELECT DISTINCT b.Address FROM building b ORDER BY b.Address NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the completed years of buildings in descending order of the number of stories.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the completed years of buildings in descending order of the number of stories.[/QUESTION][SQL]SELECT b.Completed_Year, b.Number_of_Stories FROM building b ORDER BY b.Number_of_Stories DESC;
### TaskGenerate a SQL query to answer [QUESTION]Sort buildings in descending order of the number of stories, and return their completion years.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Sort buildings in descending order of the number of stories, and return their completion years.[/QUESTION][SQL]SELECT b.name, b.completed_year FROM building b ORDER BY b.number_of_stories DESC;
### TaskGenerate a SQL query to answer [QUESTION]List details of all the channel in alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List details of all the channel in alphabetical order.[/QUESTION][SQL]SELECT c.Channel_Details FROM Channels c ORDER BY c.Channel_Details ASC;
### TaskGenerate a SQL query to answer [QUESTION]What is the list of channel details ordered alphabetically?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the list of channel details ordered alphabetically?[/QUESTION][SQL]SELECT c.Channel_Details FROM Channels c ORDER BY c.Channel_Details ASC;
### TaskGenerate a SQL query to answer [QUESTION]How many services are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many services are there?[/QUESTION][SQL]SELECT COUNT(*) FROM Services;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of services.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of services.[/QUESTION][SQL]SELECT COUNT(*) FROM Services;
### TaskGenerate a SQL query to answer [QUESTION]What is the most common analytical layer type code?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most common analytical layer type code?[/QUESTION][SQL]SELECT al.Analytical_Layer_Type_Code, COUNT(*) AS Count FROM Analytical_Layer al GROUP BY al.Analytical_Layer_Type_Code ORDER BY Count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the analytical layer type code that appears most often.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the analytical layer type code that appears most often.[/QUESTION][SQL]SELECT al.Analytical_Layer_Type_Code, COUNT(*) AS frequency FROM Analytical_Layer al GROUP BY al.Analytical_Layer_Type_Code ORDER BY frequency DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find all the services that has been used by the customer with details "Hardy Kutch".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all the services that has been used by the customer with details "Hardy Kutch".[/QUESTION][SQL]SELECT s.Service_ID FROM Customers c JOIN Customers_and_Services cas ON c.Customer_ID = cas.Customer_ID JOIN Services s ON cas.Service_ID = s.Service_ID WHERE LOWER(c.Customer_Details) = 'hardy kutch';
### TaskGenerate a SQL query to answer [QUESTION]Which services were used by the customer with details "Hardy Kutch"? Give me the service details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which services were used by the customer with details "Hardy Kutch"? Give me the service details.[/QUESTION][SQL]SELECT s.Service_Details FROM Customers c JOIN Customers_and_Services cas ON c.Customer_ID = cas.Customer_ID JOIN Services s ON cas.Service_ID = s.Service_ID WHERE LOWER(c.Customer_Details) = 'hardy kutch';
### TaskGenerate a SQL query to answer [QUESTION]Find the details of the services that have been used by more than 3 times.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the details of the services that have been used by more than 3 times.[/QUESTION][SQL]SELECT s.Service_ID, s.Service_Details FROM Services s JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID GROUP BY s.Service_ID, s.Service_Details HAVING COUNT(ci.Customer_Interaction_ID) > 3 ORDER BY s.Service_ID;
### TaskGenerate a SQL query to answer [QUESTION]Which services were used by customers by more than 3 times? Give me the service details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which services were used by customers by more than 3 times? Give me the service details.[/QUESTION][SQL]SELECT s.Service_Details FROM Customers_and_Services cas JOIN Services s ON cas.Service_ID = s.Service_ID GROUP BY s.Service_Details HAVING COUNT(cas.Customers_and_Services_ID) > 3
### TaskGenerate a SQL query to answer [QUESTION]Find the details of the customer who has used services the most times.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the details of the customer who has used services the most times.[/QUESTION][SQL]SELECT c.Customer_Details, COUNT(cs.Customers_and_Services_ID) AS service_count FROM Customers_and_Services cs JOIN Customers c ON cs.Customer_ID = c.Customer_ID GROUP BY c.Customer_Details ORDER BY service_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]return the details of the customer with largest count of used services.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]return the details of the customer with largest count of used services.[/QUESTION][SQL]SELECT c.Customer_Details, COUNT(cs.Customers_and_Services_ID) AS service_count FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID GROUP BY c.Customer_Details ORDER BY service_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the customer who has used the most types of services.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the customer who has used the most types of services.[/QUESTION][SQL]SELECT c.Customer_Details FROM Customers c JOIN (SELECT ca.Customer_ID, COUNT(DISTINCT ca.Service_ID) AS service_count FROM Customers_and_Services ca GROUP BY ca.Customer_ID ORDER BY service_count DESC LIMIT 1) AS sc ON c.Customer_ID = sc.Customer_ID;
### TaskGenerate a SQL query to answer [QUESTION]Which customer has used the most types of services? Give me the customer details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customer has used the most types of services? Give me the customer details.[/QUESTION][SQL]SELECT c.Customer_Details, COUNT(DISTINCT cs.Service_ID) AS service_count FROM Customers_and_Services cs JOIN Customers c ON cs.Customer_ID = c.Customer_ID GROUP BY c.Customer_Details ORDER BY service_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the details of the customer who has never used any services.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the details of the customer who has never used any services.[/QUESTION][SQL]SELECT c.Customer_Details FROM Customers c WHERE c.Customer_ID NOT IN (SELECT cs.Customer_ID FROM Customers_and_Services cs);
### TaskGenerate a SQL query to answer [QUESTION]Which customers never used any services? Give me the customer details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customers never used any services? Give me the customer details.[/QUESTION][SQL]SELECT c.Customer_Details FROM Customers c WHERE c.Customer_ID NOT IN (SELECT cs.Customer_ID FROM Customers_and_Services cs);
### TaskGenerate a SQL query to answer [QUESTION]Find the details of the customers who have used the least-used service.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the details of the customers who have used the least-used service.[/QUESTION][SQL]SELECT c.Customer_Details, s.Service_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID JOIN Services s ON cs.Service_ID = s.Service_ID WHERE s.Service_ID IN (SELECT Service_ID FROM Services ORDER BY COUNT(cs.Customers_and_Services_ID) ASC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]Which customers used the least commonly-used service? Give me the distinct customer details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customers used the least commonly-used service? Give me the distinct customer details.[/QUESTION][SQL]SELECT DISTINCT c.Customer_Details FROM Customers c JOIN Customers_and_Services cas ON c.Customer_ID = cas.Customer_ID ORDER BY COUNT(cas.Service_ID) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many distinct customer and services details are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many distinct customer and services details are there?[/QUESTION][SQL]SELECT COUNT(DISTINCT c.Customer_Details), COUNT(DISTINCT s.Service_Details) FROM Customers c CROSS JOIN Services s;
### TaskGenerate a SQL query to answer [QUESTION]Count the total number of available customers and services details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the total number of available customers and services details.[/QUESTION][SQL]SELECT COUNT(DISTINCT c.Customer_ID), COUNT(DISTINCT s.Service_ID) FROM Customers c CROSS JOIN Services s;
### TaskGenerate a SQL query to answer [QUESTION]Find all the customers whose name contains "Kutch".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all the customers whose name contains "Kutch".[/QUESTION][SQL]SELECT c.Customer_ID FROM Customers c WHERE c.Customer_Details ilike '%Kutch%';
### TaskGenerate a SQL query to answer [QUESTION]What are the details of the customers who have "Kutch" in part of their details?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the details of the customers who have "Kutch" in part of their details?[/QUESTION][SQL]SELECT c.Customer_Details FROM Customers c WHERE c.Customer_Details LIKE '%Kutch%';
### TaskGenerate a SQL query to answer [QUESTION]Find the name of all the services which either have been used by customer "Hardy Kutch" or have been rated as "good" in one of the customer interactions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of all the services which either have been used by customer "Hardy Kutch" or have been rated as "good" in one of the customer interactions.[/QUESTION][SQL]SELECT s.Service_Details FROM Services s JOIN Customers_and_Services cas ON s.Service_ID = cas.Service_ID WHERE cas.Customer_ID IN (SELECT c.Customer_ID FROM Customers c WHERE LOWER(c.Customer_Details) = 'hardy kutch') OR EXISTS (SELECT 1 FROM Customer_Interactions ci JOIN Integration_Platform ip ON ci.Customer_Interaction_ID = ip.Customer_Interaction_ID WHERE LOWER(ci.Status_Code) = 'good' AND ci.Service_ID = s.Service_ID);
### TaskGenerate a SQL query to answer [QUESTION]Which services are used by the customer "Hardy Kutch" or are rated as "good" in a customer interaction? Give me the service details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which services are used by the customer "Hardy Kutch" or are rated as "good" in a customer interaction? Give me the service details.[/QUESTION][SQL]SELECT s.Service_Details FROM Customers c JOIN Customers_and_Services cas ON c.Customer_ID = cas.Customer_ID JOIN Services s ON cas.Service_ID = s.Service_ID WHERE LOWER(c.Customer_Details) = 'hardy kutch' UNION SELECT s.Service_Details FROM Customer_Interactions ci JOIN Services s ON ci.Service_ID = s.Service_ID WHERE LOWER(ci.Status_Code) = 'good' ORDER BY s.Service_Details;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of all the services which both have been used by customer "Hardy Kutch" and have been rated "bad" in one of the customer interactions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of all the services which both have been used by customer "Hardy Kutch" and have been rated "bad" in one of the customer interactions.[/QUESTION][SQL]SELECT s.Service_Details FROM Customers_and_Services cas JOIN Services s ON cas.Service_ID = s.Service_ID JOIN Customer_Interactions ci ON cas.Customer_ID = ci.Customer_ID WHERE LOWER(cas.Customers_and_Services_Details) LIKE '%Hardy%Kutch%' AND LOWER(ci.Status_Code) = 'bad';
### TaskGenerate a SQL query to answer [QUESTION]Which services are both used by the customer "Hardy Kutch" and are rated as "bad" in a customer interaction? Give me the service details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which services are both used by the customer "Hardy Kutch" and are rated as "bad" in a customer interaction? Give me the service details.[/QUESTION][SQL]SELECT s.Service_Details FROM Customers_and_Services cas JOIN Services s ON cas.Service_ID = s.Service_ID WHERE cas.Customer_ID IN (SELECT c.Customer_ID FROM Customers c WHERE LOWER(c.Customer_Details) = 'hardy kutch') AND EXISTS (SELECT 1 FROM Customer_Interactions ci WHERE ci.Status_Code = 'bad' AND ci.Service_ID = s.Service_ID);
### TaskGenerate a SQL query to answer [QUESTION]Find details of all the services that have interacted with `` 15 ij '' for the the channel details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find details of all the services that have interacted with `` 15 ij '' for the the channel details.[/QUESTION][SQL]SELECT s.Service_Details FROM Services s JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID WHERE LOWER(ci.Status_Code) LIKE '%15 ij%' ORDER BY s.Service_Details;
### TaskGenerate a SQL query to answer [QUESTION]Give me the details of all the services that have interacted with the channel with detail "15 ij".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the details of all the services that have interacted with the channel with detail "15 ij".[/QUESTION][SQL]SELECT s.Service_Details FROM Services s JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID WHERE LOWER(ci.Status_Code) = '15 ij';
### TaskGenerate a SQL query to answer [QUESTION]Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad ''.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad ''.[/QUESTION][SQL]SELECT c.Customer_Details FROM Customer_Interactions ci JOIN Customers c ON ci.Customer_ID = c.Customer_ID WHERE LOWER(ci.Status_Code) ='stuck' AND LOWER(ci.Services_and_Channels_Details) LIKE '%bad%';
### TaskGenerate a SQL query to answer [QUESTION]Which customers have experienced status "Stuck" and service and channel detail "bad" in  an interaction? Give me the customer details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customers have experienced status "Stuck" and service and channel detail "bad" in  an interaction? Give me the customer details.[/QUESTION][SQL]SELECT c.Customer_Details FROM Customer_Interactions ci JOIN Customers c ON ci.Customer_ID = c.Customer_ID WHERE LOWER(ci.Status_Code) ='stuck' AND LOWER(ci.Services_and_Channels_Details) LIKE '%bad%'
### TaskGenerate a SQL query to answer [QUESTION]How many integration platforms are successful?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many integration platforms are successful?[/QUESTION][SQL]SELECT COUNT(*) AS Successful_Integration_Platforms FROM Integration_Platform ip JOIN Customer_Interactions ci ON ip.Customer_Interaction_ID = ci.Customer_Interaction_ID WHERE LOWER(ip.Integration_Platform_Details) LIKE '%successful%' OR LOWER(ip.Integration_Platform_Details) LIKE '%successfull%';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of integration platforms that have "Success" in the details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of integration platforms that have "Success" in the details.[/QUESTION][SQL]SELECT COUNT(*) FROM Integration_Platform ip WHERE LOWER(ip.Integration_Platform_Details) LIKE '%success%';
### TaskGenerate a SQL query to answer [QUESTION]List the details of all the customers who are associated with a failed integration platform.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the details of all the customers who are associated with a failed integration platform.[/QUESTION][SQL]SELECT c.Customer_Details FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID JOIN Integration_Platform ip ON ci.Customer_Interaction_ID = ip.Customer_Interaction_ID WHERE LOWER(ip.Integration_Platform_Details) LIKE '%failed%' ORDER BY c.Customer_Details;
### TaskGenerate a SQL query to answer [QUESTION]Which customers have integration platform details "Fail" in interactions? Give me the customer details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customers have integration platform details "Fail" in interactions? Give me the customer details.[/QUESTION][SQL]SELECT c.Customer_Details FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID JOIN Integration_Platform ip ON ci.Customer_Interaction_ID = ip.Customer_Interaction_ID WHERE LOWER(ip.Integration_Platform_Details) = 'fail'
### TaskGenerate a SQL query to answer [QUESTION]Which service ( s ) has never been used by any customer? List their details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which service ( s ) has never been used by any customer? List their details.[/QUESTION][SQL]SELECT s.Service_ID, s.Service_Details FROM Services s WHERE s.Service_ID NOT IN (SELECT cands.Service_ID FROM Customers_and_Services cands);
### TaskGenerate a SQL query to answer [QUESTION]Find details of the services that no customer has ever used. Return the service details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find details of the services that no customer has ever used. Return the service details.[/QUESTION][SQL]SELECT s.Service_Details FROM Services s WHERE s.Service_ID NOT IN (SELECT c.Service_ID FROM Customers_and_Services c);
### TaskGenerate a SQL query to answer [QUESTION]Find all the layer type codes with their corresponding usage count.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all the layer type codes with their corresponding usage count.[/QUESTION][SQL]SELECT al.Analytical_Layer_Type_Code, COUNT(*) AS Usage_Count FROM Analytical_Layer al GROUP BY al.Analytical_Layer_Type_Code ORDER BY Usage_Count DESC;
### TaskGenerate a SQL query to answer [QUESTION]For each analytical layer, return the analytical layer type code and the number of times it was used.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each analytical layer, return the analytical layer type code and the number of times it was used.[/QUESTION][SQL]SELECT al.Analytical_Layer_Type_Code, COUNT(al.Analytical_ID) AS usage_count FROM Analytical_Layer al GROUP BY al.Analytical_Layer_Type_Code ORDER BY usage_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find details of all the services that have been marked as `` unsatisfied '' in customers and services details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find details of all the services that have been marked as `` unsatisfied '' in customers and services details.[/QUESTION][SQL]SELECT s.Service_Details FROM Customers_and_Services cs JOIN Services s ON cs.Service_ID = s.Service_ID WHERE LOWER(cs.Customers_and_Services_Details) LIKE '%unsatisfied%' ORDER BY s.Service_Details;
### TaskGenerate a SQL query to answer [QUESTION]Which services have been rated as "unsatisfied" in customers and services details? Give me the service_details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which services have been rated as "unsatisfied" in customers and services details? Give me the service_details.[/QUESTION][SQL]SELECT s.Service_Details FROM Customers_and_Services cs JOIN Services s ON cs.Service_ID = s.Service_ID WHERE LOWER(cs.Customers_and_Services_Details) LIKE '%unsatisfied%'
### TaskGenerate a SQL query to answer [QUESTION]How many vehicles do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many vehicles do we have?[/QUESTION][SQL]SELECT COUNT(*) FROM Vehicles;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of vehicles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of vehicles.[/QUESTION][SQL]SELECT COUNT(*) FROM Vehicles;
### TaskGenerate a SQL query to answer [QUESTION]Show names for all vehicles in descending order of model year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names for all vehicles in descending order of model year.[/QUESTION][SQL]SELECT v.name FROM Vehicles v ORDER BY v.model_year DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all vehicles, ordered by model year descending?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all vehicles, ordered by model year descending?[/QUESTION][SQL]SELECT v.name FROM Vehicles v ORDER BY v.Model_year DESC;
### TaskGenerate a SQL query to answer [QUESTION]List all distinct types of powertrain of vehicles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all distinct types of powertrain of vehicles.[/QUESTION][SQL]SELECT DISTINCT v.Type_of_powertrain FROM Vehicles v ORDER BY v.Type_of_powertrain NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the different types of powertrains?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different types of powertrains?[/QUESTION][SQL]SELECT DISTINCT Type_of_powertrain FROM Vehicles ORDER BY Type_of_powertrain NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.[/QUESTION][SQL]SELECT v.name, v.type_of_powertrain, v.annual_fuel_cost FROM Vehicles v WHERE v.model_year = 2013 OR v.model_year = 2014 ORDER BY v.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?[/QUESTION][SQL]SELECT v.name AS vehicle_name, v.type_of_powertrain, v.annual_fuel_cost FROM Vehicles v WHERE v.model_year IN (2013, 2014) ORDER BY v.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show types of powertrain with vehicles both from 2014 and 2013.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show types of powertrain with vehicles both from 2014 and 2013.[/QUESTION][SQL]SELECT v.type_of_powertrain FROM Vehicles v WHERE v.model_year IN (2014, 2013) GROUP BY v.type_of_powertrain HAVING COUNT(DISTINCT CASE WHEN v.model_year = 2014 THEN v.id END) > 0 AND COUNT(DISTINCT CASE WHEN v.model_year = 2013 THEN v.id END) > 0 ORDER BY v.type_of_powertrain NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the types of powertrains that have vehicles that were made in both 2013 and 2014?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the types of powertrains that have vehicles that were made in both 2013 and 2014?[/QUESTION][SQL]SELECT DISTINCT v.type_of_powertrain FROM Vehicles v WHERE v.model_year IN (2013, 2014) ORDER BY v.type_of_powertrain NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all types of powertrain and the number of vehicles in each type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all types of powertrain and the number of vehicles in each type.[/QUESTION][SQL]SELECT v.type_of_powertrain, COUNT(v.id) AS number_of_vehicles FROM Vehicles v GROUP BY v.type_of_powertrain ORDER BY number_of_vehicles DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many vehicles have each type of powertrain?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many vehicles have each type of powertrain?[/QUESTION][SQL]SELECT v.type_of_powertrain, COUNT(v.id) AS number_of_vehicles FROM Vehicles v GROUP BY v.type_of_powertrain ORDER BY number_of_vehicles DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the type of powertrain with most number of vehicles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the type of powertrain with most number of vehicles.[/QUESTION][SQL]SELECT v.type_of_powertrain FROM Vehicles v GROUP BY v.type_of_powertrain ORDER BY COUNT(v.id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which type of powertrain is most common?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which type of powertrain is most common?[/QUESTION][SQL]SELECT v.type_of_powertrain, COUNT(v.id) AS count FROM Vehicles v GROUP BY v.type_of_powertrain ORDER BY count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show minimum, maximum, and average annual fuel cost for all vehicles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show minimum, maximum, and average annual fuel cost for all vehicles.[/QUESTION][SQL]SELECT MIN(v.Annual_fuel_cost) AS min_annual_fuel_cost, MAX(v.Annual_fuel_cost) AS max_annual_fuel_cost, AVG(v.Annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles v;
### TaskGenerate a SQL query to answer [QUESTION]What are the minimum, maximum, and average annual fuel costs across all vehicles?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the minimum, maximum, and average annual fuel costs across all vehicles?[/QUESTION][SQL]SELECT MIN(v.Annual_fuel_cost) AS min_annual_fuel_cost, MAX(v.Annual_fuel_cost) AS max_annual_fuel_cost, AVG(v.Annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles v;
### TaskGenerate a SQL query to answer [QUESTION]Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.[/QUESTION][SQL]SELECT v.name, v.model_year FROM Vehicles v WHERE v.city_fuel_economy_rate <= v.highway_fuel_economy_rate ORDER BY v.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?[/QUESTION][SQL]SELECT v.name, v.model_year FROM Vehicles v WHERE v.city_fuel_economy_rate <= v.highway_fuel_economy_rate ORDER BY v.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.[/QUESTION][SQL]SELECT v.type_of_powertrain, AVG(v.annual_fuel_cost) AS average_annual_fuel_cost FROM Vehicles v GROUP BY v.type_of_powertrain HAVING COUNT(v.id) >= 2 ORDER BY average_annual_fuel_cost NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?[/QUESTION][SQL]SELECT v.type_of_powertrain, AVG(v.annual_fuel_cost) AS average_annual_fuel_cost FROM Vehicles v GROUP BY v.type_of_powertrain HAVING COUNT(v.id) >= 2 ORDER BY average_annual_fuel_cost NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the name, age, membership credit for all customers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name, age, membership credit for all customers?[/QUESTION][SQL]SELECT c.name, c.age, c.membership_credit FROM Customers c ORDER BY c.id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names, ages, and membership credits for all customers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names, ages, and membership credits for all customers?[/QUESTION][SQL]SELECT c.name, c.age, c.membership_credit FROM Customers c ORDER BY c.id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the name and age of the customer with maximum membership credit.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name and age of the customer with maximum membership credit.[/QUESTION][SQL]SELECT c.name, c.age FROM Customers c WHERE c.membership_credit = (SELECT MAX(membership_credit) FROM Customers);
### TaskGenerate a SQL query to answer [QUESTION]What is the name and age of the customer with the most membership credit?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and age of the customer with the most membership credit?[/QUESTION][SQL]SELECT c.name, c.age FROM Customers c ORDER BY c.membership_credit DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the average age for customers with a membership credit above the average?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average age for customers with a membership credit above the average?[/QUESTION][SQL]SELECT AVG(c.age) AS average_age FROM Customers c WHERE c.membership_credit > (SELECT AVG(membership_credit) FROM Customers);
### TaskGenerate a SQL query to answer [QUESTION]Return the average age for customers who have membership above the average across all customers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the average age for customers who have membership above the average across all customers.[/QUESTION][SQL]SELECT AVG(c.age) AS average_age FROM Customers c WHERE c.membership_credit > (SELECT AVG(membership_credit) FROM Customers);
### TaskGenerate a SQL query to answer [QUESTION]Show all information for all discounts.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all information for all discounts.[/QUESTION][SQL]SELECT d.id, d.name, d.membership_credit FROM Discount d ORDER BY d.id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return all information about discounts.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return all information about discounts.[/QUESTION][SQL]SELECT d.id, d.name, d.membership_credit FROM Discount d ORDER BY d.id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the name and total hours of renting for each vehicle.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name and total hours of renting for each vehicle.[/QUESTION][SQL]SELECT v.name AS vehicle_name, SUM(rh.total_hours) AS total_rental_hours FROM Renting_history rh JOIN Vehicles v ON rh.vehicles_id = v.id GROUP BY v.name ORDER BY total_rental_hours DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and total rental hours for each vehicle?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and total rental hours for each vehicle?[/QUESTION][SQL]SELECT v.name AS vehicle_name, SUM(rh.total_hours) AS total_rental_hours FROM Renting_history rh JOIN Vehicles v ON rh.vehicles_id = v.id GROUP BY v.name ORDER BY total_rental_hours DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the name of vehicles with no renting history.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name of vehicles with no renting history.[/QUESTION][SQL]SELECT v.name FROM Vehicles v WHERE v.id NOT IN (SELECT rh.vehicles_id FROM Renting_history rh)
### TaskGenerate a SQL query to answer [QUESTION]What are the names of vehicles that have never been rented?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of vehicles that have never been rented?[/QUESTION][SQL]SELECT v.name FROM Vehicles v WHERE v.id NOT IN (SELECT rh.vehicles_id FROM Renting_history rh) ORDER BY v.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the name of customer with at least two renting history records.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name of customer with at least two renting history records.[/QUESTION][SQL]SELECT c.name FROM Customers c JOIN Renting_history rh ON c.id = rh.customer_id GROUP BY c.name HAVING COUNT(rh.id) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of customers who have two or more records of rental history?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of customers who have two or more records of rental history?[/QUESTION][SQL]SELECT c.name FROM Customers c JOIN Renting_history rh ON c.id = rh.customer_id GROUP BY c.name HAVING COUNT(rh.id) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]Show the name and model year of the vehicle with most number of renting history records.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name and model year of the vehicle with most number of renting history records.[/QUESTION][SQL]SELECT v.name, v.model_year FROM Vehicles v JOIN Renting_history rh ON v.id = rh.vehicles_id GROUP BY v.name, v.model_year ORDER BY COUNT(rh.id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name and model year of the vehicle which has been rented the most times?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and model year of the vehicle which has been rented the most times?[/QUESTION][SQL]SELECT v.name, v.model_year FROM Vehicles v JOIN Renting_history rh ON v.id = rh.vehicles_id GROUP BY v.name, v.model_year ORDER BY COUNT(rh.id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show the vehicle name with a descending order of total hours of renting.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the vehicle name with a descending order of total hours of renting.[/QUESTION][SQL]SELECT v.name, SUM(rh.total_hours) AS total_rental_hours FROM Renting_history rh JOIN Vehicles v ON rh.vehicles_id = v.id GROUP BY v.name ORDER BY total_rental_hours DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of vehicles, sorted descending by total hours of renting?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of vehicles, sorted descending by total hours of renting?[/QUESTION][SQL]SELECT v.name, SUM(rh.total_hours) AS total_rental_hours FROM Renting_history rh JOIN Vehicles v ON rh.vehicles_id = v.id GROUP BY v.name ORDER BY total_rental_hours DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the discount name with most number of renting history records?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the discount name with most number of renting history records?[/QUESTION][SQL]SELECT d.name, COUNT(rh.id) AS total_rentals FROM Renting_history rh JOIN Discount d ON rh.discount_id = d.id GROUP BY d.name ORDER BY total_rentals DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the name of the discount that corresponds to the most rental history records.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the name of the discount that corresponds to the most rental history records.[/QUESTION][SQL]SELECT d.name FROM Discount d JOIN Renting_history r ON d.id = r.discount_id GROUP BY d.name ORDER BY COUNT(r.id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and powertrain type of the cars that rented for more than 30 total hours.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and powertrain type of the cars that rented for more than 30 total hours.[/QUESTION][SQL]SELECT v.name AS vehicle_name, v.type_of_powertrain FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id WHERE r.total_hours > 30;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and powertrain types of cars that have more than 30 total rental hours?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and powertrain types of cars that have more than 30 total rental hours?[/QUESTION][SQL]SELECT v.name AS vehicle_name, v.type_of_powertrain FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id WHERE r.total_hours > 30 ORDER BY v.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the average city and highway fuel rates for cars with different powertrain types.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average city and highway fuel rates for cars with different powertrain types.[/QUESTION][SQL]SELECT v.type_of_powertrain, AVG(v.city_fuel_economy_rate) AS avg_city_fuel_rate, AVG(v.highway_fuel_economy_rate) AS avg_highway_fuel_rate FROM Vehicles v GROUP BY v.type_of_powertrain ORDER BY v.type_of_powertrain NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?[/QUESTION][SQL]SELECT v.type_of_powertrain, AVG(v.city_fuel_economy_rate) AS avg_city_fuel_economy_rate, AVG(v.highway_fuel_economy_rate) AS avg_highway_fuel_economy_rate FROM Vehicles v GROUP BY v.type_of_powertrain ORDER BY v.type_of_powertrain NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the average amount of a student loan?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average amount of a student loan?[/QUESTION][SQL]SELECT AVG(sl.amount_of_loan) AS average_amount FROM Student_Loans sl;
### TaskGenerate a SQL query to answer [QUESTION]Compute the average amount of student loans.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Compute the average amount of student loans.[/QUESTION][SQL]SELECT AVG(sl.amount_of_loan) AS average_amount_of_loan FROM Student_Loans sl;
### TaskGenerate a SQL query to answer [QUESTION]List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.[/QUESTION][SQL]SELECT s.student_id, s.bio_data FROM Students s JOIN Classes c ON s.student_id = c.student_id WHERE (SELECT COUNT(*) FROM Classes WHERE student_id = s.student_id) >= 2 AND (SELECT COUNT(*) FROM Detention WHERE student_id = s.student_id) < 2;
### TaskGenerate a SQL query to answer [QUESTION]What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?[/QUESTION][SQL]SELECT s.student_id, s.bio_data FROM Students s JOIN Classes c ON s.student_id = c.student_id WHERE (SELECT COUNT(*) FROM Classes WHERE student_id = s.student_id) >= 2 UNION SELECT d.student_id, d.detention_summary AS bio_data FROM Detention d GROUP BY d.student_id HAVING COUNT(d.detention_id) < 2;
### TaskGenerate a SQL query to answer [QUESTION]List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'[/QUESTION][SQL]SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.class_details ilike '%data%' AND c.class_details not ilike 'net%';
### TaskGenerate a SQL query to answer [QUESTION]Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.[/QUESTION][SQL]SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.class_details ilike '%data%' AND c.class_details not ilike 'net%';
### TaskGenerate a SQL query to answer [QUESTION]List the biographical data of the students who never had a detention or student loan.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the biographical data of the students who never had a detention or student loan.[/QUESTION][SQL]SELECT s.bio_data FROM Students s LEFT JOIN Detention d ON s.student_id = d.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE d.detention_id IS NULL AND sl.student_loan_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Which students never had a detention or student loan? Find their biographical data.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students never had a detention or student loan? Find their biographical data.[/QUESTION][SQL]SELECT s.bio_data FROM Students s WHERE s.student_id NOT IN (SELECT d.student_id FROM Detention d UNION SELECT sl.student_id FROM Student_Loans sl);
### TaskGenerate a SQL query to answer [QUESTION]What are the loan amounts and loan dates of the students who have at least 2 achievements?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the loan amounts and loan dates of the students who have at least 2 achievements?[/QUESTION][SQL]SELECT sl.amount_of_loan, sl.date_of_loan FROM Student_Loans sl JOIN Students s ON sl.student_id = s.student_id WHERE s.student_id IN (SELECT a.student_id FROM Achievements a GROUP BY a.student_id HAVING COUNT(a.achievement_id) >= 2);
### TaskGenerate a SQL query to answer [QUESTION]List the amount and date of loan for the students who have two or more achievements.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the amount and date of loan for the students who have two or more achievements.[/QUESTION][SQL]SELECT sl.amount_of_loan, sl.date_of_loan FROM Student_Loans sl JOIN Students s ON sl.student_id = s.student_id WHERE s.student_id IN (SELECT a.student_id FROM Achievements a GROUP BY a.student_id HAVING COUNT(a.achievement_id) >= 2);
### TaskGenerate a SQL query to answer [QUESTION]List the detail and id of the teacher who teaches the most courses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the detail and id of the teacher who teaches the most courses.[/QUESTION][SQL]SELECT t.teacher_details, COUNT(c.class_id) AS total_classes FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_details ORDER BY total_classes DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the detail and id of the teacher who teaches the largest number of courses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the detail and id of the teacher who teaches the largest number of courses?[/QUESTION][SQL]SELECT t.teacher_details, COUNT(c.class_id) AS total_classes FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_details ORDER BY total_classes DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct descriptions of all the detentions which have ever happened?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct descriptions of all the detentions which have ever happened?[/QUESTION][SQL]SELECT DISTINCT d.detention_summary FROM Detention d ORDER BY d.detention_summary;
### TaskGenerate a SQL query to answer [QUESTION]Return the distinct descriptions of all the detentions that have happened.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the distinct descriptions of all the detentions that have happened.[/QUESTION][SQL]SELECT DISTINCT d.detention_summary FROM Detention d ORDER BY d.detention_summary;
### TaskGenerate a SQL query to answer [QUESTION]List the personal details and the address type descriptions of all the students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the personal details and the address type descriptions of all the students.[/QUESTION][SQL]SELECT s.student_details, rat.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Ref_Address_Types rat ON sa.address_type_code = rat.address_type_code
### TaskGenerate a SQL query to answer [QUESTION]What are the personal details and the address type descriptions of each student?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the personal details and the address type descriptions of each student?[/QUESTION][SQL]SELECT s.student_details, rat.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Ref_Address_Types rat ON sa.address_type_code = rat.address_type_code;
### TaskGenerate a SQL query to answer [QUESTION]List the the address details and the biographical information of the students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the the address details and the biographical information of the students.[/QUESTION][SQL]SELECT s.student_id, s.bio_data, sa.address_details FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the address details and biographical information of each student?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the address details and biographical information of each student?[/QUESTION][SQL]SELECT s.student_id, s.bio_data, sa.address_details FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id;
### TaskGenerate a SQL query to answer [QUESTION]List the biographical data and the date of the transcript of all the students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the biographical data and the date of the transcript of all the students.[/QUESTION][SQL]SELECT s.bio_data, t.date_of_transcript FROM Students AS s JOIN Transcripts AS t ON s.student_id = t.student_id
### TaskGenerate a SQL query to answer [QUESTION]What are the biographical data and the date of transcript issuance of each student?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the biographical data and the date of transcript issuance of each student?[/QUESTION][SQL]SELECT s.bio_data, t.date_of_transcript FROM Students AS s JOIN Transcripts AS t ON s.student_id = t.student_id;
### TaskGenerate a SQL query to answer [QUESTION]How many students got the most common result in the behavioral monitoring details? Also list the result details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many students got the most common result in the behavioral monitoring details? Also list the result details.[/QUESTION][SQL]SELECT COUNT(DISTINCT b.student_id), b.behaviour_monitoring_details FROM Behaviour_Monitoring b GROUP BY b.behaviour_monitoring_details ORDER BY COUNT(DISTINCT b.student_id) DESC LIMIT 1
### TaskGenerate a SQL query to answer [QUESTION]Find the most common result in the behavioral monitoring details. What are the count and the details of this result?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the most common result in the behavioral monitoring details. What are the count and the details of this result?[/QUESTION][SQL]SELECT b.behaviour_monitoring_details AS Most_Common_Result, COUNT(*) AS Count FROM Behaviour_Monitoring b GROUP BY b.behaviour_monitoring_details ORDER BY COUNT DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.[/QUESTION][SQL]SELECT s.student_id, s.bio_data, s.student_details FROM Students s JOIN (SELECT t.student_id, COUNT(t.transcript_details) AS transcript_count FROM Transcripts t GROUP BY t.student_id ORDER BY transcript_count DESC LIMIT 1) AS m ON s.student_id = m.student_id JOIN (SELECT b.student_id, COUNT(b.behaviour_monitoring_details) AS behaviour_count FROM Behaviour_Monitoring b GROUP BY b.student_id HAVING COUNT(b.behaviour_monitoring_details) >= 3) AS n ON s.student_id = n.student_id;
### TaskGenerate a SQL query to answer [QUESTION]Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.[/QUESTION][SQL]SELECT s.student_id, s.bio_data, s.student_details FROM Students s JOIN (SELECT t.transcript_details, COUNT(*) AS count FROM Transcripts t GROUP BY t.transcript_details ORDER BY count DESC LIMIT 1) m ON s.student_id = m.transcript_details AND s.student_id IN (SELECT b.behaviour_monitoring_details FROM Behaviour_Monitoring b GROUP BY b.behaviour_monitoring_details HAVING COUNT(b.behaviour_monitoring_details) >= 3);
### TaskGenerate a SQL query to answer [QUESTION]Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.[/QUESTION][SQL]SELECT s.student_id, s.bio_data FROM Students s JOIN Behaviour_Monitoring b ON s.student_id = b.student_id WHERE b.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]What is the biographical information of the students who got the most common result for their behaviour monitoring details?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the biographical information of the students who got the most common result for their behaviour monitoring details?[/QUESTION][SQL]SELECT s.bio_data FROM Students s JOIN Behaviour_Monitoring bm ON s.student_id = bm.student_id GROUP BY s.bio_data ORDER BY COUNT(bm.behaviour_monitoring_details) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which students have gone through any event? List the students' biographical data and event date.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students have gone through any event? List the students' biographical data and event date.[/QUESTION][SQL]SELECT s.bio_data, se.event_date FROM Students s JOIN Student_Events se ON s.student_id = se.student_id
### TaskGenerate a SQL query to answer [QUESTION]Find the biographical data and event date for students who participated in any events.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the biographical data and event date for students who participated in any events.[/QUESTION][SQL]SELECT s.bio_data, se.event_date FROM Students s JOIN Student_Events se ON s.student_id = se.student_id
### TaskGenerate a SQL query to answer [QUESTION]How many students have joined in the most common type of event? List the number, the event type and description.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many students have joined in the most common type of event? List the number, the event type and description.[/QUESTION][SQL]SELECT COUNT(DISTINCT se.student_id), et.event_type_description FROM Student_Events se JOIN Ref_Event_Types et ON se.event_type_code = et.event_type_code GROUP BY et.event_type_description ORDER BY COUNT(DISTINCT se.student_id) DESC LIMIT 1
### TaskGenerate a SQL query to answer [QUESTION]What is the type of event the most students joined? Give me the number of students, and the event type code and description.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the type of event the most students joined? Give me the number of students, and the event type code and description.[/QUESTION][SQL]SELECT se.event_type_code, COUNT(DISTINCT se.student_id) AS num_students FROM Student_Events se GROUP BY se.event_type_code ORDER BY num_students DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How are all the achievements described? List the achievement detail and the type description.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How are all the achievements described? List the achievement detail and the type description.[/QUESTION][SQL]SELECT a.achievement_details, r.achievement_type_description FROM Achievements a JOIN Ref_Achievement_Type r ON a.achievement_type_code = r.achievement_type_code ORDER BY a.achievement_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the achievement detail and the type description of each achievements?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the achievement detail and the type description of each achievements?[/QUESTION][SQL]SELECT a.achievement_details, r.achievement_type_description FROM Achievements a JOIN Ref_Achievement_Type r ON a.achievement_type_code = r.achievement_type_code ORDER BY a.achievement_id;
### TaskGenerate a SQL query to answer [QUESTION]How many teachers have taught a student who has not won any achievements?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many teachers have taught a student who has not won any achievements?[/QUESTION][SQL]SELECT COUNT(DISTINCT t.teacher_id) FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.student_id NOT IN (SELECT a.student_id FROM Achievements a);
### TaskGenerate a SQL query to answer [QUESTION]Count the number of teachers who have taught students who have never won an achievement.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of teachers who have taught students who have never won an achievement.[/QUESTION][SQL]SELECT COUNT(DISTINCT t.teacher_id) FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.student_id NOT IN (SELECT a.student_id FROM Achievements a);
### TaskGenerate a SQL query to answer [QUESTION]List the date of the transcripts and the transcript details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the date of the transcripts and the transcript details.[/QUESTION][SQL]SELECT t.date_of_transcript, t.transcript_details FROM Transcripts t ORDER BY t.date_of_transcript DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the date and detail of each transcript?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the date and detail of each transcript?[/QUESTION][SQL]SELECT t.date_of_transcript, t.transcript_details FROM Transcripts t ORDER BY t.date_of_transcript;
### TaskGenerate a SQL query to answer [QUESTION]List the achievement type code, achievement details and the date of the achievements.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the achievement type code, achievement details and the date of the achievements.[/QUESTION][SQL]SELECT a.achievement_type_code, a.achievement_details, a.date_achievement FROM Achievements a ORDER BY a.date_achievement DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the type code, details, and date of each achievement?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the type code, details, and date of each achievement?[/QUESTION][SQL]SELECT a.achievement_type_code, a.achievement_details, a.date_achievement FROM Achievements a ORDER BY a.date_achievement DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show the detention start time and end time of the detentions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the detention start time and end time of the detentions.[/QUESTION][SQL]SELECT d.datetime_detention_start, d.datetime_detention_end FROM Detention d ORDER BY d.detention_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the starting time and ending time of each detention record?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the starting time and ending time of each detention record?[/QUESTION][SQL]SELECT d.datetime_detention_start AS start_time, d.datetime_detention_end AS end_time FROM Detention d ORDER BY d.detention_id;
### TaskGenerate a SQL query to answer [QUESTION]Show the biographical information of the students whose details include the substring 'Suite'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the biographical information of the students whose details include the substring 'Suite'.[/QUESTION][SQL]SELECT s.student_id, s.bio_data FROM Students s WHERE s.student_details LIKE '%Suite%' ORDER BY s.student_id;
### TaskGenerate a SQL query to answer [QUESTION]Which students have 'Suite' as a substring in their details? Give me their biographical information.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students have 'Suite' as a substring in their details? Give me their biographical information.[/QUESTION][SQL]SELECT s.student_id, s.bio_data FROM Students s WHERE s.student_details LIKE '%Suite%' ORDER BY s.student_id;
### TaskGenerate a SQL query to answer [QUESTION]List the details for all the pairs of teachers and students who are in the same class.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the details for all the pairs of teachers and students who are in the same class.[/QUESTION][SQL]SELECT t.teacher_details, s.student_details FROM Teachers AS t JOIN Classes AS c ON t.teacher_id = c.teacher_id JOIN Students AS s ON c.student_id = s.student_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.[/QUESTION][SQL]SELECT t.teacher_details AS teacher, s.student_details AS student FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Students s ON c.student_id = s.student_id;
### TaskGenerate a SQL query to answer [QUESTION]How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.[/QUESTION][SQL]SELECT MAX(ta.class_count), ta.teacher_id FROM (SELECT c.teacher_id, COUNT(c.class_id) AS class_count FROM Classes c GROUP BY c.teacher_id) AS ta
### TaskGenerate a SQL query to answer [QUESTION]Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.[/QUESTION][SQL]SELECT t.teacher_id, COUNT(c.class_id) AS num_classes FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_id ORDER BY num_classes DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many courses do students take at most? Also find the id of the student who takes the most courses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many courses do students take at most? Also find the id of the student who takes the most courses.[/QUESTION][SQL]SELECT MAX(COUNT(c.class_id)) AS max_courses FROM Classes c GROUP BY c.student_id ORDER BY max_courses DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.[/QUESTION][SQL]SELECT s.student_id, COUNT(c.class_id) AS num_classes FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id ORDER BY num_classes DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which students take 2 courses? List student id and details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students take 2 courses? List student id and details.[/QUESTION][SQL]SELECT s.student_id, s.student_details FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.student_details HAVING COUNT(c.class_id) >= 2
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and details of the students who take 2 courses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and details of the students who take 2 courses?[/QUESTION][SQL]SELECT s.student_id, s.student_details FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.student_details HAVING COUNT(c.class_id) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]What is the least common detention type? Show the type code and the description.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the least common detention type? Show the type code and the description.[/QUESTION][SQL]SELECT dt.detention_type_code, dt.detention_type_description FROM Ref_Detention_Type dt ORDER BY COUNT(DISTINCT d.detention_id) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give me the type code and description of the least common detention type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the type code and description of the least common detention type.[/QUESTION][SQL]SELECT dt.detention_type_code, dt.detention_type_description FROM Ref_Detention_Type dt ORDER BY COUNT(DISTINCT d.detention_id) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which students have a student loan more than the average amount? List the students' biographical data and the details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which students have a student loan more than the average amount? List the students' biographical data and the details.[/QUESTION][SQL]SELECT s.student_id, s.bio_data, s.student_details, sl.amount_of_loan FROM Student_Loans sl JOIN Students s ON sl.student_id = s.student_id WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans);
### TaskGenerate a SQL query to answer [QUESTION]Find the biographical data and details for students whose student loan is above the average amount.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the biographical data and details for students whose student loan is above the average amount.[/QUESTION][SQL]SELECT s.student_id, s.bio_data, s.student_details FROM Student_Loans sl JOIN Students s ON sl.student_id = s.student_id WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans);
### TaskGenerate a SQL query to answer [QUESTION]When was the earliest date of loan?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]When was the earliest date of loan?[/QUESTION][SQL]SELECT MIN(sl.date_of_loan) FROM Student_Loans sl;
### TaskGenerate a SQL query to answer [QUESTION]Return the earliest date of loan in the record.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the earliest date of loan in the record.[/QUESTION][SQL]SELECT MIN(sl.date_of_loan) FROM Student_Loans sl
### TaskGenerate a SQL query to answer [QUESTION]Which student has the loan with the minimum value? List the student's biographical information.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which student has the loan with the minimum value? List the student's biographical information.[/QUESTION][SQL]SELECT s.student_id, s.bio_data FROM Student_Loans sl JOIN Students s ON sl.student_id = s.student_id ORDER BY sl.amount_of_loan ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the biographical information of the student with the smallest student loan.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the biographical information of the student with the smallest student loan.[/QUESTION][SQL]SELECT s.bio_data FROM Student_Loans sl JOIN Students s ON sl.student_id = s.student_id ORDER BY sl.amount_of_loan ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]When was the transcript issued for the student with loan of maximum value?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]When was the transcript issued for the student with loan of maximum value?[/QUESTION][SQL]SELECT t.date_of_transcript FROM Transcripts t JOIN Student_Loans sl ON t.student_id = sl.student_id WHERE sl.amount_of_loan = (SELECT MAX(sl2.amount_of_loan) FROM Student_Loans sl2);
### TaskGenerate a SQL query to answer [QUESTION]What is the transcript issuance date for the student with the largest amount of loan?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the transcript issuance date for the student with the largest amount of loan?[/QUESTION][SQL]SELECT t.date_of_transcript FROM Transcripts t JOIN Student_Loans sl ON t.student_id = sl.student_id ORDER BY sl.amount_of_loan DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which teachers have taught the student with the earliest transcript issuance? List the teacher details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which teachers have taught the student with the earliest transcript issuance? List the teacher details.[/QUESTION][SQL]SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Students s ON c.student_id = s.student_id JOIN Transcripts tr ON s.student_id = tr.student_id WHERE tr.date_of_transcript = (SELECT MIN(tr2.date_of_transcript) FROM Transcripts tr2);
### TaskGenerate a SQL query to answer [QUESTION]Find the details of the teachers who have taught the student with the earliest transcript issuance.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the details of the teachers who have taught the student with the earliest transcript issuance.[/QUESTION][SQL]SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Students s ON c.student_id = s.student_id JOIN Transcripts tr ON s.student_id = tr.student_id WHERE tr.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts);
### TaskGenerate a SQL query to answer [QUESTION]How much total loan does each student have? List the student ids and the amounts.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How much total loan does each student have? List the student ids and the amounts.[/QUESTION][SQL]SELECT sl.student_id, SUM(sl.amount_of_loan) AS total_amount_of_loan FROM Student_Loans sl GROUP BY sl.student_id ORDER BY sl.student_id;
### TaskGenerate a SQL query to answer [QUESTION]For each student, find the student id and the total amount of loan he or she has.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each student, find the student id and the total amount of loan he or she has.[/QUESTION][SQL]SELECT s.student_id, SUM(sl.amount_of_loan) AS total_amount_of_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id
### TaskGenerate a SQL query to answer [QUESTION]How many courses does each student take? List the student id, the student biographical data and the course count.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many courses does each student take? List the student id, the student biographical data and the course count.[/QUESTION][SQL]SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS number_of_classes FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data
### TaskGenerate a SQL query to answer [QUESTION]For each student, find the student id, student biographical data, and the number of courses he or she takes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each student, find the student id, student biographical data, and the number of courses he or she takes.[/QUESTION][SQL]SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS num_classes FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data
### TaskGenerate a SQL query to answer [QUESTION]How many students have gone through a detention?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many students have gone through a detention?[/QUESTION][SQL]SELECT COUNT(DISTINCT d.student_id) FROM Detention d;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of students who have a detention record.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of students who have a detention record.[/QUESTION][SQL]SELECT COUNT(DISTINCT d.student_id) FROM Detention d;
### TaskGenerate a SQL query to answer [QUESTION]What is the code and description of the most common student address type?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the code and description of the most common student address type?[/QUESTION][SQL]SELECT sat.address_type_code, COUNT(*) AS frequency FROM Students_Addresses sat GROUP BY sat.address_type_code ORDER BY frequency DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the most common student address type? Give me the code and description of the address type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most common student address type? Give me the code and description of the address type.[/QUESTION][SQL]SELECT sat.address_type_code, rat.address_type_description FROM Students_Addresses sat JOIN Ref_Address_Types rat ON sat.address_type_code = rat.address_type_code GROUP BY sat.address_type_code, rat.address_type_description ORDER BY COUNT(sat.student_address_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]For those students who have gone through an event, who do not have a student loan? List the students' biographical data[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For those students who have gone through an event, who do not have a student loan? List the students' biographical data[/QUESTION][SQL]SELECT s.bio_data FROM Students s JOIN Student_Events se ON s.student_id = se.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.student_id IS NULL ORDER BY s.student_id;
### TaskGenerate a SQL query to answer [QUESTION]Among the students who have an event record, who do not have a student loan? Return the students' biographical data.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Among the students who have an event record, who do not have a student loan? Return the students' biographical data.[/QUESTION][SQL]SELECT s.bio_data FROM Students s JOIN Student_Events se ON s.student_id = se.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.student_id IS NULL ORDER BY s.student_id;
### TaskGenerate a SQL query to answer [QUESTION]List the start time and the end time of the students' addresses for the students who have 2 transcripts.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the start time and the end time of the students' addresses for the students who have 2 transcripts.[/QUESTION][SQL]SELECT sa.date_from AS start_time, sa.date_to AS end_time FROM Students_Addresses sa JOIN Transcripts t ON sa.student_id = t.student_id GROUP BY sa.student_id, sa.date_from, sa.date_to HAVING COUNT(t.transcript_id) >= 2 ORDER BY sa.student_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the start time and end time of addresses for the students who receive 2 transcripts?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the start time and end time of addresses for the students who receive 2 transcripts?[/QUESTION][SQL]SELECT sa.date_from AS start_time, sa.date_to AS end_time FROM Students_Addresses sa JOIN Students s ON sa.student_id = s.student_id WHERE s.student_id IN (SELECT t.student_id FROM Transcripts t GROUP BY t.student_id HAVING COUNT(t.transcript_id) >= 2);
### TaskGenerate a SQL query to answer [QUESTION]When did all the detentions start?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]When did all the detentions start?[/QUESTION][SQL]SELECT MIN(d.datetime_detention_start) AS earliest_detention_start FROM Detention d;
### TaskGenerate a SQL query to answer [QUESTION]Give me the detention start date for all the detention records.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the detention start date for all the detention records.[/QUESTION][SQL]SELECT d.datetime_detention_start FROM Detention d ORDER BY d.datetime_detention_start;
### TaskGenerate a SQL query to answer [QUESTION]List all the author names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all the author names.[/QUESTION][SQL]SELECT DISTINCT a.Name FROM Author a ORDER BY a.Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all the authors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all the authors?[/QUESTION][SQL]SELECT DISTINCT a.Name FROM Author a;
### TaskGenerate a SQL query to answer [QUESTION]Show all Client names and their addresses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all Client names and their addresses.[/QUESTION][SQL]SELECT c.Name AS client_name, c.Address FROM Client c ORDER BY c.Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and addressed of all clients?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and addressed of all clients?[/QUESTION][SQL]SELECT c.Name, c.Address FROM Client c ORDER BY c.Name;
### TaskGenerate a SQL query to answer [QUESTION]List all Book titles, ISBNs, and sale prices.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all Book titles, ISBNs, and sale prices.[/QUESTION][SQL]SELECT b.title, b.isbn, b.saleprice FROM book b ORDER BY b.title;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles, ISBNs, and sale prices for all books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles, ISBNs, and sale prices for all books?[/QUESTION][SQL]SELECT b.title, b.isbn, b.saleprice FROM book b;
### TaskGenerate a SQL query to answer [QUESTION]How many books do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many books do we have?[/QUESTION][SQL]SELECT COUNT(*) FROM Book;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of books.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of books.[/QUESTION][SQL]SELECT COUNT(*) FROM Book;
### TaskGenerate a SQL query to answer [QUESTION]How many authors are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many authors are there?[/QUESTION][SQL]SELECT COUNT(*) FROM Author;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of authors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of authors.[/QUESTION][SQL]SELECT COUNT(*) FROM Author;
### TaskGenerate a SQL query to answer [QUESTION]How many clients are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many clients are there?[/QUESTION][SQL]SELECT COUNT(*) FROM Client;
### TaskGenerate a SQL query to answer [QUESTION]Return the number of clients.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the number of clients.[/QUESTION][SQL]SELECT COUNT(*) FROM Client;
### TaskGenerate a SQL query to answer [QUESTION]List names and addresses of all clients in alphabetical order by their names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List names and addresses of all clients in alphabetical order by their names.[/QUESTION][SQL]SELECT c.Name, c.Address FROM Client c ORDER BY c.Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and addressed of all clients, ordered alphabetically by name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and addressed of all clients, ordered alphabetically by name?[/QUESTION][SQL]SELECT c.Name, c.Address FROM Client c ORDER BY c.Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]Show all book titles and corresponding author names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all book titles and corresponding author names.[/QUESTION][SQL]SELECT b.title, a.name AS author_name FROM Book b JOIN Author_Book ab ON b.isbn = ab.isbn JOIN Author a ON ab.author = a.idauthor;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all books and their corresponding authors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all books and their corresponding authors?[/QUESTION][SQL]SELECT b.title AS book_title, a.name AS author_name FROM Book b JOIN Author_Book ab ON b.isbn = ab.isbn JOIN Author a ON ab.author = a.idauthor;
### TaskGenerate a SQL query to answer [QUESTION]Show all order ids and their client names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all order ids and their client names.[/QUESTION][SQL]SELECT o.IdOrder, c.Name FROM Orders o JOIN Client c ON o.IdClient = c.IdClient;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of all orders and the corresponding client names?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of all orders and the corresponding client names?[/QUESTION][SQL]SELECT o.IdOrder, c.Name FROM Orders o JOIN Client c ON o.IdClient = c.IdClient;
### TaskGenerate a SQL query to answer [QUESTION]Show all author names and the numbers of books each has written.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all author names and the numbers of books each has written.[/QUESTION][SQL]SELECT a.Name AS author_name, COUNT(ab.ISBN) AS number_of_books FROM Author a JOIN Author_Book ab ON a.idAuthor = ab.Author GROUP BY a.Name ORDER BY number_of_books DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all the authors, and how many books has each written?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all the authors, and how many books has each written?[/QUESTION][SQL]SELECT a.Name AS author_name, COUNT(b.ISBN) AS number_of_books FROM Author a JOIN Author_Book ab ON a.idAuthor = ab.Author JOIN Book b ON ab.ISBN = b.ISBN GROUP BY a.Name ORDER BY number_of_books DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show all book isbns and the numbers of orders for each.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all book isbns and the numbers of orders for each.[/QUESTION][SQL]SELECT bo.ISBN, COUNT(*) AS num_orders FROM Books_Order bo GROUP BY bo.ISBN ORDER BY num_orders DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are all isbns for each book, and how many times has each been ordered?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all isbns for each book, and how many times has each been ordered?[/QUESTION][SQL]SELECT b.isbn, COUNT(b.isbn) AS total_orders FROM Book b JOIN Books_Order bo ON b.isbn = bo.isbn GROUP BY b.isbn ORDER BY total_orders DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show all book isbns and the total amount ordered for each.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all book isbns and the total amount ordered for each.[/QUESTION][SQL]SELECT bo.ISBN, SUM(bo.amount) AS total_amount FROM Books_Order bo GROUP BY bo.ISBN ORDER BY total_amount DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the isbns for all books, and what is the total amount ordered for each?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the isbns for all books, and what is the total amount ordered for each?[/QUESTION][SQL]SELECT b.isbn, SUM(p.amount) AS total_amount_ordered FROM book b JOIN books_order p ON b.isbn = p.isbn GROUP BY b.isbn ORDER BY total_amount_ordered DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show the book title corresponding to the book with the most number of orders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the book title corresponding to the book with the most number of orders.[/QUESTION][SQL]SELECT b.title FROM book b JOIN (SELECT bo.isbn, COUNT(*) AS num_orders FROM books_order bo GROUP BY bo.isbn ORDER BY num_orders DESC LIMIT 1) o ON b.isbn = o.isbn;
### TaskGenerate a SQL query to answer [QUESTION]What is the title of the book that has been ordered the greatest number of times?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title of the book that has been ordered the greatest number of times?[/QUESTION][SQL]SELECT b.title FROM Book b JOIN (SELECT bo.isbn, COUNT(*) AS total_orders FROM Books_Order bo GROUP BY bo.isbn ORDER BY total_orders DESC LIMIT 1) o ON b.isbn = o.isbn;
### TaskGenerate a SQL query to answer [QUESTION]Show the book title and purchase price of the book that has had the greatest amount in orders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the book title and purchase price of the book that has had the greatest amount in orders.[/QUESTION][SQL]SELECT b.title, b.purchaseprice FROM book b JOIN (SELECT bo.isbn, COUNT(*) AS total_orders FROM books_order bo GROUP BY bo.isbn ORDER BY total_orders DESC LIMIT 1) o ON b.isbn = o.isbn;
### TaskGenerate a SQL query to answer [QUESTION]What is the title and purchase price of the book that has the highest total order amount?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title and purchase price of the book that has the highest total order amount?[/QUESTION][SQL]SELECT b.title, SUM(bop.amount) AS total_amount FROM Book b JOIN Books_Order bop ON b.isbn = bop.isbn GROUP BY b.title ORDER BY total_amount DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show the titles of books that have been ordered.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the titles of books that have been ordered.[/QUESTION][SQL]SELECT DISTINCT b.title FROM book b JOIN Books_Order bo ON b.isbn = bo.isbn;
### TaskGenerate a SQL query to answer [QUESTION]What are the different titles of books that have been ordered in the past?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different titles of books that have been ordered in the past?[/QUESTION][SQL]SELECT DISTINCT b.title FROM book b JOIN books_order bo ON b.isbn = bo.isbn;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of clients who have ordered at least once.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of clients who have ordered at least once.[/QUESTION][SQL]SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name HAVING COUNT(o.IdOrder) >= 1 ORDER BY c.Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the different clients who have made an order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the different clients who have made an order?[/QUESTION][SQL]SELECT DISTINCT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient ORDER BY c.Name;
### TaskGenerate a SQL query to answer [QUESTION]Show all client names and the number of orders each has made.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all client names and the number of orders each has made.[/QUESTION][SQL]SELECT c.Name AS client_name, COUNT(o.IdOrder) AS num_orders FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name ORDER BY num_orders DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all the clients, and how many times has each of them ordered?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all the clients, and how many times has each of them ordered?[/QUESTION][SQL]SELECT c.Name AS client_name, COUNT(o.IdOrder) AS number_of_orders FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name ORDER BY number_of_orders DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the client with the most number of orders?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the client with the most number of orders?[/QUESTION][SQL]SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name ORDER BY COUNT(o.IdOrder) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the name of the client who has made the most orders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the name of the client who has made the most orders.[/QUESTION][SQL]SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name ORDER BY COUNT(o.IdOrder) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show the client names and their total amounts of books ordered.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the client names and their total amounts of books ordered.[/QUESTION][SQL]SELECT c.Name AS client_name, SUM(b.amount) AS total_books_ordered FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order b ON o.IdOrder = b.IdOrder GROUP BY c.Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all the clients, and the total amount of books ordered by each?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all the clients, and the total amount of books ordered by each?[/QUESTION][SQL]SELECT c.Name AS client_name, SUM(b.amount) AS total_books_ordered FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order b ON o.IdOrder = b.IdOrder GROUP BY c.Name ORDER BY total_books_ordered DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show the client name who has the most total amount of books ordered.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the client name who has the most total amount of books ordered.[/QUESTION][SQL]SELECT c.Name, SUM(b.amount) AS TotalAmount FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order b ON o.IdOrder = b.IdOrder GROUP BY c.Name ORDER BY TotalAmount DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the client who has ordered the greatest total amount of books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the client who has ordered the greatest total amount of books?[/QUESTION][SQL]SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient WHERE o.IdOrder IN (SELECT bo.IdOrder FROM Books_Order bo GROUP BY bo.IdOrder ORDER BY SUM(bo.amount) DESC LIMIT 1);
### TaskGenerate a SQL query to answer [QUESTION]Show all book titles for books that have no orders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all book titles for books that have no orders.[/QUESTION][SQL]SELECT b.title FROM Book b WHERE b.isbn NOT IN (SELECT bo.isbn FROM Books_Order bo);
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of books that have never been ordered?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of books that have never been ordered?[/QUESTION][SQL]SELECT b.title FROM book b WHERE b.isbn NOT IN (SELECT bo.isbn FROM books_order bo);
### TaskGenerate a SQL query to answer [QUESTION]Show all client names for clients who have not made orders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all client names for clients who have not made orders.[/QUESTION][SQL]SELECT c.Name FROM Client c WHERE c.IdClient NOT IN (SELECT o.IdClient FROM Orders o);
### TaskGenerate a SQL query to answer [QUESTION]What are the names of clients who have never made an order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of clients who have never made an order?[/QUESTION][SQL]SELECT c.Name FROM Client c WHERE c.IdClient NOT IN (SELECT o.IdClient FROM Orders o);
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum and the minimum sale price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum and the minimum sale price?[/QUESTION][SQL]SELECT MAX(b.SalePrice), MIN(b.SalePrice) FROM Book b;
### TaskGenerate a SQL query to answer [QUESTION]Give the maximum and minimum sale price of books.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the maximum and minimum sale price of books.[/QUESTION][SQL]SELECT MAX(b.SalePrice), MIN(b.SalePrice) FROM Book b;
### TaskGenerate a SQL query to answer [QUESTION]What is the average purchase price and the average sale price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average purchase price and the average sale price?[/QUESTION][SQL]SELECT AVG(b.purchaseprice) AS avg_purchase_price, AVG(b.saleprice) AS avg_sale_price FROM book b;
### TaskGenerate a SQL query to answer [QUESTION]Give the average purchase price and average sale price for books.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the average purchase price and average sale price for books.[/QUESTION][SQL]SELECT AVG(b.purchaseprice) AS avg_purchase_price, AVG(b.saleprice) AS avg_sale_price FROM Book b;
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum difference between the sale price and purchase price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum difference between the sale price and purchase price?[/QUESTION][SQL]SELECT MAX(b.SalePrice - b.PurchasePrice) AS Max_Difference FROM Book b;
### TaskGenerate a SQL query to answer [QUESTION]Return the largest difference in sale price and purchase price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the largest difference in sale price and purchase price.[/QUESTION][SQL]SELECT MAX(b.SalePrice - b.PurchasePrice) AS Max_Difference FROM Book b;
### TaskGenerate a SQL query to answer [QUESTION]List all book titles which have sale prices higher than the average.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all book titles which have sale prices higher than the average.[/QUESTION][SQL]SELECT b.title FROM book b WHERE b.saleprice > (SELECT AVG(b2.saleprice) FROM book b2);
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of books with sale prices above the average sale price across all books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of books with sale prices above the average sale price across all books?[/QUESTION][SQL]SELECT b.title FROM book b WHERE b.saleprice > (SELECT AVG(b2.saleprice) FROM book b2);
### TaskGenerate a SQL query to answer [QUESTION]List all book titles which have the lowest sale price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all book titles which have the lowest sale price.[/QUESTION][SQL]SELECT b.title FROM book b WHERE b.saleprice = (SELECT MIN(b2.saleprice) FROM book b2);
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of books that have a sale price equal to the lowest sale price across all books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of books that have a sale price equal to the lowest sale price across all books?[/QUESTION][SQL]SELECT b.title FROM book b WHERE b.saleprice = (SELECT MIN(b2.saleprice) FROM book b2);
### TaskGenerate a SQL query to answer [QUESTION]List all book titles which have highest purchase prices.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all book titles which have highest purchase prices.[/QUESTION][SQL]SELECT b.title FROM book b WHERE b.purchaseprice = (SELECT MAX(b2.purchaseprice) FROM book b2);
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of books with the highest purchase price across all books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of books with the highest purchase price across all books?[/QUESTION][SQL]SELECT b.title FROM book b ORDER BY b.purchaseprice DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the average sale price of books written by George Orwell?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average sale price of books written by George Orwell?[/QUESTION][SQL]SELECT AVG(b.SalePrice) AS average_sale_price FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN WHERE LOWER(ab.Author::VARCHAR) = 'george orwell';
### TaskGenerate a SQL query to answer [QUESTION]Give the average sale price of books authored by George Orwell.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the average sale price of books authored by George Orwell.[/QUESTION][SQL]SELECT AVG(b.SalePrice) AS Average_Sale_Price FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN WHERE LOWER(ab.Author::VARCHAR) = 'george orwell';
### TaskGenerate a SQL query to answer [QUESTION]What are sale prices of books written by Plato?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are sale prices of books written by Plato?[/QUESTION][SQL]SELECT b.saleprice FROM book b JOIN author_book ab ON b.isbn = ab.isbn WHERE LOWER(ab.author::text) = 'plato';
### TaskGenerate a SQL query to answer [QUESTION]Return the sale prices of books authored by Plato.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the sale prices of books authored by Plato.[/QUESTION][SQL]SELECT b.saleprice FROM book b JOIN author_book ab ON b.isbn = ab.isbn WHERE LOWER(ab.author::text) = 'plato';
### TaskGenerate a SQL query to answer [QUESTION]What is the title of the book written by George Orwell that has the lowest sale price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title of the book written by George Orwell that has the lowest sale price?[/QUESTION][SQL]SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn WHERE LOWER(ab.author::text) = 'george orwell' ORDER BY b.saleprice ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the title of book by George Orwell that has the lowest saleprice.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the title of book by George Orwell that has the lowest saleprice.[/QUESTION][SQL]SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn WHERE LOWER(ab.author::text) = 'george orwell' ORDER BY b.saleprice ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the title of the book written by Plato has price lower than the average sale price of all books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title of the book written by Plato has price lower than the average sale price of all books?[/QUESTION][SQL]SELECT b.title FROM Book b JOIN Author_Book ab ON b.isbn = ab.isbn WHERE b.author = (SELECT idauthor FROM author WHERE name = 'Plato') AND b.saleprice < (SELECT AVG(saleprice) FROM Book);
### TaskGenerate a SQL query to answer [QUESTION]Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.[/QUESTION][SQL]SELECT b.title FROM book b JOIN author_a ON b.isbn = author_a.isbn WHERE LOWER(b.author) = 'plato' AND b.saleprice < (SELECT AVG(saleprice) FROM book);
### TaskGenerate a SQL query to answer [QUESTION]Who is the author of the book "Pride and Prejudice"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who is the author of the book "Pride and Prejudice"?[/QUESTION][SQL]SELECT b.author FROM book b WHERE b.title = 'Pride and Prejudice';
### TaskGenerate a SQL query to answer [QUESTION]Give the name of the author who wrote the book titled Pride and Prejudice.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the name of the author who wrote the book titled Pride and Prejudice.[/QUESTION][SQL]SELECT a.Name FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE LOWER(b.Title) = 'pride and prejudice';
### TaskGenerate a SQL query to answer [QUESTION]List titles of all books published by an author whose name contains the string 'Plato'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List titles of all books published by an author whose name contains the string 'Plato'?[/QUESTION][SQL]SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE LOWER(a.name) LIKE '%plato%' ORDER BY b.title;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of all books written by an author with a name that contains Plato?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of all books written by an author with a name that contains Plato?[/QUESTION][SQL]SELECT b.title FROM book b JOIN author_a ON b.isbn = author_a.isbn JOIN author ON author_a.author = author.idauthor WHERE LOWER(author.name) LIKE '%plato%' ORDER BY b.title;
### TaskGenerate a SQL query to answer [QUESTION]How many orders do we have for "Pride and Prejudice"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many orders do we have for "Pride and Prejudice"?[/QUESTION][SQL]SELECT COUNT(DISTINCT o.IdOrder) FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE LOWER(b.Title) = 'pride and prejudice';
### TaskGenerate a SQL query to answer [QUESTION]Return the number of orders received for Pride and Prejudice.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the number of orders received for Pride and Prejudice.[/QUESTION][SQL]SELECT COUNT(DISTINCT o.IdOrder) AS num_orders FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE LOWER(b.Title) = 'pride and prejudice';
### TaskGenerate a SQL query to answer [QUESTION]Show ids for orders including both "Pride and Prejudice" and "The Little Prince".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show ids for orders including both "Pride and Prejudice" and "The Little Prince".[/QUESTION][SQL]SELECT o.IdOrder FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder WHERE bo.ISBN IN (SELECT b.ISBN FROM Book b WHERE LOWER(b.Title) = 'pride and prejudice') AND bo.ISBN IN (SELECT b.ISBN FROM Book b WHERE LOWER(b.Title) = 'the little prince');
### TaskGenerate a SQL query to answer [QUESTION]What are the order ids for orders that include both Pride and Prejudice and The Little Prince?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the order ids for orders that include both Pride and Prejudice and The Little Prince?[/QUESTION][SQL]SELECT DISTINCT o.IdOrder FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder WHERE EXISTS (SELECT 1 FROM Book b WHERE b.ISBN = '978-2-253-16475-5' AND bo.ISBN = b.ISBN) AND EXISTS (SELECT 1 FROM Book c WHERE c.ISBN = '978-2-07-034362-7' AND bo.ISBN = c.ISBN);
### TaskGenerate a SQL query to answer [QUESTION]Show all book isbns which were ordered by both client Peter Doe and client James Smith.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all book isbns which were ordered by both client Peter Doe and client James Smith.[/QUESTION][SQL]SELECT DISTINCT bo.ISBN FROM Books_Order bo JOIN Orders o ON bo.IdOrder = o.IdOrder WHERE o.IdClient IN ('PETER DOE', 'JAMES SMITH') GROUP BY bo.ISBN HAVING COUNT(DISTINCT o.IdClient) = 2;
### TaskGenerate a SQL query to answer [QUESTION]What are the isbns of books ordered by both clients named Peter Doe and James Smith?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the isbns of books ordered by both clients named Peter Doe and James Smith?[/QUESTION][SQL]SELECT DISTINCT bo.ISBN FROM Books_Order bo JOIN Orders o ON bo.IdOrder = o.IdOrder WHERE o.IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') AND o.IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith');
### TaskGenerate a SQL query to answer [QUESTION]Find the title of books which are ordered by client Peter Doe but not client James Smith.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the title of books which are ordered by client Peter Doe but not client James Smith.[/QUESTION][SQL]SELECT DISTINCT b.title FROM book b JOIN books_order bo ON b.isbn = bo.isbn WHERE bo.idorder IN (SELECT o.idorder FROM orders o JOIN client c ON o.idclient = c.idclient WHERE c.name ilike '%Peter%Doe%') AND bo.idorder NOT IN (SELECT o.idorder FROM orders o JOIN client c ON o.idclient = c.idclient WHERE c.name ilike '%James%Smith%');
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?[/QUESTION][SQL]SELECT DISTINCT b.title FROM book b JOIN books_order bo ON b.isbn = bo.isbn WHERE bo.idorder IN (SELECT o.idorder FROM orders o WHERE o.idclient = 'Peter Doe') AND bo.idorder NOT IN (SELECT o.idorder FROM orders o WHERE o.idclient = 'James Smith');
### TaskGenerate a SQL query to answer [QUESTION]Show all client names who have orders for "Pride and Prejudice".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all client names who have orders for "Pride and Prejudice".[/QUESTION][SQL]SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title ilike '%Pride%and%Prejudice%' GROUP BY c.Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of clients who have ordered Pride and Prejudice?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of clients who have ordered Pride and Prejudice?[/QUESTION][SQL]SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title ilike '%Pride%and%Prejudice%'
### TaskGenerate a SQL query to answer [QUESTION]How many books are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many books are there?[/QUESTION][SQL]SELECT COUNT(*) FROM book;
### TaskGenerate a SQL query to answer [QUESTION]List the titles of books in ascending alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the titles of books in ascending alphabetical order.[/QUESTION][SQL]SELECT b.title FROM book b ORDER BY b.title ASC;
### TaskGenerate a SQL query to answer [QUESTION]List the titles of books in descending order of pages.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the titles of books in descending order of pages.[/QUESTION][SQL]SELECT b.title FROM book b ORDER BY b.pages DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the types and release dates of books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the types and release dates of books?[/QUESTION][SQL]SELECT b.type, b.release FROM book b ORDER BY b.type NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum number of chapters for each book?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum number of chapters for each book?[/QUESTION][SQL]SELECT b.title, MIN(b.chapters) AS min_chapters, MAX(b.chapters) AS max_chapters FROM book b GROUP BY b.title ORDER BY b.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of books that are not "Poet"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of books that are not "Poet"?[/QUESTION][SQL]SELECT b.title FROM book b WHERE b.type!= 'Poet' ORDER BY b.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the average rating in reviews?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average rating in reviews?[/QUESTION][SQL]SELECT AVG(r.Rating) AS Average_Rating FROM review r;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and ratings of books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and ratings of books?[/QUESTION][SQL]SELECT b.title, r.rating FROM book b JOIN review r ON b.book_id = r.book_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the rating of the book with the largest number of chapters?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the rating of the book with the largest number of chapters?[/QUESTION][SQL]SELECT r.Rating FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY b.Chapters DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the rank of the book with the smallest number of pages?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the rank of the book with the smallest number of pages?[/QUESTION][SQL]SELECT b.Book_ID, b.Pages, r.Rank FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY b.Pages ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the title of the book with the highest rank in the review?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title of the book with the highest rank in the review?[/QUESTION][SQL]SELECT b.title FROM book b JOIN review r ON b.book_id = r.book_id WHERE r.rank = (SELECT MAX(r2.rank) FROM review r2);
### TaskGenerate a SQL query to answer [QUESTION]What is the average number of readers for books of type "Novel"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average number of readers for books of type "Novel"?[/QUESTION][SQL]SELECT AVG(r.Readers_in_Million) AS average_readers FROM book b JOIN review r ON b.Book_ID = r.Book_ID WHERE LOWER(b.Type) = 'novel';
### TaskGenerate a SQL query to answer [QUESTION]For each book type return the type and the number of books of that type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each book type return the type and the number of books of that type.[/QUESTION][SQL]SELECT b.type, COUNT(b.book_id) AS total_books FROM book b GROUP BY b.type ORDER BY total_books DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the most common type of books?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most common type of books?[/QUESTION][SQL]SELECT b.type, COUNT(b.type) AS count_type FROM book b GROUP BY b.type ORDER BY count_type DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the types of books that have at least three books belonging to?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the types of books that have at least three books belonging to?[/QUESTION][SQL]SELECT b.type FROM book b GROUP BY b.type HAVING COUNT(b.book_id) >= 3 ORDER BY b.type NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the titles of books in ascending order of the ratings in review?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the titles of books in ascending order of the ratings in review?[/QUESTION][SQL]SELECT b.title, r.rating FROM book b JOIN review r ON b.book_id = r.book_id ORDER BY r.rating ASC;
### TaskGenerate a SQL query to answer [QUESTION]List the title and audio length for all the books in descending order of the number of readers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the title and audio length for all the books in descending order of the number of readers.[/QUESTION][SQL]SELECT b.title, b.audio, r.readers_in_million FROM book b JOIN review r ON b.book_id = r.book_id ORDER BY r.readers_in_million DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many books do not have reviews?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many books do not have reviews?[/QUESTION][SQL]SELECT COUNT(DISTINCT b.Book_ID) FROM book b LEFT JOIN review r ON b.Book_ID = r.Book_ID WHERE r.Book_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.[/QUESTION][SQL]SELECT DISTINCT b.Type FROM book b WHERE (b.Chapters > 75 OR b.Chapters < 50) ORDER BY b.Type NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many distinct types of book are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many distinct types of book are there?[/QUESTION][SQL]SELECT COUNT(DISTINCT b.Type) FROM book b;
### TaskGenerate a SQL query to answer [QUESTION]What are the type and title of the books that are not rated?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the type and title of the books that are not rated?[/QUESTION][SQL]SELECT b.type, b.title FROM book b LEFT JOIN review r ON b.book_id = r.book_id WHERE r.rating IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]How many customers are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers are there?[/QUESTION][SQL]SELECT COUNT(*) FROM customer;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of customers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of customers.[/QUESTION][SQL]SELECT COUNT(*) FROM customer;
### TaskGenerate a SQL query to answer [QUESTION]List the names of customers in ascending order of level of membership.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of customers in ascending order of level of membership.[/QUESTION][SQL]SELECT c.name, c.level_of_membership FROM customer c ORDER BY c.level_of_membership ASC;
### TaskGenerate a SQL query to answer [QUESTION]Sort all the customers by the level of membership in ascending order, and return the customer names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Sort all the customers by the level of membership in ascending order, and return the customer names.[/QUESTION][SQL]SELECT c.Name FROM customer c ORDER BY c.Level_of_Membership ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the nationalities and card credits of customers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the nationalities and card credits of customers?[/QUESTION][SQL]SELECT c.Nationality, c.Card_Credit FROM customer c ORDER BY c.Nationality NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the nationality and card credit of each customer.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the nationality and card credit of each customer.[/QUESTION][SQL]SELECT c.Name, c.Nationality, c.Card_Credit FROM customer c
### TaskGenerate a SQL query to answer [QUESTION]Show the names of customers with nationality "England" or "Australia".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of customers with nationality "England" or "Australia".[/QUESTION][SQL]SELECT c.Name FROM customer c WHERE LOWER(c.Nationality) IN ('england', 'australia') ORDER BY c.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which customers have nationality "England" or "Australia"? Give me their names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customers have nationality "England" or "Australia"? Give me their names.[/QUESTION][SQL]SELECT c.Name FROM customer c WHERE LOWER(c.Nationality) IN ('england', 'australia') ORDER BY c.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the average card credit of customers with membership level higher than 1?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average card credit of customers with membership level higher than 1?[/QUESTION][SQL]SELECT AVG(c.Card_Credit) AS average_card_credit FROM customer c WHERE c.Level_of_Membership > 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the average card credit customers whose membership level is above 1.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average card credit customers whose membership level is above 1.[/QUESTION][SQL]SELECT AVG(c.Card_Credit) AS average_card_credit FROM customer c WHERE c.Level_of_Membership > 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the card credit of the customer with the highest membership level?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the card credit of the customer with the highest membership level?[/QUESTION][SQL]SELECT c.Card_Credit FROM customer c WHERE c.Level_of_Membership = (SELECT MAX(c2.Level_of_Membership) FROM customer c2);
### TaskGenerate a SQL query to answer [QUESTION]Find the customer with the highest membership level and return his or her card credit.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the customer with the highest membership level and return his or her card credit.[/QUESTION][SQL]SELECT c.Card_Credit FROM customer c WHERE c.Level_of_Membership = (SELECT MAX(c2.Level_of_Membership) FROM customer c2);
### TaskGenerate a SQL query to answer [QUESTION]Show different nationalities of customers, along with the number of customers of each nationality.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show different nationalities of customers, along with the number of customers of each nationality.[/QUESTION][SQL]SELECT c.Nationality, COUNT(c.Customer_ID) AS Number_of_Customers FROM customer c GROUP BY c.Nationality ORDER BY Number_of_Customers DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many customers are associated with each nationality? List the nationality and the number of customers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers are associated with each nationality? List the nationality and the number of customers.[/QUESTION][SQL]SELECT c.Nationality, COUNT(c.Customer_ID) AS customer_count FROM customer c GROUP BY c.Nationality ORDER BY customer_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the most common nationality of customers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the most common nationality of customers.[/QUESTION][SQL]SELECT c.Nationality FROM customer c GROUP BY c.Nationality ORDER BY COUNT(c.Customer_ID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which nationality does the most customers have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which nationality does the most customers have?[/QUESTION][SQL]SELECT c.Nationality, COUNT(c.Customer_ID) AS number_of_customers FROM customer c GROUP BY c.Nationality ORDER BY number_of_customers DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.[/QUESTION][SQL]SELECT c.Nationality FROM customer c WHERE (c.Card_Credit < 50 OR c.Card_Credit > 75) GROUP BY c.Nationality HAVING COUNT(DISTINCT CASE WHEN c.Card_Credit < 50 THEN c.Customer_ID END) > 0 AND COUNT(DISTINCT CASE WHEN c.Card_Credit > 75 THEN c.Customer_ID END) > 0;
### TaskGenerate a SQL query to answer [QUESTION]Which nations have both customers with card credit above 50 and customers with card credit below 75.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which nations have both customers with card credit above 50 and customers with card credit below 75.[/QUESTION][SQL]SELECT c.Nationality FROM customer c WHERE (c.Card_Credit > 50 AND c.Card_Credit < 75) GROUP BY c.Nationality;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of customers and names of dishes they order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of customers and names of dishes they order.[/QUESTION][SQL]SELECT c.Name AS customer_name, co.Dish_Name AS dish_name FROM customer_order co JOIN customer c ON co.Customer_ID = c.Customer_ID;
### TaskGenerate a SQL query to answer [QUESTION]For each order, return the customer name and the dish name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each order, return the customer name and the dish name.[/QUESTION][SQL]SELECT c.Name AS Customer_Name, co.Dish_Name AS Dish_Name FROM customer_order co JOIN customer c ON co.Customer_ID = c.Customer_ID;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of customers and names of dishes they order, in descending order of the quantity of dish.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of customers and names of dishes they order, in descending order of the quantity of dish.[/QUESTION][SQL]SELECT c.Name AS customer_name, co.Dish_Name AS dish_name, SUM(co.Quantity) AS total_quantity FROM customer_order co JOIN customer c ON co.Customer_ID = c.Customer_ID GROUP BY c.Name, co.Dish_Name ORDER BY total_quantity DESC;
### TaskGenerate a SQL query to answer [QUESTION]For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.[/QUESTION][SQL]SELECT c.Name AS Customer_Name, co.Dish_Name, co.Quantity FROM customer_order co JOIN customer c ON co.Customer_ID = c.Customer_ID ORDER BY co.Quantity DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show each customer name and the total quantities of dishes ordered by that customer.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show each customer name and the total quantities of dishes ordered by that customer.[/QUESTION][SQL]SELECT c.Name, SUM(co.Quantity) AS Total_Quantity FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name
### TaskGenerate a SQL query to answer [QUESTION]What is the total quantities of dishes ordered by each customer? List the customer name and the total quantity.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total quantities of dishes ordered by each customer? List the customer name and the total quantity.[/QUESTION][SQL]SELECT c.Name, SUM(co.Quantity) AS Total_Quantity FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name ORDER BY Total_Quantity DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the customers with total quantity of order bigger than 1.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the customers with total quantity of order bigger than 1.[/QUESTION][SQL]SELECT c.Name FROM customer c JOIN (SELECT co.Customer_ID, SUM(co.Quantity) AS Total_Quantity FROM customer_order co GROUP BY co.Customer_ID HAVING SUM(co.Quantity) > 1) AS t ON c.Customer_ID = t.Customer_ID;
### TaskGenerate a SQL query to answer [QUESTION]Which customers have total order quantity greater than 1? Give me the customer names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customers have total order quantity greater than 1? Give me the customer names.[/QUESTION][SQL]SELECT c.Name FROM customer c JOIN (SELECT co.Customer_ID, SUM(co.Quantity) AS Total_Quantity FROM customer_order co GROUP BY co.Customer_ID HAVING SUM(co.Quantity) > 1) AS t ON c.Customer_ID = t.Customer_ID;
### TaskGenerate a SQL query to answer [QUESTION]Show distinct managers of branches.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show distinct managers of branches.[/QUESTION][SQL]SELECT DISTINCT b.Manager FROM branch b ORDER BY b.Manager NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Who are the distinct managers of branches?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who are the distinct managers of branches?[/QUESTION][SQL]SELECT DISTINCT b.Manager FROM branch b;
### TaskGenerate a SQL query to answer [QUESTION]List the names of customers that do not have any order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of customers that do not have any order.[/QUESTION][SQL]SELECT c.Name FROM customer c WHERE c.Customer_ID NOT IN (SELECT co.Customer_ID FROM customer_order co)
### TaskGenerate a SQL query to answer [QUESTION]Which customers do not have any order? Give me the customer names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customers do not have any order? Give me the customer names.[/QUESTION][SQL]SELECT c.Name FROM customer c WHERE NOT EXISTS (SELECT 1 FROM customer_order co WHERE co.Customer_ID = c.Customer_ID)
### TaskGenerate a SQL query to answer [QUESTION]How many members are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many members are there?[/QUESTION][SQL]SELECT COUNT(*) FROM member;
### TaskGenerate a SQL query to answer [QUESTION]List the names of members in ascending order of age.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of members in ascending order of age.[/QUESTION][SQL]SELECT m.name, m.age FROM member m ORDER BY m.age ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and nationalities of the members?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and nationalities of the members?[/QUESTION][SQL]SELECT m.name, m.nationality FROM member m ORDER BY m.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the names of members whose nationality is not `` England ''.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of members whose nationality is not `` England ''.[/QUESTION][SQL]SELECT m.name FROM member m WHERE m.nationality!= 'England' ORDER BY m.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of members whose age is either 19 or 20.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of members whose age is either 19 or 20.[/QUESTION][SQL]SELECT m.Name FROM member m WHERE m.Age = 19 OR m.Age = 20 ORDER BY m.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the oldest member?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the oldest member?[/QUESTION][SQL]SELECT m.Name FROM member m ORDER BY m.Age ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show different nationalities along with the number of members of each nationality.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show different nationalities along with the number of members of each nationality.[/QUESTION][SQL]SELECT m.Nationality, COUNT(*) AS member_count FROM member m GROUP BY m.Nationality ORDER BY member_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Please show the most common nationality of members.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the most common nationality of members.[/QUESTION][SQL]SELECT m.Nationality FROM member m GROUP BY m.Nationality ORDER BY COUNT(m.Member_ID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show the nations that have at least two members.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the nations that have at least two members.[/QUESTION][SQL]SELECT m.Nationality FROM member m GROUP BY m.Nationality HAVING COUNT(m.Member_ID) >= 2 ORDER BY m.Nationality NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of club leaders and the names of clubs they joined.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of club leaders and the names of clubs they joined.[/QUESTION][SQL]SELECT m.Name AS member_name, c.Club_Name FROM club_leader cl JOIN member m ON cl.Member_ID = m.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of club leaders of clubs with overall ranking higher than 100.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of club leaders of clubs with overall ranking higher than 100.[/QUESTION][SQL]SELECT m.Name FROM club c JOIN club_leader cl ON c.Club_ID = cl.Club_ID JOIN member m ON cl.Member_ID = m.Member_ID WHERE c.Overall_Ranking > 100;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of club leaders that joined their club before 2018.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of club leaders that joined their club before 2018.[/QUESTION][SQL]SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID WHERE cl.Year_Join < '2018' ORDER BY m.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the name of the leader of the club named "Houston".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name of the leader of the club named "Houston".[/QUESTION][SQL]SELECT m.Name FROM club c JOIN club_leader cl ON c.Club_ID = cl.Club_ID JOIN member m ON cl.Member_ID = m.Member_ID WHERE LOWER(c.Club_Name) = 'houston';
### TaskGenerate a SQL query to answer [QUESTION]List the names of members that are not club leaders.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of members that are not club leaders.[/QUESTION][SQL]SELECT m.Name FROM member m WHERE m.Member_ID NOT IN (SELECT cl.Member_ID FROM club_leader cl)
### TaskGenerate a SQL query to answer [QUESTION]Show the nations that have both members older than 22 and members younger than 19.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the nations that have both members older than 22 and members younger than 19.[/QUESTION][SQL]SELECT m.Nationality FROM member m WHERE m.Age > 22 AND m.Age < 19 GROUP BY m.Nationality;
### TaskGenerate a SQL query to answer [QUESTION]What is the average age of all the club leaders?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average age of all the club leaders?[/QUESTION][SQL]SELECT AVG(m.Age) AS Average_Age FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID;
### TaskGenerate a SQL query to answer [QUESTION]Which club name contains the string'state'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which club name contains the string'state'?[/QUESTION][SQL]SELECT c.Club_Name FROM club c WHERE c.Club_Name ilike '%state%';
### TaskGenerate a SQL query to answer [QUESTION]List all collections' subset. List the subsets' names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all collections' subset. List the subsets' names.[/QUESTION][SQL]SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs ORDER BY cs.Collection_Subset_Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the collection susbset names?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the collection susbset names?[/QUESTION][SQL]SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs;
### TaskGenerate a SQL query to answer [QUESTION]What is detail of collection subset with name 'Top collection'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is detail of collection subset with name 'Top collection'?[/QUESTION][SQL]SELECT cs.Collectection_Subset_Details FROM Collection_Subsets cs WHERE LOWER(cs.Collection_Subset_Name) = 'top collection';
### TaskGenerate a SQL query to answer [QUESTION]What collection details are there on the subset named 'Top collection'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What collection details are there on the subset named 'Top collection'?[/QUESTION][SQL]SELECT cs.Collecrtion_Subset_Details FROM Collection_Subsets cs WHERE LOWER(cs.Collection_Subset_Name) = 'top collection';
### TaskGenerate a SQL query to answer [QUESTION]List all documents's subset. List the subset's name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all documents's subset. List the subset's name.[/QUESTION][SQL]SELECT ds.Document_Subset_Name FROM Document_Subsets ds ORDER BY ds.Document_Subset_Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the document subset names?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the document subset names?[/QUESTION][SQL]SELECT ds.Document_Subset_Name FROM Document_Subsets ds;
### TaskGenerate a SQL query to answer [QUESTION]What is the detail of document subset with name 'Best for 2000'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the detail of document subset with name 'Best for 2000'?[/QUESTION][SQL]SELECT ds.Document_Subset_Details FROM Document_Subsets ds WHERE LOWER(ds.Document_Subset_Name) = 'best for 2000';
### TaskGenerate a SQL query to answer [QUESTION]What are the details on the document subsets that are named 'Best for 2000'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the details on the document subsets that are named 'Best for 2000'?[/QUESTION][SQL]SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, ds.Document_Subset_Details FROM Document_Subsets ds WHERE LOWER(ds.Document_Subset_Name) = 'best for 2000';
### TaskGenerate a SQL query to answer [QUESTION]List document id of all documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List document id of all documents.[/QUESTION][SQL]SELECT d.Document_Object_ID FROM Document_Objects d;
### TaskGenerate a SQL query to answer [QUESTION]What is the object id of the document objects?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the object id of the document objects?[/QUESTION][SQL]SELECT d.Document_Object_ID FROM Document_Objects d;
### TaskGenerate a SQL query to answer [QUESTION]What is the parent document of document owned by Marlin? List the document id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the parent document of document owned by Marlin? List the document id.[/QUESTION][SQL]SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Owner = 'Marlin' AND d.Parent_Document_Object_ID IS NOT NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the document object ids of the objects owned by Marlin?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the document object ids of the objects owned by Marlin?[/QUESTION][SQL]SELECT d.Document_Object_ID FROM Document_Objects d WHERE LOWER(d.Owner) ='marlin';
### TaskGenerate a SQL query to answer [QUESTION]What is the owner of document with the Description 'Braeden Collection'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the owner of document with the Description 'Braeden Collection'?[/QUESTION][SQL]SELECT d.Owner FROM Document_Objects d WHERE LOWER(d.Description) = 'braeden collection';
### TaskGenerate a SQL query to answer [QUESTION]What are the owners of the document objects described as the 'Braeden Collection'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the owners of the document objects described as the 'Braeden Collection'?[/QUESTION][SQL]SELECT d.Owner FROM Document_Objects d JOIN Documents_in_Collections dc ON d.Document_Object_ID = dc.Document_Object_ID WHERE d.Description ilike '%Braeden%Collection%' ORDER BY d.Owner;
### TaskGenerate a SQL query to answer [QUESTION]What is the owner of the parent document of document owned by 'Marlin'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the owner of the parent document of document owned by 'Marlin'?[/QUESTION][SQL]SELECT d.Owner FROM Document_Objects d WHERE d.Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin');
### TaskGenerate a SQL query to answer [QUESTION]Who is the owner of the parent document of every documents where 'Marlin' is the owner?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who is the owner of the parent document of every documents where 'Marlin' is the owner?[/QUESTION][SQL]SELECT d.Owner FROM Document_Objects d WHERE d.Document_Object_ID IN (SELECT p.Parent_Document_Object_ID FROM Document_Objects p WHERE LOWER(p.Owner) ='marlin') ORDER BY d.Document_Object_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the different descriptions of all the parent documents?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different descriptions of all the parent documents?[/QUESTION][SQL]SELECT DISTINCT d.description FROM document_objects d WHERE d.parent_document_object_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What is the unique description of every parent document?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the unique description of every parent document?[/QUESTION][SQL]SELECT DISTINCT d.description FROM Document_Objects d WHERE d.parent_document_object_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]How many documents owned by Marlin?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many documents owned by Marlin?[/QUESTION][SQL]SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Document_Objects d WHERE LOWER(d.Owner) ='marlin';
### TaskGenerate a SQL query to answer [QUESTION]What is the count of documents owned by Marlin?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the count of documents owned by Marlin?[/QUESTION][SQL]SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Document_Objects d WHERE LOWER(d.Owner) ='marlin';
### TaskGenerate a SQL query to answer [QUESTION]List all documents ids that are not the parent of other documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all documents ids that are not the parent of other documents.[/QUESTION][SQL]SELECT DISTINCT d.Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of the documents that are not parent documents?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of the documents that are not parent documents?[/QUESTION][SQL]SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]How many child documents does each parent document has? List the document id and the number.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many child documents does each parent document has? List the document id and the number.[/QUESTION][SQL]SELECT d.Document_Object_ID, COUNT(DISTINCT m.Related_Document_Object_ID) AS num_children FROM Document_Objects d JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Document_Object_ID GROUP BY d.Document_Object_ID ORDER BY d.Document_Object_ID;
### TaskGenerate a SQL query to answer [QUESTION]What is the number of child documents for each parent document, and what are the ids of the parent documents?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the number of child documents for each parent document, and what are the ids of the parent documents?[/QUESTION][SQL]SELECT d.Document_Object_ID AS Parent_ID, COUNT(DISTINCT m.Related_Document_Object_ID) AS Child_Count FROM Document_Objects d JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Document_Object_ID GROUP BY d.Document_Object_ID ORDER BY Child_Count DESC;
### TaskGenerate a SQL query to answer [QUESTION]List the name of all collections.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of all collections.[/QUESTION][SQL]SELECT c.Collection_Name FROM Collections c ORDER BY c.Collection_Name;
### TaskGenerate a SQL query to answer [QUESTION]what are the collection names?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]what are the collection names?[/QUESTION][SQL]SELECT c.Collection_Name FROM Collections c ORDER BY c.Collection_Name;
### TaskGenerate a SQL query to answer [QUESTION]What is the description of collection named Best?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the description of collection named Best?[/QUESTION][SQL]SELECT c.Collection_Description FROM Collections c WHERE LOWER(c.Collection_Name) = 'best';
### TaskGenerate a SQL query to answer [QUESTION]What are the collection descriptions that are named as 'Best'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the collection descriptions that are named as 'Best'?[/QUESTION][SQL]SELECT c.Collection_Description FROM Collections c WHERE LOWER(c.Collection_Description) = 'best';
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the parent collection of the collection named Nice?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the parent collection of the collection named Nice?[/QUESTION][SQL]SELECT c.Collection_Description FROM Collections c WHERE c.Collection_Name = 'Nice';
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all parent collections of the collection named Nice?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all parent collections of the collection named Nice?[/QUESTION][SQL]SELECT c.Collection_Name FROM Collections c WHERE c.Collection_Name = 'Nice';
### TaskGenerate a SQL query to answer [QUESTION]Which collection is not the parent of other collection? List the collection's name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which collection is not the parent of other collection? List the collection's name.[/QUESTION][SQL]SELECT c.Collection_Name FROM Collections c WHERE c.Parent_Collection_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the collections that are not the parent of the other collections?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the collections that are not the parent of the other collections?[/QUESTION][SQL]SELECT c.Collection_Name FROM Collections c WHERE c.Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections);
### TaskGenerate a SQL query to answer [QUESTION]List document that have more than one child. List the document id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List document that have more than one child. List the document id.[/QUESTION][SQL]SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Document_Object_ID HAVING COUNT(d.Document_Object_ID) > 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of the documents that have more than one child?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of the documents that have more than one child?[/QUESTION][SQL]SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Document_Object_ID HAVING COUNT(d.Document_Object_ID) > 1;
### TaskGenerate a SQL query to answer [QUESTION]How many child collection does the collection named Best has?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many child collection does the collection named Best has?[/QUESTION][SQL]SELECT COUNT(DISTINCT c2.Collection_ID) FROM Collections c1 JOIN Collection_Subset_Members csm ON c1.Collection_ID = csm.Collection_ID JOIN Collections c2 ON csm.Related_Collection_ID = c2.Collection_ID WHERE LOWER(c1.Collection_Name) = 'best';
### TaskGenerate a SQL query to answer [QUESTION]What is the number of child collections belonging to the collection named Best?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the number of child collections belonging to the collection named Best?[/QUESTION][SQL]SELECT COUNT(DISTINCT c2.Collection_ID) FROM Collections c1 JOIN Documents_in_Collections dic ON c1.Collection_ID = dic.Collection_ID JOIN Collections c2 ON dic.Document_Object_ID = c2.Parent_Collection_ID WHERE LOWER(c1.Collection_Name) = 'best';
### TaskGenerate a SQL query to answer [QUESTION]List all document which is related to document owned by Ransom. List the document id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all document which is related to document owned by Ransom. List the document id.[/QUESTION][SQL]SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Owner = 'Ransom';
### TaskGenerate a SQL query to answer [QUESTION]What are the document object ids of the related to the document owned by Ransom?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the document object ids of the related to the document owned by Ransom?[/QUESTION][SQL]SELECT d.Document_Object_ID FROM Document_Objects d WHERE LOWER(d.Owner) = 'ransom';
### TaskGenerate a SQL query to answer [QUESTION]List collection subset id, name and number of collections in each subset.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List collection subset id, name and number of collections in each subset.[/QUESTION][SQL]SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(cs.Collection_Subset_ID) AS num_collections FROM Collection_Subsets cs GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name ORDER BY cs.Collection_Subset_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the collection subset ids, names, and number of collections for each subset?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the collection subset ids, names, and number of collections for each subset?[/QUESTION][SQL]SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(cs.Collection_Subset_ID) AS Number_of_Collections FROM Collection_Subsets cs GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name ORDER BY cs.Collection_Subset_ID;
### TaskGenerate a SQL query to answer [QUESTION]Which document has most of child? List the document id and the number of child.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which document has most of child? List the document id and the number of child.[/QUESTION][SQL]SELECT d.Document_Object_ID, COUNT(d.Document_Object_ID) AS NumberOfChildren FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Document_Object_ID ORDER BY NumberOfChildren DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]For each document object id, how many children do they have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each document object id, how many children do they have?[/QUESTION][SQL]SELECT d.Document_Object_ID, COUNT(DISTINCT d.Related_Document_Object_ID) AS child_count FROM Document_Objects d GROUP BY d.Document_Object_ID ORDER BY d.Document_Object_ID;
### TaskGenerate a SQL query to answer [QUESTION]Which document has least number of related documents? List the document id and the number of related documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which document has least number of related documents? List the document id and the number of related documents.[/QUESTION][SQL]SELECT d.Document_Object_ID, COUNT(d.Document_Object_ID) AS num_related_documents FROM Document_Subset_Members dms JOIN Document_Objects d ON dms.Document_Object_ID = d.Document_Object_ID GROUP BY d.Document_Object_ID ORDER BY num_related_documents ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the document object id with the least number of documents?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the document object id with the least number of documents?[/QUESTION][SQL]SELECT d.Document_Object_ID FROM Document_Objects d GROUP BY d.Document_Object_ID ORDER BY COUNT(d.Document_Object_ID) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which document has between 2 and 4 number of documents? List the document id and the number of related documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which document has between 2 and 4 number of documents? List the document id and the number of related documents.[/QUESTION][SQL]SELECT d.Document_Object_ID, COUNT(d.Document_Object_ID) AS num_related_documents FROM Document_Subset_Members dms JOIN Document_Objects d ON dms.Document_Object_ID = d.Document_Object_ID GROUP BY d.Document_Object_ID HAVING COUNT(d.Document_Object_ID) BETWEEN 2 AND 4 ORDER BY num_related_documents DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?[/QUESTION][SQL]SELECT d.Document_Object_ID, COUNT(d.Related_Document_Object_ID) AS number_of_related_documents FROM Document_Subset_Members d GROUP BY d.Document_Object_ID HAVING COUNT(d.Related_Document_Object_ID) BETWEEN 2 AND 4 ORDER BY d.Document_Object_ID;
### TaskGenerate a SQL query to answer [QUESTION]List all owner of documents that is related to documents owned by Braeden.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all owner of documents that is related to documents owned by Braeden.[/QUESTION][SQL]SELECT DISTINCT d.Owner FROM Document_Objects d WHERE d.Document_Object_ID IN (SELECT r.Document_Object_ID FROM Document_Objects r JOIN Document_Subset_Members m ON r.Document_Object_ID = m.Document_Object_ID WHERE LOWER(r.Owner) = 'braeden') ORDER BY d.Owner;
### TaskGenerate a SQL query to answer [QUESTION]What are the different owners of documents that are related to ones owned by Braeden?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different owners of documents that are related to ones owned by Braeden?[/QUESTION][SQL]SELECT DISTINCT d.Owner FROM Document_Objects d WHERE d.Owner = 'Braeden'
### TaskGenerate a SQL query to answer [QUESTION]Which unique subset does document owned by Braeden belong to? List the subset name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which unique subset does document owned by Braeden belong to? List the subset name.[/QUESTION][SQL]SELECT ds.Document_Subset_Name FROM Document_Objects do JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE LOWER(do.Owner) = 'braeden' GROUP BY ds.Document_Subset_Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the different subset names of all documents owned by Braeden?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different subset names of all documents owned by Braeden?[/QUESTION][SQL]SELECT DISTINCT ds.Document_Subset_Name FROM Document_Objects do JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE LOWER(do.Owner) = 'braeden' ORDER BY ds.Document_Subset_Name;
### TaskGenerate a SQL query to answer [QUESTION]List subset id, name and number of different documents in each subset.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List subset id, name and number of different documents in each subset.[/QUESTION][SQL]SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dsm.Document_Object_ID) AS distinct_documents FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name ORDER BY distinct_documents DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the subset id, name, and number of different documents for each subset?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the subset id, name, and number of different documents for each subset?[/QUESTION][SQL]SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dmo.Document_Object_ID) AS distinct_documents FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects dmo ON dsm.Document_Object_ID = dmo.Document_Object_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name ORDER BY distinct_documents DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which document subset has most of number of distinct documents? List subset id, name and number of documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which document subset has most of number of distinct documents? List subset id, name and number of documents.[/QUESTION][SQL]SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dmo.Document_Object_ID) AS num_documents FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects dmo ON dsm.Document_Object_ID = dmo.Document_Object_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name ORDER BY num_documents DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]For the document subset with the most number of different documents, what are the ids and names of the subset, as well as the number of documents?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For the document subset with the most number of different documents, what are the ids and names of the subset, as well as the number of documents?[/QUESTION][SQL]SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dmo.Document_Object_ID) AS num_documents FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects dmo ON dsm.Document_Object_ID = dmo.Document_Object_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name ORDER BY num_documents DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]For document subset named 'Best for 2000', List all document id that in this subset.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For document subset named 'Best for 2000', List all document id that in this subset.[/QUESTION][SQL]SELECT d.Document_Object_ID FROM Document_Objects d JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID WHERE dsm.Document_Subset_ID IN (SELECT ds.Document_Subset_ID FROM Document_Subsets ds WHERE LOWER(ds.Document_Subset_Name) = 'best for 2000');
### TaskGenerate a SQL query to answer [QUESTION]For the document subset named 'Best for 2000', what are the document ids in that subset?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For the document subset named 'Best for 2000', what are the document ids in that subset?[/QUESTION][SQL]SELECT d.Document_Object_ID FROM Document_Objects d JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID WHERE dsm.Document_Subset_ID IN (SELECT ds.Document_Subset_ID FROM Document_Subsets ds WHERE LOWER(ds.Document_Subset_Name) = 'best for 2000');
### TaskGenerate a SQL query to answer [QUESTION]List all document subsets of documents that related to each document id. List the name of document subset and the document id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all document subsets of documents that related to each document id. List the name of document subset and the document id.[/QUESTION][SQL]SELECT ds.Document_Subset_Name, dso.Document_Object_ID FROM Document_Subset_Members dsm JOIN Document_Objects dso ON dsm.Document_Object_ID = dso.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the different subsets of documents related to each document id, list the name of the document subset and id of the actual document?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different subsets of documents related to each document id, list the name of the document subset and id of the actual document?[/QUESTION][SQL]SELECT dso.Document_Object_ID AS Document_ID, ds.Document_Subset_Name, ds.Document_Subset_ID FROM Document_Subset_Members dsm JOIN Document_Objects dso ON dsm.Document_Object_ID = dso.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID;
### TaskGenerate a SQL query to answer [QUESTION]List the Collection Name that document owned by 'Ransom'belong to.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the Collection Name that document owned by 'Ransom'belong to.[/QUESTION][SQL]SELECT c.Collection_Name FROM Documents_in_Collections dic JOIN Document_Objects d ON dic.Document_Object_ID = d.Document_Object_ID JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE LOWER(d.Owner) = 'ransom' ORDER BY c.Collection_Name;
### TaskGenerate a SQL query to answer [QUESTION]What is the collection name of a document owned by 'Ransom'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the collection name of a document owned by 'Ransom'?[/QUESTION][SQL]SELECT c.Collection_Name FROM Document_Objects d JOIN Documents_in_Collections dic ON d.Document_Object_ID = dic.Document_Object_ID JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE LOWER(d.Owner) = 'ransom';
### TaskGenerate a SQL query to answer [QUESTION]How many collections does each document belong to? List the count and the document id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many collections does each document belong to? List the count and the document id.[/QUESTION][SQL]SELECT d.Document_Object_ID, COUNT(DISTINCT c.Collection_ID) AS collection_count FROM Documents_in_Collections dic JOIN Document_Objects d ON dic.Document_Object_ID = d.Document_Object_ID GROUP BY d.Document_Object_ID ORDER BY collection_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For each document object id, how many collections does it belong to?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each document object id, how many collections does it belong to?[/QUESTION][SQL]SELECT d.Document_Object_ID, COUNT(DISTINCT c.Collection_ID) AS collection_count FROM Documents_in_Collections dic JOIN Document_Objects d ON dic.Document_Object_ID = d.Document_Object_ID JOIN Collections c ON dic.Collection_ID = c.Collection_ID GROUP BY d.Document_Object_ID ORDER BY d.Document_Object_ID;
### TaskGenerate a SQL query to answer [QUESTION]How many documents does collection named 'Best' has?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many documents does collection named 'Best' has?[/QUESTION][SQL]SELECT COUNT(DISTINCT di.Document_Object_ID) FROM Documents_in_Collections di JOIN Collections c ON di.Collection_ID = c.Collection_ID WHERE LOWER(c.Collection_Name) = 'best';
### TaskGenerate a SQL query to answer [QUESTION]What is the number of documents in the collection named 'Best'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the number of documents in the collection named 'Best'?[/QUESTION][SQL]SELECT COUNT(DISTINCT doc.Document_Object_ID) FROM Documents_in_Collections dic JOIN Document_Objects doc ON dic.Document_Object_ID = doc.Document_Object_ID WHERE LOWER(dic.Collection_ID::text) = 1;
### TaskGenerate a SQL query to answer [QUESTION]List the document id of all documents in collection named Best.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the document id of all documents in collection named Best.[/QUESTION][SQL]SELECT d.Document_Object_ID FROM Documents_in_Collections dic JOIN Document_Objects d ON dic.Document_Object_ID = d.Document_Object_ID WHERE LOWER(dic.Collection_ID::text) = 'best';
### TaskGenerate a SQL query to answer [QUESTION]What is the number of document object ids in the collection named Best?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the number of document object ids in the collection named Best?[/QUESTION][SQL]SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Documents_in_Collections dic JOIN Document_Objects d ON dic.Document_Object_ID = d.Document_Object_ID JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE LOWER(c.Collection_Name) = 'best';
### TaskGenerate a SQL query to answer [QUESTION]Which collection have most number of documents? List collection name, id and number of documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which collection have most number of documents? List collection name, id and number of documents.[/QUESTION][SQL]SELECT c.Collection_Name, c.Collection_ID, COUNT(DISTINCT di.Document_Object_ID) AS num_documents FROM Documents_in_Collections di JOIN Collections c ON di.Collection_ID = c.Collection_ID GROUP BY c.Collection_Name, c.Collection_ID ORDER BY num_documents DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?[/QUESTION][SQL]SELECT c.Collection_Name, COUNT(di.Document_Object_ID) AS document_count FROM Collections c JOIN Documents_in_Collections di ON c.Collection_ID = di.Collection_ID WHERE c.Collection_Name ilike '%Best%' GROUP BY c.Collection_Name ORDER BY document_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List id of documents that in document subset Best for 2000 and collection named Best.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List id of documents that in document subset Best for 2000 and collection named Best.[/QUESTION][SQL]SELECT d.Document_Object_ID FROM Document_Objects d JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name ilike '%Best%for%2000%' AND EXISTS (SELECT 1 FROM Documents_in_Collections dic WHERE dic.Document_Object_ID = d.Document_Object_ID AND dic.Collection_ID IN (SELECT c.Collection_ID FROM Collections c WHERE c.Collection_Name ilike '%Best%'));
### TaskGenerate a SQL query to answer [QUESTION]What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?[/QUESTION][SQL]SELECT DISTINCT d.Document_Object_ID FROM Document_Objects d JOIN Documents_in_Collections dc ON d.Document_Object_ID = dc.Document_Object_ID JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name ilike '%Best%for%2000%' AND dc.Collection_ID IN (SELECT c.Collection_ID FROM Collections c WHERE c.Collection_Name ilike '%Best%');
### TaskGenerate a SQL query to answer [QUESTION]List id of documents that in collection named Best but not in document subset Best for 2000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List id of documents that in collection named Best but not in document subset Best for 2000.[/QUESTION][SQL]SELECT d.Document_Object_ID FROM Documents_in_Collections dic JOIN Documents d ON dic.Document_Object_ID = d.Document_Object_ID WHERE dic.Collection_ID IN (SELECT c.Collection_ID FROM Collections c WHERE LOWER(c.Collection_Name) = 'best') AND d.Document_Object_ID NOT IN (SELECT ds.Document_Object_ID FROM Document_Subsets ds WHERE LOWER(ds.Document_Subset_Name) = 'best' AND ds.Document_Subset_Details LIKE '%2000%');
### TaskGenerate a SQL query to answer [QUESTION]What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?[/QUESTION][SQL]SELECT DISTINCT d.Document_Object_ID FROM Documents_in_Collections dc JOIN Document_Objects d ON dc.Document_Object_ID = d.Document_Object_ID WHERE dc.Collection_ID IN (SELECT c.Collection_ID FROM Collections c WHERE LOWER(c.Collection_Name) = 'best') AND d.Document_Object_ID NOT IN (SELECT ds.Document_Object_ID FROM Document_Subset_Members dsms JOIN Document_Subsets ds ON dsms.Document_Subset_ID = ds.Document_Subset_ID WHERE LOWER(ds.Document_Subset_Name) = 'best for 2000');
### TaskGenerate a SQL query to answer [QUESTION]List id of documents that in document subset Best for 2000 or in collection named Best.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List id of documents that in document subset Best for 2000 or in collection named Best.[/QUESTION][SQL]SELECT d.Document_Object_ID FROM Document_Objects d JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID WHERE dsm.Document_Subset_ID IN (SELECT ds.Document_Subset_ID FROM Document_Subsets ds WHERE LOWER(ds.Document_Subset_Name) = 'best') UNION SELECT c.Collection_ID FROM Collections c WHERE LOWER(c.Collection_Name) = 'best'
### TaskGenerate a SQL query to answer [QUESTION]What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?[/QUESTION][SQL]SELECT DISTINCT d.Document_Object_ID FROM Document_Objects d JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID WHERE dsm.Document_Subset_ID IN (SELECT ds.Document_Subset_ID FROM Document_Subsets ds WHERE LOWER(ds.Document_Subset_Name) = 'best for 2000') UNION SELECT DISTINCT c.Collection_ID FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Collection_ID WHERE LOWER(csm.Collection_Subset_ID) IN (SELECT cs.Collection_Subset_ID FROM Collection_Subsets cs WHERE LOWER(cs.Collection_Subset_Name) = 'best');
### TaskGenerate a SQL query to answer [QUESTION]List all name of collections that are related to collection named Best.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all name of collections that are related to collection named Best.[/QUESTION][SQL]SELECT c.Collection_Name FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Collection_ID WHERE cs.Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name ilike '%Best%') GROUP BY c.Collection_Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the collections that are related to the collection named Best?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the collections that are related to the collection named Best?[/QUESTION][SQL]SELECT c.Collection_Name FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Collection_ID WHERE cs.Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') GROUP BY c.Collection_Name;
### TaskGenerate a SQL query to answer [QUESTION]How many collections that are related to collection named Best?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many collections that are related to collection named Best?[/QUESTION][SQL]SELECT COUNT(DISTINCT c2.Collection_ID) FROM Collections c1 JOIN Collection_Subset_Members cm ON c1.Collection_ID = cm.Collection_ID JOIN Collections c2 ON cm.Related_Collection_ID = c2.Collection_ID WHERE LOWER(c1.Collection_Name) = 'best';
### TaskGenerate a SQL query to answer [QUESTION]How many different collections are related to the one named 'Best'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different collections are related to the one named 'Best'?[/QUESTION][SQL]SELECT COUNT(DISTINCT c.Collection_ID) FROM Collections c JOIN Collection_Subset_Members cm ON c.Collection_ID = cm.Collection_ID WHERE LOWER(c.Collection_Name) = 'best';
### TaskGenerate a SQL query to answer [QUESTION]Which collection subset does collection name Best in? List collection subset name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which collection subset does collection name Best in? List collection subset name.[/QUESTION][SQL]SELECT cs.Collection_Subset_Name FROM Collections c JOIN Collection_Subset_Members cms ON c.Collection_ID = cms.Collection_ID JOIN Collection_Subsets cs ON cms.Collection_Subset_ID = cs.Collection_Subset_ID WHERE c.Collection_Name = 'Best';
### TaskGenerate a SQL query to answer [QUESTION]What are the collection subsets that the collection named 'Best' in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the collection subsets that the collection named 'Best' in?[/QUESTION][SQL]SELECT cs.Collection_Subset_Name FROM Collections c JOIN Collection_Subset_Members cms ON c.Collection_ID = cms.Collection_ID JOIN Collection_Subsets cs ON cms.Collection_Subset_ID = cs.Collection_Subset_ID WHERE LOWER(c.Collection_Name) = 'best';
### TaskGenerate a SQL query to answer [QUESTION]How many songs contain "Love" in their names?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many songs contain "Love" in their names?[/QUESTION][SQL]SELECT COUNT(*) FROM songs s WHERE LOWER(s.name) LIKE '%love%';
### TaskGenerate a SQL query to answer [QUESTION]List the name of the songs in ascending, lexicographical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of the songs in ascending, lexicographical order.[/QUESTION][SQL]SELECT s.name FROM songs s ORDER BY s.name ASC;
### TaskGenerate a SQL query to answer [QUESTION]List the names and languages of the songs.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names and languages of the songs.[/QUESTION][SQL]SELECT s.name, s.language FROM songs s ORDER BY s.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum voice sound quality score of the performances?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum voice sound quality score of the performances?[/QUESTION][SQL]SELECT MAX(ps.voice_sound_quality) AS max_voice_sound_quality, MIN(ps.voice_sound_quality) AS min_voice_sound_quality FROM performance_score ps;
### TaskGenerate a SQL query to answer [QUESTION]What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?[/QUESTION][SQL]SELECT ps.voice_sound_quality, ps.rhythm_tempo, ps.stage_presence FROM performance_score ps JOIN participants p ON ps.participant_id = p.id WHERE LOWER(p.name) = 'freeway';
### TaskGenerate a SQL query to answer [QUESTION]What are the id, language and original artist of the songs whose name is not 'Love'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the id, language and original artist of the songs whose name is not 'Love'?[/QUESTION][SQL]SELECT s.id, s.language, s.original_artist FROM songs s WHERE s.name!= 'Love' ORDER BY s.id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and original artists of the song whose English translation is 'All the streets of love'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and original artists of the song whose English translation is 'All the streets of love'?[/QUESTION][SQL]SELECT s.name AS song_name, s.original_artist FROM songs s WHERE LOWER(s.english_translation) = 'all the streets of love';
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct stage presence scores for all the songs that are in language 'English'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct stage presence scores for all the songs that are in language 'English'?[/QUESTION][SQL]SELECT DISTINCT ps.stage_presence FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE LOWER(s.language) = 'english';
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and names of the participants who have performed at least two songs?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and names of the participants who have performed at least two songs?[/QUESTION][SQL]SELECT p.id AS participant_id, p.name FROM (SELECT ps.participant_id, COUNT(ps.songs_id) AS song_count FROM performance_score ps GROUP BY ps.participant_id HAVING COUNT(ps.songs_id) >= 2) AS subquery JOIN participants p ON p.id = subquery.participant_id ORDER BY p.id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids, names and popularity of the participants, order by the number of songs they perform?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids, names and popularity of the participants, order by the number of songs they perform?[/QUESTION][SQL]SELECT p.id AS participant_id, p.name, p.popularity, COUNT(ps.songs_id) OVER (PARTITION BY ps.participant_id) AS num_songs FROM participants p JOIN performance_score ps ON p.id = ps.participant_id ORDER BY num_songs DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?[/QUESTION][SQL]SELECT p.id AS participant_id, p.name FROM performance_score ps JOIN participants p ON ps.participant_id = p.id WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5 ORDER BY p.id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the voice sound quality scores received for the song named'The Balkan Girls'in English language?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the voice sound quality scores received for the song named'The Balkan Girls'in English language?[/QUESTION][SQL]SELECT ps.voice_sound_quality FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE LOWER(s.name) = 'the balkan girls' AND LOWER(s.language) = 'english';
### TaskGenerate a SQL query to answer [QUESTION]What are the id and name of the song sung by the most participants?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the id and name of the song sung by the most participants?[/QUESTION][SQL]SELECT s.id AS song_id, s.name AS song_name FROM songs s JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.id, s.name ORDER BY COUNT(ps.participant_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many performances have a stage presence score less than 7 or higher than 9?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many performances have a stage presence score less than 7 or higher than 9?[/QUESTION][SQL]SELECT COUNT(*) FROM performance_score ps WHERE ps.stage_presence < 7 OR ps.stage_presence > 9;
### TaskGenerate a SQL query to answer [QUESTION]How many songs listed are not performed?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many songs listed are not performed?[/QUESTION][SQL]SELECT COUNT(s.id) FROM songs s LEFT JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.songs_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the average rhythm scores for the songs in each different language?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average rhythm scores for the songs in each different language?[/QUESTION][SQL]SELECT s.language, AVG(ps.rhythm_tempo) AS avg_rhythm FROM songs s JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.language ORDER BY avg_rhythm DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct names of the participants who have sung a song in 'English'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct names of the participants who have sung a song in 'English'?[/QUESTION][SQL]SELECT DISTINCT p.name FROM performance_score ps JOIN songs s ON ps.songs_id = s.id JOIN participants p ON ps.participant_id = p.id WHERE LOWER(s.language) = 'english' ORDER BY p.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?[/QUESTION][SQL]SELECT p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language IN ('Croatian', 'English') GROUP BY p.name, p.popularity HAVING COUNT(DISTINCT CASE WHEN s.language = 'Croatian' THEN s.id END) > 0 AND COUNT(DISTINCT CASE WHEN s.language = 'English' THEN s.id END) > 0 ORDER BY p.popularity DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which song names have the substring "Is"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which song names have the substring "Is"?[/QUESTION][SQL]SELECT s.name FROM songs s WHERE s.name ilike '%is%' ORDER BY s.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the original artists who sing songs with rhythm tempo above 5, and list results in descending order of voice sound quality.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the original artists who sing songs with rhythm tempo above 5, and list results in descending order of voice sound quality.[/QUESTION][SQL]SELECT s.original_artist, p.voice_sound_quality FROM performance_score p JOIN songs s ON p.songs_id = s.id WHERE p.rhythm_tempo > 5 ORDER BY p.voice_sound_quality DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many cities do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many cities do we have?[/QUESTION][SQL]SELECT COUNT(*) FROM City;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of cities.[/QUESTION][SQL]SELECT COUNT(*) FROM City;
### TaskGenerate a SQL query to answer [QUESTION]List all different states.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all different states.[/QUESTION][SQL]SELECT DISTINCT c.state FROM City c ORDER BY c.state NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are all the distinct states?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the distinct states?[/QUESTION][SQL]SELECT DISTINCT c.state FROM City c ORDER BY c.state NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many countries do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many countries do we have?[/QUESTION][SQL]SELECT COUNT(DISTINCT c.country) FROM City c;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of coutries.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of coutries.[/QUESTION][SQL]SELECT COUNT(DISTINCT c.country) FROM City c;
### TaskGenerate a SQL query to answer [QUESTION]Show names, codes, states, countries for all cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names, codes, states, countries for all cities.[/QUESTION][SQL]SELECT c.city_name, c.city_code, c.state, c.country FROM City c ORDER BY c.city_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names, codes, states, and countries for all cities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names, codes, states, and countries for all cities?[/QUESTION][SQL]SELECT c.city_name, c.city_code, c.state, c.country FROM City c ORDER BY c.city_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the latitude and longitude for Baltimore?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the latitude and longitude for Baltimore?[/QUESTION][SQL]SELECT c.latitude, c.longitude FROM City c WHERE LOWER(c.city_name) = 'baltimore'
### TaskGenerate a SQL query to answer [QUESTION]What latitude and longitude correspond to Baltimore?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What latitude and longitude correspond to Baltimore?[/QUESTION][SQL]SELECT c.latitude, c.longitude FROM City c WHERE LOWER(c.city_name) = 'baltimore';
### TaskGenerate a SQL query to answer [QUESTION]Show names for all cities in state PA.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names for all cities in state PA.[/QUESTION][SQL]SELECT c.city_name FROM City c WHERE LOWER(c.state) = 'pa' ORDER BY c.city_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all cities in PA?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all cities in PA?[/QUESTION][SQL]SELECT c.city_name FROM City c WHERE LOWER(c.state) = 'pa' ORDER BY c.city_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many cities are in Canada?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many cities are in Canada?[/QUESTION][SQL]SELECT COUNT(*) FROM City c WHERE LOWER(c.country) = 'canada';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of cities in Canada.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of cities in Canada.[/QUESTION][SQL]SELECT COUNT(*) FROM City c WHERE LOWER(c.country) = 'canada';
### TaskGenerate a SQL query to answer [QUESTION]Show names for all USA city ordered by latitude.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names for all USA city ordered by latitude.[/QUESTION][SQL]SELECT c.city_name FROM City c WHERE c.country = 'USA' ORDER BY c.latitude NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are all the city names for cities in the USA, ordered by latitude?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the city names for cities in the USA, ordered by latitude?[/QUESTION][SQL]SELECT c.city_name FROM City c WHERE c.country = 'United States' ORDER BY c.latitude NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all states and number of cities in each state.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all states and number of cities in each state.[/QUESTION][SQL]SELECT c.state, COUNT(c.city_code) AS num_cities FROM City c GROUP BY c.state ORDER BY num_cities DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many cities are in each state?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many cities are in each state?[/QUESTION][SQL]SELECT c.state, COUNT(c.city_code) AS number_of_cities FROM City c GROUP BY c.state ORDER BY number_of_cities DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all countries and number of cities in each.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all countries and number of cities in each.[/QUESTION][SQL]SELECT c.country, COUNT(c.city_code) AS num_cities FROM City c GROUP BY c.country ORDER BY num_cities DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many cities are there in each country?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many cities are there in each country?[/QUESTION][SQL]SELECT c.country, COUNT(c.city_code) AS number_of_cities FROM City c GROUP BY c.country ORDER BY number_of_cities DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List all states with at least two cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all states with at least two cities.[/QUESTION][SQL]SELECT c.state FROM City c GROUP BY c.state HAVING COUNT(c.city_code) >= 2
### TaskGenerate a SQL query to answer [QUESTION]Which states have at least two cities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which states have at least two cities?[/QUESTION][SQL]SELECT c.state FROM City c GROUP BY c.state HAVING COUNT(c.city_code) >= 2 ORDER BY c.state NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which state has most number of cities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which state has most number of cities?[/QUESTION][SQL]SELECT c.state, COUNT(c.city_code) AS num_cities FROM City c GROUP BY c.state ORDER BY num_cities DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the state that has the most cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the state that has the most cities.[/QUESTION][SQL]SELECT c.state, COUNT(c.city_code) AS number_of_cities FROM City c GROUP BY c.state ORDER BY number_of_cities DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which country has fewest number of cities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which country has fewest number of cities?[/QUESTION][SQL]SELECT c.country, COUNT(c.city_code) AS num_cities FROM City c GROUP BY c.country ORDER BY num_cities ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the country with the fewest number of cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the country with the fewest number of cities.[/QUESTION][SQL]SELECT c.country FROM City c GROUP BY c.country ORDER BY COUNT(c.city_code) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show the first name and the last name for students living in state MD.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the first name and the last name for students living in state MD.[/QUESTION][SQL]SELECT s.Fname, s.LName FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.state) ='md' ORDER BY s.StuID;
### TaskGenerate a SQL query to answer [QUESTION]What are the full names of students living in MD?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the full names of students living in MD?[/QUESTION][SQL]SELECT s.Fname ||'' || s.LName AS full_name FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.state) ='md' ORDER BY full_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many students live in China?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many students live in China?[/QUESTION][SQL]SELECT COUNT(*) FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.country) = 'china';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of students living in China.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of students living in China.[/QUESTION][SQL]SELECT COUNT(*) FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.country) = 'china';
### TaskGenerate a SQL query to answer [QUESTION]Return the first name and major of students are living in Baltimore?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the first name and major of students are living in Baltimore?[/QUESTION][SQL]SELECT s.Fname, c.city_name FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.city_name) = 'baltimore';
### TaskGenerate a SQL query to answer [QUESTION]What are the first names and majors of students living in Baltimore?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first names and majors of students living in Baltimore?[/QUESTION][SQL]SELECT s.Fname, c.city_name FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.city_name) = 'baltimore';
### TaskGenerate a SQL query to answer [QUESTION]Show the number of students living in each country.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the number of students living in each country.[/QUESTION][SQL]SELECT c.country, COUNT(s.StuID) AS num_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.country ORDER BY num_students DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many students live in each country?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many students live in each country?[/QUESTION][SQL]SELECT c.country, COUNT(s.StuID) AS number_of_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.country ORDER BY number_of_students DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of students living in each city.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of students living in each city.[/QUESTION][SQL]SELECT c.city_name, COUNT(s.StuID) AS num_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.city_name ORDER BY num_students DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many students live in each city?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many students live in each city?[/QUESTION][SQL]SELECT s.city_code, COUNT(s.StuID) AS number_of_students FROM Student s GROUP BY s.city_code ORDER BY number_of_students DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which state has most number of students?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which state has most number of students?[/QUESTION][SQL]SELECT c.state, COUNT(s.stuid) AS total_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.state ORDER BY total_students DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the state that has the most students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the state that has the most students.[/QUESTION][SQL]SELECT c.state, COUNT(s.stuid) AS student_count FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.state ORDER BY student_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which country has least number of students?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which country has least number of students?[/QUESTION][SQL]SELECT c.country, COUNT(s.stuid) AS num_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.country ORDER BY num_students ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the country with the fewest students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the country with the fewest students.[/QUESTION][SQL]SELECT c.country FROM (SELECT s.city_code, COUNT(*) AS student_count FROM Student s GROUP BY s.city_code) AS sc JOIN City c ON sc.city_code = c.city_code ORDER BY sc.student_count ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show names for all cities where at least three students live.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show names for all cities where at least three students live.[/QUESTION][SQL]SELECT c.city_name FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(s.StuID) >= 3 ORDER BY c.city_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of cities with at least three students?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of cities with at least three students?[/QUESTION][SQL]SELECT c.city_name FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(s.StuID) >= 3 ORDER BY c.city_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all states where more than 5 students live.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all states where more than 5 students live.[/QUESTION][SQL]SELECT c.state, COUNT(s.stuid) AS student_count FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.state HAVING COUNT(s.stuid) > 5 ORDER BY student_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the states with more than 5 students?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the states with more than 5 students?[/QUESTION][SQL]SELECT c.state, COUNT(s.stuid) AS student_count FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.state HAVING COUNT(s.stuid) > 5 ORDER BY student_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show ids for all students who don't live in USA.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show ids for all students who don't live in USA.[/QUESTION][SQL]SELECT s.StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.country)!= 'usa' ORDER BY s.StuID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What the the student ids for students not living in the USA?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What the the student ids for students not living in the USA?[/QUESTION][SQL]SELECT s.StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.country)!= 'usa' ORDER BY s.StuID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show ids for all female (sex is F) students living in state PA.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show ids for all female (sex is F) students living in state PA.[/QUESTION][SQL]SELECT s.StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.state) = 'pa' AND LOWER(s.Sex) = 'f';
### TaskGenerate a SQL query to answer [QUESTION]What are the student ids for female students in the state of PA?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the student ids for female students in the state of PA?[/QUESTION][SQL]SELECT s.StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'F' AND c.state = 'PA';
### TaskGenerate a SQL query to answer [QUESTION]Show ids for all male students living outside of USA.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show ids for all male students living outside of USA.[/QUESTION][SQL]SELECT s.StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'M' AND c.country!= 'USA';
### TaskGenerate a SQL query to answer [QUESTION]What are the ids for male students not in the USA?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids for male students not in the USA?[/QUESTION][SQL]SELECT s.StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'M' AND c.country!= 'USA';
### TaskGenerate a SQL query to answer [QUESTION]What is the distance between BAL and CHI?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the distance between BAL and CHI?[/QUESTION][SQL]SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI';
### TaskGenerate a SQL query to answer [QUESTION]Give the distance between BAL and CHI?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the distance between BAL and CHI?[/QUESTION][SQL]SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI';
### TaskGenerate a SQL query to answer [QUESTION]Show me the distance between Boston and Newark.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show me the distance between Boston and Newark.[/QUESTION][SQL]SELECT d.distance FROM Direct_distance d WHERE (d.city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND d.city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')) OR (d.city1_code = (SELECT city_code FROM City WHERE city_name = 'Newark') AND d.city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston'));
### TaskGenerate a SQL query to answer [QUESTION]What is the distance between Boston and Newark?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the distance between Boston and Newark?[/QUESTION][SQL]SELECT d.distance FROM Direct_distance d WHERE (d.city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND d.city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')) OR (d.city1_code = (SELECT city_code FROM City WHERE city_name = 'Newark') AND d.city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston'));
### TaskGenerate a SQL query to answer [QUESTION]What is the average, minimum, maximum distance between two cities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average, minimum, maximum distance between two cities?[/QUESTION][SQL]SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance;
### TaskGenerate a SQL query to answer [QUESTION]Give the average, minimum, and maximum distances between two cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the average, minimum, and maximum distances between two cities.[/QUESTION][SQL]SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance;
### TaskGenerate a SQL query to answer [QUESTION]Show me the city code of two cities with maximum distance.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show me the city code of two cities with maximum distance.[/QUESTION][SQL]SELECT d.city1_code, d.city2_code FROM Direct_distance d ORDER BY d.distance DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the city codes of the cities with the maximum distance?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the city codes of the cities with the maximum distance?[/QUESTION][SQL]SELECT d.city1_code, d.city2_code FROM Direct_distance d WHERE d.distance = (SELECT MAX(distance) FROM Direct_distance);
### TaskGenerate a SQL query to answer [QUESTION]Show me the city code of two cities with a distance greater than the average.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show me the city code of two cities with a distance greater than the average.[/QUESTION][SQL]SELECT d.city1_code, d.city2_code FROM Direct_distance d WHERE d.distance > (SELECT AVG(distance) FROM Direct_distance);
### TaskGenerate a SQL query to answer [QUESTION]What are the city codes of cities with distance greater than average?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the city codes of cities with distance greater than average?[/QUESTION][SQL]SELECT d.city1_code FROM Direct_distance d WHERE d.distance > (SELECT AVG(distance) FROM Direct_distance);
### TaskGenerate a SQL query to answer [QUESTION]Show me the city code of two cities with a distance less than 1000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show me the city code of two cities with a distance less than 1000.[/QUESTION][SQL]SELECT d.city1_code, d.city2_code FROM Direct_distance d WHERE d.distance < 1000;
### TaskGenerate a SQL query to answer [QUESTION]What are the city codes corresponding to cities with distances less than 1000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the city codes corresponding to cities with distances less than 1000?[/QUESTION][SQL]SELECT d.city1_code FROM Direct_distance d WHERE d.distance < 1000 UNION SELECT d.city2_code FROM Direct_distance d WHERE d.distance < 1000;
### TaskGenerate a SQL query to answer [QUESTION]What is the total distance between city BAL and all other cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total distance between city BAL and all other cities.[/QUESTION][SQL]SELECT SUM(d.distance) AS total_distance FROM Direct_distance d WHERE d.city1_code = 'BAL' OR d.city2_code = 'BAL';
### TaskGenerate a SQL query to answer [QUESTION]What is the sum of distances between BAL and other cities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the sum of distances between BAL and other cities?[/QUESTION][SQL]SELECT SUM(d.distance) AS total_distance FROM Direct_distance d WHERE d.city1_code = 'BAL' OR d.city2_code = 'BAL';
### TaskGenerate a SQL query to answer [QUESTION]What is the average distance between Boston and all other cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average distance between Boston and all other cities.[/QUESTION][SQL]SELECT AVG(d.distance) AS average_distance FROM Direct_distance d JOIN City c ON (d.city1_code = c.city_code OR d.city2_code = c.city_code) WHERE LOWER(c.city_name) = 'boston'
### TaskGenerate a SQL query to answer [QUESTION]Give the average distance between Boston and other cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the average distance between Boston and other cities.[/QUESTION][SQL]SELECT AVG(distance) AS average_distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE LOWER(city_name) = 'boston') OR city2_code = (SELECT city_code FROM City WHERE LOWER(city_name) = 'boston');
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the city closest to Chicago?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the city closest to Chicago?[/QUESTION][SQL]SELECT c.city_name FROM City c JOIN (SELECT d.city1_code AS city_code FROM Direct_distance d WHERE d.city2_code = 'CHI') AS d ON c.city_code = d.city_code ORDER BY c.latitude - 41.8781 ASC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the name of the nearest city to Chicago.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the name of the nearest city to Chicago.[/QUESTION][SQL]SELECT c.city_name FROM City c JOIN (SELECT d.city1_code AS closest_city FROM Direct_distance d WHERE d.city2_code = 'CHI' ORDER BY d.distance LIMIT 1) AS cd ON c.city_code = cd.closest_city;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the city furthest to Boston?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the city furthest to Boston?[/QUESTION][SQL]SELECT c.city_name FROM City c JOIN (SELECT d.city1_code AS farthest_city FROM Direct_distance d WHERE d.city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston')) AS f ON c.city_code = f.farthest_city ORDER BY c.latitude DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the city name of the city with greatest distance from Boston.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the city name of the city with greatest distance from Boston.[/QUESTION][SQL]SELECT c.city_name FROM City c JOIN (SELECT d.city1_code AS max_distance_city FROM Direct_distance d WHERE d.distance = (SELECT MAX(distance) FROM Direct_distance)) m ON c.city_code = m.max_distance_city;
### TaskGenerate a SQL query to answer [QUESTION]Show all city codes and the total distance to all other cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all city codes and the total distance to all other cities.[/QUESTION][SQL]SELECT c.city_code, SUM(d.distance) AS total_distance FROM City c CROSS JOIN Direct_distance d GROUP BY c.city_code
### TaskGenerate a SQL query to answer [QUESTION]For each city, what is the the city code and sum of distances from each?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each city, what is the the city code and sum of distances from each?[/QUESTION][SQL]SELECT c.city_code, SUM(d.distance) AS total_distance FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code OR c.city_code = d.city2_code GROUP BY c.city_code
### TaskGenerate a SQL query to answer [QUESTION]Show all city names and the average distance to all other cities.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all city names and the average distance to all other cities.[/QUESTION][SQL]SELECT c.city_name, AVG(d.distance) AS avg_distance FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code OR c.city_code = d.city2_code GROUP BY c.city_name
### TaskGenerate a SQL query to answer [QUESTION]What are the city name and average distances from each city?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the city name and average distances from each city?[/QUESTION][SQL]SELECT c.city_name, AVG(d.distance) AS avg_distance FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code OR c.city_code = d.city2_code GROUP BY c.city_name ORDER BY avg_distance NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?[/QUESTION][SQL]SELECT d.distance FROM Student s JOIN Direct_distance d ON s.city_code = d.city1_code WHERE s.Fname ilike '%Linda%' AND s.LName ilike '%Smith%' AND s.Fname ilike '%Tracy%' AND s.LName ilike '%Kim%';
### TaskGenerate a SQL query to answer [QUESTION]What is the distance between the cities where Linda Smith and Tracy Kim live?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the distance between the cities where Linda Smith and Tracy Kim live?[/QUESTION][SQL]SELECT d.distance FROM Student s JOIN City c ON s.city_code = c.city_code JOIN Direct_distance d ON c.city_code = d.city1_code WHERE (s.LName, s.Fname) IN (('Smith', 'Linda'), ('Kim', 'Tray'))
### TaskGenerate a SQL query to answer [QUESTION]What is the first name and last name of the student living furthest to Linda Smith?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the first name and last name of the student living furthest to Linda Smith?[/QUESTION][SQL]SELECT s.Fname, s.LName FROM Student s JOIN City c ON s.city_code = c.city_code WHERE (s.Fname ||'' || s.LName)!= 'Linda Smith' ORDER BY (c.latitude - 37.7749)^2 + (c.longitude - -122.4194)^2 DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the full name of the student who lives furthest from Linda Smith?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the full name of the student who lives furthest from Linda Smith?[/QUESTION][SQL]SELECT s.Fname, s.LName FROM Student s JOIN Direct_distance d ON s.city_code = d.city1_code WHERE (s.Fname ||'' || s.LName)!= 'Linda Smith' ORDER BY d.distance DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which state does the student whose first name is Linda live in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which state does the student whose first name is Linda live in?[/QUESTION][SQL]SELECT c.state FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(s.fname) = 'linda';
### TaskGenerate a SQL query to answer [QUESTION]Give the state that the student with first name Linda lives in.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3),  city2_code varchar(3),  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the state that the student with first name Linda lives in.[/QUESTION][SQL]SELECT c.state FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(s.fname) = 'linda'
### TaskGenerate a SQL query to answer [QUESTION]Return all details of sailors who are older than 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return all details of sailors who are older than 30.[/QUESTION][SQL]SELECT * FROM Sailors WHERE age > 30;
### TaskGenerate a SQL query to answer [QUESTION]What can you tell me about sailors who are older than age 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What can you tell me about sailors who are older than age 30?[/QUESTION][SQL]SELECT s.name, s.age FROM Sailors s WHERE s.age > 30;
### TaskGenerate a SQL query to answer [QUESTION]Return name and age for sailors who are younger than 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return name and age for sailors who are younger than 30.[/QUESTION][SQL]SELECT s.name, s.age FROM Sailors s WHERE s.age < 30 ORDER BY s.age NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name and age of every sailor who is younger than age 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and age of every sailor who is younger than age 30?[/QUESTION][SQL]SELECT s.name, s.age FROM Sailors s WHERE s.age < 30 ORDER BY s.age NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find boats reserved by Sailor with id 1.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find boats reserved by Sailor with id 1.[/QUESTION][SQL]SELECT b.name FROM Boats b JOIN Reserves r ON b.bid = r.bid WHERE r.sid = 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the different boat ids reserved by the sailor whose id is 1?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different boat ids reserved by the sailor whose id is 1?[/QUESTION][SQL]SELECT DISTINCT r.bid FROM Reserves r WHERE r.sid = 1;
### TaskGenerate a SQL query to answer [QUESTION]Who reserved boat 102?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who reserved boat 102?[/QUESTION][SQL]SELECT s.name FROM Reserves r JOIN Sailors s ON r.sid = s.sid WHERE r.bid = 102;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the sailor who reserved boat 102?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the sailor who reserved boat 102?[/QUESTION][SQL]SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 102;
### TaskGenerate a SQL query to answer [QUESTION]Return the unique boat ids (bid) of all reserved boats.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the unique boat ids (bid) of all reserved boats.[/QUESTION][SQL]SELECT DISTINCT r.bid FROM Reserves r
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of all boats that are reserved by someone?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of all boats that are reserved by someone?[/QUESTION][SQL]SELECT r.bid FROM Reserves r;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of sailors whose names contain letter e?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of sailors whose names contain letter e?[/QUESTION][SQL]SELECT s.name FROM Sailors s WHERE s.name ilike '%e%' ORDER BY s.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of every sailor whose name contains the letter e?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of every sailor whose name contains the letter e?[/QUESTION][SQL]SELECT s.name FROM Sailors s WHERE s.name ilike '%e%' ORDER BY s.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]return the unique ids of sailors who are older than any sailors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]return the unique ids of sailors who are older than any sailors.[/QUESTION][SQL]SELECT s.sid FROM Sailors s WHERE s.age > ALL (SELECT age FROM Sailors);
### TaskGenerate a SQL query to answer [QUESTION]What is the different id of every sailor who is not the youngest?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the different id of every sailor who is not the youngest?[/QUESTION][SQL]SELECT s.sid FROM Sailors s WHERE s.age!= (SELECT MIN(age) FROM Sailors);
### TaskGenerate a SQL query to answer [QUESTION]Return the unique names of sailors who are older than any sailors whose rating is larger than 7.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the unique names of sailors who are older than any sailors whose rating is larger than 7.[/QUESTION][SQL]SELECT s.name FROM Sailors s WHERE s.age > (SELECT MAX(s2.age) FROM Sailors s2 WHERE s2.rating > 7) GROUP BY s.name;
### TaskGenerate a SQL query to answer [QUESTION]What are the different names of sailors who are older than some other sailor with a rating larger than 7?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different names of sailors who are older than some other sailor with a rating larger than 7?[/QUESTION][SQL]SELECT s.name FROM Sailors s WHERE s.age > (SELECT MAX(s2.age) FROM Sailors s2 WHERE s2.rating > 7);
### TaskGenerate a SQL query to answer [QUESTION]Find the name and id of the sailors who reserved at least one boat?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and id of the sailors who reserved at least one boat?[/QUESTION][SQL]SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.name, s.sid HAVING COUNT(r.bid) > 0 ORDER BY s.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name and id of every sailor who reserved one or more boats?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and id of every sailor who reserved one or more boats?[/QUESTION][SQL]SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.name, s.sid HAVING COUNT(r.bid) > 0 ORDER BY s.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the id and name of the sailors who reserved more than one boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the id and name of the sailors who reserved more than one boat.[/QUESTION][SQL]SELECT s.sid, s.name FROM Sailors s JOIN (SELECT r.sid, COUNT(r.bid) AS num_reservations FROM Reserves r GROUP BY r.sid HAVING COUNT(r.bid) > 1) AS t ON s.sid = t.sid ORDER BY s.sid NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the different names of sailors who reserved two or more boats?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different names of sailors who reserved two or more boats?[/QUESTION][SQL]SELECT s.name FROM Sailors s JOIN (SELECT r.sid FROM Reserves r GROUP BY r.sid HAVING COUNT(r.bid) >= 2) AS t ON s.sid = t.sid ORDER BY s.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the id of Sailors (sid) that reserved red or blue boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the id of Sailors (sid) that reserved red or blue boat.[/QUESTION][SQL]SELECT DISTINCT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue') ORDER BY r.sid NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the sids for sailors who reserved red or blue boats?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the sids for sailors who reserved red or blue boats?[/QUESTION][SQL]SELECT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue') ORDER BY r.sid NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and id of Sailors (sid) that reserved red or blue boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and id of Sailors (sid) that reserved red or blue boat.[/QUESTION][SQL]SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue') ORDER BY s.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ids of sailors who reserved red or blue boats?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ids of sailors who reserved red or blue boats?[/QUESTION][SQL]SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue') ORDER BY s.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the id of Sailors (sid) that reserved red and blue boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the id of Sailors (sid) that reserved red and blue boat.[/QUESTION][SQL]SELECT DISTINCT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue') ORDER BY r.sid NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of sailors who reserved red and blue boats?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of sailors who reserved red and blue boats?[/QUESTION][SQL]SELECT DISTINCT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue') ORDER BY r.sid NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and id of Sailors (sid) that reserved red and blue boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and id of Sailors (sid) that reserved red and blue boat.[/QUESTION][SQL]SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') GROUP BY s.name, s.sid;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ids of sailors who reserved red and blue boats?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ids of sailors who reserved red and blue boats?[/QUESTION][SQL]SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') GROUP BY s.name, s.sid ORDER BY s.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the ids of sailors that haven’t reserved a boat?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the ids of sailors that haven’t reserved a boat?[/QUESTION][SQL]SELECT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of sailors who have not reserved a boat?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of sailors who have not reserved a boat?[/QUESTION][SQL]SELECT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
### TaskGenerate a SQL query to answer [QUESTION]what is the name and id of sailors who do not have a reservation of a boat?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]what is the name and id of sailors who do not have a reservation of a boat?[/QUESTION][SQL]SELECT s.name, s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ids of all sailors who do not have boat reservations?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ids of all sailors who do not have boat reservations?[/QUESTION][SQL]SELECT s.name, s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Find id for the sailors who do not have a reservation of a boat?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find id for the sailors who do not have a reservation of a boat?[/QUESTION][SQL]SELECT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
### TaskGenerate a SQL query to answer [QUESTION]What is id about sailors who do not have boat reservations?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is id about sailors who do not have boat reservations?[/QUESTION][SQL]SELECT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the sailors who reserved boat with id 103?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the sailors who reserved boat with id 103?[/QUESTION][SQL]SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 103;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the sailors who reserved boat with id 103.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the sailors who reserved boat with id 103.[/QUESTION][SQL]SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 103;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of all sailors whose rating is higher than any sailor named Luis?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of all sailors whose rating is higher than any sailor named Luis?[/QUESTION][SQL]SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name = 'Luis');
### TaskGenerate a SQL query to answer [QUESTION]What are the sailors' names, the ones whose rating is higher than any sailor named Luis?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the sailors' names, the ones whose rating is higher than any sailor named Luis?[/QUESTION][SQL]SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(rating) FROM Sailors sr WHERE sr.name = 'Luis');
### TaskGenerate a SQL query to answer [QUESTION]What is the name of all sailors whose rating is higher than all sailors named Luis?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of all sailors whose rating is higher than all sailors named Luis?[/QUESTION][SQL]SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(rating) FROM Sailors sr WHERE sr.name = 'Luis');
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all sailors with a higher rating than every sailor named Luis?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all sailors with a higher rating than every sailor named Luis?[/QUESTION][SQL]SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis') ORDER BY s.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.[/QUESTION][SQL]SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE s.rating > 2 ORDER BY s.sid NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?[/QUESTION][SQL]SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE s.rating >= 3 ORDER BY s.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and age of the oldest sailor.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and age of the oldest sailor.[/QUESTION][SQL]SELECT s.name, s.age FROM Sailors s WHERE s.age = (SELECT MAX(s2.age) FROM Sailors s2);
### TaskGenerate a SQL query to answer [QUESTION]What is the name and age of the sailor with maximum age?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and age of the sailor with maximum age?[/QUESTION][SQL]SELECT s.name, s.age FROM Sailors s WHERE s.age = (SELECT MAX(age) FROM Sailors);
### TaskGenerate a SQL query to answer [QUESTION]how many sailors in total?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]how many sailors in total?[/QUESTION][SQL]SELECT COUNT(*) FROM Sailors;
### TaskGenerate a SQL query to answer [QUESTION]How many sailors exist?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many sailors exist?[/QUESTION][SQL]SELECT COUNT(*) FROM Sailors;
### TaskGenerate a SQL query to answer [QUESTION]What is the average age of sailors whose rating is 7?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average age of sailors whose rating is 7?[/QUESTION][SQL]SELECT AVG(s.age) FROM Sailors s WHERE s.rating = 7;
### TaskGenerate a SQL query to answer [QUESTION]What is average age of all sailors who have a rating of 7?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is average age of all sailors who have a rating of 7?[/QUESTION][SQL]SELECT AVG(s.age) FROM Sailors s WHERE s.rating = 7;
### TaskGenerate a SQL query to answer [QUESTION]How many sailors whose name starts with letter D exist?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many sailors whose name starts with letter D exist?[/QUESTION][SQL]SELECT COUNT(*) FROM Sailors s WHERE LOWER(s.name) LIKE 'd%';
### TaskGenerate a SQL query to answer [QUESTION]What is the count of the sailors whose name starts with letter D?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the count of the sailors whose name starts with letter D?[/QUESTION][SQL]SELECT COUNT(*) FROM Sailors s WHERE LOWER(s.name) LIKE 'd%';
### TaskGenerate a SQL query to answer [QUESTION]What are the average rating and max age of all sailors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average rating and max age of all sailors?[/QUESTION][SQL]SELECT AVG(s.rating) AS average_rating, MAX(s.age) AS max_age FROM Sailors s;
### TaskGenerate a SQL query to answer [QUESTION]Find the average rating and largest age for the sailors[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average rating and largest age for the sailors[/QUESTION][SQL]SELECT AVG(s.rating) AS average_rating, MAX(s.age) AS max_age FROM Sailors s;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of reservations for each boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of reservations for each boat.[/QUESTION][SQL]SELECT r.bid, COUNT(r.day) AS num_reservations FROM Reserves r GROUP BY r.bid ORDER BY num_reservations DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many reservations exist for each boat?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many reservations exist for each boat?[/QUESTION][SQL]SELECT r.bid, COUNT(r.sid) AS number_of_reservations FROM Reserves r GROUP BY r.bid ORDER BY number_of_reservations DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of reservations for each boat with id greater than 50.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of reservations for each boat with id greater than 50.[/QUESTION][SQL]SELECT r.bid, COUNT(r.sid) AS num_reservations FROM Reserves r WHERE r.bid > 50 GROUP BY r.bid ORDER BY num_reservations DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many reservations exist for each boat with an id greater than 50?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many reservations exist for each boat with an id greater than 50?[/QUESTION][SQL]SELECT r.bid, COUNT(r.sid) AS number_of_reservations FROM Reserves r WHERE r.bid > 50 GROUP BY r.bid ORDER BY number_of_reservations DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of reservations for each boat with more than 1 reservation.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of reservations for each boat with more than 1 reservation.[/QUESTION][SQL]SELECT r.bid, COUNT(r.day) AS num_reservations FROM Reserves r GROUP BY r.bid HAVING COUNT(r.day) > 1 ORDER BY num_reservations DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many reservations exist for each boat that has more than 1 reservation already?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many reservations exist for each boat that has more than 1 reservation already?[/QUESTION][SQL]SELECT r.bid, COUNT(r.day) AS number_of_reservations FROM Reserves r GROUP BY r.bid HAVING COUNT(r.day) > 1 ORDER BY number_of_reservations DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of reservations by sailors with id greater than 1 for each boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of reservations by sailors with id greater than 1 for each boat.[/QUESTION][SQL]SELECT r.bid, COUNT(r.sid) AS num_reservations FROM Reserves r WHERE r.sid > 1 GROUP BY r.bid ORDER BY r.bid NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many reservations for each boat did the sailors with an id greater than 1 make?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many reservations for each boat did the sailors with an id greater than 1 make?[/QUESTION][SQL]SELECT r.bid, COUNT(r.sid) AS number_of_reservations FROM Reserves r WHERE r.sid > 1 GROUP BY r.bid ORDER BY number_of_reservations DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the rating and average age for sailors who have reserved red boat grouped by rating?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the rating and average age for sailors who have reserved red boat grouped by rating?[/QUESTION][SQL]SELECT s.rating, AVG(s.age) AS average_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red' GROUP BY s.rating ORDER BY s.rating NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the rating and average age for sailors who reserved red boats for each rating?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the rating and average age for sailors who reserved red boats for each rating?[/QUESTION][SQL]SELECT s.rating, AVG(s.age) AS average_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red' GROUP BY s.rating ORDER BY s.rating NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the name, rating and age of all sailors ordered by rating and age.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name, rating and age of all sailors ordered by rating and age.[/QUESTION][SQL]SELECT s.name, s.rating, s.age FROM Sailors s ORDER BY s.rating DESC, s.age ASC;
### TaskGenerate a SQL query to answer [QUESTION]What is the name, rating, and age for every sailor? And order them by rating and age.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name, rating, and age for every sailor? And order them by rating and age.[/QUESTION][SQL]SELECT s.name, s.rating, s.age FROM Sailors s ORDER BY s.rating DESC, s.age ASC;
### TaskGenerate a SQL query to answer [QUESTION]Find the total number of boats.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total number of boats.[/QUESTION][SQL]SELECT COUNT(*) FROM Boats;
### TaskGenerate a SQL query to answer [QUESTION]How many boats are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many boats are there?[/QUESTION][SQL]SELECT COUNT(*) FROM Boats;
### TaskGenerate a SQL query to answer [QUESTION]How many boats are red?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many boats are red?[/QUESTION][SQL]SELECT COUNT(*) FROM Boats b WHERE LOWER(b.color) ='red';
### TaskGenerate a SQL query to answer [QUESTION]How many red boats exist?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many red boats exist?[/QUESTION][SQL]SELECT COUNT(*) FROM Boats b WHERE LOWER(b.color) ='red';
### TaskGenerate a SQL query to answer [QUESTION]Find the names of boats booked by sailors whose age is between 20 and 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of boats booked by sailors whose age is between 20 and 30.[/QUESTION][SQL]SELECT b.name FROM Boats b JOIN Reserves r ON b.bid = r.bid JOIN Sailors s ON r.sid = s.sid WHERE s.age BETWEEN 20 AND 30;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the boats booked by people between age 20 and 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the boats booked by people between age 20 and 30?[/QUESTION][SQL]SELECT b.name FROM Boats b JOIN Reserves r ON b.bid = r.bid JOIN Sailors s ON r.sid = s.sid WHERE s.age BETWEEN 20 AND 30 ORDER BY b.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.[/QUESTION][SQL]SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 JOIN Reserves r ON s2.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red');
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?[/QUESTION][SQL]SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 JOIN Reserves r ON s2.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red');
### TaskGenerate a SQL query to answer [QUESTION]What is highest rating between sailors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is highest rating between sailors?[/QUESTION][SQL]SELECT MAX(s.rating) AS highest_rating FROM Sailors s;
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum rating for sailors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum rating for sailors?[/QUESTION][SQL]SELECT MAX(rating) AS max_rating FROM Sailors;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of sailors who reserved boat with the name Melon.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of sailors who reserved boat with the name Melon.[/QUESTION][SQL]SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.name) ='melon';
### TaskGenerate a SQL query to answer [QUESTION]What are the names of sailors who reserved a boat with the name Melon?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of sailors who reserved a boat with the name Melon?[/QUESTION][SQL]SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.name) ='melon';
### TaskGenerate a SQL query to answer [QUESTION]List the names and ages of all sailors sorted by rating in descending order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names and ages of all sailors sorted by rating in descending order.[/QUESTION][SQL]SELECT s.name, s.age FROM Sailors s ORDER BY s.rating DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ages of all sailors sorted by decreasing rating?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ages of all sailors sorted by decreasing rating?[/QUESTION][SQL]SELECT s.name, s.age FROM Sailors s ORDER BY s.rating DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the model of the most expensive headphone.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the model of the most expensive headphone.[/QUESTION][SQL]SELECT h.Model FROM headphone h ORDER BY h.Price DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which headphone model has the highest price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which headphone model has the highest price?[/QUESTION][SQL]SELECT h.model FROM headphone h WHERE h.price = (SELECT MAX(h2.price) FROM headphone h2);
### TaskGenerate a SQL query to answer [QUESTION]List all different headphone models in the alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all different headphone models in the alphabetical order.[/QUESTION][SQL]SELECT DISTINCT h.Model FROM headphone h ORDER BY h.Model ASC;
### TaskGenerate a SQL query to answer [QUESTION]Return the list of distinct headphone models ordered alphabetically.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the list of distinct headphone models ordered alphabetically.[/QUESTION][SQL]SELECT DISTINCT h.Model FROM headphone h ORDER BY h.Model ASC;
### TaskGenerate a SQL query to answer [QUESTION]Which headphone class is the most common one?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which headphone class is the most common one?[/QUESTION][SQL]SELECT h.class, COUNT(h.class) AS count FROM headphone h GROUP BY h.class ORDER BY count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which headphone class contains the most headphones?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which headphone class contains the most headphones?[/QUESTION][SQL]SELECT h.class, COUNT(h.headphone_id) AS count FROM headphone h GROUP BY h.class ORDER BY count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which headphone class does have more than two headphones?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which headphone class does have more than two headphones?[/QUESTION][SQL]SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(h.headphone_id) > 2 ORDER BY h.class NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the headphone class that does not contain more than two headphones.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the headphone class that does not contain more than two headphones.[/QUESTION][SQL]SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(h.headphone_id) <= 2;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of headphones with a price higher than 200 for each class.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of headphones with a price higher than 200 for each class.[/QUESTION][SQL]SELECT h.class, COUNT(*) AS count_headphones FROM headphone h WHERE h.price > 200 GROUP BY h.class ORDER BY h.class NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many headphones cost more than 200 for each headphone class?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many headphones cost more than 200 for each headphone class?[/QUESTION][SQL]SELECT h.class, COUNT(*) AS number_of_headphones FROM headphone h WHERE h.price > 200 GROUP BY h.class ORDER BY number_of_headphones DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]how many different earpads are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]how many different earpads are there?[/QUESTION][SQL]SELECT COUNT(DISTINCT h.Earpads) FROM headphone h;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different earpads.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different earpads.[/QUESTION][SQL]SELECT COUNT(DISTINCT h.Earpads) FROM headphone h;
### TaskGenerate a SQL query to answer [QUESTION]Find the top 2 earpads that are mostly used.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the top 2 earpads that are mostly used.[/QUESTION][SQL]SELECT h.Earpads, COUNT(*) AS usage_count FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY h.Earpads ORDER BY usage_count DESC LIMIT 2;
### TaskGenerate a SQL query to answer [QUESTION]What are the top 2 earpads in terms of the number of headphones using them?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the top 2 earpads in terms of the number of headphones using them?[/QUESTION][SQL]SELECT h.Earpads, COUNT(h.Earpads) AS Count FROM headphone h GROUP BY h.Earpads ORDER BY Count DESC LIMIT 2;
### TaskGenerate a SQL query to answer [QUESTION]What are the model, class, and construction of the cheapest headphone?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the model, class, and construction of the cheapest headphone?[/QUESTION][SQL]SELECT h.model, h.class, h.construction FROM headphone h WHERE h.price = (SELECT MIN(h2.price) FROM headphone h2);
### TaskGenerate a SQL query to answer [QUESTION]Find the model, class, and construction of the headphone with the lowest price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the model, class, and construction of the headphone with the lowest price.[/QUESTION][SQL]SELECT h.model, h.class, h.construction FROM headphone h WHERE h.price = (SELECT MIN(h2.price) FROM headphone h2);
### TaskGenerate a SQL query to answer [QUESTION]Find the average price for each headphone construction.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average price for each headphone construction.[/QUESTION][SQL]SELECT h.Construction, AVG(h.Price) AS Average_Price FROM headphone h GROUP BY h.Construction ORDER BY h.Construction NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How much does headphones cost on average for each headphone construction?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How much does headphones cost on average for each headphone construction?[/QUESTION][SQL]SELECT h.construction, AVG(h.price) AS average_price FROM headphone h GROUP BY h.construction ORDER BY h.construction NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which headphone classes have both headphones with "Bowls" and headphones with "Comfort Pads" earpads?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which headphone classes have both headphones with "Bowls" and headphones with "Comfort Pads" earpads?[/QUESTION][SQL]SELECT h.class FROM headphone h WHERE h.earpads IN ('Bowls', 'Comfort Pads') GROUP BY h.class HAVING COUNT(DISTINCT CASE WHEN h.earpads = 'Bowls' THEN h.headphone_id END) > 0 AND COUNT(DISTINCT CASE WHEN h.earpads = 'Comfort Pads' THEN h.headphone_id END) > 0 ORDER BY h.class NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the headphone classes that contain both headphones using "Bowls" earpads and headphones using "Comfort Pads" earpads.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the headphone classes that contain both headphones using "Bowls" earpads and headphones using "Comfort Pads" earpads.[/QUESTION][SQL]SELECT DISTINCT h.Class FROM headphone h WHERE h.Earpads IN ('Bowls', 'Comfort Pads') ORDER BY h.Class NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which earpads never use plastic construction?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which earpads never use plastic construction?[/QUESTION][SQL]SELECT DISTINCT h.Earpads FROM headphone h WHERE h.Construction!= 'plastic' ORDER BY h.Earpads NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find all earpads that do not use plastic construction.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all earpads that do not use plastic construction.[/QUESTION][SQL]SELECT h.Earpads FROM headphone h WHERE h.Construction!= 'plastic' ORDER BY h.Earpads NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the headphone models whose price is below the average price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the headphone models whose price is below the average price.[/QUESTION][SQL]SELECT h.model FROM headphone h WHERE h.price < (SELECT AVG(h2.price) FROM headphone h2);
### TaskGenerate a SQL query to answer [QUESTION]What are the headphone models that cost less than the average price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the headphone models that cost less than the average price?[/QUESTION][SQL]SELECT h.model FROM headphone h WHERE h.price < (SELECT AVG(h2.price) FROM headphone h2);
### TaskGenerate a SQL query to answer [QUESTION]Sort all store names by store open date.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Sort all store names by store open date.[/QUESTION][SQL]SELECT s.name, TO_DATE(s.date_opened, 'YYYY-MM-DD') AS date_opened FROM store s ORDER BY date_opened;
### TaskGenerate a SQL query to answer [QUESTION]Give me a list of store names, sorted by store open date.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me a list of store names, sorted by store open date.[/QUESTION][SQL]SELECT s.name, TO_DATE(s.date_opened, 'YYYY-MM-DD') AS date_opened FROM store s ORDER BY date_opened;
### TaskGenerate a SQL query to answer [QUESTION]List name and parking info for the stores in the Tarzana neighborhood.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List name and parking info for the stores in the Tarzana neighborhood.[/QUESTION][SQL]SELECT s.Name, s.Parking FROM store s WHERE LOWER(s.Neighborhood) = 'tarzana' ORDER BY s.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which stores are located in the "Tarzana" neighborhood? Return their names and parking information.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which stores are located in the "Tarzana" neighborhood? Return their names and parking information.[/QUESTION][SQL]SELECT s.Name, s.Parking FROM store s WHERE LOWER(s.Neighborhood) = 'tarzana' ORDER BY s.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many different neighborhoods are there for all stores?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different neighborhoods are there for all stores?[/QUESTION][SQL]SELECT COUNT(DISTINCT s.Neighborhood) FROM store s;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of distinct neighborhoods stores are located.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of distinct neighborhoods stores are located.[/QUESTION][SQL]SELECT COUNT(DISTINCT s.Neighborhood) FROM store s;
### TaskGenerate a SQL query to answer [QUESTION]find the number of stores in each neighborhood.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]find the number of stores in each neighborhood.[/QUESTION][SQL]SELECT s.Neighborhood, COUNT(s.Store_ID) AS store_count FROM store s GROUP BY s.Neighborhood ORDER BY store_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many stores are there in each neighborhood?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many stores are there in each neighborhood?[/QUESTION][SQL]SELECT s.Neighborhood, COUNT(s.Store_ID) AS number_of_stores FROM store s GROUP BY s.Neighborhood ORDER BY number_of_stores DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the store which has the most headphones in stock. List the number of headphones as well.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the store which has the most headphones in stock. List the number of headphones as well.[/QUESTION][SQL]SELECT s.Name, SUM(s.Quantity) AS total_headphones FROM stock s GROUP BY s.Store_ID ORDER BY total_headphones DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which store has the headphones in stock? Give me the store name and the total quantity.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which store has the headphones in stock? Give me the store name and the total quantity.[/QUESTION][SQL]SELECT s.Name, SUM(st.Quantity) AS Total_Quantity FROM stock st JOIN store s ON st.Store_ID = s.Store_ID GROUP BY s.Name ORDER BY Total_Quantity DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of stores which have no headphone in stock.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of stores which have no headphone in stock.[/QUESTION][SQL]SELECT s.Name FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock st WHERE st.Store_ID = s.Store_ID)
### TaskGenerate a SQL query to answer [QUESTION]Which stores do not have any headphones in stock? Give me the store names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which stores do not have any headphones in stock? Give me the store names.[/QUESTION][SQL]SELECT s.Name FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock st WHERE st.Store_ID = s.Store_ID)
### TaskGenerate a SQL query to answer [QUESTION]Which headphone models do not have any stock in any store?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which headphone models do not have any stock in any store?[/QUESTION][SQL]SELECT h.Model FROM headphone h WHERE NOT EXISTS (SELECT 1 FROM stock s WHERE s.Headphone_ID = h.Headphone_ID)
### TaskGenerate a SQL query to answer [QUESTION]Find the headphone models that are not in stock in any store.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the headphone models that are not in stock in any store.[/QUESTION][SQL]SELECT h.Model FROM headphone h WHERE NOT EXISTS (SELECT 1 FROM stock s WHERE s.Headphone_ID = h.Headphone_ID)
### TaskGenerate a SQL query to answer [QUESTION]Which headphone model has the largest quantity of stock across all the stores?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which headphone model has the largest quantity of stock across all the stores?[/QUESTION][SQL]SELECT h.Model, SUM(s.Quantity) AS total_quantity FROM stock s JOIN headphone h ON s.Headphone_ID = h.Headphone_ID GROUP BY h.Model ORDER BY total_quantity DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the headphone model whose total quantity in stock is the largest.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the headphone model whose total quantity in stock is the largest.[/QUESTION][SQL]SELECT h.Model, SUM(s.Quantity) AS Total_Quantity FROM stock s JOIN headphone h ON s.Headphone_ID = h.Headphone_ID GROUP BY h.Model ORDER BY Total_Quantity DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many headphones are stored in the Woodman store?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many headphones are stored in the Woodman store?[/QUESTION][SQL]SELECT SUM(s.Quantity) AS total_headphones FROM stock s JOIN store st ON s.Store_ID = st.Store_ID WHERE LOWER(st.Name) = 'woodman';
### TaskGenerate a SQL query to answer [QUESTION]Find the total quantity of headphones stored in the Woodman store.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total quantity of headphones stored in the Woodman store.[/QUESTION][SQL]SELECT SUM(s.Quantity) AS Total_Quantity FROM stock s JOIN store st ON s.Store_ID = st.Store_ID WHERE LOWER(st.Name) = 'woodman';
### TaskGenerate a SQL query to answer [QUESTION]Which neighborhood does not have any headphone in stock?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which neighborhood does not have any headphone in stock?[/QUESTION][SQL]SELECT s.Neighborhood FROM store s WHERE s.Store_ID NOT IN (SELECT s.Store_ID FROM stock) ORDER BY s.Neighborhood NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the neighborhood where no headphones are in stock.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the neighborhood where no headphones are in stock.[/QUESTION][SQL]SELECT s.Neighborhood FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock st WHERE st.Store_ID = s.Store_ID) ORDER BY s.Neighborhood NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many authors do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many authors do we have?[/QUESTION][SQL]SELECT COUNT(*) FROM Author;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of authors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of authors.[/QUESTION][SQL]SELECT COUNT(*) FROM Author;
### TaskGenerate a SQL query to answer [QUESTION]How many papers do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers do we have?[/QUESTION][SQL]SELECT COUNT(*) FROM Paper;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of papers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of papers.[/QUESTION][SQL]SELECT COUNT(*) FROM Paper;
### TaskGenerate a SQL query to answer [QUESTION]How many affiliations do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many affiliations do we have?[/QUESTION][SQL]SELECT COUNT(*) FROM Affiliation;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of affiliations.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of affiliations.[/QUESTION][SQL]SELECT COUNT(*) FROM Affiliation;
### TaskGenerate a SQL query to answer [QUESTION]How many papers do we have in NAACL 2000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers do we have in NAACL 2000?[/QUESTION][SQL]SELECT COUNT(*) FROM Paper p WHERE LOWER(p.venue) = 'naacl' AND p.year = 2000;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of papers in NAACL 2000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of papers in NAACL 2000.[/QUESTION][SQL]SELECT COUNT(*) FROM Paper p WHERE LOWER(p.venue) = 'naacl' AND p.year = 2000;
### TaskGenerate a SQL query to answer [QUESTION]How many papers are published in year 2009 by Columbia University?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers are published in year 2009 by Columbia University?[/QUESTION][SQL]SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.affiliation_id::text) = 'columbia university' AND p.year = 2009;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of papers published by Columbia University in 2009.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of papers published by Columbia University in 2009.[/QUESTION][SQL]SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.affiliation_id::text) = 'columbia university' AND p.year = 2009;
### TaskGenerate a SQL query to answer [QUESTION]List names and addresses for all affiliations.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List names and addresses for all affiliations.[/QUESTION][SQL]SELECT a.name AS affiliation_name, a.address FROM Affiliation a ORDER BY a.name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and addresses for all affiliations?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and addresses for all affiliations?[/QUESTION][SQL]SELECT a.affiliation_id, a.name, a.address FROM Affiliation a ORDER BY a.affiliation_id;
### TaskGenerate a SQL query to answer [QUESTION]List all venues and years for papers ordered by year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all venues and years for papers ordered by year.[/QUESTION][SQL]SELECT p.venue, p.year FROM Paper p ORDER BY p.year;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct venues for papers, ordered by year?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct venues for papers, ordered by year?[/QUESTION][SQL]SELECT p.venue, p.year FROM Paper p GROUP BY p.venue, p.year ORDER BY p.year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the titles and paper IDs for papers written by Harvard University.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the titles and paper IDs for papers written by Harvard University.[/QUESTION][SQL]SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE LOWER(af.name) = 'harvard university' ORDER BY p.year DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and paper ids for papers written in affiliation with Harvard University?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and paper ids for papers written in affiliation with Harvard University?[/QUESTION][SQL]SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE LOWER(af.name) = 'harvard university' ORDER BY p.year DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find all papers with titles and paper IDs written by Mckeown.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all papers with titles and paper IDs written by Mckeown.[/QUESTION][SQL]SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.author_id::text) ='mckeown' ORDER BY p.year DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and paper ids for papers written by Mckeown?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and paper ids for papers written by Mckeown?[/QUESTION][SQL]SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.author_id::text) ='mckeown' ORDER BY p.year DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.[/QUESTION][SQL]SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name IN ('Stanford University', 'Columbia University')) GROUP BY p.paper_id, p.title ORDER BY p.paper_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?[/QUESTION][SQL]SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name ilike '%Stanford%') AND al.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name ilike '%Columbia%');
### TaskGenerate a SQL query to answer [QUESTION]Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.[/QUESTION][SQL]SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown,%Kathleen%' OR name ilike '%Rambow,%Owen%') GROUP BY p.paper_id, p.title ORDER BY p.paper_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?[/QUESTION][SQL]SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown,%Kathleen%' OR name ilike '%Rambow,%Owen%') GROUP BY p.title, p.paper_id;
### TaskGenerate a SQL query to answer [QUESTION]Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.[/QUESTION][SQL]SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown%') AND al.author_id NOT IN (SELECT author_id FROM Author WHERE name ilike '%Rambow%');
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and paper ids which have Mckeown as an author, but not Rambow?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and paper ids which have Mckeown as an author, but not Rambow?[/QUESTION][SQL]SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown%') AND al.author_id NOT IN (SELECT author_id FROM Author WHERE name ilike '%Rambow%');
### TaskGenerate a SQL query to answer [QUESTION]Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.[/QUESTION][SQL]SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown,%Kathleen%' OR name ilike '%Rambow,%Owen%') ORDER BY p.year DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?[/QUESTION][SQL]SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown,%Kathleen%' OR name ilike '%Rambow,%Owen%') ORDER BY p.paper_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the names of all authors and their number of papers in descending order by number of papers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of all authors and their number of papers in descending order by number of papers.[/QUESTION][SQL]SELECT a.name, COUNT(al.paper_id) AS num_papers FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name ORDER BY num_papers DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many papers did each author publish, ordered by number of papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers did each author publish, ordered by number of papers?[/QUESTION][SQL]SELECT a.name, COUNT(al.paper_id) AS paper_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name ORDER BY paper_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]List all affiliations with ascending ordered number of papers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all affiliations with ascending ordered number of papers.[/QUESTION][SQL]SELECT a.name, COUNT(al.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id GROUP BY a.name ORDER BY paper_count ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all affiliations, ordered by number of papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all affiliations, ordered by number of papers?[/QUESTION][SQL]SELECT a.name, COUNT(al.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id GROUP BY a.name ORDER BY paper_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]List names of all authors who have more than 50 papers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List names of all authors who have more than 50 papers.[/QUESTION][SQL]SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name HAVING COUNT(al.paper_id) > 50 ORDER BY a.name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all authors who have more than 50 papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all authors who have more than 50 papers?[/QUESTION][SQL]SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name HAVING COUNT(al.paper_id) > 50 ORDER BY a.name;
### TaskGenerate a SQL query to answer [QUESTION]List names of all authors who have only 1 paper.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List names of all authors who have only 1 paper.[/QUESTION][SQL]SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name HAVING COUNT(al.paper_id) = 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of authors who have exactly 1 paper?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of authors who have exactly 1 paper?[/QUESTION][SQL]SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name HAVING COUNT(al.paper_id) = 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the venue and year with the most number of publications?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the venue and year with the most number of publications?[/QUESTION][SQL]SELECT p.venue, p.year, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue, p.year ORDER BY publication_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What was the venue and year with the most publications?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What was the venue and year with the most publications?[/QUESTION][SQL]SELECT p.venue, p.year, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue, p.year ORDER BY publication_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the venue with the least number of publications?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the venue with the least number of publications?[/QUESTION][SQL]SELECT p.venue FROM Paper p GROUP BY p.venue ORDER BY COUNT(p.paper_id) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which venue has the fewest publications?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which venue has the fewest publications?[/QUESTION][SQL]SELECT p.venue, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue ORDER BY publication_count ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many papers cite paper with id A00-1002?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers cite paper with id A00-1002?[/QUESTION][SQL]SELECT COUNT(*) FROM Citation c WHERE c.cited_paper_id = 'A00-1002';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of papers which cited a paper with id A00-1002.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of papers which cited a paper with id A00-1002.[/QUESTION][SQL]SELECT COUNT(DISTINCT c.paper_id) FROM Citation c WHERE c.cited_paper_id = 'A00-1002';
### TaskGenerate a SQL query to answer [QUESTION]How many reference papers does paper with id D12-1027 have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many reference papers does paper with id D12-1027 have?[/QUESTION][SQL]SELECT COUNT(DISTINCT c.cited_paper_id) FROM Citation c WHERE c.paper_id = 'D12-1027';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of references the paper with id D12-1027 has.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of references the paper with id D12-1027 has.[/QUESTION][SQL]SELECT COUNT(c.cited_paper_id) AS num_citations FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id WHERE p.paper_id = 'D12-1027';
### TaskGenerate a SQL query to answer [QUESTION]What is the id and the number of citations of the most cited paper?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id and the number of citations of the most cited paper?[/QUESTION][SQL]SELECT p.paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY citation_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the id and the number of citations of the most cited paper.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the id and the number of citations of the most cited paper.[/QUESTION][SQL]SELECT p.paper_id, COUNT(c.cited_paper_id) AS num_citations FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY num_citations DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the title of the paper which cites most number of papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the title of the paper which cites most number of papers?[/QUESTION][SQL]SELECT p.title FROM Paper p JOIN (SELECT c.cited_paper_id, COUNT(c.paper_id) AS citation_count FROM Citation c GROUP BY c.cited_paper_id ORDER BY citation_count DESC LIMIT 1) AS cc ON p.paper_id = cc.cited_paper_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the title of the paper which cites the most other papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title of the paper which cites the most other papers?[/QUESTION][SQL]SELECT p.title FROM Paper p JOIN (SELECT c.paper_id, COUNT(c.cited_paper_id) AS num_citations FROM Citation c GROUP BY c.paper_id ORDER BY num_citations DESC LIMIT 1) AS m ON p.paper_id = m.paper_id;
### TaskGenerate a SQL query to answer [QUESTION]List top 10 most cited papers and their numbers of citations.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List top 10 most cited papers and their numbers of citations.[/QUESTION][SQL]SELECT p.paper_id, COUNT(c.cited_paper_id) AS num_citations FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY num_citations DESC LIMIT 10;
### TaskGenerate a SQL query to answer [QUESTION]What are the 10 most cited papers, and how many citations did each have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the 10 most cited papers, and how many citations did each have?[/QUESTION][SQL]SELECT p.paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY citation_count DESC LIMIT 10;
### TaskGenerate a SQL query to answer [QUESTION]How many citations does Mckeown, Kathleen have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many citations does Mckeown, Kathleen have?[/QUESTION][SQL]SELECT COUNT(*) AS total_citations FROM Citation c JOIN Paper p ON c.paper_id = p.paper_id JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE LOWER(a.name) ='mckeown,kathleen';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of citations Mckeown, Kathleen has.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of citations Mckeown, Kathleen has.[/QUESTION][SQL]SELECT COUNT(*) AS num_citations FROM Citation c JOIN Paper p ON c.cited_paper_id = p.paper_id JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE LOWER(a.name) ='mckeown,kathleen';
### TaskGenerate a SQL query to answer [QUESTION]How many papers does Mckeown, Kathleen cite?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers does Mckeown, Kathleen cite?[/QUESTION][SQL]SELECT COUNT(DISTINCT c.cited_paper_id) AS number_of_citations FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id WHERE LOWER(al.author_id::text) ='mckeown,kathleen';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of papers Mckeown, Kathleen has cited.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of papers Mckeown, Kathleen has cited.[/QUESTION][SQL]SELECT COUNT(DISTINCT c.cited_paper_id) AS num_citations FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id WHERE LOWER(al.author_id::text) ='mckeown,kathleen';
### TaskGenerate a SQL query to answer [QUESTION]Find the name and number of citations of the author who has most citations among all authors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and number of citations of the author who has most citations among all authors?[/QUESTION][SQL]SELECT a.name, COUNT(c.cited_paper_id) AS num_citations FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id LEFT JOIN Citation c ON p.paper_id = c.cited_paper_id GROUP BY a.name ORDER BY num_citations DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name and number of citations of the author with the greatest number of citations among authors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and number of citations of the author with the greatest number of citations among authors?[/QUESTION][SQL]SELECT a.name, COUNT(c.paper_id) AS num_citations FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id LEFT JOIN Citation c ON p.paper_id = c.paper_id GROUP BY a.name ORDER BY num_citations DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the venues and years where Mckeown, Kathleen had papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the venues and years where Mckeown, Kathleen had papers?[/QUESTION][SQL]SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.author_id::text) = 'kathleen mckeown' ORDER BY p.year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which venues and years did Mckeown, Kathleen have papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which venues and years did Mckeown, Kathleen have papers?[/QUESTION][SQL]SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.author_id::text) = 'kathleen mckeown' ORDER BY p.year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the venues and years where Columbia University had papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the venues and years where Columbia University had papers?[/QUESTION][SQL]SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University') ORDER BY p.year;
### TaskGenerate a SQL query to answer [QUESTION]Which venues and years did Columbia University have papers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which venues and years did Columbia University have papers?[/QUESTION][SQL]SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University') ORDER BY p.year;
### TaskGenerate a SQL query to answer [QUESTION]Which author had the most papers in the year 2009?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which author had the most papers in the year 2009?[/QUESTION][SQL]SELECT a.name, COUNT(al.paper_id) AS paper_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY paper_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the author with the most papers in 2009?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the author with the most papers in 2009?[/QUESTION][SQL]SELECT a.name FROM Author a JOIN (SELECT al.author_id, COUNT(DISTINCT al.paper_id) AS paper_count FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY al.author_id ORDER BY paper_count DESC LIMIT 1) sub ON a.author_id = sub.author_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the top 3 affiliations that have the most papers in year 2009?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the top 3 affiliations that have the most papers in year 2009?[/QUESTION][SQL]SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY paper_count DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]Which 3 affiliations had the most papers in 2009?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which 3 affiliations had the most papers in 2009?[/QUESTION][SQL]SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY paper_count DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]How many papers does Columbia University have in or before 2009?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers does Columbia University have in or before 2009?[/QUESTION][SQL]SELECT COUNT(p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.affiliation_id::text) = 'columbia university' AND p.year <= 2009;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of papers Columbia University had during or prior to 2009.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of papers Columbia University had during or prior to 2009.[/QUESTION][SQL]SELECT COUNT(p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.affiliation_id::text) = 'columbia university' AND p.year <= 2009;
### TaskGenerate a SQL query to answer [QUESTION]How many papers does Stanford University have between 2000 and 2009?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers does Stanford University have between 2000 and 2009?[/QUESTION][SQL]SELECT COUNT(DISTINCT p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.affiliation_id::text) ='stanford university' AND p.year BETWEEN 2000 AND 2009;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of papers Stanford University had between 2000 and 2009.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of papers Stanford University had between 2000 and 2009.[/QUESTION][SQL]SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.affiliation_id::text) ='stanford university' AND p.year BETWEEN 2000 AND 2009;
### TaskGenerate a SQL query to answer [QUESTION]What is the title of the paper that has most number of authors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title of the paper that has most number of authors?[/QUESTION][SQL]SELECT p.title FROM Paper p JOIN (SELECT al.paper_id, COUNT(DISTINCT al.author_id) AS author_count FROM Author_list al GROUP BY al.paper_id ORDER BY author_count DESC LIMIT 1) AS ac ON p.paper_id = ac.paper_id;
### TaskGenerate a SQL query to answer [QUESTION]Give the title of the paper with the most authors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the title of the paper with the most authors.[/QUESTION][SQL]SELECT p.title FROM Paper p JOIN (SELECT al.paper_id, COUNT(DISTINCT al.author_id) AS author_count FROM Author_list al GROUP BY al.paper_id ORDER BY author_count DESC LIMIT 1) AS ac ON p.paper_id = ac.paper_id;
### TaskGenerate a SQL query to answer [QUESTION]How many collaborators has Mckeown, Kathleen had?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many collaborators has Mckeown, Kathleen had?[/QUESTION][SQL]SELECT COUNT(DISTINCT al.author_id) FROM Author a JOIN Author_list al ON a.author_id = al.author_id WHERE LOWER(a.name) ='mckeown,kathleen';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of collaborators that Mckeown, Kathleen has had.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of collaborators that Mckeown, Kathleen has had.[/QUESTION][SQL]SELECT COUNT(DISTINCT al.author_id) FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE LOWER(a.name) ='mckeown, kathleen';
### TaskGenerate a SQL query to answer [QUESTION]Who has the most papers co-authored with Mckeown, Kathleen?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who has the most papers co-authored with Mckeown, Kathleen?[/QUESTION][SQL]SELECT COUNT(DISTINCT al.paper_id) AS paper_count FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE LOWER(a.name) LIKE '%mckeown,%kathleen%' GROUP BY a.author_id ORDER BY paper_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the author who has co-authored the most papers with Mckeown, Kathleen?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the author who has co-authored the most papers with Mckeown, Kathleen?[/QUESTION][SQL]SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id WHERE al.author_id!= (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') GROUP BY a.name ORDER BY COUNT(al.paper_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the id of the papers whose title has the key word 'translation'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the id of the papers whose title has the key word 'translation'.[/QUESTION][SQL]SELECT p.paper_id FROM Paper p WHERE LOWER(p.title) LIKE '%translation%' ORDER BY p.paper_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids for papers with titles containing 'translation'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids for papers with titles containing 'translation'?[/QUESTION][SQL]SELECT p.paper_id FROM Paper p WHERE LOWER(p.title) LIKE '%translation%' ORDER BY p.paper_id;
### TaskGenerate a SQL query to answer [QUESTION]Find the id and title of the papers that are never cited by others.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the id and title of the papers that are never cited by others.[/QUESTION][SQL]SELECT p.paper_id, p.title FROM Paper p WHERE p.paper_id NOT IN (SELECT c.cited_paper_id FROM Citation c);
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and titles for papers that have never been cited?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and titles for papers that have never been cited?[/QUESTION][SQL]SELECT p.paper_id, p.title FROM Paper p WHERE p.paper_id NOT IN (SELECT c.cited_paper_id FROM Citation c UNION SELECT c.paper_id FROM Citation c);
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.[/QUESTION][SQL]SELECT a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id GROUP BY a.name HAVING a.address ilike '%China%' ORDER BY COUNT(al.paper_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.[/QUESTION][SQL]SELECT a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id WHERE a.address ilike '%China%' GROUP BY a.name ORDER BY COUNT(al.paper_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of papers published in different conferences each year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of papers published in different conferences each year.[/QUESTION][SQL]SELECT p.venue, p.year, COUNT(p.paper_id) AS num_papers FROM Paper p GROUP BY p.venue, p.year ORDER BY p.venue, p.year;
### TaskGenerate a SQL query to answer [QUESTION]How many papers are published in each venue in each year?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers are published in each venue in each year?[/QUESTION][SQL]SELECT p.venue, p.year, COUNT(p.paper_id) AS number_of_papers FROM Paper p GROUP BY p.venue, p.year ORDER BY p.venue, p.year;
### TaskGenerate a SQL query to answer [QUESTION]Find the total number of papers for each affiliation.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total number of papers for each affiliation.[/QUESTION][SQL]SELECT al.affiliation_id, COUNT(DISTINCT al.paper_id) AS paper_count FROM Author_list al GROUP BY al.affiliation_id ORDER BY paper_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many papers has each affiliation published?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many papers has each affiliation published?[/QUESTION][SQL]SELECT al.affiliation_id, COUNT(DISTINCT al.paper_id) AS paper_count FROM Author_list al GROUP BY al.affiliation_id ORDER BY paper_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the titles of papers that have more than 50 citations.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the titles of papers that have more than 50 citations.[/QUESTION][SQL]SELECT p.title FROM Paper p JOIN (SELECT c.paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Citation c GROUP BY c.paper_id HAVING COUNT(c.cited_paper_id) > 50) cc ON p.paper_id = cc.paper_id ORDER BY p.title;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles for papers with more than 50 citations?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles for papers with more than 50 citations?[/QUESTION][SQL]SELECT p.title FROM Paper p JOIN (SELECT c.paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Citation c GROUP BY c.paper_id HAVING COUNT(c.cited_paper_id) > 50) cc ON p.paper_id = cc.paper_id ORDER BY p.title;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of authors who did not publish any paper that is cited more than 50 times.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of authors who did not publish any paper that is cited more than 50 times.[/QUESTION][SQL]SELECT COUNT(DISTINCT al.author_id) FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id LEFT JOIN (SELECT c.cited_paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Citation c GROUP BY c.cited_paper_id HAVING COUNT(c.cited_paper_id) > 50) cc ON p.paper_id = cc.cited_paper_id WHERE cc.cited_paper_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]How many authors have not published a paper with more than 50 citations?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many authors have not published a paper with more than 50 citations?[/QUESTION][SQL]SELECT COUNT(DISTINCT al.author_id) FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id LEFT JOIN (SELECT c.paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Citation c GROUP BY c.paper_id HAVING COUNT(c.cited_paper_id) > 50) cc ON p.paper_id = cc.paper_id WHERE cc.paper_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of authors who published some paper on NAACL and ACL in the year 2009.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of authors who published some paper on NAACL and ACL in the year 2009.[/QUESTION][SQL]SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE LOWER(p.venue) IN ('naacl', 'acl') AND p.year = 2009 ORDER BY a.name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of authors who published in both NAACL and ACL in 2009?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of authors who published in both NAACL and ACL in 2009?[/QUESTION][SQL]SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue IN ('NAACL', 'ACL') AND p.year = 2009;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of authors who have never published a paper in ACL.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of authors who have never published a paper in ACL.[/QUESTION][SQL]SELECT DISTINCT a.name FROM Author a WHERE a.author_id NOT IN (SELECT al.author_id FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE LOWER(p.venue) = 'acl')
### TaskGenerate a SQL query to answer [QUESTION]What are the names of authors who have not published a paper in ACL?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of authors who have not published a paper in ACL?[/QUESTION][SQL]SELECT DISTINCT a.name FROM Author a WHERE a.author_id NOT IN (SELECT al.author_id FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE LOWER(p.venue) = 'acl') ORDER BY a.name;
### TaskGenerate a SQL query to answer [QUESTION]How many conferences are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many conferences are there?[/QUESTION][SQL]SELECT COUNT(*) FROM conference;
### TaskGenerate a SQL query to answer [QUESTION]What is the total number of conferences?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total number of conferences?[/QUESTION][SQL]SELECT COUNT(*) FROM conference;
### TaskGenerate a SQL query to answer [QUESTION]List all distinct conference names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all distinct conference names.[/QUESTION][SQL]SELECT DISTINCT c.Conference_Name FROM conference c ORDER BY c.Conference_Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the different conference names?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different conference names?[/QUESTION][SQL]SELECT DISTINCT c.Conference_Name FROM conference c ORDER BY c.Conference_Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List all conference name, year, and location.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all conference name, year, and location.[/QUESTION][SQL]SELECT c.Conference_Name, c.Year, c.Location FROM conference c ORDER BY c.Year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names, years, and locations of all conferences?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names, years, and locations of all conferences?[/QUESTION][SQL]SELECT c.Conference_Name, c.Year, c.Location FROM conference c ORDER BY c.Year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all conference names and the number of times each conference has.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all conference names and the number of times each conference has.[/QUESTION][SQL]SELECT c.Conference_Name, COUNT(c.Conference_ID) AS num_conferences FROM conference c GROUP BY c.Conference_Name ORDER BY num_conferences DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For each conference name, how many times has it occurred?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each conference name, how many times has it occurred?[/QUESTION][SQL]SELECT c.Conference_Name, COUNT(c.Conference_ID) AS number_of_conferences FROM conference c GROUP BY c.Conference_Name ORDER BY number_of_conferences DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]show all years and the number of conferences in each year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]show all years and the number of conferences in each year.[/QUESTION][SQL]SELECT c.year, COUNT(c.conference_id) AS num_conferences FROM conference c GROUP BY c.year ORDER BY c.year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many conferences occur every year?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many conferences occur every year?[/QUESTION][SQL]SELECT c.year, COUNT(c.conference_id) AS number_of_conferences FROM conference c GROUP BY c.year ORDER BY c.year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]which year has least number of conferences?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]which year has least number of conferences?[/QUESTION][SQL]SELECT c.year FROM conference c GROUP BY c.year ORDER BY COUNT(c.conference_id) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What year had the fewest conferences?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What year had the fewest conferences?[/QUESTION][SQL]SELECT c.year FROM conference c GROUP BY c.year ORDER BY COUNT(c.conference_id) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show all locations where at least two conferences are located.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all locations where at least two conferences are located.[/QUESTION][SQL]SELECT c.Location FROM conference c GROUP BY c.Location HAVING COUNT(c.Conference_ID) >= 2 ORDER BY c.Location NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are all locations that have hosted at least two conferences?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all locations that have hosted at least two conferences?[/QUESTION][SQL]SELECT c.Location FROM conference c GROUP BY c.Location HAVING COUNT(c.Conference_ID) >= 2 ORDER BY c.Location NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the institution name, location and founded year of all institutions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the institution name, location and founded year of all institutions.[/QUESTION][SQL]SELECT i.Institution_Name, i.Location, TO_CHAR(TO_TIMESTAMP(i.Founded), 'YYYY') AS Founded FROM institution i ORDER BY i.Institution_Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names, locations, and founding years for all institutions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names, locations, and founding years for all institutions?[/QUESTION][SQL]SELECT i.institution_name, i.location, TO_CHAR(TO_TIMESTAMP(i.founded), 'YYYY') AS founded_year FROM institution i ORDER BY i.institution_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many institution are founded between 1850 and 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many institution are founded between 1850 and 1900?[/QUESTION][SQL]SELECT COUNT(*) FROM institution i WHERE i.founded BETWEEN 1850 AND 1900;
### TaskGenerate a SQL query to answer [QUESTION]How many institutions were founded between 1850 and 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many institutions were founded between 1850 and 1900?[/QUESTION][SQL]SELECT COUNT(*) FROM institution i WHERE i.founded BETWEEN 1850 AND 1900;
### TaskGenerate a SQL query to answer [QUESTION]Show the institution name and location of institution that is most recently founded.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the institution name and location of institution that is most recently founded.[/QUESTION][SQL]SELECT i.Institution_Name, i.Location FROM institution i ORDER BY i.Founded DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and locations of the most recently-founded institution?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and locations of the most recently-founded institution?[/QUESTION][SQL]SELECT i.Institution_Name, i.Location FROM institution i ORDER BY i.Founded DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show the institution name and the number of staff for each institution founded after 1800.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the institution name and the number of staff for each institution founded after 1800.[/QUESTION][SQL]SELECT i.Institution_Name, COUNT(s.staff_ID) AS num_staff FROM institution i JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE i.Founded > 1800 GROUP BY i.Institution_Name ORDER BY num_staff DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For each institution id, how many staff members does each institution have that was founded after 1800? return their names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each institution id, how many staff members does each institution have that was founded after 1800? return their names.[/QUESTION][SQL]SELECT i.institution_id, COUNT(s.staff_id) AS number_of_staff, s.name FROM institution i JOIN staff s ON i.institution_id = s.institution_id WHERE i.founded > 1800 GROUP BY i.institution_id, s.name ORDER BY number_of_staff DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show institution name which there is no staff in our record.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show institution name which there is no staff in our record.[/QUESTION][SQL]SELECT i.Institution_Name FROM institution i WHERE i.Institution_ID NOT IN (SELECT s.Institution_ID FROM staff s)
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the institution with no staff in the records?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the institution with no staff in the records?[/QUESTION][SQL]SELECT i.Institution_Name FROM institution i WHERE i.Institution_ID NOT IN (SELECT s.Institution_ID FROM staff s) ORDER BY i.Institution_Name NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show all staff name who are above the average age.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all staff name who are above the average age.[/QUESTION][SQL]SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(age) FROM staff);
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all staff members who are older than average?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all staff members who are older than average?[/QUESTION][SQL]SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(age) FROM staff);
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum and minimum age of all staff from the United States?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum and minimum age of all staff from the United States?[/QUESTION][SQL]SELECT MAX(s.Age) AS max_age, MIN(s.Age) AS min_age FROM staff s WHERE LOWER(s.Nationality) = 'american' OR LOWER(s.Nationality) = 'united states';
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum ages for all staff?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum ages for all staff?[/QUESTION][SQL]SELECT MAX(s.Age) AS max_age, MIN(s.Age) AS min_age FROM staff s;
### TaskGenerate a SQL query to answer [QUESTION]Show all conference names which the staff from Canada attends.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all conference names which the staff from Canada attends.[/QUESTION][SQL]SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID JOIN staff s ON cp.staff_ID = s.staff_ID WHERE LOWER(s.Nationality) = 'canadian' ORDER BY c.Conference_Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all the conferences that has staff from Canada attending?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all the conferences that has staff from Canada attending?[/QUESTION][SQL]SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID JOIN staff s ON cp.staff_ID = s.staff_ID WHERE LOWER(s.Nationality) = 'canadian' ORDER BY c.Conference_Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all staff names who have been both speaker and sponsor in some conference.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all staff names who have been both speaker and sponsor in some conference.[/QUESTION][SQL]SELECT s.name FROM staff s WHERE s.staff_ID IN (SELECT cp.staff_ID FROM conference_participation cp WHERE LOWER(cp.role) ='speaker' AND cp.staff_ID IN (SELECT cp2.staff_ID FROM conference_participation cp2 WHERE LOWER(cp2.role) ='sponsor')) ORDER BY s.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the staff members who have been both a speaker and a sponsor at some conference?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the staff members who have been both a speaker and a sponsor at some conference?[/QUESTION][SQL]SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID WHERE LOWER(cp.role) IN ('speaker','sponsor') GROUP BY s.name HAVING COUNT(DISTINCT CASE WHEN LOWER(cp.role) ='speaker' THEN cp.Conference_ID ELSE NULL END) > 0 AND COUNT(DISTINCT CASE WHEN LOWER(cp.role) ='sponsor' THEN cp.Conference_ID ELSE NULL END) > 0;
### TaskGenerate a SQL query to answer [QUESTION]Show all names who have been in both ACL and Naccl.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all names who have been in both ACL and Naccl.[/QUESTION][SQL]SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID WHERE cp.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name ilike '%ACL%') AND cp.staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name ilike '%NACCL%')) GROUP BY s.name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of everbody who has participated in both the ACL and NACCL conferences?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of everbody who has participated in both the ACL and NACCL conferences?[/QUESTION][SQL]SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID WHERE cp.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name ilike '%ACL%') AND cp.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name ilike '%NACCL%');
### TaskGenerate a SQL query to answer [QUESTION]Show all staff names who attend a conference in 2003 or 2004.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all staff names who attend a conference in 2003 or 2004.[/QUESTION][SQL]SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.year IN (2003, 2004) ORDER BY s.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the staff names who participated in conferences between 2003 or 2004?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the staff names who participated in conferences between 2003 or 2004?[/QUESTION][SQL]SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.year BETWEEN 2003 AND 2004 ORDER BY s.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the conference name and year and the number of participants for each conference.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the conference name and year and the number of participants for each conference.[/QUESTION][SQL]SELECT c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS participant_count FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name, c.Year ORDER BY c.Conference_Name NULLS LAST, c.Year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For each conference id, what are their names, year, and number of participants?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each conference id, what are their names, year, and number of participants?[/QUESTION][SQL]SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS num_participants FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name, c.Year ORDER BY c.Conference_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the conferences that have the top 2 most number of attendants.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the conferences that have the top 2 most number of attendants.[/QUESTION][SQL]SELECT c.Conference_Name, COUNT(cp.staff_ID) AS attendance_count FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY attendance_count DESC LIMIT 2
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the conferences that have the top 2 most people attending?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the conferences that have the top 2 most people attending?[/QUESTION][SQL]SELECT c.Conference_Name, COUNT(cp.staff_ID) AS attendance FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY attendance DESC LIMIT 2;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and nationality of the people who did not participate in any ACL conference.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and nationality of the people who did not participate in any ACL conference.[/QUESTION][SQL]SELECT s.name, s.nationality FROM staff s LEFT JOIN conference_participation cp ON s.staff_ID = cp.staff_ID WHERE cp.staff_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and nationalities of the people who did not participate in any ACL conferences?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and nationalities of the people who did not participate in any ACL conferences?[/QUESTION][SQL]SELECT s.name, s.nationality FROM staff s WHERE NOT EXISTS (SELECT 1 FROM conference_participation cp WHERE cp.staff_ID = s.staff_ID AND cp.Conference_ID IN (SELECT c.Conference_ID FROM conference c WHERE c.Location LIKE '%ACL%')) ORDER BY s.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and location of the universities that did not have any staff participated in any conference in 2004.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and location of the universities that did not have any staff participated in any conference in 2004.[/QUESTION][SQL]SELECT i.Institution_Name, i.Location FROM institution i LEFT JOIN (SELECT cp.staff_ID, c.Location AS Conference_Location FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004) AS cp2 ON i.Institution_ID = cp2.staff_ID WHERE cp2.staff_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?[/QUESTION][SQL]SELECT i.Institution_Name, i.Location FROM institution i LEFT JOIN (SELECT cp.staff_ID, c.Location AS conference_location FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004) AS cp2 ON i.Institution_ID = cp2.staff_ID WHERE cp2.staff_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the oldest pilot?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the oldest pilot?[/QUESTION][SQL]SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age = (SELECT MIN(ps2.age) FROM PilotSkills ps2);
### TaskGenerate a SQL query to answer [QUESTION]Return the name of the oldest pilot.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the name of the oldest pilot.[/QUESTION][SQL]SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age = (SELECT MIN(ps2.age) FROM PilotSkills ps2);
### TaskGenerate a SQL query to answer [QUESTION]What are the names of pilots whose age is below the average age, ordered by age?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of pilots whose age is below the average age, ordered by age?[/QUESTION][SQL]SELECT ps.pilot_name, AVG(ps.age) AS avg_age FROM PilotSkills ps GROUP BY ps.pilot_name HAVING MIN(ps.age) < AVG(ps.age) ORDER BY ps.age ASC;
### TaskGenerate a SQL query to answer [QUESTION]Return the names of pilots who are younger than average, ordered by age ascending.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of pilots who are younger than average, ordered by age ascending.[/QUESTION][SQL]SELECT ps.pilot_name, AVG(ps.age) AS avg_age FROM PilotSkills ps GROUP BY ps.pilot_name HAVING MIN(ps.age) < AVG(ps.age) ORDER BY ps.age ASC;
### TaskGenerate a SQL query to answer [QUESTION]Find all information of on pilots whose age is less than 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all information of on pilots whose age is less than 30.[/QUESTION][SQL]SELECT ps.pilot_name, ps.age FROM PilotSkills ps WHERE ps.age < 30;
### TaskGenerate a SQL query to answer [QUESTION]What is all the information about pilots who are younger than 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is all the information about pilots who are younger than 30?[/QUESTION][SQL]SELECT ps.pilot_name, ps.age FROM PilotSkills ps WHERE ps.age < 30;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of all pilots who have a plane named Piper Cub and is under 35.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of all pilots who have a plane named Piper Cub and is under 35.[/QUESTION][SQL]SELECT ps.pilot_name FROM PilotSkills ps WHERE LOWER(ps.plane_name) = 'piper cub' AND ps.age < 35;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of pilots who are younger than 35 and have a plane named Piper Cub?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of pilots who are younger than 35 and have a plane named Piper Cub?[/QUESTION][SQL]SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age < 35 AND LOWER(ps.plane_name) = 'piper cub' ORDER BY ps.pilot_name;
### TaskGenerate a SQL query to answer [QUESTION]Where is the plane F-14 Fighter located?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Where is the plane F-14 Fighter located?[/QUESTION][SQL]SELECT h.location FROM Hangar h WHERE h.plane_name = 'F-14 Fighter';
### TaskGenerate a SQL query to answer [QUESTION]Return the location of the hangar in which F-14 Fighter is located.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the location of the hangar in which F-14 Fighter is located.[/QUESTION][SQL]SELECT h.location FROM Hangar h WHERE h.plane_name = 'F-14 Fighter'
### TaskGenerate a SQL query to answer [QUESTION]How many different places have some plane?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different places have some plane?[/QUESTION][SQL]SELECT COUNT(DISTINCT h.location) FROM Hangar h;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different locations of hangars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different locations of hangars.[/QUESTION][SQL]SELECT COUNT(DISTINCT h.location) FROM Hangar h;
### TaskGenerate a SQL query to answer [QUESTION]Which plane does the pilot Jones with age 32 has?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which plane does the pilot Jones with age 32 has?[/QUESTION][SQL]SELECT ps.plane_name FROM PilotSkills ps WHERE LOWER(ps.pilot_name) = 'jones' AND ps.age = 32;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of planes that the pilot Jones who is 32 has?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of planes that the pilot Jones who is 32 has?[/QUESTION][SQL]SELECT ps.plane_name FROM PilotSkills ps WHERE LOWER(ps.pilot_name) = 'jones' AND ps.age = 32;
### TaskGenerate a SQL query to answer [QUESTION]How many pilots who are older than 40?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many pilots who are older than 40?[/QUESTION][SQL]SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age > 40;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of pilots with age greater than 40.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of pilots with age greater than 40.[/QUESTION][SQL]SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age > 40;
### TaskGenerate a SQL query to answer [QUESTION]How many plane B-52 Bomber owned by the pilot who is under 35?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many plane B-52 Bomber owned by the pilot who is under 35?[/QUESTION][SQL]SELECT COUNT(*) AS number_of_planes FROM PilotSkills ps WHERE LOWER(ps.plane_name) = 'b-52 bomber' AND ps.age < 35;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of B-52 Bombers owned by pilots under 35.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of B-52 Bombers owned by pilots under 35.[/QUESTION][SQL]SELECT COUNT(*) AS num_bombers FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(h.location) = 'b-52 bomber' AND ps.age < 35;
### TaskGenerate a SQL query to answer [QUESTION]Who is the youngest pilot to fly the plane Piper Cub?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who is the youngest pilot to fly the plane Piper Cub?[/QUESTION][SQL]SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' ORDER BY ps.age ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the name of the youngest pilot to fly Piper Cub.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the name of the youngest pilot to fly Piper Cub.[/QUESTION][SQL]SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' ORDER BY ps.age ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the most popular plane?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the most popular plane?[/QUESTION][SQL]SELECT h.plane_name FROM Hangar h GROUP BY h.plane_name ORDER BY COUNT(h.plane_name) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the plane that is flown the most often?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the plane that is flown the most often?[/QUESTION][SQL]SELECT h.plane_name FROM Hangar h GROUP BY h.plane_name ORDER BY COUNT(h.plane_name) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the least popular plane?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the least popular plane?[/QUESTION][SQL]SELECT h.plane_name FROM Hangar h ORDER BY COUNT(DISTINCT ps.pilot_name) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the plane that is flown the least often?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the plane that is flown the least often?[/QUESTION][SQL]SELECT h.plane_name FROM Hangar h WHERE (SELECT COUNT(*) FROM PilotSkills ps WHERE ps.plane_name = h.plane_name) = (SELECT MIN(ps2.plane_name) FROM PilotSkills ps2);
### TaskGenerate a SQL query to answer [QUESTION]How many pilots whose planes are in Chicago?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many pilots whose planes are in Chicago?[/QUESTION][SQL]SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(h.location) = 'chicago';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of pilots who have planes in Chicago.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of pilots who have planes in Chicago.[/QUESTION][SQL]SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(h.location) = 'chicago';
### TaskGenerate a SQL query to answer [QUESTION]What are the planes owned by pilot Smith with age 41?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the planes owned by pilot Smith with age 41?[/QUESTION][SQL]SELECT ps.plane_name FROM PilotSkills ps WHERE LOWER(ps.pilot_name) ='smith' AND ps.age = 41;
### TaskGenerate a SQL query to answer [QUESTION]Return the names of planes owned by the pilot whose name is Smith and is 41 years old.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of planes owned by the pilot whose name is Smith and is 41 years old.[/QUESTION][SQL]SELECT ps.plane_name FROM PilotSkills ps WHERE LOWER(ps.pilot_name) ='smith' AND ps.age = 41;
### TaskGenerate a SQL query to answer [QUESTION]How many distinct planes are owned across all pilots?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many distinct planes are owned across all pilots?[/QUESTION][SQL]SELECT COUNT(DISTINCT ps.plane_name) FROM PilotSkills ps;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different plane names across all pilots.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different plane names across all pilots.[/QUESTION][SQL]SELECT COUNT(DISTINCT ps.plane_name) FROM PilotSkills ps;
### TaskGenerate a SQL query to answer [QUESTION]How many planes are owned by the pilot whose name is Smith?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many planes are owned by the pilot whose name is Smith?[/QUESTION][SQL]SELECT COUNT(DISTINCT ps.plane_name) AS number_of_planes FROM PilotSkills ps WHERE LOWER(ps.pilot_name) ='smith';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of planes Smith owns.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of planes Smith owns.[/QUESTION][SQL]SELECT COUNT(*) AS num_planes FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(ps.pilot_name) ='smith';
### TaskGenerate a SQL query to answer [QUESTION]How many planes are controlled by the pilots whose age is older than 40?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many planes are controlled by the pilots whose age is older than 40?[/QUESTION][SQL]SELECT COUNT(DISTINCT ps.plane_name) FROM PilotSkills ps WHERE ps.age > 40;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of planes flown by pilots older than 40.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of planes flown by pilots older than 40.[/QUESTION][SQL]SELECT COUNT(DISTINCT ps.plane_name) FROM PilotSkills ps WHERE ps.age > 40;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.[/QUESTION][SQL]SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age BETWEEN 30 AND 40 ORDER BY ps.age ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of pilots between the ages of 30 and 40, ordered by age ascending?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of pilots between the ages of 30 and 40, ordered by age ascending?[/QUESTION][SQL]SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age BETWEEN 30 AND 40 ORDER BY ps.age ASC;
### TaskGenerate a SQL query to answer [QUESTION]List all pilot names sorted by their ages in the descending order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all pilot names sorted by their ages in the descending order.[/QUESTION][SQL]SELECT ps.pilot_name, ps.age FROM PilotSkills ps ORDER BY ps.age DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of pilots, ordered by age descending?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of pilots, ordered by age descending?[/QUESTION][SQL]SELECT ps.pilot_name FROM PilotSkills ps ORDER BY ps.age DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find all locations of planes sorted by the plane name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all locations of planes sorted by the plane name.[/QUESTION][SQL]SELECT h.location FROM Hangar h ORDER BY h.plane_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the locations of the different planes, ordered by plane name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the locations of the different planes, ordered by plane name?[/QUESTION][SQL]SELECT h.plane_name, h.location FROM Hangar h ORDER BY h.plane_name;
### TaskGenerate a SQL query to answer [QUESTION]List all distinct types of planes owned by all pilots in alphabetic order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all distinct types of planes owned by all pilots in alphabetic order?[/QUESTION][SQL]SELECT DISTINCT h.plane_name FROM Hangar h ORDER BY h.plane_name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the different plane names, ordered alphabetically?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different plane names, ordered alphabetically?[/QUESTION][SQL]SELECT DISTINCT h.plane_name FROM Hangar h ORDER BY h.plane_name ASC;
### TaskGenerate a SQL query to answer [QUESTION]How many pilots who are older than 40 or younger than 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many pilots who are older than 40 or younger than 30?[/QUESTION][SQL]SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age > 40 OR ps.age < 30;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of pilots with age greater than 40 or less than 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of pilots with age greater than 40 or less than 30.[/QUESTION][SQL]SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age > 40 OR ps.age < 30;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?[/QUESTION][SQL]SELECT ps.pilot_name, ps.age FROM PilotSkills ps WHERE (ps.plane_name = 'Piper Cub' AND ps.age > 35) OR (ps.plane_name = 'F-14 Fighter' AND ps.age < 30);
### TaskGenerate a SQL query to answer [QUESTION]Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.[/QUESTION][SQL]SELECT ps.pilot_name, ps.age FROM PilotSkills ps WHERE (ps.plane_name = 'Piper Cub' AND ps.age > 35) OR (ps.plane_name = 'F-14 Fighter' AND ps.age < 30);
### TaskGenerate a SQL query to answer [QUESTION]Find pilots who own plane Piper Cub but not B-52 Bomber.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find pilots who own plane Piper Cub but not B-52 Bomber.[/QUESTION][SQL]SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM PilotSkills p2 WHERE p2.pilot_name = ps.pilot_name AND p2.plane_name = 'B-52 Bomber') ORDER BY ps.pilot_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?[/QUESTION][SQL]SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM PilotSkills p2 WHERE p2.pilot_name = ps.pilot_name AND p2.plane_name = 'B-52 Bomber') ORDER BY ps.pilot_name;
### TaskGenerate a SQL query to answer [QUESTION]Find pilots who own planes Piper Cub and B-52 Bomber.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find pilots who own planes Piper Cub and B-52 Bomber.[/QUESTION][SQL]SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'B-52 Bomber') ORDER BY ps.pilot_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of pilots who own both Piper Cub and the B-52 Bomber?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of pilots who own both Piper Cub and the B-52 Bomber?[/QUESTION][SQL]SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY ps.pilot_name HAVING COUNT(DISTINCT ps.plane_name) = 2;
### TaskGenerate a SQL query to answer [QUESTION]What are the average and smallest ages of all pilots?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average and smallest ages of all pilots?[/QUESTION][SQL]SELECT AVG(ps.age) AS average_age, MIN(ps.age) AS minimum_age FROM PilotSkills ps;
### TaskGenerate a SQL query to answer [QUESTION]Return the average and minimum ages across all pilots.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the average and minimum ages across all pilots.[/QUESTION][SQL]SELECT AVG(ps.age), MIN(ps.age) FROM PilotSkills ps;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of pilots who have planes in both Austin and Boston?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of pilots who have planes in both Austin and Boston?[/QUESTION][SQL]SELECT DISTINCT ps.pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location IN ('Austin', 'Boston') GROUP BY ps.pilot_name HAVING COUNT(DISTINCT h.location) = 2;
### TaskGenerate a SQL query to answer [QUESTION]Give the names of pilots who have planes in Austin and Boston.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the names of pilots who have planes in Austin and Boston.[/QUESTION][SQL]SELECT DISTINCT ps.pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location IN ('Austin', 'Boston') ORDER BY ps.pilot_name;
### TaskGenerate a SQL query to answer [QUESTION]Find the pilots who have either plane Piper Cub or plane F-14 Fighter.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the pilots who have either plane Piper Cub or plane F-14 Fighter.[/QUESTION][SQL]SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'F-14 Fighter') ORDER BY ps.pilot_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of pilots who have either the Piper Cub or the F-14 Fighter?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of pilots who have either the Piper Cub or the F-14 Fighter?[/QUESTION][SQL]SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'F-14 Fighter') ORDER BY ps.pilot_name;
### TaskGenerate a SQL query to answer [QUESTION]What is the average age of pilots for different types of planes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average age of pilots for different types of planes?[/QUESTION][SQL]SELECT ps.plane_name, AVG(ps.age) AS average_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY ps.plane_name;
### TaskGenerate a SQL query to answer [QUESTION]Return the average age of pilots for each plane name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the average age of pilots for each plane name.[/QUESTION][SQL]SELECT ps.plane_name, AVG(ps.age) AS average_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY ps.plane_name;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of planes for each type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of planes for each type.[/QUESTION][SQL]SELECT COUNT(*) AS total_planes FROM Hangar;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of entries for each plane name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of entries for each plane name.[/QUESTION][SQL]SELECT h.plane_name, COUNT(*) AS num_entries FROM Hangar h GROUP BY h.plane_name ORDER BY num_entries DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the oldest pilot for each type of plane, and order the results by plane name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the oldest pilot for each type of plane, and order the results by plane name.[/QUESTION][SQL]SELECT ps.plane_name, MIN(ps.age) AS min_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY ps.plane_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?[/QUESTION][SQL]SELECT ps.plane_name, MIN(ps.age) AS min_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY ps.plane_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of oldest pilots for each type of plane?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of oldest pilots for each type of plane?[/QUESTION][SQL]SELECT ps.plane_name, MAX(ps.age) AS max_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY max_age DESC;
### TaskGenerate a SQL query to answer [QUESTION]Return the names of the different planes, as well as the names of the oldest pilots who flew each.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of the different planes, as well as the names of the oldest pilots who flew each.[/QUESTION][SQL]SELECT ps.plane_name, MIN(ps.age) AS min_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY min_age ASC;
### TaskGenerate a SQL query to answer [QUESTION]Find the max age for each group of pilots with the same name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the max age for each group of pilots with the same name.[/QUESTION][SQL]SELECT ps.pilot_name, MAX(ps.age) AS max_age FROM PilotSkills ps GROUP BY ps.pilot_name ORDER BY ps.pilot_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the different pilot names, and what are the maximum ages of pilots for each?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different pilot names, and what are the maximum ages of pilots for each?[/QUESTION][SQL]SELECT ps.pilot_name, MAX(ps.age) AS max_age FROM PilotSkills ps GROUP BY ps.pilot_name ORDER BY ps.pilot_name;
### TaskGenerate a SQL query to answer [QUESTION]For each city, find the number and average age of pilots who have a plane.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each city, find the number and average age of pilots who have a plane.[/QUESTION][SQL]SELECT h.location AS city, COUNT(DISTINCT ps.pilot_name) AS num_pilots, AVG(ps.age) AS avg_age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name GROUP BY h.location ORDER BY h.location;
### TaskGenerate a SQL query to answer [QUESTION]What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?[/QUESTION][SQL]SELECT h.location, COUNT(DISTINCT ps.pilot_name) AS number_of_pilots, AVG(ps.age) AS average_age FROM Hangar h JOIN PilotSkills ps ON h.plane_name = ps.plane_name GROUP BY h.location ORDER BY number_of_pilots DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of pilots for the plane types with average pilot age below 35.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of pilots for the plane types with average pilot age below 35.[/QUESTION][SQL]SELECT COUNT(DISTINCT ps.pilot_name) AS num_pilots FROM PilotSkills ps WHERE ps.age < 35 GROUP BY ps.plane_name HAVING AVG(ps.age) < 35;
### TaskGenerate a SQL query to answer [QUESTION]What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?[/QUESTION][SQL]SELECT ps.plane_name, COUNT(DISTINCT ps.pilot_name) AS number_of_pilots FROM PilotSkills ps WHERE ps.age < 35 GROUP BY ps.plane_name ORDER BY number_of_pilots DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the location of the plane that is owned by the youngest pilot.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the location of the plane that is owned by the youngest pilot.[/QUESTION][SQL]SELECT h.location FROM Hangar h JOIN PilotSkills ps ON h.plane_name = ps.plane_name WHERE ps.age = (SELECT MIN(ps2.age) FROM PilotSkills ps2);
### TaskGenerate a SQL query to answer [QUESTION]What is the location of the plane that was flown by the pilot with the lowest age?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the location of the plane that was flown by the pilot with the lowest age?[/QUESTION][SQL]SELECT h.location FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE ps.age = (SELECT MIN(age) FROM PilotSkills);
### TaskGenerate a SQL query to answer [QUESTION]Find the name and age of pilots who have a plane in Austin.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and age of pilots who have a plane in Austin.[/QUESTION][SQL]SELECT ps.pilot_name, ps.age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(h.location) = 'austin' ORDER BY ps.pilot_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ages of pilots who have planes located in Austin?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ages of pilots who have planes located in Austin?[/QUESTION][SQL]SELECT ps.pilot_name, ps.age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(h.location) = 'austin' ORDER BY ps.pilot_name;
### TaskGenerate a SQL query to answer [QUESTION]List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.[/QUESTION][SQL]SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY ps.pilot_name ASC;
### TaskGenerate a SQL query to answer [QUESTION]Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.[/QUESTION][SQL]SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY ps.pilot_name ASC;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.[/QUESTION][SQL]SELECT COUNT(DISTINCT ps1.pilot_name) FROM PilotSkills ps1 JOIN PilotSkills ps2 ON ps1.age < ps2.age WHERE LOWER(ps1.plane_name) = 'f-14 fighter' AND LOWER(ps2.plane_name) = 'f-14 fighter';
### TaskGenerate a SQL query to answer [QUESTION]How many pilots are younger than all pilots who own the F-14 Fighter?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many pilots are younger than all pilots who own the F-14 Fighter?[/QUESTION][SQL]SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps WHERE ps.plane_name = 'F-14' AND ps.age < ALL (SELECT age FROM PilotSkills WHERE plane_name = 'F-14');
### TaskGenerate a SQL query to answer [QUESTION]Find all different planes whose names contain substring 'Bomber'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all different planes whose names contain substring 'Bomber'.[/QUESTION][SQL]SELECT DISTINCT h.plane_name FROM Hangar h WHERE h.plane_name LIKE '%Bomber%' ORDER BY h.plane_name;
### TaskGenerate a SQL query to answer [QUESTION]What are the different plane names that contain the word Bomber?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different plane names that contain the word Bomber?[/QUESTION][SQL]SELECT DISTINCT h.plane_name FROM Hangar h WHERE h.plane_name ilike '%Bomber%' ORDER BY h.plane_name;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.[/QUESTION][SQL]SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' AND ps.age > ALL (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub');
### TaskGenerate a SQL query to answer [QUESTION]How many pilots are older than the youngest pilot who has Piper Cub?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many pilots are older than the youngest pilot who has Piper Cub?[/QUESTION][SQL]SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub');
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the district which has the largest area.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the district which has the largest area.[/QUESTION][SQL]SELECT d.Name FROM district d ORDER BY d.Area_km DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Select the area and government website of the district with the smallest population.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the area and government website of the district with the smallest population.[/QUESTION][SQL]SELECT d.area_km, d.government_website FROM district d WHERE d.population = (SELECT MIN(population) FROM district);
### TaskGenerate a SQL query to answer [QUESTION]Find the names and populations of the districts whose area is greater than the average area.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names and populations of the districts whose area is greater than the average area.[/QUESTION][SQL]SELECT d.name, d.population FROM district d WHERE d.area_km > (SELECT AVG(area_km) FROM district);
### TaskGenerate a SQL query to answer [QUESTION]Give me the biggest and average areas of all districts.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the biggest and average areas of all districts.[/QUESTION][SQL]SELECT MAX(d.Area_km) AS largest_area, AVG(d.Area_km) AS average_area FROM district d
### TaskGenerate a SQL query to answer [QUESTION]What is the total population of the districts whose areas are in the top 3?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total population of the districts whose areas are in the top 3?[/QUESTION][SQL]SELECT SUM(d.Population) AS Total_Population FROM district d WHERE d.Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3);
### TaskGenerate a SQL query to answer [QUESTION]List the ids, names, and government websites of all districts sorted by population.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the ids, names, and government websites of all districts sorted by population.[/QUESTION][SQL]SELECT d.District_ID, d.Name, d.Government_website FROM district d ORDER BY d.Population DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of districts whose government links use a 'gov' domain.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of districts whose government links use a 'gov' domain.[/QUESTION][SQL]SELECT d.Name FROM district d WHERE d.Government_website ilike '%.gov%' ORDER BY d.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.[/QUESTION][SQL]SELECT d.District_ID, d.Name FROM district d WHERE d.Population > 4000 OR d.Area_km > 3000 ORDER BY d.District_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find all spokesman's names and speech titles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all spokesman's names and speech titles.[/QUESTION][SQL]SELECT s.Name, s.Speach_title FROM spokesman s ORDER BY s.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the average points and average ages of all spokesmen whose rank position is 1.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average points and average ages of all spokesmen whose rank position is 1.[/QUESTION][SQL]SELECT AVG(s.Points) AS average_points, AVG(s.Age) AS average_age FROM spokesman s WHERE s.Rank_position = 1
### TaskGenerate a SQL query to answer [QUESTION]What are the names and points of spokesmen who are younger than 40?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and points of spokesmen who are younger than 40?[/QUESTION][SQL]SELECT s.name, s.points FROM spokesman s WHERE s.age < 40 ORDER BY s.points DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Who is the oldest spokesman?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who is the oldest spokesman?[/QUESTION][SQL]SELECT s.Name FROM spokesman s WHERE s.Age = (SELECT MAX(s2.Age) FROM spokesman s2);
### TaskGenerate a SQL query to answer [QUESTION]Which spokesman has lower points than the average?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which spokesman has lower points than the average?[/QUESTION][SQL]SELECT s.Name FROM spokesman s WHERE s.Points < (SELECT AVG(s2.Points) FROM spokesman s2);
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the district which has greatest number of spokesmen.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the district which has greatest number of spokesmen.[/QUESTION][SQL]SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.Name ORDER BY COUNT(sd.Speaker_ID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of spokesmen who have served some district before 2004.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of spokesmen who have served some district before 2004.[/QUESTION][SQL]SELECT s.Name FROM spokesman s JOIN spokesman_district sd ON s.Speaker_ID = sd.Speaker_ID WHERE CAST(sd.Start_Year AS integer) < 2004;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of spokesmen for each district, and the show district names as well.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of spokesmen for each district, and the show district names as well.[/QUESTION][SQL]SELECT d.name AS district_name, COUNT(s.spokesman_id) AS number_of_spokesmen FROM spokesman s JOIN spokesman_district sd ON s.spokesman_id = sd.spokesman_id JOIN district d ON sd.district_id = d.district_id GROUP BY d.name ORDER BY number_of_spokesmen DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of the districts which have had both spokesman with rank position 1 and 2.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of the districts which have had both spokesman with rank position 1 and 2.[/QUESTION][SQL]SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID WHERE sd.Spokesman_ID IN (SELECT s.Spokesman_ID FROM spokesman s WHERE s.Rank_position = 1) AND sd.Spokesman_ID IN (SELECT s.Spokesman_ID FROM spokesman s WHERE s.Rank_position = 2) GROUP BY d.Name;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of districts which have more than one spokesman.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of districts which have more than one spokesman.[/QUESTION][SQL]SELECT d.Name FROM district d JOIN (SELECT sd.District_ID, COUNT(sd.Speaker_ID) AS num_spokesmen FROM spokesman_district sd GROUP BY sd.District_ID HAVING COUNT(sd.Speaker_ID) > 1) AS s ON d.District_ID = s.District_ID;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of districts which have no spokesmen.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of districts which have no spokesmen.[/QUESTION][SQL]SELECT COUNT(DISTINCT d.District_ID) FROM district d LEFT JOIN spokesman_district sd ON d.District_ID = sd.District_ID WHERE sd.District_ID IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of spokesmen who do not speak for any district.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of spokesmen who do not speak for any district.[/QUESTION][SQL]SELECT s.Name FROM spokesman s WHERE NOT EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.Speaker_ID = s.Speaker_ID)
### TaskGenerate a SQL query to answer [QUESTION]Find the total and average population of the districts which have some spokesman.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total and average population of the districts which have some spokesman.[/QUESTION][SQL]SELECT SUM(d.Population) AS total_population, AVG(d.Population) AS average_population FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID;
### TaskGenerate a SQL query to answer [QUESTION]What is the title of the sculpture that was created in the most recent year?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title of the sculpture that was created in the most recent year?[/QUESTION][SQL]SELECT s.title FROM Sculptures s ORDER BY s.year DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the scuplture that was created most recently?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the scuplture that was created most recently?[/QUESTION][SQL]SELECT s.title FROM Sculptures s ORDER BY s.year DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the title and location of the oldest painting?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the title and location of the oldest painting?[/QUESTION][SQL]SELECT p.title, p.location FROM Paintings p ORDER BY p.year ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the oldest painting and where is it located?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the oldest painting and where is it located?[/QUESTION][SQL]SELECT p.title, p.location FROM Paintings p WHERE p.year = (SELECT MIN(p2.year) FROM Paintings p2);
### TaskGenerate a SQL query to answer [QUESTION]Find the names of all sculptures located in gallery 226.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of all sculptures located in gallery 226.[/QUESTION][SQL]SELECT s.title FROM Sculptures s WHERE s.location = 'gallery 226';
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all sculptures in gallery 226?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all sculptures in gallery 226?[/QUESTION][SQL]SELECT s.title FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID WHERE LOWER(s.location) LIKE '%gallery%226%' ORDER BY s.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the title and location of all paintings.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the title and location of all paintings.[/QUESTION][SQL]SELECT p.title, p.location FROM Paintings p ORDER BY p.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the paintings called and where are they located?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the paintings called and where are they located?[/QUESTION][SQL]SELECT p.title, p.location FROM Paintings p ORDER BY p.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the title and location of all sculptures.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the title and location of all sculptures.[/QUESTION][SQL]SELECT s.title, s.location FROM Sculptures s ORDER BY s.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the sculptures called and where are they located?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the sculptures called and where are they located?[/QUESTION][SQL]SELECT s.title, s.location FROM Sculptures s ORDER BY s.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the medium types of the painting with id = 80[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the medium types of the painting with id = 80[/QUESTION][SQL]SELECT p.medium FROM Paintings p WHERE p.paintingID = 80;
### TaskGenerate a SQL query to answer [QUESTION]What mediums were used for the painting with id 80?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What mediums were used for the painting with id 80?[/QUESTION][SQL]SELECT p.medium FROM Paintings p WHERE p.paintingID = 80;
### TaskGenerate a SQL query to answer [QUESTION]Find the first and last names of all artists who were born after 1850.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the first and last names of all artists who were born after 1850.[/QUESTION][SQL]SELECT a.fname, a.lname FROM Artists a WHERE a.birthYear > 1850 ORDER BY a.birthYear NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the full names of artists born after 1850?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the full names of artists born after 1850?[/QUESTION][SQL]SELECT a.lname || ','|| a.fname AS full_name FROM Artists a WHERE a.birthYear > 1850 ORDER BY a.lname NULLS LAST, a.fname NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the names and years of all sculptures that are not located in gallery 226.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names and years of all sculptures that are not located in gallery 226.[/QUESTION][SQL]SELECT s.title, s.year FROM Sculptures s WHERE s.location!= 'Gallery 226' ORDER BY s.year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and dates created for all sculptures not located in gallery 226?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and dates created for all sculptures not located in gallery 226?[/QUESTION][SQL]SELECT s.title, to_char(s.year, 'YYYY') AS YEAR, a.lname || ','|| a.fname AS artist_name FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID WHERE s.location!= 'Gallery 226' ORDER BY s.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the first and last names of all distinct artists who made sculptures before 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first and last names of all distinct artists who made sculptures before 1900?[/QUESTION][SQL]SELECT DISTINCT a.fname, a.lname FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year < 1900 ORDER BY a.lname NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the first and last name of each distinct artists who made a sculpture before 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the first and last name of each distinct artists who made a sculpture before 1900?[/QUESTION][SQL]SELECT DISTINCT a.fname, a.lname FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year < 1900 ORDER BY a.lname NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the birth years of all distinct artists who made sculptures after 1920?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the birth years of all distinct artists who made sculptures after 1920?[/QUESTION][SQL]SELECT DISTINCT a.birthYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year > 1920 ORDER BY a.birthYear NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the birth year of each distinct artists who created sculptures after 1920?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the birth year of each distinct artists who created sculptures after 1920?[/QUESTION][SQL]SELECT DISTINCT a.birthYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year > 1920 ORDER BY a.birthYear NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the first and last names of the artist who lived the longest?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first and last names of the artist who lived the longest?[/QUESTION][SQL]SELECT a.fname, a.lname FROM Artists a WHERE a.deathYear - a.birthYear = (SELECT MAX(a2.deathYear - a2.birthYear) FROM Artists a2);
### TaskGenerate a SQL query to answer [QUESTION]Give the full name of the artist who lived the longest.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the full name of the artist who lived the longest.[/QUESTION][SQL]SELECT a.fname ||'' || a.lname AS full_name FROM Artists a WHERE a.deathYear IS NULL ORDER BY a.birthYear ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the age of the artist who had the shortest life?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the age of the artist who had the shortest life?[/QUESTION][SQL]SELECT MIN(a.deathYear - a.birthYear) AS shortest_life FROM Artists a WHERE a.deathYear IS NOT NULL;
### TaskGenerate a SQL query to answer [QUESTION]How old is the artist who lived the shortest life?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How old is the artist who lived the shortest life?[/QUESTION][SQL]SELECT MIN(a.deathYear - a.birthYear) AS shortest_life_span FROM Artists a;
### TaskGenerate a SQL query to answer [QUESTION]What are the first name and age of the artist who had the longest life?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first name and age of the artist who had the longest life?[/QUESTION][SQL]SELECT a.fname, a.age FROM (SELECT a.artistID, a.fname, EXTRACT(YEAR FROM AGE(CURRENT_DATE, TO_TIMESTAMP(a.birthYear))) AS age FROM Artists a WHERE a.deathYear IS NULL UNION SELECT a.artistID, a.fname, EXTRACT(YEAR FROM AGE(CURRENT_DATE, TO_TIMESTAMP(a.birthYear))) AS age FROM Artists a WHERE a.deathYear IS NOT NULL AND a.deathYear > EXTRACT(YEAR FROM CURRENT_DATE)) AS subquery ORDER BY subquery.age DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the first name and age of the artist who lived the longest?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the first name and age of the artist who lived the longest?[/QUESTION][SQL]SELECT a.fname, EXTRACT(YEAR FROM AGE(CURRENT_DATE, TO_TIMESTAMP(a.birthYear))) AS age FROM Artists a WHERE a.deathYear IS NULL ORDER BY age DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many paintings are exhibited at gallery 240?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many paintings are exhibited at gallery 240?[/QUESTION][SQL]SELECT COUNT(p.paintingID) FROM Paintings p WHERE p.location = 'Gallery 240';
### TaskGenerate a SQL query to answer [QUESTION]What is the total number of paintings exhibited in gallery 240?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total number of paintings exhibited in gallery 240?[/QUESTION][SQL]SELECT COUNT(p.paintingID) FROM Paintings p JOIN Exhibitions e ON p.paintingID = e.paintingID WHERE LOWER(e.galleryName) = 'gallery 240';
### TaskGenerate a SQL query to answer [QUESTION]How many paintings did the artist with the longest life make?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many paintings did the artist with the longest life make?[/QUESTION][SQL]SELECT COUNT(p.paintingID) AS total_paintings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE a.deathYear - a.birthYear = (SELECT MAX(a2.deathYear - a2.birthYear) FROM Artists a2);
### TaskGenerate a SQL query to answer [QUESTION]What is the painting count of the artist with the longest life?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the painting count of the artist with the longest life?[/QUESTION][SQL]SELECT COUNT(p.paintingID) AS total_paintings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE a.deathYear - a.birthYear = (SELECT MAX(a2.deathYear - a2.birthYear) FROM Artists a2);
### TaskGenerate a SQL query to answer [QUESTION]Give me a list of names and years of paintings that were created by the artist whose first name is Mary.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me a list of names and years of paintings that were created by the artist whose first name is Mary.[/QUESTION][SQL]SELECT p.title, p.year FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE LOWER(a.fname) ='mary' ORDER BY p.year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name and year of each painting created by the artist whose first name is Mary?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and year of each painting created by the artist whose first name is Mary?[/QUESTION][SQL]SELECT p.title AS painting_title, p.year FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE LOWER(a.fname) ='mary' ORDER BY p.year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the widths of the paintings that were created by the artist who was born before 1850?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the widths of the paintings that were created by the artist who was born before 1850?[/QUESTION][SQL]SELECT p.width_mm FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < 1850 ORDER BY p.width_mm NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How wide were the paintings by the artist who was born prior to 1850?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How wide were the paintings by the artist who was born prior to 1850?[/QUESTION][SQL]SELECT AVG(p.width_mm) AS average_width FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < 1850;
### TaskGenerate a SQL query to answer [QUESTION]What are the location and medium type of paintings that are created by the artist whose first name is Pablo?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the location and medium type of paintings that are created by the artist whose first name is Pablo?[/QUESTION][SQL]SELECT p.location, p.medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE LOWER(a.fname) = 'pablo';
### TaskGenerate a SQL query to answer [QUESTION]In what locations and on what mediums are the paintings created by the artist with the first name Pablo?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In what locations and on what mediums are the paintings created by the artist with the first name Pablo?[/QUESTION][SQL]SELECT p.location, p.medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE LOWER(a.fname) = 'pablo' ORDER BY p.location NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the first and last names of the artists who have both works of paintings and sculptures?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the first and last names of the artists who have both works of paintings and sculptures?[/QUESTION][SQL]SELECT DISTINCT a.fname, a.lname FROM Artists a WHERE a.artistID IN (SELECT p.painterID FROM Paintings p UNION SELECT s.sculptorID FROM Sculptures s);
### TaskGenerate a SQL query to answer [QUESTION]Give the full names of artists who have created paintings and sculptures.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the full names of artists who have created paintings and sculptures.[/QUESTION][SQL]SELECT DISTINCT a.lname || ','|| a.fname AS full_name FROM Artists a JOIN Paintings p ON a.artistID = p.painterID JOIN Sculptures s ON a.artistID = s.sculptorID;
### TaskGenerate a SQL query to answer [QUESTION]What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?[/QUESTION][SQL]SELECT DISTINCT a.fname, a.lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND p.mediumOn LIKE '%lithography%' ORDER BY a.fname NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the first and last names of artists who have painted using both oil and lithographic mediums?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first and last names of artists who have painted using both oil and lithographic mediums?[/QUESTION][SQL]SELECT DISTINCT a.fname, a.lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium IN ('oil', 'lithographic') GROUP BY a.fname, a.lname HAVING COUNT(DISTINCT p.medium) = 2;
### TaskGenerate a SQL query to answer [QUESTION]What is the birth year of the artist who created a painting in 1884 that is on canvas?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the birth year of the artist who created a painting in 1884 that is on canvas?[/QUESTION][SQL]SELECT a.birthYear FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE p.year = 1884 AND p.mediumOn = 'canvas';
### TaskGenerate a SQL query to answer [QUESTION]In what year was the artist who created a painting in 1884 born?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In what year was the artist who created a painting in 1884 born?[/QUESTION][SQL]SELECT a.birthYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year = 1884;
### TaskGenerate a SQL query to answer [QUESTION]What are the unique first names of the artists who had medium oil paintings located in gallery 241?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the unique first names of the artists who had medium oil paintings located in gallery 241?[/QUESTION][SQL]SELECT DISTINCT p.painterID, a.fname FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE p.medium = 'oil' AND p.location = 'gallery 241';
### TaskGenerate a SQL query to answer [QUESTION]What are first names of the artists with oil paintings in gallery 241?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are first names of the artists with oil paintings in gallery 241?[/QUESTION][SQL]SELECT DISTINCT a.fname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.location = 'Gallery 241' AND LOWER(p.medium) = 'oil';
### TaskGenerate a SQL query to answer [QUESTION]What are the numbers of works for different medium type?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the numbers of works for different medium type?[/QUESTION][SQL]SELECT p.medium, COUNT(p.paintingID) AS number_of_paintings FROM Paintings p GROUP BY p.medium UNION SELECT s.medium, COUNT(s.sculptureID) AS number_of_sculptures FROM Sculptures s GROUP BY s.medium ORDER BY p.medium;
### TaskGenerate a SQL query to answer [QUESTION]How many works are there in each medium?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many works are there in each medium?[/QUESTION][SQL]SELECT p.medium, COUNT(p.paintingID) AS number_of_paintings FROM Paintings p GROUP BY p.medium UNION SELECT s.medium, COUNT(s.sculptureID) AS number_of_sculptures FROM Sculptures s GROUP BY s.medium ORDER BY p.medium;
### TaskGenerate a SQL query to answer [QUESTION]What are the average height of paintings for different medium types?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average height of paintings for different medium types?[/QUESTION][SQL]SELECT p.medium, AVG(p.height_mm) AS average_height FROM Paintings p GROUP BY p.medium ORDER BY p.medium NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the average height of paintings for different medium types?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average height of paintings for different medium types?[/QUESTION][SQL]SELECT p.medium, AVG(p.height_mm) AS average_height FROM Paintings p GROUP BY p.medium ORDER BY p.medium NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the numbers of paintings created before 1900 in different places?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the numbers of paintings created before 1900 in different places?[/QUESTION][SQL]SELECT p.location, COUNT(p.paintingID) AS number_of_paintings FROM Paintings p WHERE p.year < 1900 GROUP BY p.location ORDER BY number_of_paintings DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many paintings were created before 1900 in different locations?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many paintings were created before 1900 in different locations?[/QUESTION][SQL]SELECT p.location, COUNT(p.paintingID) AS number_of_paintings FROM Paintings p WHERE p.year < 1900 GROUP BY p.location ORDER BY number_of_paintings DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of paintings that are created after 1910 and whose medium is oil?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of paintings that are created after 1910 and whose medium is oil?[/QUESTION][SQL]SELECT p.title FROM Paintings p WHERE p.year > 1910 AND LOWER(p.medium) = 'oil' ORDER BY p.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Give the names of all oil paintings created after 1910.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the names of all oil paintings created after 1910.[/QUESTION][SQL]SELECT p.title FROM Paintings p WHERE p.year > 1910 AND LOWER(p.medium) = 'oil' ORDER BY p.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?[/QUESTION][SQL]SELECT DISTINCT p.painterID FROM Paintings p WHERE p.location = 'Gallery 240' AND LOWER(p.medium) = 'oil';
### TaskGenerate a SQL query to answer [QUESTION]What is the unique id of every painter who had a medium oil painting displayed at gallery 240?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the unique id of every painter who had a medium oil painting displayed at gallery 240?[/QUESTION][SQL]SELECT DISTINCT p.painterID FROM Paintings p WHERE p.location = 'Gallery 240' AND LOWER(p.medium) = 'oil';
### TaskGenerate a SQL query to answer [QUESTION]Find the distinct titles of all the paintings that have a longer height than some painting on canvas?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the distinct titles of all the paintings that have a longer height than some painting on canvas?[/QUESTION][SQL]SELECT DISTINCT p.title FROM Paintings p WHERE p.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE medium = 'canvas');
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct titles of every painting that has a greater height than some painting on canvas?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct titles of every painting that has a greater height than some painting on canvas?[/QUESTION][SQL]SELECT DISTINCT p.title FROM Paintings p WHERE p.height_mm > ANY (SELECT height_mm FROM Paintings WHERE medium = 'canvas') ORDER BY p.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the distinct ids of all paintings that are older than some painting at location gallery 240.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the distinct ids of all paintings that are older than some painting at location gallery 240.[/QUESTION][SQL]SELECT DISTINCT p.paintingID FROM Paintings p WHERE p.year < (SELECT MIN(p2.year) FROM Paintings p2 WHERE p2.location = 'gallery 240');
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct ids of every painting that is older than some painting in gallery 240?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct ids of every painting that is older than some painting in gallery 240?[/QUESTION][SQL]SELECT DISTINCT p.paintingID FROM Paintings p WHERE p.year < (SELECT MIN(p2.year) FROM Paintings p2 JOIN Sculptures s ON p2.paintingID = s.sculptorID WHERE s.location LIKE '%Gallery%240%');
### TaskGenerate a SQL query to answer [QUESTION]Find the id of the oldest painting.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the id of the oldest painting.[/QUESTION][SQL]SELECT p.paintingID FROM Paintings p WHERE p.year = (SELECT MIN(p2.year) FROM Paintings p2);
### TaskGenerate a SQL query to answer [QUESTION]What is the id of the oldest painting?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id of the oldest painting?[/QUESTION][SQL]SELECT p.paintingID FROM Paintings p WHERE p.year = (SELECT MIN(p2.year) FROM Paintings p2);
### TaskGenerate a SQL query to answer [QUESTION]What are the first and last name of the artist who had a sculpture work whose title has the word “female” in it?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first and last name of the artist who had a sculpture work whose title has the word “female” in it?[/QUESTION][SQL]SELECT a.fname, a.lname FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID WHERE s.title ilike '%female%' LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the full name of the artist with a sculpture whose title includes the word "female"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the full name of the artist with a sculpture whose title includes the word "female"?[/QUESTION][SQL]SELECT a.lname || ','|| a.fname AS full_name FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID WHERE s.title ilike '%female%' LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the names of all distinct paintings in alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of all distinct paintings in alphabetical order.[/QUESTION][SQL]SELECT DISTINCT p.title FROM Paintings p ORDER BY p.title ASC;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of every distinct painting in alphabetical order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of every distinct painting in alphabetical order?[/QUESTION][SQL]SELECT DISTINCT p.title FROM Paintings p ORDER BY p.title ASC;
### TaskGenerate a SQL query to answer [QUESTION]List the names of all distinct paintings ordered by length.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of all distinct paintings ordered by length.[/QUESTION][SQL]SELECT p.title FROM Paintings p ORDER BY LENGTH(p.title);
### TaskGenerate a SQL query to answer [QUESTION]List the names of all distinct paintings from shortest to longest in height.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of all distinct paintings from shortest to longest in height.[/QUESTION][SQL]SELECT p.title FROM Paintings p ORDER BY p.height_mm ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of both paintings and sculptures created between 1900 and 1950?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of both paintings and sculptures created between 1900 and 1950?[/QUESTION][SQL]SELECT p.title AS painting_title, s.title AS sculpture_title FROM Paintings p JOIN Sculptures s ON p.year = s.year WHERE p.year BETWEEN 1900 AND 1950;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of  paintings and scupltures created between 1900 and 1950?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of  paintings and scupltures created between 1900 and 1950?[/QUESTION][SQL]SELECT p.title AS painting_title, s.title AS sculpture_title FROM Paintings p JOIN Sculptures s ON TRUE WHERE p.year BETWEEN 1900 AND 1950 UNION SELECT NULL AS painting_title, s.title AS sculpture_title FROM Sculptures s WHERE s.year BETWEEN 1900 AND 1950 ORDER BY painting_title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the titles of paintings and sculpture works made by the artist whose id is 222?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the titles of paintings and sculpture works made by the artist whose id is 222?[/QUESTION][SQL]SELECT p.title AS painting_title, s.title AS sculpture_title FROM Paintings p JOIN Sculptures s ON p.painterID = s.sculptorID WHERE p.painterID = 222 OR s.sculptorID = 222;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of all paintings and sculpture works made by the artist whose id is 222?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of all paintings and sculpture works made by the artist whose id is 222?[/QUESTION][SQL]SELECT p.title AS painting_title, s.title AS sculpture_title FROM Paintings p JOIN Sculptures s ON p.painterID = s.sculptorID WHERE p.painterID = 222 OR s.sculptorID = 222;
### TaskGenerate a SQL query to answer [QUESTION]What is the id of the artist who has the highest number of painting works before 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id of the artist who has the highest number of painting works before 1900?[/QUESTION][SQL]SELECT p.painterID FROM Paintings p WHERE p.year < 1900 GROUP BY p.painterID ORDER BY COUNT(p.paintingID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the id of the artist with the most paintings before 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id of the artist with the most paintings before 1900?[/QUESTION][SQL]SELECT p.painterID FROM Paintings p WHERE p.year < 1900 GROUP BY p.painterID ORDER BY COUNT(p.paintingID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the first name of the artist who has the highest number of sculptures?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the first name of the artist who has the highest number of sculptures?[/QUESTION][SQL]SELECT s.sculptorID, COUNT(s.sculptureID) AS num_sculptures FROM Sculptures s GROUP BY s.sculptorID ORDER BY num_sculptures DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the first name of the sculptor with the greatest number of works?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the first name of the sculptor with the greatest number of works?[/QUESTION][SQL]SELECT s.sculptorID, COUNT(s.sculptureID) AS num_sculptures FROM Sculptures s GROUP BY s.sculptorID ORDER BY num_sculptures DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of paintings whose width is less than 600 or height is larger than 800?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of paintings whose width is less than 600 or height is larger than 800?[/QUESTION][SQL]SELECT p.title FROM Paintings p WHERE p.width_mm < 600 OR p.height_mm > 800;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of paintings that have a width less than 600 or a height taller taller than 800?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of paintings that have a width less than 600 or a height taller taller than 800?[/QUESTION][SQL]SELECT p.title FROM Paintings p WHERE p.width_mm < 600 OR p.height_mm > 800;
### TaskGenerate a SQL query to answer [QUESTION]Which locations have paintings created before 1885 or after 1930?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which locations have paintings created before 1885 or after 1930?[/QUESTION][SQL]SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930 ORDER BY p.location NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What locations have works painted before 1885 or after 1930?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What locations have works painted before 1885 or after 1930?[/QUESTION][SQL]SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930 ORDER BY p.location NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the ids of paintings whose height is bigger than 500 and less than 2000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the ids of paintings whose height is bigger than 500 and less than 2000?[/QUESTION][SQL]SELECT p.paintingID FROM Paintings p WHERE p.height_mm > 500 AND p.height_mm < 2000;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of paintings that are taller than 500 and shorter than 2000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of paintings that are taller than 500 and shorter than 2000?[/QUESTION][SQL]SELECT p.paintingID FROM Paintings p WHERE p.height_mm > 500 AND p.height_mm < 2000;
### TaskGenerate a SQL query to answer [QUESTION]Which locations have paintings in the mediums of on panel and on canvas?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which locations have paintings in the mediums of on panel and on canvas?[/QUESTION][SQL]SELECT DISTINCT p.location FROM Paintings p WHERE p.medium = 'on panel' OR p.medium = 'on canvas';
### TaskGenerate a SQL query to answer [QUESTION]What are the locations that have paintings in the mediums of on panels and on canvas?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the locations that have paintings in the mediums of on panels and on canvas?[/QUESTION][SQL]SELECT DISTINCT p.location FROM Paintings p WHERE p.medium = 'on panels' OR p.medium = 'on canvas';
### TaskGenerate a SQL query to answer [QUESTION]Find the locations that have paintings created before 1885 and after 1930?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the locations that have paintings created before 1885 and after 1930?[/QUESTION][SQL]SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 AND p.year > 1930 ORDER BY p.location NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the locations that have works painted before 1885 and after 1930?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the locations that have works painted before 1885 and after 1930?[/QUESTION][SQL]SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 AND p.year > 1930 ORDER BY p.location NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the average height and width of paintings that are oil medium in the place of gallery 241?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average height and width of paintings that are oil medium in the place of gallery 241?[/QUESTION][SQL]SELECT AVG(p.height_mm), AVG(p.width_mm) FROM Paintings p WHERE LOWER(p.mediumOn) = 'oil' AND LOWER(p.location) = 'gallery 241';
### TaskGenerate a SQL query to answer [QUESTION]What is the average height and width of paintings that are oil medium in gallery 241?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average height and width of paintings that are oil medium in gallery 241?[/QUESTION][SQL]SELECT AVG(p.height_mm), AVG(p.width_mm) FROM Paintings p JOIN Artists ar ON p.painterID = ar.artistID WHERE LOWER(p.medium) = 'oil' AND LOWER(ar.lname) = 'gallery 241';
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum height and id of paintings painted before 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum height and id of paintings painted before 1900?[/QUESTION][SQL]SELECT MAX(p.height_mm), p.paintingID FROM Paintings p WHERE p.year < 1900 GROUP BY p.paintingID ORDER BY p.paintingID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the height and id of the tallest painting created before 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the height and id of the tallest painting created before 1900?[/QUESTION][SQL]SELECT p.height_mm, p.paintingID FROM Paintings p WHERE p.year < 1900 ORDER BY p.height_mm DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum height and width of paintings for each year?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum height and width of paintings for each year?[/QUESTION][SQL]SELECT p.year, MAX(p.height_mm) AS max_height, MAX(p.width_mm) AS max_width FROM Paintings p GROUP BY p.year ORDER BY p.year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are largest height and width dimensions for paintings in each year?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are largest height and width dimensions for paintings in each year?[/QUESTION][SQL]SELECT p.year, MAX(p.height_mm) AS max_height, MAX(p.width_mm) AS max_width FROM Paintings p GROUP BY p.year ORDER BY p.year NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the average height and width of paintings grouped by painters and ordered by name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average height and width of paintings grouped by painters and ordered by name?[/QUESTION][SQL]SELECT p.painterID, a.fname, a.lname, AVG(p.height_mm) AS avg_height, AVG(p.width_mm) AS avg_width FROM Paintings p JOIN Artists a ON p.painterID = a.artistID GROUP BY p.painterID, a.fname, a.lname ORDER BY a.fname, a.lname NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the average height and width of paintings grouped by painters and ordered by name[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average height and width of paintings grouped by painters and ordered by name[/QUESTION][SQL]SELECT p.painterID, a.fname, a.lname, AVG(p.height_mm) AS avg_height, AVG(p.width_mm) AS avg_width FROM Paintings p JOIN Artists a ON p.painterID = a.artistID GROUP BY p.painterID, a.fname, a.lname ORDER BY a.fname, a.lname NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the first names and number of works of all artists who have at least two paintings?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the first names and number of works of all artists who have at least two paintings?[/QUESTION][SQL]SELECT a.fname, COUNT(p.paintingID) AS num_paintings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.fname HAVING COUNT(p.paintingID) >= 2 ORDER BY num_paintings DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the first names of all artists who have at least two paintings, and how many works did each create?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first names of all artists who have at least two paintings, and how many works did each create?[/QUESTION][SQL]SELECT a.fname, COUNT(p.paintingID) AS num_paintings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.fname HAVING COUNT(p.paintingID) >= 2 ORDER BY num_paintings DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the death year of all artists who have at most 3 paintings?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the death year of all artists who have at most 3 paintings?[/QUESTION][SQL]SELECT a.deathYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.deathYear HAVING COUNT(p.paintingID) <= 3 ORDER BY a.deathYear NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]When did each artist who created less than 4 paintings die?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]When did each artist who created less than 4 paintings die?[/QUESTION][SQL]SELECT a.fname, a.lname, a.deathYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.fname, a.lname, a.deathYear HAVING COUNT(p.paintingID) < 4 ORDER BY a.deathYear NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the death year of the artist who made the least number of sculptures?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the death year of the artist who made the least number of sculptures?[/QUESTION][SQL]SELECT a.deathYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY a.artistID ORDER BY COUNT(s.sculptureID) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]When did the artist who made the fewest sculptures die?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]When did the artist who made the fewest sculptures die?[/QUESTION][SQL]SELECT a.deathYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY a.deathYear ORDER BY COUNT(s.sculptureID) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the id and height of the painting with the longest width in gallery 240?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the id and height of the painting with the longest width in gallery 240?[/QUESTION][SQL]SELECT p.paintingID, p.height_mm FROM Paintings p WHERE p.location = 'Gallery 240' ORDER BY p.width_mm DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Tell me the height and id number of the widest painting in gallery 240.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Tell me the height and id number of the widest painting in gallery 240.[/QUESTION][SQL]SELECT p.height_mm, p.paintingID FROM Paintings p WHERE p.location = 'Gallery 240' ORDER BY p.width_mm DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of the paintings created before all of the paintings in gallery 240?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of the paintings created before all of the paintings in gallery 240?[/QUESTION][SQL]SELECT p.paintingID FROM Paintings p WHERE p.year < ALL (SELECT YEAR FROM Paintings WHERE LOCATION = 'Gallery 240');
### TaskGenerate a SQL query to answer [QUESTION]What is the id of every painting created before the oldest painting in gallery 240?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id of every painting created before the oldest painting in gallery 240?[/QUESTION][SQL]SELECT p.paintingID FROM Paintings p WHERE p.year < (SELECT MIN(year) FROM Paintings WHERE location = 'Gallery 240');
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?[/QUESTION][SQL]SELECT p.paintingID FROM Paintings p WHERE p.year <= 1900 ORDER BY p.height_mm DESC;
### TaskGenerate a SQL query to answer [QUESTION]List the ids of all paintings that are taller than the longest painting created after 1900.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the ids of all paintings that are taller than the longest painting created after 1900.[/QUESTION][SQL]SELECT p.paintingID FROM Paintings p WHERE p.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2 WHERE p2.year > 1900);
### TaskGenerate a SQL query to answer [QUESTION]Find the top 3 artists who have the biggest number of painting works whose medium is oil?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the top 3 artists who have the biggest number of painting works whose medium is oil?[/QUESTION][SQL]SELECT p.painterID, COUNT(p.paintingID) AS num_paintings FROM Paintings p WHERE LOWER(p.medium) = 'oil' GROUP BY p.painterID ORDER BY num_paintings DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]Which artists have the most paintings in oil?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which artists have the most paintings in oil?[/QUESTION][SQL]SELECT p.painterID, COUNT(p.paintingID) AS num_paintings FROM Paintings p WHERE LOWER(p.mediumOn) = 'oil' GROUP BY p.painterID ORDER BY num_paintings DESC LIMIT 5;
### TaskGenerate a SQL query to answer [QUESTION]List the painting id, location and title of the medium oil paintings ordered by year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the painting id, location and title of the medium oil paintings ordered by year.[/QUESTION][SQL]SELECT p.paintingID, p.location, p.title FROM Paintings p WHERE LOWER(p.mediumOn) = 'oil' ORDER BY p.year ASC;
### TaskGenerate a SQL query to answer [QUESTION]Order all of the oil paintings by date of creation and list their ids, locations, and titles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Order all of the oil paintings by date of creation and list their ids, locations, and titles.[/QUESTION][SQL]SELECT p.paintingID, p.location, p.title FROM Paintings p WHERE p.medium = 'oil' ORDER BY p.year ASC;
### TaskGenerate a SQL query to answer [QUESTION]List the year, location and title of paintings whose height is longer than 1000 ordered by title.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the year, location and title of paintings whose height is longer than 1000 ordered by title.[/QUESTION][SQL]SELECT p.year, p.location, p.title FROM Paintings p WHERE p.height_mm > 1000 ORDER BY p.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.[/QUESTION][SQL]SELECT p.year, p.location, p.title FROM Paintings p WHERE p.height_mm > 1000 ORDER BY p.title ASC;
### TaskGenerate a SQL query to answer [QUESTION]Find the first and last name of artists who have painting but no sculpture work.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the first and last name of artists who have painting but no sculpture work.[/QUESTION][SQL]SELECT DISTINCT a.fname, a.lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE a.artistID NOT IN (SELECT s.sculptorID FROM Sculptures s) ORDER BY a.fname NULLS LAST, a.lname NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the first and last names of the artists who did not sculpt but could paint.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first and last names of the artists who did not sculpt but could paint.[/QUESTION][SQL]SELECT DISTINCT a.fname, a.lname FROM Artists a LEFT JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.sculptorID IS NULL AND a.artistID IN (SELECT p.painterID FROM Paintings p);
### TaskGenerate a SQL query to answer [QUESTION]Find the locations that have paintings before 1885 and no work with medium on canvas?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the locations that have paintings before 1885 and no work with medium on canvas?[/QUESTION][SQL]SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 AND p.mediumOn NOT ILIKE '%canvas%' ORDER BY p.location NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Where do you have paintings that were created before 1885 that are not on canvas?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Where do you have paintings that were created before 1885 that are not on canvas?[/QUESTION][SQL]SELECT p.title FROM Paintings p WHERE p.year < 1885 AND p.medium!= 'canvas' ORDER BY p.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many races are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many races are there?[/QUESTION][SQL]SELECT COUNT(*) FROM race;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of races.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of races.[/QUESTION][SQL]SELECT COUNT(*) FROM race;
### TaskGenerate a SQL query to answer [QUESTION]List the winning drivers and winning teams of races in ascending alphabetical order of winning team.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the winning drivers and winning teams of races in ascending alphabetical order of winning team.[/QUESTION][SQL]SELECT r.winning_driver, r.winning_team FROM race r ORDER BY r.winning_team ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the winning drivers and teams of races, ordered alphabetically by team?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the winning drivers and teams of races, ordered alphabetically by team?[/QUESTION][SQL]SELECT r.winning_driver, r.winning_team FROM race r ORDER BY r.winning_team ASC;
### TaskGenerate a SQL query to answer [QUESTION]Which winning drivers of races had pole position that is not "Junior Strous"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which winning drivers of races had pole position that is not "Junior Strous"?[/QUESTION][SQL]SELECT r.race_name, d.driver_name FROM race r JOIN driver d ON r.driver_id = d.driver_id WHERE r.pole_position!= 'Junior Strous' AND r.winning_driver = d.driver_name;
### TaskGenerate a SQL query to answer [QUESTION]Return the winning drivers of races who did not have the pole position of Junior Strous.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the winning drivers of races who did not have the pole position of Junior Strous.[/QUESTION][SQL]SELECT r.Race_Name, d.Driver_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Driver_Name!= 'Junior Strous' AND d.Driver_Name = r.Winning_driver;
### TaskGenerate a SQL query to answer [QUESTION]Who are the constructors of drivers sorted by drivers' age in ascending order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who are the constructors of drivers sorted by drivers' age in ascending order?[/QUESTION][SQL]SELECT d.Constructor, d.Age FROM driver d ORDER BY d.Age ASC;
### TaskGenerate a SQL query to answer [QUESTION]Return the different constructors of drivers, ordered by age ascending.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the different constructors of drivers, ordered by age ascending.[/QUESTION][SQL]SELECT d.Constructor, d.Age FROM driver d ORDER BY d.Age ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct entrant types of drivers aged 20 or older?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct entrant types of drivers aged 20 or older?[/QUESTION][SQL]SELECT DISTINCT d.Entrant FROM driver d WHERE d.Age >= 20 ORDER BY d.Entrant NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Give the different entrant types for drivers at least 20 years old.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the different entrant types for drivers at least 20 years old.[/QUESTION][SQL]SELECT DISTINCT d.Entrant FROM driver d WHERE d.Age >= 20 ORDER BY d.Entrant NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum age of driver?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum age of driver?[/QUESTION][SQL]SELECT MAX(d.Age) AS max_age, MIN(d.Age) AS min_age FROM driver d;
### TaskGenerate a SQL query to answer [QUESTION]Return the maximum and minimum age across drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the maximum and minimum age across drivers.[/QUESTION][SQL]SELECT MAX(d.Age) AS max_age, MIN(d.Age) AS min_age FROM driver d;
### TaskGenerate a SQL query to answer [QUESTION]How many different engines are used by drivers with age older than 30 or younger than 20?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different engines are used by drivers with age older than 30 or younger than 20?[/QUESTION][SQL]SELECT COUNT(DISTINCT d.Engine) FROM driver d WHERE d.Age > 30 OR d.Age < 20;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different engines used by drivers who had an age either over 30 or under 20.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different engines used by drivers who had an age either over 30 or under 20.[/QUESTION][SQL]SELECT COUNT(DISTINCT d.Engine) FROM driver d WHERE d.Age > 30 OR d.Age < 20;
### TaskGenerate a SQL query to answer [QUESTION]List all names of drivers in descending alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all names of drivers in descending alphabetical order.[/QUESTION][SQL]SELECT d.Driver_Name FROM driver d ORDER BY d.Driver_Name DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of drivers, ordered descending alphabetically?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of drivers, ordered descending alphabetically?[/QUESTION][SQL]SELECT d.driver_name FROM driver d ORDER BY d.driver_name DESC;
### TaskGenerate a SQL query to answer [QUESTION]Please show the names of drivers and the names of races they participate in.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the names of drivers and the names of races they participate in.[/QUESTION][SQL]SELECT d.Driver_Name, r.Race_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of drivers and the names of the races they took part in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of drivers and the names of the races they took part in?[/QUESTION][SQL]SELECT d.Driver_Name, r.Race_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]Please show the names of drivers and the number of races they participate in.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the names of drivers and the number of races they participate in.[/QUESTION][SQL]SELECT d.Driver_Name, COUNT(r.Road) AS num_races FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name ORDER BY num_races DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many races did each driver participate in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many races did each driver participate in?[/QUESTION][SQL]SELECT d.Driver_Name, COUNT(r.Road) AS number_of_races FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID GROUP BY d.Driver_Name ORDER BY number_of_races DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Please show the age of the driver who participated in the most number of races.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the age of the driver who participated in the most number of races.[/QUESTION][SQL]SELECT d.age FROM driver d JOIN (SELECT r.driver_id, COUNT(r.road) AS num_races FROM race r GROUP BY r.driver_id ORDER BY num_races DESC LIMIT 1) AS mr ON d.driver_id = mr.driver_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the age of the driver who raced in the most races?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the age of the driver who raced in the most races?[/QUESTION][SQL]SELECT d.Age FROM (SELECT r.Driver_ID, COUNT(r.Road) AS num_races FROM race r GROUP BY r.Driver_ID ORDER BY num_races DESC LIMIT 1) AS m JOIN driver d ON m.Driver_ID = d.Driver_ID;
### TaskGenerate a SQL query to answer [QUESTION]Please show the names and ages of the drivers who participated in at least two races.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the names and ages of the drivers who participated in at least two races.[/QUESTION][SQL]SELECT d.Driver_Name, d.Age FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name, d.Age HAVING COUNT(r.Road) >= 2 ORDER BY d.Driver_Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ages of drivers who raced in two or more races?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ages of drivers who raced in two or more races?[/QUESTION][SQL]SELECT d.Driver_Name, d.Age FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID, d.Driver_Name, d.Age HAVING COUNT(r.Road) >= 2 ORDER BY d.Driver_Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Please list the names of races with drivers aged 26 or older participating.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please list the names of races with drivers aged 26 or older participating.[/QUESTION][SQL]SELECT r.Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26 ORDER BY r.Road NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of races in which drivers 26 or older took part?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of races in which drivers 26 or older took part?[/QUESTION][SQL]SELECT r.Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26 ORDER BY r.Road NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the names of drivers whose constructor is not "Bugatti".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of drivers whose constructor is not "Bugatti".[/QUESTION][SQL]SELECT d.Driver_Name FROM driver d WHERE d.Constructor!= 'Bugatti' ORDER BY d.Driver_Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names od drivers who did not have the constructor Bugatti?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names od drivers who did not have the constructor Bugatti?[/QUESTION][SQL]SELECT d.Driver_Name FROM driver d WHERE d.Constructor!= 'Bugatti' ORDER BY d.Driver_Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List different constructors and the number of drivers that use each constructor.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List different constructors and the number of drivers that use each constructor.[/QUESTION][SQL]SELECT d.Constructor, COUNT(d.Driver_ID) AS num_drivers FROM driver d GROUP BY d.Constructor ORDER BY num_drivers DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many drivers use each constructor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many drivers use each constructor?[/QUESTION][SQL]SELECT d.Constructor, COUNT(d.Driver_ID) AS number_of_drivers FROM driver d GROUP BY d.Constructor ORDER BY number_of_drivers DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the most common type of engine used by drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the most common type of engine used by drivers.[/QUESTION][SQL]SELECT d.engine, COUNT(d.engine) AS count FROM driver d GROUP BY d.engine ORDER BY count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the most common type of engine?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most common type of engine?[/QUESTION][SQL]SELECT d.engine, COUNT(d.engine) AS count FROM driver d GROUP BY d.engine ORDER BY count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the types of engines that are used by at least two drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the types of engines that are used by at least two drivers.[/QUESTION][SQL]SELECT d.Engine FROM driver d GROUP BY d.Engine HAVING COUNT(d.Driver_ID) >= 2 ORDER BY d.Engine NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the engine types that are used by two or more drivers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the engine types that are used by two or more drivers?[/QUESTION][SQL]SELECT d.Engine FROM driver d GROUP BY d.Engine HAVING COUNT(d.Driver_ID) >= 2 ORDER BY d.Engine NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the names of drivers that do not participate in any race.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of drivers that do not participate in any race.[/QUESTION][SQL]SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r)
### TaskGenerate a SQL query to answer [QUESTION]What are names of drivers who did not take part in a race?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are names of drivers who did not take part in a race?[/QUESTION][SQL]SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r) ORDER BY d.Driver_Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.[/QUESTION][SQL]SELECT d.Constructor FROM driver d WHERE d.Age < 20 AND d.Age > 30 GROUP BY d.Constructor;
### TaskGenerate a SQL query to answer [QUESTION]What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?[/QUESTION][SQL]SELECT d.Constructor FROM driver d WHERE d.Age < 20 AND d.Age > 30 GROUP BY d.Constructor HAVING COUNT(d.Constructor) = (SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Age < 20 AND Age > 30);
### TaskGenerate a SQL query to answer [QUESTION]Find the teams that won more than once.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the teams that won more than once.[/QUESTION][SQL]SELECT r.winning_team FROM race r GROUP BY r.winning_team HAVING COUNT(r.winning_team) > 1 ORDER BY r.winning_team NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which teams won more than 1 race?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which teams won more than 1 race?[/QUESTION][SQL]SELECT r.winning_team FROM race r GROUP BY r.winning_team HAVING COUNT(r.Road) > 1 ORDER BY r.winning_team;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of drivers who were in both "James Hinchcliffe" and "Carl Skerlong" pole positions before.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of drivers who were in both "James Hinchcliffe" and "Carl Skerlong" pole positions before.[/QUESTION][SQL]SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position ilike '%James%Hinchcliffe%' AND r.Pole_Position ilike '%Carl%Skerlong%' GROUP BY d.Driver_Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?[/QUESTION][SQL]SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE LOWER(r.Pole_Position) IN ('james hinchcliffe', 'carl skerlong') GROUP BY d.Driver_Name HAVING COUNT(DISTINCT r.Road) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]find the name of drivers who were never in "James Hinchcliffe" pole position before.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]find the name of drivers who were never in "James Hinchcliffe" pole position before.[/QUESTION][SQL]SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r WHERE LOWER(r.Pole_Position) = 'james hinchcliffe')
### TaskGenerate a SQL query to answer [QUESTION]What are the names of drivers except for those who had the pole position James Hinchcliffe?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of drivers except for those who had the pole position James Hinchcliffe?[/QUESTION][SQL]SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE d.Driver_Name!= 'James Hinchcliffe' AND d.Driver_Name NOT IN (SELECT r.Pole_Position FROM race r) ORDER BY d.Driver_Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many languages are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many languages are there?[/QUESTION][SQL]SELECT COUNT(DISTINCT l.id) FROM languages l;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of languages.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of languages.[/QUESTION][SQL]SELECT COUNT(DISTINCT l.id) FROM languages l;
### TaskGenerate a SQL query to answer [QUESTION]List the name of languages in ascending alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of languages in ascending alphabetical order.[/QUESTION][SQL]SELECT l.name FROM languages l ORDER BY l.name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of languages, in alphabetical order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of languages, in alphabetical order?[/QUESTION][SQL]SELECT l.name FROM languages l ORDER BY l.name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of languages that contain the word "ish"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of languages that contain the word "ish"?[/QUESTION][SQL]SELECT l.name FROM languages l WHERE l.name ilike '%ish%';
### TaskGenerate a SQL query to answer [QUESTION]Return the names of langauges that contain the substring "ish".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of langauges that contain the substring "ish".[/QUESTION][SQL]SELECT l.name FROM languages l WHERE l.name ilike '%ish%' ORDER BY l.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of countries in descending order of overall scores.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of countries in descending order of overall scores.[/QUESTION][SQL]SELECT c.name, c.overall_score FROM countries c ORDER BY c.overall_score DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the countries, ordered descending by overall score?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the countries, ordered descending by overall score?[/QUESTION][SQL]SELECT c.name FROM countries c ORDER BY c.overall_score DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the average justice scores among countries?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average justice scores among countries?[/QUESTION][SQL]SELECT AVG(c.justice_score) AS average_justice_score FROM countries c;
### TaskGenerate a SQL query to answer [QUESTION]Give the average justice scores across all countries.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the average justice scores across all countries.[/QUESTION][SQL]SELECT AVG(c.justice_score) AS average_justice_score FROM countries c;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum health scores among countries that are not "Norway".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum health scores among countries that are not "Norway".[/QUESTION][SQL]SELECT MAX(c.health_score) AS max_health_score, MIN(c.health_score) AS min_health_score FROM countries c WHERE c.name!= 'Norway';
### TaskGenerate a SQL query to answer [QUESTION]Return the maximum and minimum health scores across all countries other than Norway.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the maximum and minimum health scores across all countries other than Norway.[/QUESTION][SQL]SELECT MAX(c.health_score) AS max_health_score, MIN(c.health_score) AS min_health_score FROM countries c WHERE c.name!= 'Norway';
### TaskGenerate a SQL query to answer [QUESTION]How many different official languages are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different official languages are there?[/QUESTION][SQL]SELECT COUNT(DISTINCT ol.language_id) FROM official_languages ol;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different official languages.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different official languages.[/QUESTION][SQL]SELECT COUNT(DISTINCT ol.language_id) FROM official_languages ol;
### TaskGenerate a SQL query to answer [QUESTION]List names of countries in descending order of education_score.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List names of countries in descending order of education_score.[/QUESTION][SQL]SELECT c.name FROM countries c ORDER BY c.education_score DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the countries, ordered descending by education score?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the countries, ordered descending by education score?[/QUESTION][SQL]SELECT c.name FROM countries c ORDER BY c.education_score DESC;
### TaskGenerate a SQL query to answer [QUESTION]List the name of the country with the biggest score in politics.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of the country with the biggest score in politics.[/QUESTION][SQL]SELECT c.name FROM countries c WHERE c.politics_score = (SELECT MAX(c2.politics_score) FROM countries c2);
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the country with the highest politics score?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the country with the highest politics score?[/QUESTION][SQL]SELECT c.name FROM countries c ORDER BY c.politics_score DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show the names of countries and their official languages.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of countries and their official languages.[/QUESTION][SQL]SELECT c.name AS country_name, l.name AS language_name FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the countries, as well as the names of their official langauges?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the countries, as well as the names of their official langauges?[/QUESTION][SQL]SELECT c.name AS country_name, l.name AS language_name FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id;
### TaskGenerate a SQL query to answer [QUESTION]Show the official languages and the number of countries speaking each language.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the official languages and the number of countries speaking each language.[/QUESTION][SQL]SELECT l.name AS language, COUNT(*) AS country_count FROM official_languages ol JOIN languages l ON ol.language_id = l.id GROUP BY l.name ORDER BY country_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the different official languages, as well as the number of countries that speak each?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the different official languages, as well as the number of countries that speak each?[/QUESTION][SQL]SELECT l.name AS language, COUNT(*) AS country_count FROM official_languages ol JOIN languages l ON ol.language_id = l.id GROUP BY l.name ORDER BY country_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the official language spoken by the most number of countries.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the official language spoken by the most number of countries.[/QUESTION][SQL]SELECT l.name FROM languages l JOIN (SELECT ol.language_id, COUNT(*) AS country_count FROM official_languages ol GROUP BY ol.language_id ORDER BY country_count DESC LIMIT 1) AS c ON l.id = c.language_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the official language that is most common?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the official language that is most common?[/QUESTION][SQL]SELECT l.name FROM languages l JOIN (SELECT ol.language_id, COUNT(*) AS count FROM official_languages ol GROUP BY ol.language_id ORDER BY count DESC LIMIT 1) AS c ON l.id = c.language_id;
### TaskGenerate a SQL query to answer [QUESTION]Show the official languages spoken by at least two countries.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the official languages spoken by at least two countries.[/QUESTION][SQL]SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name HAVING COUNT(DISTINCT ol.country_id) >= 2 ORDER BY l.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which official languages are spoken in two or more countries?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which official languages are spoken in two or more countries?[/QUESTION][SQL]SELECT l.name FROM languages l JOIN (SELECT ol.language_id, COUNT(DISTINCT ol.country_id) AS country_count FROM official_languages ol GROUP BY ol.language_id HAVING COUNT(DISTINCT ol.country_id) >= 2) AS c ON l.id = c.language_id ORDER BY l.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the average overall scores of countries whose official language is "English".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the average overall scores of countries whose official language is "English".[/QUESTION][SQL]SELECT AVG(c.overall_score) AS average_overall_score FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id WHERE LOWER(l.name) = 'english';
### TaskGenerate a SQL query to answer [QUESTION]What is the average overall score across countries with English as their official language?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average overall score across countries with English as their official language?[/QUESTION][SQL]SELECT AVG(c.overall_score) AS average_overall_score FROM countries c JOIN official_languages ol ON c.id = ol.country_id WHERE ol.language_id IN (SELECT id FROM languages WHERE name ilike '%English%');
### TaskGenerate a SQL query to answer [QUESTION]Show the three official languages that are most commonly spoken.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the three official languages that are most commonly spoken.[/QUESTION][SQL]SELECT l.name FROM official_languages ol JOIN languages l ON ol.language_id = l.id GROUP BY l.name ORDER BY COUNT(ol.country_id) DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the three official languages spoken in the most countries?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the three official languages spoken in the most countries?[/QUESTION][SQL]SELECT l.name FROM languages l JOIN (SELECT ol.language_id, COUNT(*) AS country_count FROM official_languages ol GROUP BY ol.language_id ORDER BY country_count DESC LIMIT 3) AS c ON l.id = c.language_id ORDER BY c.country_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the official languages sorted in descending order by the average overall scores among countries speaking them.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the official languages sorted in descending order by the average overall scores among countries speaking them.[/QUESTION][SQL]SELECT l.name, AVG(c.overall_score) AS avg_overall_score FROM official_languages ol JOIN languages l ON ol.language_id = l.id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY avg_overall_score DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?[/QUESTION][SQL]SELECT l.name, AVG(c.overall_score) AS avg_overall_score FROM official_languages ol JOIN languages l ON ol.language_id = l.id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY avg_overall_score DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the name of the country that has the greatest number of official languages.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name of the country that has the greatest number of official languages.[/QUESTION][SQL]SELECT c.name FROM countries c JOIN (SELECT o.country_id, COUNT(o.language_id) AS num_of_languages FROM official_languages o GROUP BY o.country_id ORDER BY num_of_languages DESC LIMIT 1) ol ON c.id = ol.country_id;
### TaskGenerate a SQL query to answer [QUESTION]Which country has the greatest number of official languages?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which country has the greatest number of official languages?[/QUESTION][SQL]SELECT c.name FROM countries c JOIN (SELECT ol.country_id, COUNT(ol.language_id) AS num_of_languages FROM official_languages ol GROUP BY ol.country_id ORDER BY num_of_languages DESC LIMIT 1) AS o ON c.id = o.country_id;
### TaskGenerate a SQL query to answer [QUESTION]List the names of languages that are not the official language of any countries.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of languages that are not the official language of any countries.[/QUESTION][SQL]SELECT l.name FROM languages l WHERE NOT EXISTS (SELECT 1 FROM official_languages o WHERE o.language_id = l.id) ORDER BY l.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of languages that are not the official language of any country?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of languages that are not the official language of any country?[/QUESTION][SQL]SELECT l.name FROM languages l WHERE NOT EXISTS (SELECT 1 FROM official_languages o WHERE o.language_id = l.id) ORDER BY l.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the names of countries that do not have any official language.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of countries that do not have any official language.[/QUESTION][SQL]SELECT c.name FROM countries c WHERE c.id NOT IN (SELECT ol.country_id FROM official_languages ol)
### TaskGenerate a SQL query to answer [QUESTION]What are the names of countries that do not have an official language?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of countries that do not have an official language?[/QUESTION][SQL]SELECT c.name FROM countries c WHERE c.id NOT IN (SELECT o.country_id FROM official_languages o)
### TaskGenerate a SQL query to answer [QUESTION]Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.[/QUESTION][SQL]SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id WHERE ol.country_id IN (SELECT id FROM countries WHERE overall_score > 95) AND ol.country_id IN (SELECT id FROM countries WHERE overall_score < 90) GROUP BY l.name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?[/QUESTION][SQL]SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id WHERE ol.country_id IN (SELECT id FROM countries WHERE overall_score > 95 AND overall_score < 90) GROUP BY l.name HAVING COUNT(DISTINCT ol.country_id) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]Which countries and cities are included in addresses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which countries and cities are included in addresses?[/QUESTION][SQL]SELECT DISTINCT country, town_city FROM Addresses ORDER BY country, town_city;
### TaskGenerate a SQL query to answer [QUESTION]What are the countries and cities for each address?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the countries and cities for each address?[/QUESTION][SQL]SELECT a.address_id, a.country, a.town_city FROM Addresses a ORDER BY a.address_id;
### TaskGenerate a SQL query to answer [QUESTION]In which states are each of the the properties located?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In which states are each of the the properties located?[/QUESTION][SQL]SELECT p.property_id, a.county_state_province AS state FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id;
### TaskGenerate a SQL query to answer [QUESTION]Give the states or provinces corresponding to each property.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the states or provinces corresponding to each property.[/QUESTION][SQL]SELECT p.property_id, a.county_state_province AS state_province FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id
### TaskGenerate a SQL query to answer [QUESTION]How is the feature rooftop described?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How is the feature rooftop described?[/QUESTION][SQL]SELECT f.feature_description FROM Features f WHERE LOWER(f.feature_name) = 'rooftop';
### TaskGenerate a SQL query to answer [QUESTION]Return the description of the feature 'rooftop'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the description of the feature 'rooftop'.[/QUESTION][SQL]SELECT f.feature_description FROM Features f WHERE LOWER(f.feature_name) = 'rooftop';
### TaskGenerate a SQL query to answer [QUESTION]What are the feature name and description of the most commonly seen feature across properties?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the feature name and description of the most commonly seen feature across properties?[/QUESTION][SQL]SELECT f.feature_name, f.feature_description FROM Features f JOIN Property_Features pf ON f.feature_id = pf.feature_id GROUP BY f.feature_name, f.feature_description ORDER BY COUNT(pf.property_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the feature name and description for the most common feature across all properties.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the feature name and description for the most common feature across all properties.[/QUESTION][SQL]SELECT f.feature_name, f.feature_description FROM Features f JOIN Property_Features pf ON f.feature_id = pf.feature_id GROUP BY f.feature_name, f.feature_description ORDER BY COUNT(pf.property_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the minimum number of rooms in a property?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the minimum number of rooms in a property?[/QUESTION][SQL]SELECT MIN(CAST(p.room_count AS INTEGER)) FROM Properties p;
### TaskGenerate a SQL query to answer [QUESTION]What is the lowest room count across all the properties?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the lowest room count across all the properties?[/QUESTION][SQL]SELECT MIN(CAST(p.room_count AS INTEGER)) FROM Properties p;
### TaskGenerate a SQL query to answer [QUESTION]How many properties have 1 parking lot or 1 garage?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many properties have 1 parking lot or 1 garage?[/QUESTION][SQL]SELECT COUNT(*) FROM Properties p WHERE (p.parking_lots = '1' OR p.garage_yn = '1');
### TaskGenerate a SQL query to answer [QUESTION]Count the number of properties that have 1 parking lot or 1 garage.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of properties that have 1 parking lot or 1 garage.[/QUESTION][SQL]SELECT COUNT(*) FROM Properties p WHERE (p.parking_lots = '1' OR p.garage_yn = '1');
### TaskGenerate a SQL query to answer [QUESTION]For users whose description contain the string 'Mother', which age categories are they in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For users whose description contain the string 'Mother', which age categories are they in?[/QUESTION][SQL]SELECT u.age_category_code FROM Users u WHERE LOWER(u.other_user_details) LIKE '%mother%' ORDER BY u.age_category_code;
### TaskGenerate a SQL query to answer [QUESTION]What are the age categories for users whose description contains the string Mother?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the age categories for users whose description contains the string Mother?[/QUESTION][SQL]SELECT u.age_category_code FROM Users u WHERE LOWER(u.other_user_details) LIKE '%mother%' ORDER BY u.age_category_code;
### TaskGenerate a SQL query to answer [QUESTION]What is the first name of the user who owns the greatest number of properties?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the first name of the user who owns the greatest number of properties?[/QUESTION][SQL]SELECT u.first_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id GROUP BY u.first_name ORDER BY COUNT(p.property_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the first name of the user who owns the most properties.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the first name of the user who owns the most properties.[/QUESTION][SQL]SELECT u.first_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id GROUP BY u.first_name ORDER BY COUNT(p.property_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the average room count of the properties with gardens.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the average room count of the properties with gardens.[/QUESTION][SQL]SELECT AVG(CAST(p.room_count AS INTEGER)) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id WHERE LOWER(pf.feature_value) LIKE '%garden%' AND CAST(p.room_count AS INTEGER) IS NOT NULL;
### TaskGenerate a SQL query to answer [QUESTION]On average, how many rooms do properties with garden features have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]On average, how many rooms do properties with garden features have?[/QUESTION][SQL]SELECT AVG(CAST(p.room_count AS INTEGER)) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id WHERE LOWER(pf.feature_value) LIKE '%garden%' AND CAST(p.room_count AS INTEGER) IS NOT NULL;
### TaskGenerate a SQL query to answer [QUESTION]In which cities are there any properties equipped with a swimming pool?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In which cities are there any properties equipped with a swimming pool?[/QUESTION][SQL]SELECT DISTINCT p.property_address_id, a.town_city FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id JOIN Addresses a ON p.property_address_id = a.address_id WHERE LOWER(f.feature_name) LIKE '%swimming pool%' ORDER BY a.town_city;
### TaskGenerate a SQL query to answer [QUESTION]Return the cities in which there exist properties that have swimming pools.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the cities in which there exist properties that have swimming pools.[/QUESTION][SQL]SELECT DISTINCT p.property_address_id, a.town_city FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id JOIN Addresses a ON p.property_address_id = a.address_id WHERE LOWER(f.feature_name) LIKE '%swimming pool%' ORDER BY a.town_city;
### TaskGenerate a SQL query to answer [QUESTION]Which property had the lowest price requested by the vendor? List the id and the price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which property had the lowest price requested by the vendor? List the id and the price.[/QUESTION][SQL]SELECT p.property_id, MIN(p.vendor_requested_price) AS min_vendor_price FROM Properties p GROUP BY p.property_id ORDER BY min_vendor_price ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the id of the property that had the lowest requested price from the vendor, and what was that price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id of the property that had the lowest requested price from the vendor, and what was that price?[/QUESTION][SQL]SELECT p.property_id, MIN(p.vendor_requested_price) AS min_vendor_requested_price FROM Properties p GROUP BY p.property_id ORDER BY min_vendor_requested_price ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]On average, how many rooms does a property have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]On average, how many rooms does a property have?[/QUESTION][SQL]SELECT AVG(CAST(p.room_count AS INTEGER)) FROM Properties p;
### TaskGenerate a SQL query to answer [QUESTION]What is the average number of rooms in a property?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average number of rooms in a property?[/QUESTION][SQL]SELECT AVG(CAST(p.room_count AS INTEGER)) FROM Properties p;
### TaskGenerate a SQL query to answer [QUESTION]How many kinds of room sizes are listed?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many kinds of room sizes are listed?[/QUESTION][SQL]SELECT COUNT(DISTINCT r.room_size) FROM Rooms r;
### TaskGenerate a SQL query to answer [QUESTION]Return the number of different room sizes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the number of different room sizes.[/QUESTION][SQL]SELECT COUNT(DISTINCT r.room_size) FROM Rooms r;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of users who have searched at least twice, and what did they search?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of users who have searched at least twice, and what did they search?[/QUESTION][SQL]SELECT u.user_id, us.search_string FROM Users u JOIN User_Searches us ON u.user_id = us.user_id GROUP BY u.user_id, us.search_string HAVING COUNT(us.search_seq) >= 2 ORDER BY u.user_id;
### TaskGenerate a SQL query to answer [QUESTION]Return the ids of users who have performed two or more searches, as well as their search sequence.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the ids of users who have performed two or more searches, as well as their search sequence.[/QUESTION][SQL]SELECT us.user_id, us.search_seq FROM User_Searches us GROUP BY us.user_id, us.search_seq HAVING COUNT(us.search_seq) >= 2 ORDER BY us.user_id;
### TaskGenerate a SQL query to answer [QUESTION]When was the time of the latest search by a user?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]When was the time of the latest search by a user?[/QUESTION][SQL]SELECT u.user_id, u.first_name, u.last_name, us.search_datetime FROM Users u JOIN User_Searches us ON u.user_id = us.user_id ORDER BY us.search_datetime DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What was the time of the most recent search?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What was the time of the most recent search?[/QUESTION][SQL]SELECT us.search_datetime FROM User_Searches us ORDER BY us.search_datetime DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are all the user searches time and content? Sort the result descending by content.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the user searches time and content? Sort the result descending by content.[/QUESTION][SQL]SELECT us.search_datetime, us.search_string FROM User_Searches us ORDER BY us.search_string DESC;
### TaskGenerate a SQL query to answer [QUESTION]Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.[/QUESTION][SQL]SELECT us.search_string, us.search_datetime FROM User_Searches us ORDER BY us.search_string DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the zip codes of properties which do not belong to users who own at most 2 properties?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the zip codes of properties which do not belong to users who own at most 2 properties?[/QUESTION][SQL]SELECT DISTINCT p.property_address_id, a.zip_postcode FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id WHERE p.owner_user_id IN (SELECT user_id FROM Users u JOIN User_Property_History uph ON u.user_id = uph.user_id GROUP BY user_id HAVING COUNT(property_id) > 2);
### TaskGenerate a SQL query to answer [QUESTION]Return the zip codes for properties not belonging to users who own two or fewer properties.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the zip codes for properties not belonging to users who own two or fewer properties.[/QUESTION][SQL]SELECT DISTINCT p.property_address_id, a.zip_postcode FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id WHERE p.owner_user_id IN (SELECT user_id FROM Users u JOIN User_Property_History uph ON u.user_id = uph.user_id GROUP BY user_id HAVING COUNT(property_id) > 2);
### TaskGenerate a SQL query to answer [QUESTION]What are the users making only one search? List both category and user id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the users making only one search? List both category and user id.[/QUESTION][SQL]SELECT u.user_category_code, u.user_id FROM Users u JOIN (SELECT us.user_id, COUNT(us.search_seq) AS search_count FROM User_Searches us GROUP BY us.user_id HAVING COUNT(us.search_seq) = 1) AS s ON u.user_id = s.user_id ORDER BY u.user_category_code;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of users who have only made one search, and what are their category codes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of users who have only made one search, and what are their category codes?[/QUESTION][SQL]SELECT u.user_id, u.age_category_code FROM Users u JOIN User_Searches us ON u.user_id = us.user_id GROUP BY u.user_id, u.age_category_code HAVING COUNT(us.search_seq) = 1
### TaskGenerate a SQL query to answer [QUESTION]What is the age range category of the user who made the first search?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the age range category of the user who made the first search?[/QUESTION][SQL]SELECT u.age_category_code FROM Users u JOIN (SELECT us.user_id FROM User_Searches us ORDER BY us.search_datetime ASC LIMIT 1) AS recent_search ON u.user_id = recent_search.user_id;
### TaskGenerate a SQL query to answer [QUESTION]Return the age category for the user who made the earliest search.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the age category for the user who made the earliest search.[/QUESTION][SQL]SELECT u.age_category_code FROM Users u JOIN User_Searches us ON u.user_id = us.user_id ORDER BY us.search_datetime ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the login names of all senior citizen users ordered by their first names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the login names of all senior citizen users ordered by their first names.[/QUESTION][SQL]SELECT u.login_name FROM Users u JOIN Ref_Age_Categories rac ON u.age_category_code = rac.age_category_code WHERE LOWER(rac.age_category_description) LIKE '%senior%' ORDER BY u.first_name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the login names of all senior citizens, sorted by first name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the login names of all senior citizens, sorted by first name?[/QUESTION][SQL]SELECT u.login_name FROM Users u JOIN Ref_Age_Categories rac ON u.age_category_code = rac.age_category_code WHERE LOWER(rac.age_category_description) ='senior citizen' ORDER BY u.first_name ASC;
### TaskGenerate a SQL query to answer [QUESTION]How many searches do buyers make in total?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many searches do buyers make in total?[/QUESTION][SQL]SELECT SUM(search_seq) AS total_searches FROM User_Searches us JOIN Users u ON us.user_id = u.user_id WHERE LOWER(u.is_buyer) = 'y';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of searches made by buyers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of searches made by buyers.[/QUESTION][SQL]SELECT COUNT(*) AS total_searches FROM User_Searches us JOIN Users u ON us.user_id = u.user_id WHERE LOWER(u.is_buyer) = 'y';
### TaskGenerate a SQL query to answer [QUESTION]When did the user with login name ratione register?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]When did the user with login name ratione register?[/QUESTION][SQL]SELECT u.date_registered FROM Users u WHERE LOWER(u.login_name) = 'ratione';
### TaskGenerate a SQL query to answer [QUESTION]What was the registration date for the user whose login name is ratione?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What was the registration date for the user whose login name is ratione?[/QUESTION][SQL]SELECT u.date_registered FROM Users u WHERE LOWER(u.login_name) = 'ratione';
### TaskGenerate a SQL query to answer [QUESTION]List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.[/QUESTION][SQL]SELECT u.first_name, u.middle_name, u.last_name, u.login_name FROM Users u WHERE u.is_seller = '1' ORDER BY u.user_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the first, middle, last, and login names for all users who are sellers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first, middle, last, and login names for all users who are sellers?[/QUESTION][SQL]SELECT u.first_name, u.middle_name, u.last_name, u.login_name FROM Users u WHERE LOWER(u.is_seller) = 'y' ORDER BY u.user_id;
### TaskGenerate a SQL query to answer [QUESTION]Where do the Senior Citizens live? List building, street, and the city.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Where do the Senior Citizens live? List building, street, and the city.[/QUESTION][SQL]SELECT u.user_address_id, a.line_1_number_building, a.line_2_number_street, a.town_city FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id WHERE LOWER(u.age_category_code) IN (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Senior%Citizen%') ORDER BY u.user_address_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the buildings, streets, and cities corresponding to the addresses of senior citizens?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the buildings, streets, and cities corresponding to the addresses of senior citizens?[/QUESTION][SQL]SELECT u.user_id, u.first_name, u.last_name, a.line_1_number_building, a.line_2_number_street, a.town_city FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id WHERE u.age_category_code IN (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior') ORDER BY u.user_id;
### TaskGenerate a SQL query to answer [QUESTION]How many properties are there with at least 2 features?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many properties are there with at least 2 features?[/QUESTION][SQL]SELECT COUNT(DISTINCT p.property_id) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id GROUP BY p.property_id HAVING COUNT(pf.feature_id) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of properties with at least two features.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of properties with at least two features.[/QUESTION][SQL]SELECT COUNT(DISTINCT p.property_id) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id GROUP BY p.property_id HAVING COUNT(pf.feature_id) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]How many photos does each property have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many photos does each property have?[/QUESTION][SQL]SELECT p.property_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id ORDER BY p.property_id;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of property photos each property has by id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of property photos each property has by id.[/QUESTION][SQL]SELECT p.property_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id ORDER BY p.property_id;
### TaskGenerate a SQL query to answer [QUESTION]How many photos does each owner has of his or her properties? List user id and number of photos.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many photos does each owner has of his or her properties? List user id and number of photos.[/QUESTION][SQL]SELECT p.owner_user_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.owner_user_id ORDER BY photo_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the user ids of property owners who have property photos, and how many do each of them have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the user ids of property owners who have property photos, and how many do each of them have?[/QUESTION][SQL]SELECT p.owner_user_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.owner_user_id ORDER BY photo_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the total max price of the properties owned by single mothers or students?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total max price of the properties owned by single mothers or students?[/QUESTION][SQL]SELECT SUM(p.price_max) AS total_max_price FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE (u.user_category_code ='single_mother' OR u.user_category_code ='student');
### TaskGenerate a SQL query to answer [QUESTION]Give the total max price corresponding to any properties owned by single mothers or students.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the total max price corresponding to any properties owned by single mothers or students.[/QUESTION][SQL]SELECT SUM(p.price_max) AS total_max_price FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE (u.age_category_code IN ('18-24', '25-34') OR u.user_category_code = 'Single Mother');
### TaskGenerate a SQL query to answer [QUESTION]What are the date stamps and property names for each item of property history, ordered by date stamp?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the date stamps and property names for each item of property history, ordered by date stamp?[/QUESTION][SQL]SELECT uph.datestamp, p.property_name FROM User_Property_History AS uph JOIN Properties AS p ON uph.property_id = p.property_id ORDER BY uph.datestamp;
### TaskGenerate a SQL query to answer [QUESTION]Return the date stamp and property name for each property history event, sorted by date stamp.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the date stamp and property name for each property history event, sorted by date stamp.[/QUESTION][SQL]SELECT uph.datestamp, p.property_name FROM User_Property_History AS uph JOIN Properties AS p ON uph.property_id = p.property_id ORDER BY uph.datestamp;
### TaskGenerate a SQL query to answer [QUESTION]What is the description of the most common property type? List the description and code.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the description of the most common property type? List the description and code.[/QUESTION][SQL]SELECT pt.property_type_description, pt.property_type_code FROM Ref_Property_Types pt JOIN (SELECT p.property_type_code, COUNT(p.property_id) AS count FROM Properties p GROUP BY p.property_type_code ORDER BY count DESC LIMIT 1) AS c ON pt.property_type_code = c.property_type_code
### TaskGenerate a SQL query to answer [QUESTION]What is the most common property type, and what is its description.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most common property type, and what is its description.[/QUESTION][SQL]SELECT pt.property_type_description FROM Ref_Property_Types pt JOIN Properties p ON pt.property_type_code = p.property_type_code GROUP BY pt.property_type_description ORDER BY COUNT(p.property_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the detailed description of the age category code 'Over 60'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the detailed description of the age category code 'Over 60'?[/QUESTION][SQL]SELECT ac.age_category_description FROM Ref_Age_Categories ac WHERE LOWER(ac.age_category_code) = 'over 60';
### TaskGenerate a SQL query to answer [QUESTION]Give the category description of the age category 'Over 60'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the category description of the age category 'Over 60'.[/QUESTION][SQL]SELECT ac.age_category_description FROM Ref_Age_Categories ac WHERE LOWER(ac.age_category_code) = 'over 60';
### TaskGenerate a SQL query to answer [QUESTION]What are the different room sizes, and how many of each are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different room sizes, and how many of each are there?[/QUESTION][SQL]SELECT r.room_size, COUNT(r.room_size) AS count FROM Rooms r GROUP BY r.room_size ORDER BY r.room_size;
### TaskGenerate a SQL query to answer [QUESTION]Return the number of rooms with each different room size.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the number of rooms with each different room size.[/QUESTION][SQL]SELECT r.room_size, COUNT(r.room_size) AS room_count FROM Rooms r GROUP BY r.room_size ORDER BY room_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]In which country does the user with first name Robbie live?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In which country does the user with first name Robbie live?[/QUESTION][SQL]SELECT u.user_address_id, a.country FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id WHERE LOWER(u.first_name) = 'robbie';
### TaskGenerate a SQL query to answer [QUESTION]Return the country in which the user with first name Robbie lives.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the country in which the user with first name Robbie lives.[/QUESTION][SQL]SELECT u.user_address_id, a.country FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id WHERE LOWER(u.first_name) = 'robbie' LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the first, middle and last names of users who own the property they live in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the first, middle and last names of users who own the property they live in?[/QUESTION][SQL]SELECT u.first_name, u.middle_name, u.last_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE u.user_address_id = p.property_address_id ORDER BY u.first_name NULLS LAST, u.middle_name NULLS LAST, u.last_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the full names of users who live in properties that they own.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the full names of users who live in properties that they own.[/QUESTION][SQL]SELECT u.first_name ||'' || u.middle_name ||'' || u.last_name AS full_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE u.user_address_id = p.property_address_id;
### TaskGenerate a SQL query to answer [QUESTION]List the search content of the users who do not own a single property.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the search content of the users who do not own a single property.[/QUESTION][SQL]SELECT us.search_string FROM Users u JOIN User_Searches us ON u.user_id = us.user_id WHERE u.user_id NOT IN (SELECT p.owner_user_id FROM Properties p);
### TaskGenerate a SQL query to answer [QUESTION]What search strings were entered by users who do not own any properties?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What search strings were entered by users who do not own any properties?[/QUESTION][SQL]SELECT us.search_string FROM User_Searches us JOIN Users u ON us.user_id = u.user_id WHERE u.user_id NOT IN (SELECT p.owner_user_id FROM Properties p);
### TaskGenerate a SQL query to answer [QUESTION]List the last names and ids of users who have at least 2 properties and searched at most twice.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the last names and ids of users who have at least 2 properties and searched at most twice.[/QUESTION][SQL]SELECT u.last_name, u.user_id FROM Users u JOIN (SELECT user_id, COUNT(property_id) AS property_count FROM User_Property_History GROUP BY user_id HAVING COUNT(property_id) >= 2) p ON u.user_id = p.user_id WHERE u.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) <= 2);
### TaskGenerate a SQL query to answer [QUESTION]What are the last names and ids of users who have searched two or fewer times, and own two or more properties?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the last names and ids of users who have searched two or fewer times, and own two or more properties?[/QUESTION][SQL]SELECT u.last_name, u.user_id FROM Users u JOIN User_Searches us ON u.user_id = us.user_id WHERE (SELECT COUNT(*) FROM User_Searches us2 WHERE us2.user_id = u.user_id) <= 2 AND (SELECT COUNT(*) FROM Properties p WHERE p.owner_user_id = u.user_id) >= 2 GROUP BY u.last_name, u.user_id;
### TaskGenerate a SQL query to answer [QUESTION]How many bikes are heavier than 780 grams?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many bikes are heavier than 780 grams?[/QUESTION][SQL]SELECT COUNT(*) FROM bike WHERE weight > 780;
### TaskGenerate a SQL query to answer [QUESTION]List the product names and weights of the bikes in ascending order of price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the product names and weights of the bikes in ascending order of price.[/QUESTION][SQL]SELECT b.product_name, b.weight FROM bike b ORDER BY b.price ASC;
### TaskGenerate a SQL query to answer [QUESTION]List the heat, name, and nation for all the cyclists.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the heat, name, and nation for all the cyclists.[/QUESTION][SQL]SELECT c.heat, c.name, c.nation FROM cyclist c ORDER BY c.heat NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum weight of all bikes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum weight of all bikes?[/QUESTION][SQL]SELECT MAX(b.weight) AS max_weight, MIN(b.weight) AS min_weight FROM bike b;
### TaskGenerate a SQL query to answer [QUESTION]What is the average price of the bikes made of material 'Carbon CC'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average price of the bikes made of material 'Carbon CC'?[/QUESTION][SQL]SELECT AVG(b.price) AS average_price FROM bike b WHERE LOWER(b.material) = 'carbon cc';
### TaskGenerate a SQL query to answer [QUESTION]What are the name and result of the cyclists not from 'Russia'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the name and result of the cyclists not from 'Russia'?[/QUESTION][SQL]SELECT c.name, c.result FROM cyclist c WHERE c.nation!= 'Russia';
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct ids and product names of the bikes that are purchased after year 2015?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct ids and product names of the bikes that are purchased after year 2015?[/QUESTION][SQL]SELECT DISTINCT b.id AS bike_id, b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE cob.purchase_year > 2015 ORDER BY bike_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and names of racing bikes that are purchased by at least 4 cyclists?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and names of racing bikes that are purchased by at least 4 cyclists?[/QUESTION][SQL]SELECT b.id AS bike_id, b.product_name FROM bike b JOIN (SELECT c.bike_id FROM cyclists_own_bikes c GROUP BY c.bike_id HAVING COUNT(c.cyclist_id) >= 4) AS d ON b.id = d.bike_id ORDER BY b.id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the id and name of the cyclist who owns the most bikes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the id and name of the cyclist who owns the most bikes?[/QUESTION][SQL]SELECT c.id AS cyclist_id, c.name, COUNT(bike_id) AS bike_count FROM cyclists_own_bikes cob JOIN cyclist c ON cob.cyclist_id = c.id GROUP BY c.id, c.name ORDER BY bike_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?[/QUESTION][SQL]SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.nation IN ('Russia', 'Great Britain') ORDER BY b.product_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many different levels of heat are there for the cyclists?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different levels of heat are there for the cyclists?[/QUESTION][SQL]SELECT COUNT(DISTINCT c.heat) FROM cyclist c;
### TaskGenerate a SQL query to answer [QUESTION]How many cyclists did not purchase any bike after year 2015?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many cyclists did not purchase any bike after year 2015?[/QUESTION][SQL]SELECT COUNT(DISTINCT c.id) FROM cyclist c LEFT JOIN (SELECT co.cyclist_id FROM cyclists_own_bikes co WHERE co.purchase_year > 2015 GROUP BY co.cyclist_id) AS o ON c.id = o.cyclist_id WHERE o.cyclist_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558'?[/QUESTION][SQL]SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.result < 241.558 ORDER BY b.product_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.[/QUESTION][SQL]SELECT b.product_name, b.price FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE (cob.cyclist_id IN (SELECT id FROM cyclist WHERE name ilike '%Bradley%Wiggins%') AND cob.cyclist_id IN (SELECT id FROM cyclist WHERE name ilike '%Antonio%Tauler%')) GROUP BY b.product_name, b.price HAVING COUNT(DISTINCT cob.cyclist_id) = 2;
### TaskGenerate a SQL query to answer [QUESTION]Show the name, nation and result for the cyclists who did not purchase any racing bike.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the name, nation and result for the cyclists who did not purchase any racing bike.[/QUESTION][SQL]SELECT c.name, c.nation, c.result FROM cyclist c LEFT JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id WHERE cob.bike_id NOT IN (SELECT id FROM bike WHERE product_name ilike '%racing%') ORDER BY c.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the bikes that have substring 'fiber' in their material?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the bikes that have substring 'fiber' in their material?[/QUESTION][SQL]SELECT b.product_name FROM bike b WHERE b.material ilike '%fiber%' ORDER BY b.product_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many bikes does each cyclist own? Order by cyclist id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many bikes does each cyclist own? Order by cyclist id.[/QUESTION][SQL]SELECT c.id AS cyclist_id, COUNT(cob.bike_id) AS bike_count FROM cyclists_own_bikes cob JOIN cyclist c ON cob.cyclist_id = c.id GROUP BY c.id ORDER BY c.id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the most expensive cake and its flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most expensive cake and its flavor?[/QUESTION][SQL]SELECT g.Flavor, MAX(g.Price) AS max_price FROM goods g WHERE g.Food = 'cake' GROUP BY g.Flavor ORDER BY max_price DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the id and flavor of the most expensive cake.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the id and flavor of the most expensive cake.[/QUESTION][SQL]SELECT g.id, g.flavor FROM goods g WHERE g.food = 'cake' ORDER BY g.price DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the cheapest cookie and its flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the cheapest cookie and its flavor?[/QUESTION][SQL]SELECT g.Flavor, MIN(g.Price) AS min_price FROM goods g WHERE g.Food = 'cookie' GROUP BY g.Flavor ORDER BY min_price ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the id and flavor of the cheapest cookie?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the id and flavor of the cheapest cookie?[/QUESTION][SQL]SELECT g.id, g.flavor FROM goods g WHERE g.food = 'cookie' ORDER BY g.price ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the ids of goods that have apple flavor.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the ids of goods that have apple flavor.[/QUESTION][SQL]SELECT g.id FROM goods g WHERE LOWER(g.flavor) = 'apple';
### TaskGenerate a SQL query to answer [QUESTION]What are the ids with apple flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids with apple flavor?[/QUESTION][SQL]SELECT g.id FROM goods g WHERE LOWER(g.flavor) = 'apple';
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of goods that cost less than 3 dollars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of goods that cost less than 3 dollars?[/QUESTION][SQL]SELECT g.id FROM goods g WHERE g.price < 3;
### TaskGenerate a SQL query to answer [QUESTION]Give the ids of goods that cost less than 3 dollars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the ids of goods that cost less than 3 dollars.[/QUESTION][SQL]SELECT g.id FROM goods g WHERE g.price < 3;
### TaskGenerate a SQL query to answer [QUESTION]List the distinct ids of all customers who bought a cake with lemon flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the distinct ids of all customers who bought a cake with lemon flavor?[/QUESTION][SQL]SELECT DISTINCT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor ilike '%lemon%' AND g.Food ilike '%cake%';
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct ids of customers who bought lemon flavored cake?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct ids of customers who bought lemon flavored cake?[/QUESTION][SQL]SELECT DISTINCT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE LOWER(g.Flavor) = 'lemon' AND LOWER(g.Food) = 'cake';
### TaskGenerate a SQL query to answer [QUESTION]For each type of food, tell me how many customers have ever bought it.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each type of food, tell me how many customers have ever bought it.[/QUESTION][SQL]SELECT g.food, COUNT(DISTINCT r.customerid) AS customer_count FROM items i JOIN goods g ON i.item = g.id JOIN receipts r ON i.receipt = r.receiptnumber GROUP BY g.food ORDER BY customer_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many customers have bought each food?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many customers have bought each food?[/QUESTION][SQL]SELECT g.food, COUNT(DISTINCT r.receiptnumber) AS number_of_customers FROM items i JOIN goods g ON i.item = g.id JOIN receipts r ON i.receipt = r.receiptnumber GROUP BY g.food ORDER BY number_of_customers DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the id of customers who shopped at the bakery at least 15 times.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the id of customers who shopped at the bakery at least 15 times.[/QUESTION][SQL]SELECT c.Id FROM receipts r JOIN customers c ON r.CustomerId = c.Id WHERE r.Date LIKE '%bakery%' GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) >= 15;
### TaskGenerate a SQL query to answer [QUESTION]What are the customer ids of customers who have at least 15 receipts?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the customer ids of customers who have at least 15 receipts?[/QUESTION][SQL]SELECT r.CustomerId FROM receipts r GROUP BY r.CustomerId HAVING COUNT(r.ReceiptNumber) >= 15;
### TaskGenerate a SQL query to answer [QUESTION]What is the last name of the customers who shopped at the bakery more than 10 times?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the last name of the customers who shopped at the bakery more than 10 times?[/QUESTION][SQL]SELECT c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId WHERE r.ReceiptNumber IN (SELECT ReceiptNumber FROM items i WHERE i.Item LIKE '%bakery%') GROUP BY c.LastName HAVING COUNT(r.ReceiptNumber) > 10;
### TaskGenerate a SQL query to answer [QUESTION]Give the last names of customers who have been to the bakery more than 10 times?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the last names of customers who have been to the bakery more than 10 times?[/QUESTION][SQL]SELECT c.LastName FROM receipts r JOIN customers c ON r.CustomerId = c.Id GROUP BY c.LastName HAVING COUNT(r.ReceiptNumber) > 10 ORDER BY c.LastName NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many types of Cake does this bakery sell?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many types of Cake does this bakery sell?[/QUESTION][SQL]SELECT COUNT(DISTINCT g.Flavor) FROM goods g WHERE LOWER(g.Food) = 'cake';
### TaskGenerate a SQL query to answer [QUESTION]Count the number of types of cake this bakery sells.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of types of cake this bakery sells.[/QUESTION][SQL]SELECT COUNT(DISTINCT g.Flavor) FROM goods g WHERE g.Food = 'cake';
### TaskGenerate a SQL query to answer [QUESTION]List all the flavors of Croissant available in this bakery.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all the flavors of Croissant available in this bakery.[/QUESTION][SQL]SELECT DISTINCT g.Flavor FROM goods g WHERE LOWER(g.Food) = 'croissant';
### TaskGenerate a SQL query to answer [QUESTION]What are all the flavors of croissant?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the flavors of croissant?[/QUESTION][SQL]SELECT DISTINCT g.Flavor FROM goods g WHERE LOWER(g.Food) = 'croissant' ORDER BY g.Flavor NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Give me a list of all the distinct items bought by the customer number 15.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me a list of all the distinct items bought by the customer number 15.[/QUESTION][SQL]SELECT DISTINCT i.Item FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE r.CustomerId = 15;
### TaskGenerate a SQL query to answer [QUESTION]What are all the distinct items bought by customer 15?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the distinct items bought by customer 15?[/QUESTION][SQL]SELECT DISTINCT i.item FROM receipts r JOIN items i ON r.receiptnumber = i.receipt WHERE r.customerid = 15;
### TaskGenerate a SQL query to answer [QUESTION]For each type of food, what are the average, maximum and minimum price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each type of food, what are the average, maximum and minimum price?[/QUESTION][SQL]SELECT g.food, AVG(g.price) AS avg_price, MAX(g.price) AS max_price, MIN(g.price) AS min_price FROM goods g GROUP BY g.food ORDER BY g.food NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the average, minimum and maximum prices for each food?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average, minimum and maximum prices for each food?[/QUESTION][SQL]SELECT g.food, AVG(g.price) AS average_price, MIN(g.price) AS min_price, MAX(g.price) AS max_price FROM goods g GROUP BY g.food ORDER BY g.food NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the receipt numbers where both Cake and Cookie were bought.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the receipt numbers where both Cake and Cookie were bought.[/QUESTION][SQL]SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item IN ('Cake', 'Cookie') GROUP BY r.ReceiptNumber HAVING COUNT(DISTINCT i.Item) = 2;
### TaskGenerate a SQL query to answer [QUESTION]What are the receipt numbers for instances where both cakes and cookies were purchased?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the receipt numbers for instances where both cakes and cookies were purchased?[/QUESTION][SQL]SELECT DISTINCT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food IN ('cakes', 'cookies') ORDER BY i.Receipt NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.[/QUESTION][SQL]SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE LOWER(r.CustomerId::TEXT) IN (SELECT c.Id::TEXT FROM customers c WHERE LOWER(c.LastName) = 'logan') AND LOWER(g.Food) = 'croissant';
### TaskGenerate a SQL query to answer [QUESTION]What are the receipt numbers for a customer with the last name Logan who purchased a croissant?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the receipt numbers for a customer with the last name Logan who purchased a croissant?[/QUESTION][SQL]SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE LOWER(r.CustomerId::TEXT) IN (SELECT c.Id FROM customers c WHERE LOWER(c.LastName) = 'logan') AND LOWER(g.Food) = 'croissant';
### TaskGenerate a SQL query to answer [QUESTION]What is the receipt number and date of the receipt in which the most expensive item was bought?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the receipt number and date of the receipt in which the most expensive item was bought?[/QUESTION][SQL]SELECT r.ReceiptNumber, MAX(g.Price) AS max_price FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.ReceiptNumber ORDER BY max_price DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?[/QUESTION][SQL]SELECT r.ReceiptNumber, MAX(g.Price) AS max_price FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.ReceiptNumber ORDER BY max_price DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the item that was bought the least number of times?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the item that was bought the least number of times?[/QUESTION][SQL]SELECT i.item FROM items i GROUP BY i.item ORDER BY COUNT(i.receipt) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which item was bought the fewest times?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which item was bought the fewest times?[/QUESTION][SQL]SELECT i.item, COUNT(i.receipt) AS count FROM items i GROUP BY i.item ORDER BY count ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many goods are available for each food type?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many goods are available for each food type?[/QUESTION][SQL]SELECT g.food, COUNT(g.id) AS number_of_goods FROM goods g GROUP BY g.food ORDER BY number_of_goods DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of goods for each food type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of goods for each food type.[/QUESTION][SQL]SELECT g.food, COUNT(*) AS total_goods FROM goods g GROUP BY g.food ORDER BY total_goods DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the average price for each food type?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average price for each food type?[/QUESTION][SQL]SELECT g.food, AVG(g.price) AS average_price FROM goods g GROUP BY g.food ORDER BY g.food NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Give the average price for each food type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the average price for each food type.[/QUESTION][SQL]SELECT g.food, AVG(g.price) AS average_price FROM goods g GROUP BY g.food ORDER BY g.food NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?[/QUESTION][SQL]SELECT g.id FROM goods g WHERE g.flavor ilike '%apricot%' AND g.price < 5;
### TaskGenerate a SQL query to answer [QUESTION]Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.[/QUESTION][SQL]SELECT g.id FROM goods g WHERE g.flavor ilike '%apricot%' AND g.price < 5;
### TaskGenerate a SQL query to answer [QUESTION]Find flavor of cakes that cost more than 10 dollars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find flavor of cakes that cost more than 10 dollars.[/QUESTION][SQL]SELECT g.Flavor FROM goods g WHERE g.Price > 10 AND g.Food = 'cake';
### TaskGenerate a SQL query to answer [QUESTION]What are the flavors of cakes that cost more than 10 dollars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the flavors of cakes that cost more than 10 dollars?[/QUESTION][SQL]SELECT g.Flavor FROM goods g WHERE g.Price > 10 AND g.Food = 'cake';
### TaskGenerate a SQL query to answer [QUESTION]Give me the distinct id and price for all goods whose price is below the average of all goods?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the distinct id and price for all goods whose price is below the average of all goods?[/QUESTION][SQL]SELECT DISTINCT g.id, g.price FROM goods g WHERE g.price < (SELECT AVG(price) FROM goods);
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct ids and prices for goods that cost less than the average good?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct ids and prices for goods that cost less than the average good?[/QUESTION][SQL]SELECT g.id, g.price FROM goods g WHERE g.price < (SELECT AVG(price) FROM goods);
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct ids of all goods that are cheaper than some goods of type Tart?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct ids of all goods that are cheaper than some goods of type Tart?[/QUESTION][SQL]SELECT DISTINCT g.Id FROM goods g WHERE g.Price < (SELECT MIN(g2.Price) FROM goods g2 WHERE g2.Flavor = 'Tart');
### TaskGenerate a SQL query to answer [QUESTION]Give the distinct ids for goods that cost less than any Tart.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the distinct ids for goods that cost less than any Tart.[/QUESTION][SQL]SELECT DISTINCT g.Id FROM goods g WHERE g.Price < (SELECT MIN(g2.Price) FROM goods g2 WHERE g2.Flavor = 'Tart') ORDER BY g.Id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.[/QUESTION][SQL]SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 13.00;
### TaskGenerate a SQL query to answer [QUESTION]What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?[/QUESTION][SQL]SELECT DISTINCT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Price > 13;
### TaskGenerate a SQL query to answer [QUESTION]On which date did some customer buy a good that costs more than 15 dollars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]On which date did some customer buy a good that costs more than 15 dollars?[/QUESTION][SQL]SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15 ORDER BY r.Date NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which date corresponds to when a customer purchased a good costing over 15 dollars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which date corresponds to when a customer purchased a good costing over 15 dollars?[/QUESTION][SQL]SELECT MAX(r.Date) AS latest_receipt_date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15;
### TaskGenerate a SQL query to answer [QUESTION]Give me the list of ids of all goods whose id has "APP".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the list of ids of all goods whose id has "APP".[/QUESTION][SQL]SELECT g.id FROM goods g WHERE g.id ilike '%app%' ORDER BY g.id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are all the ids of goods with an id which contains "APP"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the ids of goods with an id which contains "APP"?[/QUESTION][SQL]SELECT g.id FROM goods g WHERE g.id ilike '%app%' ORDER BY g.id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which good has "70" in its id? And what is its price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which good has "70" in its id? And what is its price?[/QUESTION][SQL]SELECT g.id, g.price FROM goods g WHERE g.id LIKE '%70%' LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the id and price for the good with "70" in its id?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the id and price for the good with "70" in its id?[/QUESTION][SQL]SELECT g.id, g.price FROM goods g WHERE g.id ilike '%70%'
### TaskGenerate a SQL query to answer [QUESTION]List the last names of all customers in an alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the last names of all customers in an alphabetical order.[/QUESTION][SQL]SELECT c.LastName FROM customers c ORDER BY c.LastName ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the last names of the customers in alphabetical order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the last names of the customers in alphabetical order?[/QUESTION][SQL]SELECT c.LastName FROM customers c ORDER BY c.LastName ASC;
### TaskGenerate a SQL query to answer [QUESTION]Return the ordered list of all good ids.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the ordered list of all good ids.[/QUESTION][SQL]SELECT g.id FROM goods g ORDER BY g.id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Order the distinct good ids.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Order the distinct good ids.[/QUESTION][SQL]SELECT DISTINCT i.item FROM items i ORDER BY i.item NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.[/QUESTION][SQL]SELECT DISTINCT r.ReceiptNumber FROM items i JOIN goods g ON i.Item = g.Id JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE g.Flavor ilike '%apple%' OR r.CustomerId = 12 ORDER BY r.ReceiptNumber NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?[/QUESTION][SQL]SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item = 'apple' OR r.CustomerId = 12;
### TaskGenerate a SQL query to answer [QUESTION]Find all receipts which has the latest date. Also tell me that date.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all receipts which has the latest date. Also tell me that date.[/QUESTION][SQL]SELECT r.ReceiptNumber, MAX(r.Date) AS latest_date FROM receipts r GROUP BY r.ReceiptNumber ORDER BY latest_date DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the receipt number with the latest date, and what is that date?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the receipt number with the latest date, and what is that date?[/QUESTION][SQL]SELECT r.ReceiptNumber, MAX(r.Date) AS LatestDate FROM receipts r GROUP BY r.ReceiptNumber ORDER BY LatestDate DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find all receipts which either has the earliest date or has a good with price above 10.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all receipts which either has the earliest date or has a good with price above 10.[/QUESTION][SQL]SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE (r.Date = (SELECT MIN(r2.Date) FROM receipts r2) OR i.Item IN (SELECT g.Id FROM goods g WHERE g.Price > 10)) ORDER BY r.ReceiptNumber NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are all the receipt numbers that have a good with a price above 10 or have the earliest date?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the receipt numbers that have a good with a price above 10 or have the earliest date?[/QUESTION][SQL]SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item IN (SELECT g.Id FROM goods g WHERE g.Price > 10) OR r.Date = (SELECT MIN(r2.Date) FROM receipts r2);
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of Cookie and Cake that cost between 3 and 7 dollars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of Cookie and Cake that cost between 3 and 7 dollars.[/QUESTION][SQL]SELECT g.id FROM goods g WHERE g.price BETWEEN 3 AND 7 AND g.food IN ('Cookie', 'Cake') ORDER BY g.id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.[/QUESTION][SQL]SELECT g.id FROM goods g WHERE g.price BETWEEN 3 AND 7 AND (g.food = 'Cookies' OR g.food = 'Cakes') ORDER BY g.id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the first name and last name of a customer who visited on the earliest date.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the first name and last name of a customer who visited on the earliest date.[/QUESTION][SQL]SELECT c.FirstName, c.LastName FROM receipts r JOIN customers c ON r.CustomerId = c.Id ORDER BY r.Date ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the full name of the customer who visited on the earliest date?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the full name of the customer who visited on the earliest date?[/QUESTION][SQL]SELECT c.FirstName, c.LastName FROM receipts r JOIN customers c ON r.CustomerId = c.Id ORDER BY r.Date ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is average price of goods whose flavor is blackberry or blueberry?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is average price of goods whose flavor is blackberry or blueberry?[/QUESTION][SQL]SELECT AVG(g.Price) FROM goods g WHERE LOWER(g.Flavor) IN ('blackberry', 'blueberry');
### TaskGenerate a SQL query to answer [QUESTION]What are the average prices of goods with blackberry or blueberry flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average prices of goods with blackberry or blueberry flavor?[/QUESTION][SQL]SELECT AVG(g.Price) AS average_price FROM goods g WHERE g.Flavor ilike '%blackberry%' OR g.Flavor ilike '%blueberry%';
### TaskGenerate a SQL query to answer [QUESTION]Return the cheapest price for goods with cheese flavor.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the cheapest price for goods with cheese flavor.[/QUESTION][SQL]SELECT MIN(g.Price) AS CheapestPrice FROM goods g WHERE LOWER(g.Flavor) = 'cheese';
### TaskGenerate a SQL query to answer [QUESTION]What is the cheapest good with cheese flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the cheapest good with cheese flavor?[/QUESTION][SQL]SELECT g.id, g.price FROM goods g WHERE g.flavor ilike '%cheese%' ORDER BY g.price ASC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are highest, lowest, and average prices of goods, grouped and ordered by flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are highest, lowest, and average prices of goods, grouped and ordered by flavor?[/QUESTION][SQL]SELECT g.Flavor, MAX(g.Price) AS max_price, MIN(g.Price) AS min_price, AVG(g.Price) AS avg_price FROM goods g GROUP BY g.Flavor ORDER BY g.Flavor NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?[/QUESTION][SQL]SELECT g.Flavor, MAX(g.Price) AS max_price, MIN(g.Price) AS min_price, AVG(g.Price) AS avg_price FROM goods g GROUP BY g.Flavor ORDER BY g.Flavor NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the lowest and highest prices of goods grouped and ordered by food type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the lowest and highest prices of goods grouped and ordered by food type.[/QUESTION][SQL]SELECT g.food, MIN(g.price) AS min_price, MAX(g.price) AS max_price FROM goods g GROUP BY g.food ORDER BY g.food NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the minimum and maximum prices of food goods, ordered by food?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the minimum and maximum prices of food goods, ordered by food?[/QUESTION][SQL]SELECT g.food, MIN(g.price) AS min_price, MAX(g.price) AS max_price FROM goods g GROUP BY g.food ORDER BY g.food NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the top three dates with the most receipts.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the top three dates with the most receipts.[/QUESTION][SQL]SELECT r.Date, COUNT(r.ReceiptNumber) AS NumberOfReceipts FROM receipts r GROUP BY r.Date ORDER BY NumberOfReceipts DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]What are the three dates for which the most receipts were given?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the three dates for which the most receipts were given?[/QUESTION][SQL]SELECT r.Date, COUNT(r.ReceiptNumber) AS NumberOfReceipts FROM receipts r GROUP BY r.Date ORDER BY NumberOfReceipts DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]Which customer shopped most often? How many times?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which customer shopped most often? How many times?[/QUESTION][SQL]SELECT c.FirstName, c.LastName, COUNT(r.ReceiptNumber) AS NumberOfReceipts FROM receipts r JOIN customers c ON r.CustomerId = c.Id GROUP BY c.FirstName, c.LastName ORDER BY NumberOfReceipts DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the customer id of the customer that made the most purchases, as well as the number of purchases made.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the customer id of the customer that made the most purchases, as well as the number of purchases made.[/QUESTION][SQL]SELECT r.CustomerId, COUNT(i.Receipt) AS purchase_count FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt GROUP BY r.CustomerId ORDER BY purchase_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]For each date, return how many distinct customers visited on that day.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each date, return how many distinct customers visited on that day.[/QUESTION][SQL]SELECT r.date, COUNT(DISTINCT r.customerid) AS unique_customers FROM receipts r GROUP BY r.date ORDER BY r.date NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many cusomters visited on each date?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many cusomters visited on each date?[/QUESTION][SQL]SELECT r.date, COUNT(DISTINCT r.customerid) AS number_of_customers FROM receipts r GROUP BY r.date ORDER BY r.date NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Give me the first name and last name of customers who have bought apple flavor Tart.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the first name and last name of customers who have bought apple flavor Tart.[/QUESTION][SQL]SELECT c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item = 'Tart' AND i.Flavor = 'Apple';
### TaskGenerate a SQL query to answer [QUESTION]What are the full names of customers who bought apple flavored Tarts?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the full names of customers who bought apple flavored Tarts?[/QUESTION][SQL]SELECT c.FirstName, c.LastName FROM receipts r JOIN customers c ON r.CustomerId = c.Id JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item = 'Tart' AND i.Flavor = 'Apple';
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of Cookies whose price is lower than any Croissant?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of Cookies whose price is lower than any Croissant?[/QUESTION][SQL]SELECT g.id FROM goods g WHERE g.food = 'Cookie' AND g.price < (SELECT MIN(g2.price) FROM goods g2 WHERE g2.food = 'Croissant');
### TaskGenerate a SQL query to answer [QUESTION]Give the ids of cookes that are cheaper than any croissant.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the ids of cookes that are cheaper than any croissant.[/QUESTION][SQL]SELECT g.id FROM goods g WHERE g.food = 'cookie' AND g.price < (SELECT MIN(g2.price) FROM goods g2 WHERE g2.food = 'croissant');
### TaskGenerate a SQL query to answer [QUESTION]Give me the ids of Cakes whose price is at least as much as the average price of Tart?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give me the ids of Cakes whose price is at least as much as the average price of Tart?[/QUESTION][SQL]SELECT g.id FROM goods g WHERE g.food = 'Cake' AND g.price >= (SELECT AVG(g2.price) FROM goods g2 WHERE g2.food = 'Tart');
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of cakes that are at least as expensive as the average Tart?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of cakes that are at least as expensive as the average Tart?[/QUESTION][SQL]SELECT g.id FROM goods g WHERE g.food = 'Tart' AND g.price >= (SELECT AVG(g2.price) FROM goods g2 WHERE g2.food = 'Cake');
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of goods whose price is above twice the average price of all goods?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of goods whose price is above twice the average price of all goods?[/QUESTION][SQL]SELECT g.id FROM goods g WHERE g.price > 2 * (SELECT AVG(price) FROM goods);
### TaskGenerate a SQL query to answer [QUESTION]Give the ids of goods that are more than twice as expensive as the average good.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the ids of goods that are more than twice as expensive as the average good.[/QUESTION][SQL]SELECT g.id FROM goods g WHERE g.price > 2 * (SELECT AVG(price) FROM goods);
### TaskGenerate a SQL query to answer [QUESTION]List the id, flavor and type of food of goods ordered by price.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the id, flavor and type of food of goods ordered by price.[/QUESTION][SQL]SELECT g.id, g.flavor, g.food, g.price FROM goods g ORDER BY g.price DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids, flavors, and food types of goods, ordered by price?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids, flavors, and food types of goods, ordered by price?[/QUESTION][SQL]SELECT g.id, g.flavor, g.food, g.price FROM goods g ORDER BY g.price NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return a list of the id and flavor for Cakes ordered by flavor.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return a list of the id and flavor for Cakes ordered by flavor.[/QUESTION][SQL]SELECT g.id, g.flavor FROM goods g WHERE g.food = 'Cake' ORDER BY g.flavor NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and flavors of cakes, ordered by flavor?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and flavors of cakes, ordered by flavor?[/QUESTION][SQL]SELECT g.id, g.flavor FROM goods g WHERE g.food = 'cake' ORDER BY g.flavor NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find all the items that have chocolate flavor but were not bought more than 10 times.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all the items that have chocolate flavor but were not bought more than 10 times.[/QUESTION][SQL]SELECT i.item FROM items i JOIN goods g ON i.item = g.id WHERE g.flavor ilike '%chocolate%' GROUP BY i.item HAVING COUNT(i.receipt) <= 10 ORDER BY i.item NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the items with chocolate flavor that were purchased at most 10 times.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the items with chocolate flavor that were purchased at most 10 times.[/QUESTION][SQL]SELECT i.item FROM items i JOIN goods g ON i.item = g.id WHERE g.flavor ilike '%chocolate%' GROUP BY i.item ORDER BY COUNT(i.receipt) ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the flavors available for Cake but not for Tart?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the flavors available for Cake but not for Tart?[/QUESTION][SQL]SELECT g.Flavor FROM goods g WHERE g.Food = 'Cake' AND NOT EXISTS (SELECT 1 FROM goods g2 WHERE g2.Food = 'Tart' AND g2.Flavor = g.Flavor);
### TaskGenerate a SQL query to answer [QUESTION]Give the flavors of Cakes that are not available for Tart.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the flavors of Cakes that are not available for Tart.[/QUESTION][SQL]SELECT g.Flavor FROM goods g WHERE g.Food = 'Cake' AND g.Id NOT IN (SELECT i.Item FROM items i JOIN goods gi ON i.Item = gi.Id WHERE gi.Food = 'Tart');
### TaskGenerate a SQL query to answer [QUESTION]What is the three most popular goods in this bakery?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the three most popular goods in this bakery?[/QUESTION][SQL]SELECT g.id, COUNT(i.item) AS item_count FROM items i JOIN goods g ON i.item = g.id GROUP BY g.id ORDER BY item_count DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]Give the three most purchased items at this bakery.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the three most purchased items at this bakery.[/QUESTION][SQL]SELECT i.item, COUNT(i.receipt) AS total_sales FROM items i GROUP BY i.item ORDER BY total_sales DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]Find the ids of customers who have spent more than 150 dollars in total.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the ids of customers who have spent more than 150 dollars in total.[/QUESTION][SQL]SELECT c.Id FROM receipts r JOIN customers c ON r.CustomerId = c.Id GROUP BY c.Id HAVING SUM(r.ReceiptNumber * i.Ordinal * g.Price) > 150
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of customers who have spent over 150 dollars in total?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of customers who have spent over 150 dollars in total?[/QUESTION][SQL]SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt GROUP BY r.CustomerId HAVING SUM(i.Ordinal * g.Price) > 150;
### TaskGenerate a SQL query to answer [QUESTION]Find the ids of customers whose average spending for each good is above 5.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the ids of customers whose average spending for each good is above 5.[/QUESTION][SQL]SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt GROUP BY c.Id HAVING AVG(i.Ordinal * g.Price) > 5
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of customers who spend more than 5 on average for each good?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of customers who spend more than 5 on average for each good?[/QUESTION][SQL]SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId WHERE c.Id IN (SELECT i.Receipt FROM items i GROUP BY i.Receipt HAVING AVG(i.Ordinal) > 5);
### TaskGenerate a SQL query to answer [QUESTION]On which day did the bakery sell more than 100 dollars in total.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]On which day did the bakery sell more than 100 dollars in total.[/QUESTION][SQL]SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt GROUP BY r.Date HAVING SUM(i.Ordinal * g.Price) > 100;
### TaskGenerate a SQL query to answer [QUESTION]On what dates did the bakery sell more than 100 dollars worth of goods in total?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]On what dates did the bakery sell more than 100 dollars worth of goods in total?[/QUESTION][SQL]SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt GROUP BY r.Date HAVING SUM(i.Ordinal * g.Price) > 100;
### TaskGenerate a SQL query to answer [QUESTION]How many drivers are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many drivers are there?[/QUESTION][SQL]SELECT COUNT(*) FROM driver;
### TaskGenerate a SQL query to answer [QUESTION]Find the total number of drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total number of drivers.[/QUESTION][SQL]SELECT COUNT(*) FROM driver;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of drivers whose points are greater than 150 for each make.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of drivers whose points are greater than 150 for each make.[/QUESTION][SQL]SELECT d.make, COUNT(d.driver_id) AS num_drivers FROM driver d WHERE CAST(d.points AS INTEGER) > 150 GROUP BY d.make ORDER BY num_drivers DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many drivers receive points greater than 150 for each make? Show the make and the count.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many drivers receive points greater than 150 for each make? Show the make and the count.[/QUESTION][SQL]SELECT d.make, COUNT(d.driver_id) AS number_of_drivers FROM driver d WHERE CAST(d.points AS integer) > 150 GROUP BY d.make ORDER BY number_of_drivers DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the average age of drivers for each make.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average age of drivers for each make.[/QUESTION][SQL]SELECT d.make, AVG(d.age) AS average_age FROM driver d GROUP BY d.make ORDER BY d.make NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the average age of drivers for each make? Return the average age and make.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average age of drivers for each make? Return the average age and make.[/QUESTION][SQL]SELECT d.make, AVG(d.age) AS average_age FROM driver d GROUP BY d.make ORDER BY d.make;
### TaskGenerate a SQL query to answer [QUESTION]What are the average laps of all the drivers who are younger than 20?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average laps of all the drivers who are younger than 20?[/QUESTION][SQL]SELECT AVG(d.Laps) AS average_laps FROM driver d WHERE d.Age < 20;
### TaskGenerate a SQL query to answer [QUESTION]Compute the average laps of drivers under the age of 20.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Compute the average laps of drivers under the age of 20.[/QUESTION][SQL]SELECT AVG(d.Laps) AS Average_Laps FROM driver d WHERE d.Age < 20;
### TaskGenerate a SQL query to answer [QUESTION]What are the managers and sponsors of teams? Sort the results by Car Owners.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the managers and sponsors of teams? Sort the results by Car Owners.[/QUESTION][SQL]SELECT t.Manager, t.Sponsor, t.Car_Owner FROM team t ORDER BY t.Car_Owner NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the manager and sponsor for each team and order them by the car owner.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the manager and sponsor for each team and order them by the car owner.[/QUESTION][SQL]SELECT t.team, t.manager, t.sponsor, t.car_owner FROM team t ORDER BY t.car_owner NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the make that has more than one team.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the make that has more than one team.[/QUESTION][SQL]SELECT t.make FROM team t GROUP BY t.make HAVING COUNT(t.team_id) > 1 ORDER BY t.make NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which make has more than one team?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which make has more than one team?[/QUESTION][SQL]SELECT t.make FROM team t GROUP BY t.make HAVING COUNT(t.team_id) > 1 ORDER BY t.make NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the makes of the teams with car owner "Buddy Arrington"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the makes of the teams with car owner "Buddy Arrington"?[/QUESTION][SQL]SELECT t.make FROM team t WHERE LOWER(t.car_owner) = 'buddy arrington' ORDER BY t.team_id NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the make of the team whose car owner is "Buddy Arrington".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the make of the team whose car owner is "Buddy Arrington".[/QUESTION][SQL]SELECT t.make FROM team t WHERE LOWER(t.car_owner) = 'buddy arrington';
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum points of drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum points of drivers.[/QUESTION][SQL]SELECT MAX(CAST(d.Points AS integer)) AS max_points, MIN(CAST(d.Points AS integer)) AS min_points FROM driver d;
### TaskGenerate a SQL query to answer [QUESTION]Find the highest and lowest points of drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the highest and lowest points of drivers.[/QUESTION][SQL]SELECT MAX(d.points) AS max_points, MIN(d.points) AS min_points FROM driver d;
### TaskGenerate a SQL query to answer [QUESTION]How many drivers have points smaller than 150?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many drivers have points smaller than 150?[/QUESTION][SQL]SELECT COUNT(*) FROM driver d WHERE CAST(d.points AS integer) < 150;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of drivers whose points are below 150.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of drivers whose points are below 150.[/QUESTION][SQL]SELECT COUNT(*) FROM driver d WHERE CAST(d.points AS INT) < 150;
### TaskGenerate a SQL query to answer [QUESTION]List all the driver names in ascending order of age.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all the driver names in ascending order of age.[/QUESTION][SQL]SELECT d.driver, d.age FROM driver d ORDER BY d.age ASC;
### TaskGenerate a SQL query to answer [QUESTION]Sort the driver names by age in ascending order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Sort the driver names by age in ascending order.[/QUESTION][SQL]SELECT d.driver, d.age FROM driver d ORDER BY d.age ASC;
### TaskGenerate a SQL query to answer [QUESTION]List all the driver names in descending order of points.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all the driver names in descending order of points.[/QUESTION][SQL]SELECT d.driver, CAST(d.points AS integer) AS points FROM driver d ORDER BY points DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the list of drivers ordered by points in descending order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the list of drivers ordered by points in descending order?[/QUESTION][SQL]SELECT d.Driver, CAST(d.Points AS integer) AS Points FROM driver d ORDER BY Points DESC;
### TaskGenerate a SQL query to answer [QUESTION]Please show the names of drivers, and countries they are from.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the names of drivers, and countries they are from.[/QUESTION][SQL]SELECT d.driver, c.country FROM driver d JOIN country c ON d.country = c.country_id ORDER BY d.driver NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For each driver, return his or her name and country.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each driver, return his or her name and country.[/QUESTION][SQL]SELECT d.driver, c.country FROM driver d JOIN country c ON d.country = c.country_id
### TaskGenerate a SQL query to answer [QUESTION]Show the maximum points of the drivers from countries with capital "Dublin"[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the maximum points of the drivers from countries with capital "Dublin"[/QUESTION][SQL]SELECT MAX(d.points) AS max_points FROM driver d JOIN country c ON d.country = c.country_id WHERE LOWER(c.capital) = 'dublin';
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum points of the drivers from a country whose capital is "Dublin"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum points of the drivers from a country whose capital is "Dublin"?[/QUESTION][SQL]SELECT MAX(d.Points) AS max_points FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE LOWER(c.Capital) = 'dublin';
### TaskGenerate a SQL query to answer [QUESTION]What is the average age of drivers from countries with official native language "English"[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average age of drivers from countries with official native language "English"[/QUESTION][SQL]SELECT AVG(d.Age) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE LOWER(c.Official_Native_Language) = 'english';
### TaskGenerate a SQL query to answer [QUESTION]Find the average age of the drivers from the countries that use "English" as official native language.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average age of the drivers from the countries that use "English" as official native language.[/QUESTION][SQL]SELECT AVG(d.Age) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE LOWER(c.Official_native_language) = 'english';
### TaskGenerate a SQL query to answer [QUESTION]What are the countries that have drivers with points larger than 150?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the countries that have drivers with points larger than 150?[/QUESTION][SQL]SELECT d.country FROM driver d WHERE CAST(d.points AS INTEGER) > 150 GROUP BY d.country;
### TaskGenerate a SQL query to answer [QUESTION]Find all the countries where some drivers have points above 150.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all the countries where some drivers have points above 150.[/QUESTION][SQL]SELECT d.country FROM driver d WHERE CAST(d.points AS INT) > 150 GROUP BY d.country;
### TaskGenerate a SQL query to answer [QUESTION]What is the capital of the country where the driver with the most points is from?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the capital of the country where the driver with the most points is from?[/QUESTION][SQL]SELECT c.capital FROM driver d JOIN country c ON d.country = c.country_id ORDER BY d.points DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which country is the driver with the highest points from? Give me the capital of the country.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which country is the driver with the highest points from? Give me the capital of the country.[/QUESTION][SQL]SELECT c.capital FROM driver d JOIN country c ON d.country = c.country_id ORDER BY d.points DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List each make with the number of drivers with that make.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List each make with the number of drivers with that make.[/QUESTION][SQL]SELECT d.make, COUNT(d.driver_id) AS num_drivers FROM driver d GROUP BY d.make ORDER BY num_drivers DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For each make, return the make and the count of drivers with that make.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each make, return the make and the count of drivers with that make.[/QUESTION][SQL]SELECT d.make, COUNT(d.driver_id) AS number_of_drivers FROM driver d GROUP BY d.make ORDER BY number_of_drivers DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the make that are associated with most drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the make that are associated with most drivers.[/QUESTION][SQL]SELECT d.make, COUNT(d.driver_id) AS number_of_drivers FROM driver d GROUP BY d.make ORDER BY number_of_drivers DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which make does the most drivers have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which make does the most drivers have?[/QUESTION][SQL]SELECT d.make, COUNT(d.driver_id) AS number_of_drivers FROM driver d GROUP BY d.make ORDER BY number_of_drivers DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the driver makes that are associated with at least three drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the driver makes that are associated with at least three drivers.[/QUESTION][SQL]SELECT d.make FROM driver d GROUP BY d.make HAVING COUNT(d.driver_id) >= 3 ORDER BY d.make NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which make is associated with 3 or more drivers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which make is associated with 3 or more drivers?[/QUESTION][SQL]SELECT d.make FROM driver d GROUP BY d.make HAVING COUNT(d.driver_id) >= 3 ORDER BY d.make NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the names of teams that do not have any drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of teams that do not have any drivers.[/QUESTION][SQL]SELECT t.Team FROM team t WHERE NOT EXISTS (SELECT 1 FROM team_driver td WHERE td.Team_ID = t.Team_ID)
### TaskGenerate a SQL query to answer [QUESTION]Which team does not have drivers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which team does not have drivers?[/QUESTION][SQL]SELECT t.Team FROM team t WHERE NOT EXISTS (SELECT 1 FROM team_driver td WHERE td.Team_ID = t.Team_ID)
### TaskGenerate a SQL query to answer [QUESTION]Which country has both drivers with make "Dodge" and drivers with make "Chevrolet"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which country has both drivers with make "Dodge" and drivers with make "Chevrolet"?[/QUESTION][SQL]SELECT d.country FROM driver d WHERE d.make IN ('Dodge', 'Chevrolet') GROUP BY d.country HAVING COUNT(DISTINCT CASE WHEN d.make = 'Dodge' THEN d.driver_id END) > 0 AND COUNT(DISTINCT CASE WHEN d.make = 'Chevrolet' THEN d.driver_id END) > 0;
### TaskGenerate a SQL query to answer [QUESTION]Find the countries in which there are both drivers with make "Dodge" and drivers with make "Chevrolet".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the countries in which there are both drivers with make "Dodge" and drivers with make "Chevrolet".[/QUESTION][SQL]SELECT DISTINCT d.country FROM driver d WHERE d.make IN ('Dodge', 'Chevrolet') ORDER BY d.country NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show total and average points of all drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show total and average points of all drivers.[/QUESTION][SQL]SELECT SUM(CAST(d.Points AS integer)) AS total_points, AVG(CAST(d.Points AS integer)) AS average_points FROM driver d;
### TaskGenerate a SQL query to answer [QUESTION]What are the total and average points of drivers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the total and average points of drivers?[/QUESTION][SQL]SELECT SUM(CAST(d.Points AS integer)) AS total_points, AVG(CAST(d.Points AS integer)) AS average_points FROM driver d;
### TaskGenerate a SQL query to answer [QUESTION]Find the countries where no driver come from.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the countries where no driver come from.[/QUESTION][SQL]SELECT c.country FROM country c WHERE NOT EXISTS (SELECT 1 FROM driver d WHERE d.country = c.country) ORDER BY c.country NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which countries do not have any drivers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which countries do not have any drivers?[/QUESTION][SQL]SELECT c.Country FROM country c WHERE NOT EXISTS (SELECT 1 FROM driver d WHERE d.Country = c.Country) ORDER BY c.Country NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the manager and sponsor of the team that has the most drivers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the manager and sponsor of the team that has the most drivers?[/QUESTION][SQL]SELECT t.Manager, t.Sponsor FROM (SELECT td.Team_ID, COUNT(*) AS num_drivers FROM team_driver td GROUP BY td.Team_ID ORDER BY num_drivers DESC LIMIT 1) AS m JOIN team t ON m.Team_ID = t.Team_ID;
### TaskGenerate a SQL query to answer [QUESTION]Find the manager and sponsor of the team that has the most drivers.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the manager and sponsor of the team that has the most drivers.[/QUESTION][SQL]SELECT t.Manager, t.Sponsor FROM (SELECT td.Team_ID, COUNT(*) AS num_drivers FROM team_driver td GROUP BY td.Team_ID ORDER BY num_drivers DESC LIMIT 1) AS m JOIN team t ON m.Team_ID = t.Team_ID;
### TaskGenerate a SQL query to answer [QUESTION]What are the manager and car owner of the team that has at least 2 drivers?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the manager and car owner of the team that has at least 2 drivers?[/QUESTION][SQL]SELECT t.Manager, t.Car_Owner FROM team t WHERE (SELECT COUNT(*) FROM team_driver td WHERE td.Team_ID = t.Team_ID) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]Find the team with two or more drivers and return the the manager and car owner of the team.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the team with two or more drivers and return the the manager and car owner of the team.[/QUESTION][SQL]SELECT t.Manager, t.Car_Owner FROM team t JOIN (SELECT td.Team_ID FROM team_driver td GROUP BY td.Team_ID HAVING COUNT(DISTINCT td.Driver_ID) >= 2) AS d ON t.Team_ID = d.Team_ID ORDER BY t.Team_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many institutions are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many institutions are there?[/QUESTION][SQL]SELECT COUNT(*) FROM institution;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of institutions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of institutions.[/QUESTION][SQL]SELECT COUNT(*) FROM institution;
### TaskGenerate a SQL query to answer [QUESTION]List the names of institutions in ascending alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of institutions in ascending alphabetical order.[/QUESTION][SQL]SELECT i.name FROM institution i ORDER BY i.name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of institutions, ordered alphabetically?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of institutions, ordered alphabetically?[/QUESTION][SQL]SELECT i.name FROM institution i ORDER BY i.name ASC;
### TaskGenerate a SQL query to answer [QUESTION]List the names of institutions in ascending order of founded year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of institutions in ascending order of founded year.[/QUESTION][SQL]SELECT i.name FROM institution i ORDER BY i.founded ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of institutions, ordered by the years in which they were founded?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of institutions, ordered by the years in which they were founded?[/QUESTION][SQL]SELECT i.name, to_char(i.founded, 'YYYY') AS founded_year FROM institution i ORDER BY i.founded NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the cities and provinces of institutions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the cities and provinces of institutions?[/QUESTION][SQL]SELECT i.city, i.province FROM institution i ORDER BY i.city NULLS LAST, i.province NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the cities and provinces of institutions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the cities and provinces of institutions.[/QUESTION][SQL]SELECT i.city, i.province FROM institution i ORDER BY i.city NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum enrollment of all institutions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum enrollment of all institutions?[/QUESTION][SQL]SELECT MAX(i.Enrollment) AS max_enrollment, MIN(i.Enrollment) AS min_enrollment FROM institution i;
### TaskGenerate a SQL query to answer [QUESTION]Return the maximum and minimum enrollment across all institutions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the maximum and minimum enrollment across all institutions.[/QUESTION][SQL]SELECT MAX(i.Enrollment) AS max_enrollment, MIN(i.Enrollment) AS min_enrollment FROM institution i;
### TaskGenerate a SQL query to answer [QUESTION]What are the affiliations of institutions that are not in city "Vancouver"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the affiliations of institutions that are not in city "Vancouver"?[/QUESTION][SQL]SELECT DISTINCT i.Affiliation FROM institution i WHERE LOWER(i.City)!= 'vancouver' ORDER BY i.Affiliation NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the affiliations of instituions that are not in the city of Vancouver.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the affiliations of instituions that are not in the city of Vancouver.[/QUESTION][SQL]SELECT i.Affiliation FROM institution i WHERE LOWER(i.City)!= 'vancouver' ORDER BY i.Institution_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the stadiums of institutions in descending order of the capacity.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the stadiums of institutions in descending order of the capacity.[/QUESTION][SQL]SELECT i.stadium, i.capacity FROM institution i ORDER BY i.capacity DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the stadiums of institutions, ordered by capacity descending.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the stadiums of institutions, ordered by capacity descending.[/QUESTION][SQL]SELECT i.Stadium, i.Capacity FROM institution i ORDER BY i.Capacity DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the stadium of the institution with the largest enrollment?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the stadium of the institution with the largest enrollment?[/QUESTION][SQL]SELECT i.Stadium FROM institution i ORDER BY i.Enrollment DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Give the stadium of the institution which is the greatest enrollment.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the stadium of the institution which is the greatest enrollment.[/QUESTION][SQL]SELECT i.Stadium FROM institution i ORDER BY i.Enrollment DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and nicknames of institutions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and nicknames of institutions?[/QUESTION][SQL]SELECT i.name AS institution_name, c.nickname AS nickname FROM institution i JOIN championship c ON i.institution_id = c.institution_id;
### TaskGenerate a SQL query to answer [QUESTION]Return the names of institutions, as well as their nicknames.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names of institutions, as well as their nicknames.[/QUESTION][SQL]SELECT i.Name, c.Nickname FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID;
### TaskGenerate a SQL query to answer [QUESTION]What is the nickname of the institution with the smallest enrollment?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the nickname of the institution with the smallest enrollment?[/QUESTION][SQL]SELECT c.Nickname FROM Championship c JOIN Institution i ON c.Institution_ID = i.Institution_ID WHERE i.Enrollment = (SELECT MIN(Enrollment) FROM Institution);
### TaskGenerate a SQL query to answer [QUESTION]Return the nickname of the institution with the lowest enrollment.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the nickname of the institution with the lowest enrollment.[/QUESTION][SQL]SELECT c.Nickname FROM Championship c JOIN Institution i ON c.Institution_ID = i.Institution_ID WHERE i.Enrollment = (SELECT MIN(i2.Enrollment) FROM Institution i2);
### TaskGenerate a SQL query to answer [QUESTION]List the names of institutions in descending order of the number of championships.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of institutions in descending order of the number of championships.[/QUESTION][SQL]SELECT i.Name, c.Number_of_Championships FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID ORDER BY c.Number_of_Championships DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of institutions, ordered descending by their number of championships?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of institutions, ordered descending by their number of championships?[/QUESTION][SQL]SELECT i.Name, c.Number_of_Championships FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID ORDER BY c.Number_of_Championships DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the names of institutions with at least one championship.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of institutions with at least one championship.[/QUESTION][SQL]SELECT i.Name FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID WHERE c.Number_of_Championships > 0 ORDER BY i.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of institutions that have 1 or more championships?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of institutions that have 1 or more championships?[/QUESTION][SQL]SELECT i.Name FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID WHERE c.Number_of_Championships >= 1 ORDER BY i.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the total number of championship of institution with public affiliation?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total number of championship of institution with public affiliation?[/QUESTION][SQL]SELECT SUM(c.Number_of_Championships) AS Total_Public_Championships FROM Championship c JOIN Institution i ON c.Institution_ID = i.Institution_ID WHERE LOWER(i.Affiliation) LIKE '%public%'
### TaskGenerate a SQL query to answer [QUESTION]Return the total number of championships of institutions that have a Public affiliation.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the total number of championships of institutions that have a Public affiliation.[/QUESTION][SQL]SELECT SUM(c.Number_of_Championships) AS Total_Public_Championships FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID WHERE LOWER(i.Affiliation) LIKE '%public%'
### TaskGenerate a SQL query to answer [QUESTION]What are different types of affiliations of institutions and the corresponding number of institutions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are different types of affiliations of institutions and the corresponding number of institutions?[/QUESTION][SQL]SELECT i.Affiliation, COUNT(i.Institution_ID) AS Number_of_Institutions FROM institution i GROUP BY i.Affiliation ORDER BY Number_of_Institutions DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many institutions are there for each type of affiliation?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many institutions are there for each type of affiliation?[/QUESTION][SQL]SELECT i.affiliation, COUNT(i.institution_id) AS number_of_institutions FROM institution i GROUP BY i.affiliation ORDER BY number_of_institutions DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the most common type of affiliation for institutions?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the most common type of affiliation for institutions?[/QUESTION][SQL]SELECT i.Affiliation, COUNT(i.Institution_ID) AS Count FROM institution i GROUP BY i.Affiliation ORDER BY Count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the most common type of affiliation across all institutions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the most common type of affiliation across all institutions.[/QUESTION][SQL]SELECT i.Affiliation FROM institution i GROUP BY i.Affiliation ORDER BY COUNT(i.Institution_ID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]In which years were more than one institution founded?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In which years were more than one institution founded?[/QUESTION][SQL]SELECT DISTINCT i.Founded FROM institution i GROUP BY i.Founded HAVING COUNT(i.Institution_ID) > 1 ORDER BY i.Founded NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.[/QUESTION][SQL]SELECT i.founded AS year_founded, COUNT(i.institution_id) AS num_institutions FROM institution i GROUP BY i.founded HAVING COUNT(i.institution_id) > 1 ORDER BY i.founded NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the nicknames of institutions in descending order of capacity.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the nicknames of institutions in descending order of capacity.[/QUESTION][SQL]SELECT c.Nickname, i.Capacity FROM Championship c JOIN Institution i ON c.Institution_ID = i.Institution_ID ORDER BY i.Capacity DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the nicknames of institutions, ordered descending by their capacities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the nicknames of institutions, ordered descending by their capacities?[/QUESTION][SQL]SELECT c.Nickname, i.Capacity FROM Championship c JOIN Institution i ON c.Institution_ID = i.Institution_ID ORDER BY i.Capacity DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary ''?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary ''?[/QUESTION][SQL]SELECT SUM(i.Enrollment) AS Total_Enrollment FROM institution i WHERE LOWER(i.City) IN ('vancouver', 'calgary');
### TaskGenerate a SQL query to answer [QUESTION]Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary.[/QUESTION][SQL]SELECT i.Name, i.Enrollment FROM institution i WHERE LOWER(i.City) = 'vancouver' OR LOWER(i.City) = 'calgary';
### TaskGenerate a SQL query to answer [QUESTION]Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.[/QUESTION][SQL]SELECT DISTINCT i.Province FROM institution i WHERE i.Founded < 1920 AND i.Founded > 1950 ORDER BY i.Province NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?[/QUESTION][SQL]SELECT DISTINCT i.Province FROM institution i WHERE i.Founded < 1920 AND i.Founded > 1950 ORDER BY i.Province NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many distinct provinces are the institutions in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many distinct provinces are the institutions in?[/QUESTION][SQL]SELECT COUNT(DISTINCT i.Province) FROM institution i;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of different provinces that have institutions.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of different provinces that have institutions.[/QUESTION][SQL]SELECT COUNT(DISTINCT i.Province) FROM institution i;
### TaskGenerate a SQL query to answer [QUESTION]Select all details of all warehouses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select all details of all warehouses.[/QUESTION][SQL]SELECT w.Code AS warehouse_code, w.Location AS location, w.Capacity AS capacity FROM Warehouses w ORDER BY w.Code;
### TaskGenerate a SQL query to answer [QUESTION]What is all the information about the warehouses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is all the information about the warehouses?[/QUESTION][SQL]SELECT * FROM Warehouses;
### TaskGenerate a SQL query to answer [QUESTION]Find all different contents stored in New York.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all different contents stored in New York.[/QUESTION][SQL]SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) = 'new york' ORDER BY b.Contents;
### TaskGenerate a SQL query to answer [QUESTION]What are all the different contents stored in boxes in New York?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the different contents stored in boxes in New York?[/QUESTION][SQL]SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) = 'new york' ORDER BY b.Contents;
### TaskGenerate a SQL query to answer [QUESTION]Select contents of all boxes with a value larger than $150.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select contents of all boxes with a value larger than $150.[/QUESTION][SQL]SELECT b.contents FROM Boxes b WHERE b.value > 150;
### TaskGenerate a SQL query to answer [QUESTION]What are the contents of boxes with value greater than 150?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the contents of boxes with value greater than 150?[/QUESTION][SQL]SELECT b.contents FROM Boxes b WHERE b.value > 150;
### TaskGenerate a SQL query to answer [QUESTION]Select the warehouse code and the average value of the boxes in each warehouse.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the warehouse code and the average value of the boxes in each warehouse.[/QUESTION][SQL]SELECT w.Code AS warehouse_code, AVG(b.Value) AS average_box_value FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code ORDER BY w.Code;
### TaskGenerate a SQL query to answer [QUESTION]What is the average value of boxes for each warehouse?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average value of boxes for each warehouse?[/QUESTION][SQL]SELECT w.Code AS warehouse_code, AVG(b.Value) AS average_box_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code GROUP BY w.Code ORDER BY w.Code;
### TaskGenerate a SQL query to answer [QUESTION]Find the average and total values of all boxes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average and total values of all boxes.[/QUESTION][SQL]SELECT AVG(b.Value) AS average_value, SUM(b.Value) AS total_value FROM Boxes b;
### TaskGenerate a SQL query to answer [QUESTION]What are the average and total values across all boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average and total values across all boxes?[/QUESTION][SQL]SELECT AVG(b.Value) AS average_value, SUM(b.Value) AS total_value FROM Boxes b;
### TaskGenerate a SQL query to answer [QUESTION]Find the average and total capacity of all warehouses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average and total capacity of all warehouses.[/QUESTION][SQL]SELECT AVG(w.Capacity) AS average_capacity, SUM(w.Capacity) AS total_capacity FROM Warehouses w;
### TaskGenerate a SQL query to answer [QUESTION]What are the average and total capacities across all warehouses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average and total capacities across all warehouses?[/QUESTION][SQL]SELECT AVG(w.Capacity) AS average_capacity, SUM(w.Capacity) AS total_capacity FROM Warehouses w;
### TaskGenerate a SQL query to answer [QUESTION]Find the average and maximum value for each different content.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average and maximum value for each different content.[/QUESTION][SQL]SELECT b.contents, AVG(b.value) AS average_value, MAX(b.value) AS max_value FROM Boxes b GROUP BY b.contents ORDER BY b.contents;
### TaskGenerate a SQL query to answer [QUESTION]What are the average and maximum values for each type of content in boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average and maximum values for each type of content in boxes?[/QUESTION][SQL]SELECT b.contents, AVG(b.value) AS average_value, MAX(b.value) AS max_value FROM Boxes b GROUP BY b.contents ORDER BY b.contents;
### TaskGenerate a SQL query to answer [QUESTION]Find the content that has the highest total values in all boxes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the content that has the highest total values in all boxes.[/QUESTION][SQL]SELECT b.Contents, SUM(b.Value) AS TotalValue FROM Boxes b GROUP BY b.Contents ORDER BY TotalValue DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the content with the greatest value across all boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the content with the greatest value across all boxes?[/QUESTION][SQL]SELECT b.Contents FROM Boxes b ORDER BY b.Value DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Select the average value of all the boxes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the average value of all the boxes.[/QUESTION][SQL]SELECT AVG(b.Value) AS Average_Box_Value FROM Boxes b;
### TaskGenerate a SQL query to answer [QUESTION]What is the average value of boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average value of boxes?[/QUESTION][SQL]SELECT AVG(b.Value) AS Average_Box_Value FROM Boxes b;
### TaskGenerate a SQL query to answer [QUESTION]Select all distinct contents in all the boxes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select all distinct contents in all the boxes.[/QUESTION][SQL]SELECT DISTINCT b.Contents FROM Boxes b ORDER BY b.Contents;
### TaskGenerate a SQL query to answer [QUESTION]What are the different contents in boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different contents in boxes?[/QUESTION][SQL]SELECT DISTINCT b.Contents FROM Boxes b ORDER BY b.Contents;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of all distinct contents in all the boxes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of all distinct contents in all the boxes.[/QUESTION][SQL]SELECT COUNT(DISTINCT b.Contents) FROM Boxes b;
### TaskGenerate a SQL query to answer [QUESTION]How many different contents are stored in boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different contents are stored in boxes?[/QUESTION][SQL]SELECT COUNT(DISTINCT b.Contents) FROM Boxes b;
### TaskGenerate a SQL query to answer [QUESTION]Find all distinct locations of warehouses.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all distinct locations of warehouses.[/QUESTION][SQL]SELECT DISTINCT w.Location FROM Warehouses w ORDER BY w.Location;
### TaskGenerate a SQL query to answer [QUESTION]What are the different locations of warehouses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different locations of warehouses?[/QUESTION][SQL]SELECT DISTINCT w.Location FROM Warehouses w ORDER BY w.Location;
### TaskGenerate a SQL query to answer [QUESTION]Find the code of boxes that are stored at the warehouses located at Chicago or New York.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the code of boxes that are stored at the warehouses located at Chicago or New York.[/QUESTION][SQL]SELECT b.Code FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) IN ('chicago', 'new york') ORDER BY b.Code;
### TaskGenerate a SQL query to answer [QUESTION]What are the codes of boxes stored in warehouses in either Chicago or New York?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the codes of boxes stored in warehouses in either Chicago or New York?[/QUESTION][SQL]SELECT b.Code FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) IN ('chicago', 'new york') ORDER BY b.Code;
### TaskGenerate a SQL query to answer [QUESTION]Find the total value of boxes in the warehouses located at Chicago or New York.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total value of boxes in the warehouses located at Chicago or New York.[/QUESTION][SQL]SELECT SUM(b.Value) AS TotalValue FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) IN ('chicago', 'new york');
### TaskGenerate a SQL query to answer [QUESTION]What is the total value of boxes located in Chicago or New York?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total value of boxes located in Chicago or New York?[/QUESTION][SQL]SELECT SUM(b.Value) AS TotalValue FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) IN ('chicago', 'new york');
### TaskGenerate a SQL query to answer [QUESTION]Find all contents present in warehouses located in Chicago and those located in New York.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find all contents present in warehouses located in Chicago and those located in New York.[/QUESTION][SQL]SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) IN ('chicago', 'new york') ORDER BY b.Contents;
### TaskGenerate a SQL query to answer [QUESTION]Find the contents that are stored in both Chicago and New York.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the contents that are stored in both Chicago and New York.[/QUESTION][SQL]SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w1 ON b.Warehouse = w1.Code JOIN Warehouses w2 ON b.Warehouse = w2.Code WHERE LOWER(w1.Location) = 'chicago' AND LOWER(w2.Location) = 'new york';
### TaskGenerate a SQL query to answer [QUESTION]Find the type of contents that are not in the warehouses located at New York.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the type of contents that are not in the warehouses located at New York.[/QUESTION][SQL]SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location)!= 'new york' ORDER BY b.Contents;
### TaskGenerate a SQL query to answer [QUESTION]What types of contents cannot be found in warehouses in New York?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What types of contents cannot be found in warehouses in New York?[/QUESTION][SQL]SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location)!= 'new york' ORDER BY b.Contents;
### TaskGenerate a SQL query to answer [QUESTION]Find the location of the warehouses which have contents Rocks but not Scissors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the location of the warehouses which have contents Rocks but not Scissors.[/QUESTION][SQL]SELECT w.Location FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents ilike '%Rocks%' AND b.Contents not ilike '%Scissors%' ORDER BY w.Location;
### TaskGenerate a SQL query to answer [QUESTION]What are the locations of warehouses that have boxes containing Rocks but not Scissors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the locations of warehouses that have boxes containing Rocks but not Scissors?[/QUESTION][SQL]SELECT w.Location FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents ilike '%Rocks%' AND b.Contents not ilike '%Scissors%' ORDER BY w.Location;
### TaskGenerate a SQL query to answer [QUESTION]Find the warehouses which store contents Rocks or Scissors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the warehouses which store contents Rocks or Scissors.[/QUESTION][SQL]SELECT DISTINCT b.Warehouse FROM Boxes b WHERE b.Contents IN ('Rocks', 'Scissors') ORDER BY b.Warehouse;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct warehouses that have boxes with Rocks or Scissors as contents?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct warehouses that have boxes with Rocks or Scissors as contents?[/QUESTION][SQL]SELECT DISTINCT b.Warehouse FROM Boxes b WHERE b.Contents IN ('Rocks', 'Scissors') ORDER BY b.Warehouse;
### TaskGenerate a SQL query to answer [QUESTION]Find the location of the warehouses which store contents Rocks and Scissors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the location of the warehouses which store contents Rocks and Scissors.[/QUESTION][SQL]SELECT w.Location FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents IN ('Rocks', 'Scissors') GROUP BY w.Location;
### TaskGenerate a SQL query to answer [QUESTION]What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?[/QUESTION][SQL]SELECT DISTINCT w.Location FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents ilike '%Rocks%Scissors%' ORDER BY w.Location;
### TaskGenerate a SQL query to answer [QUESTION]List the code and contents of all boxes sorted by their values.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the code and contents of all boxes sorted by their values.[/QUESTION][SQL]SELECT b.Code, b.Contents, b.Value FROM Boxes b ORDER BY b.Value DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the codes and corresponding contents of all the boxes, ordered by their values?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the codes and corresponding contents of all the boxes, ordered by their values?[/QUESTION][SQL]SELECT b.Code, b.Contents, b.Value FROM Boxes b ORDER BY b.Value DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the code and contents of the box with the lowest value.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the code and contents of the box with the lowest value.[/QUESTION][SQL]SELECT b.Code, b.Contents FROM Boxes b WHERE b.Value = (SELECT MIN(b2.Value) FROM Boxes b2);
### TaskGenerate a SQL query to answer [QUESTION]What is the code and contents for the box that has the smallest value?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the code and contents for the box that has the smallest value?[/QUESTION][SQL]SELECT b.Code, b.Contents FROM Boxes b WHERE b.Value = (SELECT MIN(b2.Value) FROM Boxes b2);
### TaskGenerate a SQL query to answer [QUESTION]Find the unique contents of all boxes whose value is higher than the average value of all boxes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the unique contents of all boxes whose value is higher than the average value of all boxes.[/QUESTION][SQL]SELECT DISTINCT b.Contents FROM Boxes b WHERE b.Value > (SELECT AVG(Value) FROM Boxes);
### TaskGenerate a SQL query to answer [QUESTION]What are the different contents of boxes for which the value is higher than the average value across all boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different contents of boxes for which the value is higher than the average value across all boxes?[/QUESTION][SQL]SELECT DISTINCT b.Contents FROM Boxes b WHERE b.Value > (SELECT AVG(Value) FROM Boxes);
### TaskGenerate a SQL query to answer [QUESTION]List all different types of contents ordered by contents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all different types of contents ordered by contents.[/QUESTION][SQL]SELECT DISTINCT b.Contents FROM Boxes b ORDER BY b.Contents;
### TaskGenerate a SQL query to answer [QUESTION]What are the different contents of boxes, ordered alphabetically?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different contents of boxes, ordered alphabetically?[/QUESTION][SQL]SELECT DISTINCT b.Contents FROM Boxes b ORDER BY b.Contents ASC;
### TaskGenerate a SQL query to answer [QUESTION]Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.[/QUESTION][SQL]SELECT b.Code FROM Boxes b WHERE b.Value > (SELECT MAX(b2.Value) FROM Boxes b2 WHERE b2.Contents = 'Rocks')
### TaskGenerate a SQL query to answer [QUESTION]What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?[/QUESTION][SQL]SELECT b.Code FROM Boxes b WHERE b.Value > (SELECT MAX(b2.Value) FROM Boxes b2 WHERE b2.Contents = 'Rocks') ORDER BY b.Code;
### TaskGenerate a SQL query to answer [QUESTION]Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.[/QUESTION][SQL]SELECT b.Code, b.Contents FROM Boxes b WHERE b.Value > (SELECT AVG(b2.Value) FROM Boxes b2 WHERE b2.Contents = 'Scissors') ORDER BY b.Value DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?[/QUESTION][SQL]SELECT b.Code, b.Contents FROM Boxes b WHERE b.Value > (SELECT MAX(b2.Value) FROM Boxes b2 WHERE b2.Contents LIKE '%Scissors%') ORDER BY b.Value DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the total value of boxes stored in the warehouse with the largest capacity.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total value of boxes stored in the warehouse with the largest capacity.[/QUESTION][SQL]SELECT SUM(b.Value) AS TotalValue FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code ORDER BY w.Capacity DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the total value of boxes kept in the warehouse with the greatest capacity?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total value of boxes kept in the warehouse with the greatest capacity?[/QUESTION][SQL]SELECT SUM(b.Value) AS TotalValue FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code ORDER BY w.Capacity DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.[/QUESTION][SQL]SELECT w.Code, AVG(b.Value) AS avg_value FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code HAVING AVG(b.Value) > 150 ORDER BY avg_value DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the average values of boxes for each warehouse than has an average value greater than 150?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the average values of boxes for each warehouse than has an average value greater than 150?[/QUESTION][SQL]SELECT b.Warehouse, AVG(b.Value) AS average_value FROM Boxes b GROUP BY b.Warehouse HAVING AVG(b.Value) > 150 ORDER BY average_value DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the total value and number of boxes for each content type.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total value and number of boxes for each content type.[/QUESTION][SQL]SELECT b.contents, SUM(b.value) AS total_value, COUNT(*) AS box_count FROM Boxes b GROUP BY b.contents ORDER BY b.contents;
### TaskGenerate a SQL query to answer [QUESTION]For each content, what is the total value and number of boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each content, what is the total value and number of boxes?[/QUESTION][SQL]SELECT b.contents, SUM(b.value) AS total_value, COUNT(*) AS box_count FROM Boxes b GROUP BY b.contents ORDER BY b.contents;
### TaskGenerate a SQL query to answer [QUESTION]Find the total, average, and maximum capacity for different locations.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total, average, and maximum capacity for different locations.[/QUESTION][SQL]SELECT w.Location, SUM(w.Capacity) AS Total_Capacity, AVG(w.Capacity) AS Average_Capacity, MAX(w.Capacity) AS Max_Capacity FROM Warehouses w GROUP BY w.Location ORDER BY w.Location;
### TaskGenerate a SQL query to answer [QUESTION]For each location, what are the total, average, and maximum capacities of warehouses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each location, what are the total, average, and maximum capacities of warehouses?[/QUESTION][SQL]SELECT w.Location, SUM(w.Capacity) AS Total_Capacity, AVG(w.Capacity) AS Average_Capacity, MAX(w.Capacity) AS Max_Capacity FROM Warehouses w GROUP BY w.Location ORDER BY w.Location;
### TaskGenerate a SQL query to answer [QUESTION]Find the total capacity of all warehouse locations.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total capacity of all warehouse locations.[/QUESTION][SQL]SELECT SUM(w.Capacity) AS Total_Capacity FROM Warehouses w;
### TaskGenerate a SQL query to answer [QUESTION]What is the total capacity of all warehouses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total capacity of all warehouses?[/QUESTION][SQL]SELECT SUM(w.Capacity) AS TotalCapacity FROM Warehouses w;
### TaskGenerate a SQL query to answer [QUESTION]Find the value of the most expensive boxes saved in each warehouse location.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the value of the most expensive boxes saved in each warehouse location.[/QUESTION][SQL]SELECT w.Location, MAX(b.Value) AS MaxValue FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code GROUP BY w.Location ORDER BY MaxValue DESC;
### TaskGenerate a SQL query to answer [QUESTION]For each warehouse location, what is the value of the most expensive box?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each warehouse location, what is the value of the most expensive box?[/QUESTION][SQL]SELECT w.Location, MAX(b.Value) AS MaxValue FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code GROUP BY w.Location ORDER BY MaxValue DESC;
### TaskGenerate a SQL query to answer [QUESTION]Select the warehouse codes along with the number of boxes in each warehouse.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the warehouse codes along with the number of boxes in each warehouse.[/QUESTION][SQL]SELECT w.Code AS warehouse_code, COUNT(b.Code) AS box_count FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code ORDER BY box_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many boxes are there with each warehouse?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many boxes are there with each warehouse?[/QUESTION][SQL]SELECT b.Warehouse, COUNT(b.Code) AS box_count FROM Boxes b GROUP BY b.Warehouse ORDER BY b.Warehouse;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of different locations where Rocks are stored.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of different locations where Rocks are stored.[/QUESTION][SQL]SELECT COUNT(DISTINCT w.Location) FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(b.Contents) = 'rocks';
### TaskGenerate a SQL query to answer [QUESTION]In how many different warehouses are Rocks stored within boxes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]In how many different warehouses are Rocks stored within boxes?[/QUESTION][SQL]SELECT COUNT(DISTINCT b.Warehouse) FROM Boxes b WHERE LOWER(b.Contents) = 'rocks';
### TaskGenerate a SQL query to answer [QUESTION]Select the code of each box, along with the name of the city the box is located in.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the code of each box, along with the name of the city the box is located in.[/QUESTION][SQL]SELECT b.Code, w.Location AS City FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code;
### TaskGenerate a SQL query to answer [QUESTION]What are the codes of all boxes, as well as the locations of the warehouses they are in?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the codes of all boxes, as well as the locations of the warehouses they are in?[/QUESTION][SQL]SELECT b.Code AS Box_Code, w.Location AS Warehouse_Location FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code;
### TaskGenerate a SQL query to answer [QUESTION]Select the codes of all the boxes located in Chicago.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the codes of all the boxes located in Chicago.[/QUESTION][SQL]SELECT b.Code FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) = 'chicago' ORDER BY b.Code;
### TaskGenerate a SQL query to answer [QUESTION]What are the codes of boxes stored in warehouses in Chicago?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the codes of boxes stored in warehouses in Chicago?[/QUESTION][SQL]SELECT b.Code FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) = 'chicago' ORDER BY b.Code;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of boxes saved in each warehouse.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of boxes saved in each warehouse.[/QUESTION][SQL]SELECT b.Warehouse, COUNT(b.Code) AS box_count FROM Boxes b GROUP BY b.Warehouse ORDER BY b.Warehouse;
### TaskGenerate a SQL query to answer [QUESTION]How many boxes are stored in each warehouse?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many boxes are stored in each warehouse?[/QUESTION][SQL]SELECT b.Warehouse, COUNT(b.Code) AS box_count FROM Boxes b GROUP BY b.Warehouse ORDER BY b.Warehouse;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of distinct types of contents in each warehouse.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of distinct types of contents in each warehouse.[/QUESTION][SQL]SELECT b.Warehouse, COUNT(DISTINCT b.Contents) AS num_contents FROM Boxes b GROUP BY b.Warehouse ORDER BY b.Warehouse;
### TaskGenerate a SQL query to answer [QUESTION]How many different types of contents are stored in each warehouse?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different types of contents are stored in each warehouse?[/QUESTION][SQL]SELECT b.Warehouse, COUNT(DISTINCT b.Contents) AS distinct_contents_count FROM Boxes b GROUP BY b.Warehouse ORDER BY b.Warehouse;
### TaskGenerate a SQL query to answer [QUESTION]Select the codes of all warehouses that are above capacity.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the codes of all warehouses that are above capacity.[/QUESTION][SQL]SELECT w.Code FROM Warehouses w WHERE w.Capacity < 1000;
### TaskGenerate a SQL query to answer [QUESTION]What are the codes of warehouses that have more boxes than their capacity?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the codes of warehouses that have more boxes than their capacity?[/QUESTION][SQL]SELECT w.Code FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Code > w.Capacity;
### TaskGenerate a SQL query to answer [QUESTION]Find the total values of boxes that are not in the warehouses located at Chicago.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the total values of boxes that are not in the warehouses located at Chicago.[/QUESTION][SQL]SELECT SUM(b.Value) AS TotalValue FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location)!= 'chicago';
### TaskGenerate a SQL query to answer [QUESTION]What is the total value of boxes contained in any location but Chicago?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL,    Value REAL NOT NULL,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total value of boxes contained in any location but Chicago?[/QUESTION][SQL]SELECT SUM(b.Value) AS TotalValue FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location)!= 'chicago';
### TaskGenerate a SQL query to answer [QUESTION]Show name, city, and state for all universities in  alphabetical order of university name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show name, city, and state for all universities in  alphabetical order of university name.[/QUESTION][SQL]SELECT u.University_Name, u.City, u.State FROM university u ORDER BY u.University_Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names, cities, and states of all universities in alphabetical order (by name of the university).[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names, cities, and states of all universities in alphabetical order (by name of the university).[/QUESTION][SQL]SELECT u.University_Name, u.City, u.State FROM university u ORDER BY u.University_Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]How many universities are in Illinois or Ohio?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many universities are in Illinois or Ohio?[/QUESTION][SQL]SELECT COUNT(*) FROM university u WHERE LOWER(u.state) = 'illinois' OR LOWER(u.state) = 'ohio';
### TaskGenerate a SQL query to answer [QUESTION]What is the total number of universities located in Illinois or Ohio?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total number of universities located in Illinois or Ohio?[/QUESTION][SQL]SELECT COUNT(*) FROM university u WHERE LOWER(u.state) = 'illinois' OR LOWER(u.state) = 'ohio';
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum, average, and minimum enrollment for universities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum, average, and minimum enrollment for universities?[/QUESTION][SQL]SELECT MAX(u.Enrollment) AS max_enrollment, AVG(u.Enrollment) AS avg_enrollment, MIN(u.Enrollment) AS min_enrollment FROM university u;
### TaskGenerate a SQL query to answer [QUESTION]What is the maximum, average, and minimum enrollment for all universities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the maximum, average, and minimum enrollment for all universities?[/QUESTION][SQL]SELECT MAX(u.Enrollment) AS max_enrollment, AVG(u.Enrollment) AS avg_enrollment, MIN(u.Enrollment) AS min_enrollment FROM university u;
### TaskGenerate a SQL query to answer [QUESTION]List team name for all universities with enrollments above the average.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List team name for all universities with enrollments above the average.[/QUESTION][SQL]SELECT u.team_name FROM university u WHERE u.enrollment > (SELECT AVG(u2.enrollment) FROM university u2);
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all teams from universities that have more people enrolled than average?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all teams from universities that have more people enrolled than average?[/QUESTION][SQL]SELECT u.Team_Name FROM university u WHERE u.Enrollment > (SELECT AVG(Enrollment) FROM university);
### TaskGenerate a SQL query to answer [QUESTION]Show all home conferences.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all home conferences.[/QUESTION][SQL]SELECT DISTINCT u.Home_Conference FROM university u ORDER BY u.Home_Conference NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the different home conferences from the university table?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different home conferences from the university table?[/QUESTION][SQL]SELECT DISTINCT u.Home_Conference FROM university u ORDER BY u.Home_Conference NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all home conferences and the number of universities in each conference.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all home conferences and the number of universities in each conference.[/QUESTION][SQL]SELECT u.Home_Conference, COUNT(u.University_ID) AS num_universities FROM university u GROUP BY u.Home_Conference ORDER BY num_universities DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For every home conference, how many universities attended that conference?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For every home conference, how many universities attended that conference?[/QUESTION][SQL]SELECT u.Home_Conference, COUNT(u.University_ID) AS number_of_universities FROM university u GROUP BY u.Home_Conference ORDER BY number_of_universities DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which state has most number of universities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which state has most number of universities?[/QUESTION][SQL]SELECT u.State, COUNT(u.University_ID) AS NumberOfUniversities FROM university u GROUP BY u.State ORDER BY NumberOfUniversities DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the state with the most universities?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the state with the most universities?[/QUESTION][SQL]SELECT u.State, COUNT(u.University_ID) AS NumberOfUniversities FROM university u GROUP BY u.State ORDER BY NumberOfUniversities DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show all home conferences with average enrollment of universities above 2000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all home conferences with average enrollment of universities above 2000.[/QUESTION][SQL]SELECT u.Home_Conference FROM university u WHERE u.Enrollment > 2000 GROUP BY u.Home_Conference ORDER BY COUNT(u.University_ID) DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the home conferences that have an average university enrollment above 2000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the home conferences that have an average university enrollment above 2000?[/QUESTION][SQL]SELECT u.Home_Conference FROM university u WHERE AVG(u.Enrollment) > 2000 GROUP BY u.Home_Conference;
### TaskGenerate a SQL query to answer [QUESTION]Which conference has the least number of total enrollment?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which conference has the least number of total enrollment?[/QUESTION][SQL]SELECT u.Home_Conference, SUM(u.Enrollment) AS Total_Enrollment FROM university u GROUP BY u.Home_Conference ORDER BY Total_Enrollment ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the home conferences with the fewest number of people enrolled?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the home conferences with the fewest number of people enrolled?[/QUESTION][SQL]SELECT u.Home_Conference, MIN(u.Enrollment) AS Min_Enrollment FROM university u GROUP BY u.Home_Conference ORDER BY Min_Enrollment ASC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List all major name and major code in the order of their major code[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all major name and major code in the order of their major code[/QUESTION][SQL]SELECT m.major_name, m.major_code FROM major m ORDER BY m.major_code NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and codes for all majors ordered by their code?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and codes for all majors ordered by their code?[/QUESTION][SQL]SELECT m.major_name, m.major_code FROM major m ORDER BY m.major_code NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all majors and major ranks for the university with name Augustana College.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all majors and major ranks for the university with name Augustana College.[/QUESTION][SQL]SELECT m.major_name, mr.rank FROM major AS m JOIN major_ranking AS mr ON m.major_id = mr.major_id JOIN university u ON mr.university_id = u.university_id WHERE LOWER(u.university_name) = 'augustana college' ORDER BY mr.rank NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the ranks and names of all majors at Augustana College?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ranks and names of all majors at Augustana College?[/QUESTION][SQL]SELECT mr.rank, m.major_name FROM major_ranking mr JOIN major m ON mr.major_id = m.major_id WHERE mr.university_id IN (SELECT u.university_id FROM university u WHERE LOWER(u.city) = 'rock island' AND LOWER(u.state) = 'il') ORDER BY mr.rank NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name, city, state of the university with a rank 1 on Accounting major?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name, city, state of the university with a rank 1 on Accounting major?[/QUESTION][SQL]SELECT u.University_Name, u.City, u.State FROM major_ranking mr JOIN university u ON mr.University_ID = u.University_ID WHERE mr.Major_ID IN (SELECT m.Major_ID FROM major m WHERE LOWER(m.Major_Name) = 'accounting') AND mr.Rank = 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name, city, and state of the university with number 1 ranked Accounting major?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name, city, and state of the university with number 1 ranked Accounting major?[/QUESTION][SQL]SELECT u.University_Name, u.City, u.State FROM major m JOIN major_ranking mr ON m.Major_ID = mr.Major_ID JOIN university u ON mr.University_ID = u.University_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank = 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the university that has most number of majors with rank 1?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the university that has most number of majors with rank 1?[/QUESTION][SQL]SELECT u.University_Name FROM major_ranking mr JOIN university u ON mr.University_ID = u.University_ID WHERE mr.Rank = 1 GROUP BY u.University_Name ORDER BY COUNT(mr.Major_ID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the university with the most majors ranked number 1?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the university with the most majors ranked number 1?[/QUESTION][SQL]SELECT u.University_Name FROM major_ranking mr JOIN university u ON mr.University_ID = u.University_ID WHERE mr.Rank = 1 GROUP BY u.University_Name ORDER BY COUNT(mr.Major_ID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show all university names without a major with rank 1?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all university names without a major with rank 1?[/QUESTION][SQL]SELECT u.University_Name FROM university u WHERE NOT EXISTS (SELECT 1 FROM major_ranking mr WHERE mr.Rank = 1 AND mr.University_ID = u.University_ID) ORDER BY u.University_Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all universities without any majors ranked number 1?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all universities without any majors ranked number 1?[/QUESTION][SQL]SELECT u.University_Name FROM university u WHERE NOT EXISTS (SELECT 1 FROM major_ranking mr WHERE mr.Rank = 1 AND mr.University_ID = u.University_ID) ORDER BY u.University_Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all university names with both major Accounting and major Urban Education.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all university names with both major Accounting and major Urban Education.[/QUESTION][SQL]SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Major_ID IN (SELECT m.Major_ID FROM major m WHERE LOWER(m.Major_Name) = 'accounting') AND mr.Major_ID IN (SELECT m.Major_ID FROM major m WHERE LOWER(m.Major_Name) = 'urban education');
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all universities that have both Accounting and Urban Education majors?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all universities that have both Accounting and Urban Education majors?[/QUESTION][SQL]SELECT DISTINCT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Major_ID IN (SELECT m.Major_ID FROM major m WHERE LOWER(m.Major_Name) = 'accounting' OR LOWER(m.Major_Name) = 'urban education') ORDER BY u.University_Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name and overall ranking of universities in Wisconsin state?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and overall ranking of universities in Wisconsin state?[/QUESTION][SQL]SELECT u.University_Name, o.Rank FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID WHERE LOWER(u.State) = 'wi' ORDER BY o.Rank NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name and rank of every university in Wisconsin?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and rank of every university in Wisconsin?[/QUESTION][SQL]SELECT u.University_Name, o.Rank FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID WHERE LOWER(u.State) = 'wi' ORDER BY o.Rank NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the university name with highest research point?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the university name with highest research point?[/QUESTION][SQL]SELECT u.University_Name FROM overall_ranking o JOIN university u ON o.University_ID = u.University_ID WHERE o.Research_point = (SELECT MAX(Research_point) FROM overall_ranking);
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the university with the most research points?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the university with the most research points?[/QUESTION][SQL]SELECT u.University_Name FROM overall_ranking o JOIN university u ON o.University_ID = u.University_ID ORDER BY o.Research_point DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List all university names in ascending order of their reputation points.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all university names in ascending order of their reputation points.[/QUESTION][SQL]SELECT u.University_Name, o.Reputation_point FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID ORDER BY o.Reputation_point ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all universities in ascending order of reputation points?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all universities in ascending order of reputation points?[/QUESTION][SQL]SELECT u.University_Name, o.Reputation_point FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID ORDER BY o.Reputation_point ASC;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of university with major Accounting ranked 3 or above?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of university with major Accounting ranked 3 or above?[/QUESTION][SQL]SELECT u.University_Name FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID JOIN university u ON mr.University_ID = u.University_ID WHERE m.Major_Name ilike '%Accounting%' AND mr.Rank >= 3;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the university with an Accounting major ranked 3 or higher?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the university with an Accounting major ranked 3 or higher?[/QUESTION][SQL]SELECT u.University_Name FROM major m JOIN major_ranking mr ON m.Major_ID = mr.Major_ID JOIN university u ON mr.University_ID = u.University_ID WHERE m.Major_Name ilike '%Accounting%' AND mr.Rank >= 3 ORDER BY u.University_Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the total enrollment of universities with a overall rank 5 or below?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total enrollment of universities with a overall rank 5 or below?[/QUESTION][SQL]SELECT SUM(u.Enrollment) AS Total_Enrollment FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID WHERE o.Rank <= 5;
### TaskGenerate a SQL query to answer [QUESTION]What is the total number of students enrolled in an university with a rank of 5 or below?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total number of students enrolled in an university with a rank of 5 or below?[/QUESTION][SQL]SELECT SUM(u.Enrollment) AS Total_Enrollment FROM overall_ranking o JOIN university u ON o.University_ID = u.University_ID WHERE o.Rank <= 5;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and Citation point of the universities whose reputation points are top 3 and above.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and Citation point of the universities whose reputation points are top 3 and above.[/QUESTION][SQL]SELECT u.University_Name, o.Citation_point FROM overall_ranking o JOIN university u ON o.University_ID = u.University_ID WHERE o.Reputation_point >= 3 ORDER BY o.Citation_point DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name and citation point of the unversities with the top 3 reputation points?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name and citation point of the unversities with the top 3 reputation points?[/QUESTION][SQL]SELECT u.University_Name, o.Citation_point FROM overall_ranking o JOIN university u ON o.University_ID = u.University_ID ORDER BY o.Reputation_point DESC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]which states do have more than two universities with enrollment smaller than 3000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]which states do have more than two universities with enrollment smaller than 3000?[/QUESTION][SQL]SELECT u.State FROM university u WHERE u.Enrollment < 3000 GROUP BY u.State HAVING COUNT(u.University_ID) > 2 ORDER BY u.State NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the states that have more than 2 universities with an enrollment less than 3000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the states that have more than 2 universities with an enrollment less than 3000?[/QUESTION][SQL]SELECT u.State FROM university u WHERE u.Enrollment < 3000 GROUP BY u.State HAVING COUNT(u.University_ID) > 2 ORDER BY u.State NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the titles of movies that don’t have any rating.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the titles of movies that don’t have any rating.[/QUESTION][SQL]SELECT m.Title FROM Movies m WHERE m.Rating IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of movies that do not have any ratings?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of movies that do not have any ratings?[/QUESTION][SQL]SELECT m.title FROM Movies m WHERE m.rating IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of movies whose rating is ‘G’.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of movies whose rating is ‘G’.[/QUESTION][SQL]SELECT m.title FROM Movies m WHERE LOWER(m.rating) = 'g' ORDER BY m.title;
### TaskGenerate a SQL query to answer [QUESTION]What are names of movies that have a 'G' ratings?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are names of movies that have a 'G' ratings?[/QUESTION][SQL]SELECT m.title FROM Movies m WHERE LOWER(m.rating) = 'g';
### TaskGenerate a SQL query to answer [QUESTION]Find the title of the movie that is played in the Odeon theater.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the title of the movie that is played in the Odeon theater.[/QUESTION][SQL]SELECT m.Title FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code WHERE LOWER(mt.Name) = 'odeon';
### TaskGenerate a SQL query to answer [QUESTION]What are the movie titles for ones that are played in the Odeon theater?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the movie titles for ones that are played in the Odeon theater?[/QUESTION][SQL]SELECT m.Title FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE LOWER(mt.Name) = 'odeon' ORDER BY m.Title;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of movies that are played in any theater and the name of the corresponding theater.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of movies that are played in any theater and the name of the corresponding theater.[/QUESTION][SQL]SELECT m.title AS movie_title, mt.name AS theater_name FROM Movies m JOIN MovieTheaters mt ON m.code = mt.movie;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the movies that are played in any theater and the name of the corresponding theater?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the movies that are played in any theater and the name of the corresponding theater?[/QUESTION][SQL]SELECT m.title AS movie_title, mt.name AS theater_name FROM Movies m JOIN MovieTheaters mt ON m.code = mt.movie;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of movies whose rating is ‘G’.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of movies whose rating is ‘G’.[/QUESTION][SQL]SELECT COUNT(*) FROM Movies m WHERE LOWER(m.Rating) = 'g';
### TaskGenerate a SQL query to answer [QUESTION]How many movies had a 'G' rating?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many movies had a 'G' rating?[/QUESTION][SQL]SELECT COUNT(*) FROM Movies m WHERE LOWER(m.Rating) = 'g';
### TaskGenerate a SQL query to answer [QUESTION]How many movies are playing across all theaters?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many movies are playing across all theaters?[/QUESTION][SQL]SELECT COUNT(DISTINCT mt.Code) FROM MovieTheaters mt;
### TaskGenerate a SQL query to answer [QUESTION]How many movies are playing in theaters?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many movies are playing in theaters?[/QUESTION][SQL]SELECT COUNT(DISTINCT mt.Code) FROM MovieTheaters mt;
### TaskGenerate a SQL query to answer [QUESTION]How many distinct movies are on in theaters?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many distinct movies are on in theaters?[/QUESTION][SQL]SELECT COUNT(DISTINCT mt.Movie) FROM MovieTheaters mt;
### TaskGenerate a SQL query to answer [QUESTION]How many different movies are playing?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different movies are playing?[/QUESTION][SQL]SELECT COUNT(DISTINCT mt.Movie) FROM MovieTheaters mt;
### TaskGenerate a SQL query to answer [QUESTION]How many distinct movie theaters are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many distinct movie theaters are there?[/QUESTION][SQL]SELECT COUNT(DISTINCT mt.Code) FROM MovieTheaters mt;
### TaskGenerate a SQL query to answer [QUESTION]How many different movie theaters exist?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different movie theaters exist?[/QUESTION][SQL]SELECT COUNT(DISTINCT mt.Code) FROM MovieTheaters mt;
### TaskGenerate a SQL query to answer [QUESTION]Find the rating of the movie whose name includes the word ‘Citizen’.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the rating of the movie whose name includes the word ‘Citizen’.[/QUESTION][SQL]SELECT m.Rating FROM Movies m WHERE m.Title ilike '%citizen%';
### TaskGenerate a SQL query to answer [QUESTION]What is the rating of the movie what has a name including a word like 'Citizen'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the rating of the movie what has a name including a word like 'Citizen'?[/QUESTION][SQL]SELECT m.Rating FROM Movies m WHERE LOWER(m.Title) LIKE '%citizen%';
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the cinemas that are playing movies with either rating ‘G’ or rating ‘PG’.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the cinemas that are playing movies with either rating ‘G’ or rating ‘PG’.[/QUESTION][SQL]SELECT mt.Name FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code WHERE m.Rating IN ('G', 'PG') ORDER BY mt.Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?[/QUESTION][SQL]SELECT mt.Name FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code WHERE m.Rating IN ('G', 'PG') ORDER BY mt.Name;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the movies that are played in either cinema Odeon or Imperial.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the movies that are played in either cinema Odeon or Imperial.[/QUESTION][SQL]SELECT m.title FROM Movies m JOIN MovieTheaters mt ON m.code = mt.movie WHERE mt.name IN ('Odeon', 'Imperial') ORDER BY m.title;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of all the movies that played at the Odeon or Imperial theater?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of all the movies that played at the Odeon or Imperial theater?[/QUESTION][SQL]SELECT m.Title FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE mt.Name IN ('Odeon', 'Imperial') ORDER BY m.Title;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the movie that is on in both Odeon and Imperial theaters.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the movie that is on in both Odeon and Imperial theaters.[/QUESTION][SQL]SELECT m.Title FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code WHERE mt.Name IN ('Odeon', 'Imperial') GROUP BY m.Title HAVING COUNT(DISTINCT mt.Name) = 2;
### TaskGenerate a SQL query to answer [QUESTION]What movie is playing at both the Odeon and Imperial theater?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What movie is playing at both the Odeon and Imperial theater?[/QUESTION][SQL]SELECT m.Title FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code WHERE mt.Name IN ('Odeon', 'Imperial') GROUP BY m.Title HAVING COUNT(DISTINCT mt.Name) = 2;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of all movies that are not played in Odeon theater.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of all movies that are not played in Odeon theater.[/QUESTION][SQL]SELECT m.title FROM Movies m WHERE m.code NOT IN (SELECT mt.movie FROM MovieTheaters mt WHERE LOWER(mt.name) = 'odeon') ORDER BY m.title;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of every movie that is not playing at the Odeon theater?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of every movie that is not playing at the Odeon theater?[/QUESTION][SQL]SELECT m.title FROM movies m WHERE m.code NOT IN (SELECT mt.movie FROM movietheaters mt WHERE LOWER(mt.name) = 'odeon') ORDER BY m.title;
### TaskGenerate a SQL query to answer [QUESTION]List in alphabetical order the titles of all movies.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List in alphabetical order the titles of all movies.[/QUESTION][SQL]SELECT m.title FROM Movies m ORDER BY m.title ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the movie names in alphabetical order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the movie names in alphabetical order?[/QUESTION][SQL]SELECT m.title FROM movies m ORDER BY m.title ASC;
### TaskGenerate a SQL query to answer [QUESTION]Find the titles of all movies sorted by their ratings.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the titles of all movies sorted by their ratings.[/QUESTION][SQL]SELECT m.title, m.rating FROM Movies m ORDER BY m.rating DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the movie names sorted by rating?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the movie names sorted by rating?[/QUESTION][SQL]SELECT m.title, m.rating FROM Movies m ORDER BY m.rating DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the theater that is playing the most number of movies.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the theater that is playing the most number of movies.[/QUESTION][SQL]SELECT mt.Name FROM MovieTheaters mt GROUP BY mt.Name ORDER BY COUNT(mt.Movie) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the theater playing the most movies?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the theater playing the most movies?[/QUESTION][SQL]SELECT mt.Name FROM MovieTheaters mt GROUP BY mt.Name ORDER BY COUNT(mt.Movie) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the movie that is played in the most number of theaters.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the movie that is played in the most number of theaters.[/QUESTION][SQL]SELECT m.title FROM movies m JOIN (SELECT mt.movie, COUNT(*) AS theater_count FROM movietheaters mt GROUP BY mt.movie ORDER BY theater_count DESC LIMIT 1) t ON m.code = t.movie;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the film playing at the most number of theaters?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the film playing at the most number of theaters?[/QUESTION][SQL]SELECT m.title FROM movies m JOIN movietheaters mt ON m.code = mt.movie GROUP BY m.title ORDER BY COUNT(mt.code) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of movies in each rating.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of movies in each rating.[/QUESTION][SQL]SELECT m.Rating, COUNT(m.Code) AS NumberOfMovies FROM Movies m GROUP BY m.Rating ORDER BY NumberOfMovies DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many movies exist for each rating?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many movies exist for each rating?[/QUESTION][SQL]SELECT m.Rating, COUNT(m.Code) AS NumberOfMovies FROM Movies m GROUP BY m.Rating ORDER BY NumberOfMovies DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of movies whose rating is not null.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of movies whose rating is not null.[/QUESTION][SQL]SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL;
### TaskGenerate a SQL query to answer [QUESTION]How many movies have a rating that is not null?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many movies have a rating that is not null?[/QUESTION][SQL]SELECT COUNT(*) FROM Movies WHERE Movies.Rating IS NOT NULL;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of theaters that has at least one movie playing.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of theaters that has at least one movie playing.[/QUESTION][SQL]SELECT mt.Name FROM MovieTheaters mt WHERE mt.Movie IS NOT NULL GROUP BY mt.Name HAVING COUNT(mt.Code) > 0 ORDER BY mt.Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of every theater with at least one movie playing?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of every theater with at least one movie playing?[/QUESTION][SQL]SELECT mt.Name FROM MovieTheaters mt WHERE mt.Movie IS NOT NULL GROUP BY mt.Name
### TaskGenerate a SQL query to answer [QUESTION]Select the name of all movie theaters that are not currently showing a movie.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the name of all movie theaters that are not currently showing a movie.[/QUESTION][SQL]SELECT mt.Name FROM MovieTheaters mt WHERE mt.Movie IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all cinemas not showing any movies?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all cinemas not showing any movies?[/QUESTION][SQL]SELECT mt.Name FROM MovieTheaters mt WHERE mt.Movie IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the movie theaters that are playing the movies whose rating is ‘G’.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the movie theaters that are playing the movies whose rating is ‘G’.[/QUESTION][SQL]SELECT mt.Name FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code WHERE LOWER(m.Rating) = 'g' ORDER BY mt.Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of theaters playing 'G' rated movies?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of theaters playing 'G' rated movies?[/QUESTION][SQL]SELECT mt.Name FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code WHERE LOWER(m.Rating) = 'g';
### TaskGenerate a SQL query to answer [QUESTION]Select the title of all movies.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Select the title of all movies.[/QUESTION][SQL]SELECT m.Title FROM Movies m ORDER BY m.Code;
### TaskGenerate a SQL query to answer [QUESTION]What are all of the movie names?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all of the movie names?[/QUESTION][SQL]SELECT m.title FROM movies m ORDER BY m.title;
### TaskGenerate a SQL query to answer [QUESTION]Show all the distinct ratings in the database.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all the distinct ratings in the database.[/QUESTION][SQL]SELECT DISTINCT m.Rating FROM Movies m ORDER BY m.Rating;
### TaskGenerate a SQL query to answer [QUESTION]What are the different movie ratings?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different movie ratings?[/QUESTION][SQL]SELECT DISTINCT m.Rating FROM Movies m ORDER BY m.Rating;
### TaskGenerate a SQL query to answer [QUESTION]Show all information of all unrated movies.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all information of all unrated movies.[/QUESTION][SQL]SELECT m.Code, m.Title FROM Movies m WHERE m.Rating IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What is all the information about the unrated movies?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is all the information about the unrated movies?[/QUESTION][SQL]SELECT m.title FROM Movies m WHERE m.rating IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Show the titles of movies not currently being shown in any theaters.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the titles of movies not currently being shown in any theaters.[/QUESTION][SQL]SELECT m.Title FROM Movies m WHERE m.Code NOT IN (SELECT mt.Movie FROM MovieTheaters mt);
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the movies not being shown in any theaters?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the movies not being shown in any theaters?[/QUESTION][SQL]SELECT m.title FROM Movies m WHERE m.code NOT IN (SELECT mt.movie FROM MovieTheaters mt);
### TaskGenerate a SQL query to answer [QUESTION]Who receieved the heaviest package?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who receieved the heaviest package?[/QUESTION][SQL]SELECT p.Recipient, MAX(p.Weight) AS Max_Weight FROM Package p GROUP BY p.Recipient ORDER BY Max_Weight DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the client who received the heaviest package?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the client who received the heaviest package?[/QUESTION][SQL]SELECT p.Recipient, c.Name FROM Package p JOIN Client c ON p.Recipient = c.AccountNumber ORDER BY p.Weight DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the total weight of all the packages that customer Leo Wong sent?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total weight of all the packages that customer Leo Wong sent?[/QUESTION][SQL]SELECT SUM(p.Weight) AS TotalWeight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE LOWER(c.Name) = 'leo wong';
### TaskGenerate a SQL query to answer [QUESTION]What is the total weight for all packages that Leo Wong sent?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total weight for all packages that Leo Wong sent?[/QUESTION][SQL]SELECT SUM(p.Weight) AS TotalWeight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE LOWER(c.Name) = 'leo wong';
### TaskGenerate a SQL query to answer [QUESTION]What is the position of Amy Wong?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the position of Amy Wong?[/QUESTION][SQL]SELECT e.Position FROM Employee e WHERE LOWER(e.Name) = 'amy wong';
### TaskGenerate a SQL query to answer [QUESTION]What position does Amy Wong have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What position does Amy Wong have?[/QUESTION][SQL]SELECT e.Position FROM Employee e WHERE LOWER(e.Name) = 'amy wong';
### TaskGenerate a SQL query to answer [QUESTION]What is Turanga Leela's salary and position?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is Turanga Leela's salary and position?[/QUESTION][SQL]SELECT e.Salary, e.Position FROM Employee e WHERE LOWER(e.Name) = 'turanga leela';
### TaskGenerate a SQL query to answer [QUESTION]What is the salary and position of the employee named Turanga Leela?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the salary and position of the employee named Turanga Leela?[/QUESTION][SQL]SELECT e.Salary, e.Position FROM Employee e WHERE LOWER(e.Name) = 'turanga leela';
### TaskGenerate a SQL query to answer [QUESTION]What is the average salary of all intern jobs?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average salary of all intern jobs?[/QUESTION][SQL]SELECT AVG(salary) AS average_salary FROM employee WHERE position = 'Intern';
### TaskGenerate a SQL query to answer [QUESTION]What is the average salary of an intern?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average salary of an intern?[/QUESTION][SQL]SELECT AVG(e.Salary) AS AverageSalary FROM Employee e WHERE LOWER(e.Position) = 'intern';
### TaskGenerate a SQL query to answer [QUESTION]What level is Physician?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What level is Physician?[/QUESTION][SQL]SELECT e.Position FROM Employee e WHERE LOWER(e.Position) = 'physician';
### TaskGenerate a SQL query to answer [QUESTION]What is the clearance level of a physician?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the clearance level of a physician?[/QUESTION][SQL]SELECT h.Level FROM Has_Clearance h JOIN Employee e ON h.Employee = e.EmployeeID WHERE LOWER(e.Position) LIKE '%physician%' LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List Package Number of all package sent by Leo Wong?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List Package Number of all package sent by Leo Wong?[/QUESTION][SQL]SELECT p.PackageNumber FROM Package p JOIN Employee e ON p.Sender = e.EmployeeID WHERE LOWER(e.Name) = 'leo wong';
### TaskGenerate a SQL query to answer [QUESTION]What is the number of all packages that Leo Wong sent?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the number of all packages that Leo Wong sent?[/QUESTION][SQL]SELECT COUNT(p.PackageNumber) FROM Package p JOIN Employee e ON p.Sender = e.EmployeeID WHERE LOWER(e.Name) = 'leo wong';
### TaskGenerate a SQL query to answer [QUESTION]List all package numbers received by Leo Wong?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all package numbers received by Leo Wong?[/QUESTION][SQL]SELECT p.PackageNumber FROM Package p JOIN Client c ON p.Recipient = c.AccountNumber WHERE LOWER(c.Name) = 'leo wong';
### TaskGenerate a SQL query to answer [QUESTION]What are all of the package numbers received by Leo Wong?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all of the package numbers received by Leo Wong?[/QUESTION][SQL]SELECT p.PackageNumber FROM Package p JOIN Employee e ON p.Recipient = e.EmployeeID WHERE LOWER(e.Name) = 'leo wong';
### TaskGenerate a SQL query to answer [QUESTION]List all package sent or received by Leo Wong.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all package sent or received by Leo Wong.[/QUESTION][SQL]SELECT p.PackageNumber FROM Package p JOIN Client c ON p.Sender = c.AccountNumber OR p.Recipient = c.AccountNumber WHERE LOWER(c.Name) = 'leo wong';
### TaskGenerate a SQL query to answer [QUESTION]What are all the different package numbers that Leo Wong sent or received?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the different package numbers that Leo Wong sent or received?[/QUESTION][SQL]SELECT DISTINCT p.PackageNumber FROM Package p JOIN Employee e ON p.Sender = e.EmployeeID OR p.Recipient = e.EmployeeID WHERE LOWER(e.Name) = 'leo wong' ORDER BY p.PackageNumber;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.[/QUESTION][SQL]SELECT COUNT(*) FROM Package p JOIN Client c ON p.Sender = c.AccountNumber AND p.Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') WHERE c.Name = 'Ogden Wernstrom';
### TaskGenerate a SQL query to answer [QUESTION]How many packages sent by Ogden Wernstrom and received by Leo Wong?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many packages sent by Ogden Wernstrom and received by Leo Wong?[/QUESTION][SQL]SELECT COUNT(*) FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE LOWER(c.Name) = 'ogden wernstrom' AND p.Recipient IN (SELECT AccountNumber FROM Client WHERE LOWER(Name) = 'leo wong');
### TaskGenerate a SQL query to answer [QUESTION]What are the contents of package sent by John Zoidfarb?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the contents of package sent by John Zoidfarb?[/QUESTION][SQL]SELECT p.contents FROM employee e JOIN shipment s ON e.employeeid = s.manager JOIN package p ON s.shipmentid = p.shipment WHERE LOWER(e.name) = 'john zoidfarb';
### TaskGenerate a SQL query to answer [QUESTION]What are the package contents of all those sent by John Zoidfarb?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the package contents of all those sent by John Zoidfarb?[/QUESTION][SQL]SELECT p.contents FROM employee e JOIN shipment s ON e.employeeid = s.manager JOIN package p ON s.shipmentid = p.shipment WHERE LOWER(e.name) = 'john zoidfarb';
### TaskGenerate a SQL query to answer [QUESTION]What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.[/QUESTION][SQL]SELECT p.PackageNumber, p.Weight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE LOWER(c.Name) LIKE '%john%' ORDER BY p.Weight DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the package number and weight of the heaviest package that was sent by a client named John or something similar?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the package number and weight of the heaviest package that was sent by a client named John or something similar?[/QUESTION][SQL]SELECT p.PackageNumber, MAX(p.Weight) AS MaxWeight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE LOWER(c.Name) LIKE '%john%' GROUP BY p.PackageNumber ORDER BY MaxWeight DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List package number and weight of top 3 lightest packages.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List package number and weight of top 3 lightest packages.[/QUESTION][SQL]SELECT p.PackageNumber, p.Weight FROM Package p ORDER BY p.Weight ASC LIMIT 3
### TaskGenerate a SQL query to answer [QUESTION]What is the package number and weight of the 3 lightest packages?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the package number and weight of the 3 lightest packages?[/QUESTION][SQL]SELECT p.PackageNumber, p.Weight FROM Package p ORDER BY p.Weight ASC LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]Who sent most number of packages? List client name and number of packages sent by that client.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who sent most number of packages? List client name and number of packages sent by that client.[/QUESTION][SQL]SELECT c.Name, COUNT(p.PackageNumber) AS NumberOfPackages FROM Package p JOIN Client c ON p.Sender = c.AccountNumber GROUP BY c.Name ORDER BY NumberOfPackages DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the client who sent the most packages and how many were there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the client who sent the most packages and how many were there?[/QUESTION][SQL]SELECT c.Name AS sender_name, COUNT(p.PackageNumber) AS number_of_packages FROM Package p JOIN Client c ON p.Sender = c.AccountNumber GROUP BY c.Name ORDER BY number_of_packages DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Who received least number of packages? List client name and number of packages received by that client.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who received least number of packages? List client name and number of packages received by that client.[/QUESTION][SQL]SELECT c.Name, COUNT(p.PackageNumber) AS NumberOfPackages FROM Client c JOIN Package p ON c.AccountNumber = p.Recipient GROUP BY c.Name ORDER BY NumberOfPackages ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the smallest number of packages received and by whom?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the smallest number of packages received and by whom?[/QUESTION][SQL]SELECT p.Recipient, COUNT(p.PackageNumber) AS package_count FROM Package p GROUP BY p.Recipient ORDER BY package_count ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Who sent more than one packages? List the client's name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who sent more than one packages? List the client's name.[/QUESTION][SQL]SELECT c.Name FROM Client c JOIN Package p ON c.AccountNumber = p.Sender GROUP BY c.Name HAVING COUNT(p.PackageNumber) > 1 ORDER BY c.Name;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of all clients who sent more than one package?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of all clients who sent more than one package?[/QUESTION][SQL]SELECT c.Name FROM Client c JOIN Package p ON c.AccountNumber = p.Sender GROUP BY c.Name HAVING COUNT(p.PackageNumber) > 1 ORDER BY c.Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the Coordinates of planet Mars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the Coordinates of planet Mars?[/QUESTION][SQL]SELECT p.Coordinates FROM Planet p WHERE LOWER(p.Name) ='mars';
### TaskGenerate a SQL query to answer [QUESTION]What are the coordinates of the planet named Mars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the coordinates of the planet named Mars?[/QUESTION][SQL]SELECT p.Coordinates FROM Planet p WHERE LOWER(p.Name) ='mars';
### TaskGenerate a SQL query to answer [QUESTION]List all Planets' names and coordinates in alphabetical order of name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all Planets' names and coordinates in alphabetical order of name.[/QUESTION][SQL]SELECT p.Name, p.Coordinates FROM Planet p ORDER BY p.Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and coordinates of all planets in alphabetical order by name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and coordinates of all planets in alphabetical order by name?[/QUESTION][SQL]SELECT p.Name, p.Coordinates FROM Planet p ORDER BY p.Name ASC;
### TaskGenerate a SQL query to answer [QUESTION]List all shipment id under Phillip J. Fry's management.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all shipment id under Phillip J. Fry's management.[/QUESTION][SQL]SELECT s.ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID WHERE LOWER(e.Name) = 'phillip j. fry';
### TaskGenerate a SQL query to answer [QUESTION]What are the shipment IDs of every delivery managed by Phillip J Fry?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the shipment IDs of every delivery managed by Phillip J Fry?[/QUESTION][SQL]SELECT s.ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID WHERE LOWER(e.Name) = 'phillip j fry';
### TaskGenerate a SQL query to answer [QUESTION]List the dates of all shipments.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the dates of all shipments.[/QUESTION][SQL]SELECT s.Date FROM Shipment s ORDER BY s.Date;
### TaskGenerate a SQL query to answer [QUESTION]What are the dates of every shipment in the database?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the dates of every shipment in the database?[/QUESTION][SQL]SELECT s.Date FROM Shipment s ORDER BY s.Date;
### TaskGenerate a SQL query to answer [QUESTION]List all shipment ids for the planet Mars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all shipment ids for the planet Mars.[/QUESTION][SQL]SELECT s.ShipmentID FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID WHERE LOWER(p.Name) ='mars';
### TaskGenerate a SQL query to answer [QUESTION]What are the shipment ids for the planet Mars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the shipment ids for the planet Mars?[/QUESTION][SQL]SELECT s.ShipmentID FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID WHERE LOWER(p.Name) ='mars';
### TaskGenerate a SQL query to answer [QUESTION]List all shipment ids for the planet Mars and under the management of Turanga Leela.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all shipment ids for the planet Mars and under the management of Turanga Leela.[/QUESTION][SQL]SELECT s.ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID WHERE LOWER(e.Name) = 'turanga leela' AND s.Planet = (SELECT p.PlanetID FROM Planet p WHERE LOWER(p.Name) ='mars');
### TaskGenerate a SQL query to answer [QUESTION]What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?[/QUESTION][SQL]SELECT s.ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID JOIN Planet p ON s.Planet = p.PlanetID WHERE LOWER(e.Name) = 'turanga leela' AND LOWER(p.Name) ='mars';
### TaskGenerate a SQL query to answer [QUESTION]List all shipment ids on the planet Mars or under the management of Turanga Leela.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all shipment ids on the planet Mars or under the management of Turanga Leela.[/QUESTION][SQL]SELECT s.ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID WHERE LOWER(e.Name) = 'turanga leela' OR s.Planet IN (SELECT p.PlanetID FROM Planet p WHERE LOWER(p.Name) ='mars') ORDER BY s.ShipmentID;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids for all shipments on the planet Mars that Turanga Leela manages?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids for all shipments on the planet Mars that Turanga Leela manages?[/QUESTION][SQL]SELECT s.ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID WHERE LOWER(e.Name) = 'turanga leela' AND s.Planet = (SELECT p.PlanetID FROM Planet p WHERE LOWER(p.Name) ='mars');
### TaskGenerate a SQL query to answer [QUESTION]What is the total shipments in each planet? List the planet name and total shipments.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the total shipments in each planet? List the planet name and total shipments.[/QUESTION][SQL]SELECT p.Name AS Planet, COUNT(s.ShipmentID) AS TotalShipments FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID GROUP BY p.Name ORDER BY TotalShipments DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many shipments take place on each planet?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many shipments take place on each planet?[/QUESTION][SQL]SELECT p.Name AS Planet, COUNT(s.ShipmentID) AS NumberOfShipments FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID GROUP BY p.Name ORDER BY NumberOfShipments DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which planet has most shipments? List the planet name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which planet has most shipments? List the planet name.[/QUESTION][SQL]SELECT p.Name FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet GROUP BY p.Name ORDER BY COUNT(s.ShipmentID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the planet with the most shipments?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the planet with the most shipments?[/QUESTION][SQL]SELECT p.Name FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet GROUP BY p.Name ORDER BY COUNT(s.ShipmentID) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the manger's name and number of shipments under his management.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the manger's name and number of shipments under his management.[/QUESTION][SQL]SELECT e.Name AS manager_name, COUNT(s.ShipmentID) AS number_of_shipments FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID GROUP BY e.Name ORDER BY number_of_shipments DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the number of shipments managed and names of each manager?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the number of shipments managed and names of each manager?[/QUESTION][SQL]SELECT e.Name AS Manager, COUNT(s.ShipmentID) AS NumberOfShipments FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID GROUP BY e.Name ORDER BY NumberOfShipments DESC;
### TaskGenerate a SQL query to answer [QUESTION]Calculate total weight of package shipped on Mars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Calculate total weight of package shipped on Mars.[/QUESTION][SQL]SELECT SUM(p.Weight) AS TotalWeight FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID WHERE LOWER(pl.Name) ='mars';
### TaskGenerate a SQL query to answer [QUESTION]what is the total weight of all packages shipped on Mars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]what is the total weight of all packages shipped on Mars?[/QUESTION][SQL]SELECT SUM(p.Weight) AS TotalWeight FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID WHERE LOWER(pl.Name) ='mars';
### TaskGenerate a SQL query to answer [QUESTION]Calculate total weight of package shipped in each planet. show the name of each planet.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Calculate total weight of package shipped in each planet. show the name of each planet.[/QUESTION][SQL]SELECT p.Name AS PlanetName, SUM(pg.Weight) AS TotalWeight FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet JOIN Package pg ON s.ShipmentID = pg.Shipment GROUP BY p.Name;
### TaskGenerate a SQL query to answer [QUESTION]what is the total package weight for each planet, list its name?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]what is the total package weight for each planet, list its name?[/QUESTION][SQL]SELECT p.Name AS PlanetName, SUM(pg.Weight) AS TotalPackageWeight FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet JOIN Package pg ON s.ShipmentID = pg.Shipment GROUP BY p.Name ORDER BY TotalPackageWeight DESC;
### TaskGenerate a SQL query to answer [QUESTION]Which planet has total weight of shipment greater than 30? List planet name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which planet has total weight of shipment greater than 30? List planet name.[/QUESTION][SQL]SELECT p.Name FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet GROUP BY p.Name HAVING SUM(s.Date) > 30
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all planets tjat have a total shipment weight greater than 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all planets tjat have a total shipment weight greater than 30?[/QUESTION][SQL]SELECT p.Name FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet GROUP BY p.Name HAVING SUM(s.Date) > 30;
### TaskGenerate a SQL query to answer [QUESTION]List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.[/QUESTION][SQL]SELECT p.PackageNumber FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Employee e ON s.Manager = e.EmployeeID WHERE LOWER(p.Contents) LIKE '%Zapp%Brannigan%' AND s.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) = 'omicron persei 8');
### TaskGenerate a SQL query to answer [QUESTION]What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?[/QUESTION][SQL]SELECT COUNT(p.PackageNumber) FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Employee e ON s.Manager = e.EmployeeID JOIN Has_Clearance h ON e.EmployeeID = h.Employee AND s.Planet = h.Planet WHERE LOWER(e.Name) = 'zapp brannigan' AND s.Planet IN (SELECT PlanetID FROM Planet WHERE LOWER(Name) = 'omicron persei 8');
### TaskGenerate a SQL query to answer [QUESTION]List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.[/QUESTION][SQL]SELECT p.PackageNumber FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Employee e ON s.Manager = e.EmployeeID WHERE LOWER(p.Contents) LIKE '%Omicron%Persei%' OR LOWER(e.Name) LIKE '%Zapp%Brannigan%' ORDER BY p.PackageNumber;
### TaskGenerate a SQL query to answer [QUESTION]What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?[/QUESTION][SQL]SELECT COUNT(*) AS total_packages FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID WHERE LOWER(p.Contents) LIKE '%Omicron%Persei%' OR s.Manager IN (SELECT e.EmployeeID FROM Employee e WHERE LOWER(e.Name) = 'Zapp Brannigan');
### TaskGenerate a SQL query to answer [QUESTION]Which packages have weight between 10 and 30? List the package number and weight.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which packages have weight between 10 and 30? List the package number and weight.[/QUESTION][SQL]SELECT p.PackageNumber, p.Weight FROM Package p WHERE p.Weight BETWEEN 10 AND 30 ORDER BY p.PackageNumber;
### TaskGenerate a SQL query to answer [QUESTION]What are the package numbers and weights that are between 10 and 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the package numbers and weights that are between 10 and 30?[/QUESTION][SQL]SELECT p.PackageNumber, p.Weight FROM Package p WHERE p.Weight BETWEEN 10 AND 30 ORDER BY p.PackageNumber;
### TaskGenerate a SQL query to answer [QUESTION]Which employees do not have clearance in Mars? List employee's name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which employees do not have clearance in Mars? List employee's name.[/QUESTION][SQL]SELECT e.Name FROM Employee e WHERE e.EmployeeID NOT IN (SELECT h.Employee FROM Has_Clearance h JOIN Planet p ON h.Planet = p.PlanetID WHERE LOWER(p.Name) ='mars')
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all employees who don't have clearance on Mars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all employees who don't have clearance on Mars?[/QUESTION][SQL]SELECT e.Name FROM Employee e WHERE e.EmployeeID NOT IN (SELECT h.Employee FROM Has_Clearance h JOIN Planet p ON h.Planet = p.PlanetID WHERE LOWER(p.Name) ='mars') ORDER BY e.Name;
### TaskGenerate a SQL query to answer [QUESTION]Which employees have clearance in Omega III? List employees' name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which employees have clearance in Omega III? List employees' name.[/QUESTION][SQL]SELECT e.Name FROM Employee e JOIN Has_Clearance h ON e.EmployeeID = h.Employee WHERE LOWER(h.Planet) = 'omega iii';
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all employees with clearance on Omega III?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all employees with clearance on Omega III?[/QUESTION][SQL]SELECT e.Name FROM Employee e JOIN Has_Clearance h ON e.EmployeeID = h.Employee WHERE LOWER(h.Planet) = 'omega iii';
### TaskGenerate a SQL query to answer [QUESTION]Which planets that have exact one employee has clearance? List planets' name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which planets that have exact one employee has clearance? List planets' name.[/QUESTION][SQL]SELECT p.Name FROM Planet p JOIN (SELECT h.Planet FROM Has_Clearance h GROUP BY h.Planet HAVING COUNT(DISTINCT h.Employee) = 1) AS t ON p.PlanetID = t.Planet ORDER BY p.Name;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all planets with one employee that has clearance?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all planets with one employee that has clearance?[/QUESTION][SQL]SELECT p.Name FROM Planet p JOIN (SELECT h.Clearance.Planet FROM Has_Clearance h GROUP BY h.Clearance.Planet HAVING COUNT(DISTINCT h.Clearance.Employee) = 1) AS c ON p.PlanetID = c.Planet;
### TaskGenerate a SQL query to answer [QUESTION]Which employees have salaries between 5000 and 10000? List employees' name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which employees have salaries between 5000 and 10000? List employees' name.[/QUESTION][SQL]SELECT e.Name FROM Employee e WHERE e.Salary BETWEEN 5000 AND 10000 ORDER BY e.Salary;
### TaskGenerate a SQL query to answer [QUESTION]What are the employees's names for those that have salaries between 5000 and 10000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the employees's names for those that have salaries between 5000 and 10000?[/QUESTION][SQL]SELECT e.Name FROM Employee e WHERE e.Salary BETWEEN 5000 AND 10000 ORDER BY e.Salary;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of employees whose salary is above the average salary or more than 5000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of employees whose salary is above the average salary or more than 5000.[/QUESTION][SQL]SELECT e.Name FROM Employee e WHERE e.Salary > (SELECT AVG(Salary) FROM Employee) OR e.Salary > 5000 ORDER BY e.Salary DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all employees who have a salary greater than average or more than 5000?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all employees who have a salary greater than average or more than 5000?[/QUESTION][SQL]SELECT e.Name FROM Employee e WHERE e.Salary > (SELECT AVG(Salary) FROM Employee) OR e.Salary > 5000 ORDER BY e.Salary DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of employees who do not have clearance in Mars.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of employees who do not have clearance in Mars.[/QUESTION][SQL]SELECT COUNT(DISTINCT e.EmployeeID) FROM Employee e LEFT JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee AND hc.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) ='mars') WHERE hc.Employee IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What is the number of employees that do not have clearance on Mars?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the number of employees that do not have clearance on Mars?[/QUESTION][SQL]SELECT COUNT(DISTINCT e.EmployeeID) FROM Employee e LEFT JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee AND hc.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) ='mars') WHERE hc.Employee IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]How many games are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many games are there?[/QUESTION][SQL]SELECT COUNT(*) FROM game;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of games.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of games.[/QUESTION][SQL]SELECT COUNT(*) FROM game;
### TaskGenerate a SQL query to answer [QUESTION]List the Title and Developers of all games ordered by units sold from large to small.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the Title and Developers of all games ordered by units sold from large to small.[/QUESTION][SQL]SELECT g.title, g.developers, g.units_sold_millions FROM game g ORDER BY g.units_sold_millions DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and developers of all games, sorted by units sold descending?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and developers of all games, sorted by units sold descending?[/QUESTION][SQL]SELECT g.title, g.developers, g.units_sold_millions FROM game g ORDER BY g.units_sold_millions DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the average units sold in millions of the games that are not developed by Nintendo?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average units sold in millions of the games that are not developed by Nintendo?[/QUESTION][SQL]SELECT AVG(g.Units_sold_Millions) AS Average_Units_Sold FROM game g WHERE g.Developers NOT ILIKE '%Nintendo%'
### TaskGenerate a SQL query to answer [QUESTION]Return the average number of units sold in millions for games not developed by Nintendo.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the average number of units sold in millions for games not developed by Nintendo.[/QUESTION][SQL]SELECT AVG(g.Units_sold_Millions) AS Average_Units_Sold FROM game g WHERE g.Developers NOT ILIKE '%Nintendo%'
### TaskGenerate a SQL query to answer [QUESTION]What are the names and market districts of all platforms?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and market districts of all platforms?[/QUESTION][SQL]SELECT p.platform_name, p.market_district FROM platform p ORDER BY p.platform_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Return all platform names and corresponding market districts.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return all platform names and corresponding market districts.[/QUESTION][SQL]SELECT p.platform_name, p.market_district FROM platform p ORDER BY p.platform_name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and id of platforms whose download rank is 1?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and id of platforms whose download rank is 1?[/QUESTION][SQL]SELECT p.Platform_name, p.Platform_ID FROM platform p WHERE p.Download_rank = 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the names and ids of all platforms with the download rank of 1.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the names and ids of all platforms with the download rank of 1.[/QUESTION][SQL]SELECT p.Platform_name, p.Platform_ID FROM platform p WHERE p.Download_rank = 1 ORDER BY p.Platform_ID NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the maximum and minimum rank of the year of players.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the maximum and minimum rank of the year of players.[/QUESTION][SQL]SELECT MAX(p.rank_of_the_year) AS max_rank, MIN(p.rank_of_the_year) AS min_rank FROM player p;
### TaskGenerate a SQL query to answer [QUESTION]Give the maximum and minimum rank of the year across all players.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Give the maximum and minimum rank of the year across all players.[/QUESTION][SQL]SELECT MAX(p.rank_of_the_year) AS max_rank, MIN(p.rank_of_the_year) AS min_rank FROM player p
### TaskGenerate a SQL query to answer [QUESTION]How many players have rank of the year smaller than 3?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many players have rank of the year smaller than 3?[/QUESTION][SQL]SELECT COUNT(*) FROM player p WHERE p.rank_of_the_year < 3;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of players that have a rank of year of at most 3.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of players that have a rank of year of at most 3.[/QUESTION][SQL]SELECT COUNT(*) FROM player p WHERE p.rank_of_the_year <= 3;
### TaskGenerate a SQL query to answer [QUESTION]List all player names in ascending alphabetical order.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all player names in ascending alphabetical order.[/QUESTION][SQL]SELECT p.player_name FROM player p ORDER BY p.player_name ASC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of all players in alphabetical order?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of all players in alphabetical order?[/QUESTION][SQL]SELECT p.player_name FROM player p ORDER BY p.player_name ASC;
### TaskGenerate a SQL query to answer [QUESTION]List names and colleges of all players in descending order of rank of the year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List names and colleges of all players in descending order of rank of the year.[/QUESTION][SQL]SELECT p.player_name, p.college FROM player p ORDER BY p.rank_of_the_year DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names and colleges of all players, ordered by rank of year descending?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and colleges of all players, ordered by rank of year descending?[/QUESTION][SQL]SELECT p.player_name, p.college FROM player p ORDER BY p.rank_of_the_year DESC;
### TaskGenerate a SQL query to answer [QUESTION]Please show the names and rank of players that have played the game titled "Super Mario World".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please show the names and rank of players that have played the game titled "Super Mario World".[/QUESTION][SQL]SELECT p.Player_name, p.Rank_of_the_year FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE LOWER(g.Title) ='super mario world';
### TaskGenerate a SQL query to answer [QUESTION]What are the names and ranks of players who have played the game with the title "Super Mario World"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names and ranks of players who have played the game with the title "Super Mario World"?[/QUESTION][SQL]SELECT p.Player_name, p.Rank_of_the_year FROM player p JOIN game_player gp ON p.Player_ID = gp.Player_ID JOIN game g ON gp.Game_ID = g.Game_ID WHERE LOWER(g.Title) ='super mario world' ORDER BY p.Rank_of_the_year DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the distinct developer of games played by players that go to college "Auburn".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the distinct developer of games played by players that go to college "Auburn".[/QUESTION][SQL]SELECT DISTINCT g.Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE LOWER(p.College) = 'auburn' ORDER BY g.Developers NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the different developers of games that are played by players that attend Auburn college?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the different developers of games that are played by players that attend Auburn college?[/QUESTION][SQL]SELECT DISTINCT g.developers FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE LOWER(p.college) = 'auburn' ORDER BY g.developers NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the average number of units sold in millions of games played by players with position "Guard"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the average number of units sold in millions of games played by players with position "Guard"?[/QUESTION][SQL]SELECT AVG(g.Units_sold_Millions) AS average_units_sold FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE LOWER(p.Position) = 'guard';
### TaskGenerate a SQL query to answer [QUESTION]Return the average number of units sold in millions among games played by players who have the position Guard.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the average number of units sold in millions among games played by players who have the position Guard.[/QUESTION][SQL]SELECT AVG(g.Units_sold_Millions) AS average_units_sold FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE LOWER(p.Position) = 'guard';
### TaskGenerate a SQL query to answer [QUESTION]Please list the title and platform name of games.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please list the title and platform name of games.[/QUESTION][SQL]SELECT g.title, p.platform_name FROM game g JOIN platform p ON g.platform_id = p.platform_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles and platform names of all games?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles and platform names of all games?[/QUESTION][SQL]SELECT g.title, p.platform_name FROM game g JOIN platform p ON g.platform_id = p.platform_id;
### TaskGenerate a SQL query to answer [QUESTION]Please list the title of games with platforms that have market district in Asia or USA.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Please list the title of games with platforms that have market district in Asia or USA.[/QUESTION][SQL]SELECT g.title FROM game g JOIN platform p ON g.platform_id = p.platform_id WHERE LOWER(p.market_district) IN ('asia', 'usa') ORDER BY g.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of games that have platforms in the market districts of Asia or the USA?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of games that have platforms in the market districts of Asia or the USA?[/QUESTION][SQL]SELECT g.title FROM game g JOIN platform p ON g.platform_id = p.platform_id WHERE LOWER(p.market_district) IN ('asia', 'usa') ORDER BY g.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the name of each franchise and the number of games belonging to that franchise.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of each franchise and the number of games belonging to that franchise.[/QUESTION][SQL]SELECT g.Franchise, COUNT(g.Game_ID) AS Number_of_Games FROM Game g GROUP BY g.Franchise ORDER BY Number_of_Games DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many games are there from each Franchise?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many games are there from each Franchise?[/QUESTION][SQL]SELECT g.Franchise, COUNT(g.Game_ID) AS number_of_games FROM game g GROUP BY g.Franchise ORDER BY number_of_games DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the name of franchise that have the most number of games.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of franchise that have the most number of games.[/QUESTION][SQL]SELECT g.Franchise, COUNT(g.Game_ID) AS Game_Count FROM game g GROUP BY g.Franchise ORDER BY Game_Count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Which franchise has the most games?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which franchise has the most games?[/QUESTION][SQL]SELECT g.Franchise, COUNT(g.Game_ID) AS number_of_games FROM game g GROUP BY g.Franchise ORDER BY number_of_games DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]List the names of franchises that have at least two games.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the names of franchises that have at least two games.[/QUESTION][SQL]SELECT g.Franchise FROM game g GROUP BY g.Franchise HAVING COUNT(g.Game_ID) >= 2 ORDER BY g.Franchise NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of franchises that have two or more games?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of franchises that have two or more games?[/QUESTION][SQL]SELECT g.Franchise FROM game g GROUP BY g.Franchise HAVING COUNT(g.Game_ID) >= 2 ORDER BY g.Franchise NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the name of players that do not play any game.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the name of players that do not play any game.[/QUESTION][SQL]SELECT p.Player_name FROM player p WHERE NOT EXISTS (SELECT 1 FROM game_player gp WHERE gp.Player_ID = p.Player_ID)
### TaskGenerate a SQL query to answer [QUESTION]What are the names of players who do not play any games?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of players who do not play any games?[/QUESTION][SQL]SELECT p.Player_name FROM player p WHERE NOT EXISTS (SELECT 1 FROM game_player gp WHERE gp.Player_ID = p.Player_ID)
### TaskGenerate a SQL query to answer [QUESTION]Show the title of games that are played by both players from college "Oklahoma" and players from college "Auburn".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the title of games that are played by both players from college "Oklahoma" and players from college "Auburn".[/QUESTION][SQL]SELECT g.title FROM game g JOIN game_player gp ON g.game_id = gp.game_id WHERE gp.player_id IN (SELECT p.player_id FROM player p WHERE LOWER(p.college) = 'oklahoma') AND gp.player_id IN (SELECT p.player_id FROM player p WHERE LOWER(p.college) = 'auburn');
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of games that are played by players from Oklahoma college or Auburn college?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of games that are played by players from Oklahoma college or Auburn college?[/QUESTION][SQL]SELECT DISTINCT g.title FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE LOWER(p.college) IN ('oklahoma', 'auburn') ORDER BY g.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all distinct franchises of games.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all distinct franchises of games.[/QUESTION][SQL]SELECT DISTINCT g.Franchise FROM game g ORDER BY g.Franchise NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are all the distinct franchises?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the distinct franchises?[/QUESTION][SQL]SELECT DISTINCT g.Franchise FROM game g ORDER BY g.Franchise NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show the title of games that are not played by any player who is in the Guard position.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the title of games that are not played by any player who is in the Guard position.[/QUESTION][SQL]SELECT g.title FROM game g WHERE NOT EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE LOWER(p.position) = 'guard') ORDER BY g.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What are the titles of games not played by any players who play the Guard position?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the titles of games not played by any players who play the Guard position?[/QUESTION][SQL]SELECT g.title FROM game g WHERE NOT EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE LOWER(p.position) = 'guard') ORDER BY g.title NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]list all the names of press in descending order of the profit of the year.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]list all the names of press in descending order of the profit of the year.[/QUESTION][SQL]SELECT p.Name, p.Year_Profits_billion FROM press p ORDER BY p.Year_Profits_billion DESC;
### TaskGenerate a SQL query to answer [QUESTION]Sorted all the press by year profits in descending order, and return press names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Sorted all the press by year profits in descending order, and return press names.[/QUESTION][SQL]SELECT p.Name FROM press p ORDER BY p.Year_Profits_billion DESC;
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?[/QUESTION][SQL]SELECT p.name FROM press p WHERE p.year_profits_billion > 15 OR p.month_profits_billion > 1 ORDER BY p.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.[/QUESTION][SQL]SELECT p.Name FROM press p WHERE p.Year_Profits_billion > 15 OR p.Month_Profits_billion > 1;
### TaskGenerate a SQL query to answer [QUESTION]what are the average and maximum profit of a year for all presses?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]what are the average and maximum profit of a year for all presses?[/QUESTION][SQL]SELECT p.year_profits_billion AS average_profit, MAX(p.year_profits_billion) AS max_profit FROM press p GROUP BY p.year_profits_billion;
### TaskGenerate a SQL query to answer [QUESTION]Find the average and maximum yearly profit for each press.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the average and maximum yearly profit for each press.[/QUESTION][SQL]SELECT p.name AS press_name, AVG(p.year_profits_billion) AS avg_yearly_profit, MAX(p.year_profits_billion) AS max_yearly_profit FROM press p GROUP BY p.name ORDER BY p.name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the publisher whose monthly profit is the highest.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the publisher whose monthly profit is the highest.[/QUESTION][SQL]SELECT p.Name FROM press p WHERE p.Month_Profits_billion = (SELECT MAX(p2.Month_Profits_billion) FROM press p2);
### TaskGenerate a SQL query to answer [QUESTION]Which press has the largest monthly profit? Give me the press name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which press has the largest monthly profit? Give me the press name.[/QUESTION][SQL]SELECT p.Name FROM press p WHERE p.Month_Profits_billion = (SELECT MAX(p2.Month_Profits_billion) FROM press p2);
### TaskGenerate a SQL query to answer [QUESTION]Find the name of the publisher whose monthly profit is the highest or the lowest.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of the publisher whose monthly profit is the highest or the lowest.[/QUESTION][SQL]SELECT p.Name FROM press p WHERE p.Month_Profits_billion = (SELECT MAX(p2.Month_Profits_billion) FROM press p2) OR p.Month_Profits_billion = (SELECT MIN(p3.Month_Profits_billion) FROM press p3);
### TaskGenerate a SQL query to answer [QUESTION]What are the names of the press that makes the highest monthly profit or the lowest monthly profit?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the names of the press that makes the highest monthly profit or the lowest monthly profit?[/QUESTION][SQL]SELECT p.Name, MAX(p.Month_Profits_billion) AS max_monthly_profit, MIN(p.Month_Profits_billion) AS min_monthly_profit FROM press p GROUP BY p.Name ORDER BY max_monthly_profit DESC NULLS LAST, min_monthly_profit ASC NULLS FIRST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]how many authors are under age 30?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]how many authors are under age 30?[/QUESTION][SQL]SELECT COUNT(*) FROM author WHERE Age < 30;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of authors of age below 30.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of authors of age below 30.[/QUESTION][SQL]SELECT COUNT(*) FROM author WHERE Age < 30;
### TaskGenerate a SQL query to answer [QUESTION]find the average age of authors for each gender.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]find the average age of authors for each gender.[/QUESTION][SQL]SELECT a.gender, AVG(a.age) AS average_age FROM author a GROUP BY a.gender ORDER BY a.gender NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For each gender, return gender and the average age of authors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each gender, return gender and the average age of authors.[/QUESTION][SQL]SELECT a.gender, AVG(a.age) AS average_age FROM author a GROUP BY a.gender
### TaskGenerate a SQL query to answer [QUESTION]find the number of authors who are older than 30 for each gender.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]find the number of authors who are older than 30 for each gender.[/QUESTION][SQL]SELECT a.gender, COUNT(*) AS count_authors FROM author a WHERE a.age > 30 GROUP BY a.gender ORDER BY a.gender NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many authors are of age above 30 for each gender?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many authors are of age above 30 for each gender?[/QUESTION][SQL]SELECT a.gender, COUNT(a.author_id) AS number_of_authors FROM author a WHERE a.age > 30 GROUP BY a.gender ORDER BY number_of_authors DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List all book titles in the order of their release date from the most recent to the past.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all book titles in the order of their release date from the most recent to the past.[/QUESTION][SQL]SELECT b.title, TO_DATE(b.release_date, 'YYYY-MM-DD') AS release_date FROM book b ORDER BY release_date DESC;
### TaskGenerate a SQL query to answer [QUESTION]Sort all the books in descending order of release date, and return the book titles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Sort all the books in descending order of release date, and return the book titles.[/QUESTION][SQL]SELECT b.title FROM book b ORDER BY TO_DATE(b.release_date, 'YYYY-MM-DD') DESC;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of books for each series.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of books for each series.[/QUESTION][SQL]SELECT bs.Book_Series, COUNT(*) AS book_count FROM book bs GROUP BY bs.Book_Series ORDER BY book_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many books does each book series have? Return the counts and book series.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many books does each book series have? Return the counts and book series.[/QUESTION][SQL]SELECT bs.Book_Series, COUNT(*) AS Book_Count FROM BOOK bs GROUP BY bs.Book_Series ORDER BY Book_Count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the titles and publish dates of the top 5 best sale books.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the titles and publish dates of the top 5 best sale books.[/QUESTION][SQL]SELECT b.title, b.release_date FROM book b ORDER BY CAST(b.sale_amount AS INTEGER) DESC NULLS LAST LIMIT 5;
### TaskGenerate a SQL query to answer [QUESTION]What are the 5 best books in terms of sale amount? Give me their titles and release dates.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the 5 best books in terms of sale amount? Give me their titles and release dates.[/QUESTION][SQL]SELECT b.title, b.release_date FROM book b ORDER BY CAST(b.sale_amount AS INTEGER) DESC NULLS LAST LIMIT 5;
### TaskGenerate a SQL query to answer [QUESTION]Find the book series that have some book selling more than 1000 and some book less 500.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the book series that have some book selling more than 1000 and some book less 500.[/QUESTION][SQL]SELECT DISTINCT bs.Book_Series FROM Book bs WHERE (bs.Sale_Amount > '1000' AND bs.Sale_Amount < '500')
### TaskGenerate a SQL query to answer [QUESTION]Which book series contain both books with sale amount above 1000 and books with sale amount below 500?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which book series contain both books with sale amount above 1000 and books with sale amount below 500?[/QUESTION][SQL]SELECT DISTINCT bs.Book_Series FROM Book bs WHERE (bs.Sale_Amount > '1000' AND bs.Sale_Amount < '500') ORDER BY bs.Book_Series NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the name of authors who publish their books in both "MM" and "LT" series.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name of authors who publish their books in both "MM" and "LT" series.[/QUESTION][SQL]SELECT DISTINCT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series IN ('MM', 'LT') GROUP BY a.Name HAVING COUNT(DISTINCT b.Book_Series) = 2;
### TaskGenerate a SQL query to answer [QUESTION]Which authors publish books in both "MM" and "LT" series? Give me the author names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which authors publish books in both "MM" and "LT" series? Give me the author names.[/QUESTION][SQL]SELECT DISTINCT a.Name FROM book b JOIN author a ON b.Author_ID = a.Author_ID WHERE b.Book_Series IN ('MM', 'LT') GROUP BY a.Name HAVING COUNT(DISTINCT b.Book_Series) = 2;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and age of the authors who do not have any book in the record.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and age of the authors who do not have any book in the record.[/QUESTION][SQL]SELECT a.Name, a.Age FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b)
### TaskGenerate a SQL query to answer [QUESTION]Which authors in the record have not published any books? Give me their names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which authors in the record have not published any books? Give me their names.[/QUESTION][SQL]SELECT DISTINCT a.Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b)
### TaskGenerate a SQL query to answer [QUESTION]Find the names of authors who have more than one book in the database.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of authors who have more than one book in the database.[/QUESTION][SQL]SELECT DISTINCT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Name HAVING COUNT(b.Book_ID) > 1 ORDER BY a.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Which authors have published more than 1 book according to the database? Give me their names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which authors have published more than 1 book according to the database? Give me their names.[/QUESTION][SQL]SELECT DISTINCT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Name HAVING COUNT(b.Book_ID) > 1 ORDER BY a.Name NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the title, author name, and publisher name for the top 3 best sales books.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the title, author name, and publisher name for the top 3 best sales books.[/QUESTION][SQL]SELECT b.title, a.name AS author_name, p.name AS press_name FROM book b JOIN author a ON b.author_id = a.author_id JOIN press p ON b.press_id = p.press_id ORDER BY b.sale_amount DESC NULLS LAST LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]What are the 3 best selling books? Show their titles, author names, and press names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the 3 best selling books? Show their titles, author names, and press names.[/QUESTION][SQL]SELECT b.title, a.name AS author_name, p.name AS press_name FROM book b JOIN author a ON b.author_id = a.author_id JOIN press p ON b.press_id = p.press_id ORDER BY b.sale_amount DESC NULLS LAST LIMIT 3;
### TaskGenerate a SQL query to answer [QUESTION]Find the name and total book sale amount of each press.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and total book sale amount of each press.[/QUESTION][SQL]SELECT p.Name AS Press_Name, SUM(CAST(b.Sale_Amount AS integer)) AS Total_Sales FROM Book b JOIN Press p ON b.Press_ID = p.Press_ID GROUP BY p.Name
### TaskGenerate a SQL query to answer [QUESTION]What are the name and total book sale amount of each press?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the name and total book sale amount of each press?[/QUESTION][SQL]SELECT p.Name AS Press_Name, SUM(CAST(b.Sale_Amount AS integer)) AS Total_Sales FROM Book b JOIN Press p ON b.Press_ID = p.Press_ID GROUP BY p.Name ORDER BY Total_Sales DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the number of books that are sold more than 1000 for each publisher. List the press name as well.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the number of books that are sold more than 1000 for each publisher. List the press name as well.[/QUESTION][SQL]SELECT p.Name AS Press_Name, COUNT(*) AS Number_of_Books FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE CAST(b.Sale_Amount AS INT) > 1000 GROUP BY p.Name ORDER BY Number_of_Books DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]For each press, return its name and the number of books that have sale amount above 1000.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]For each press, return its name and the number of books that have sale amount above 1000.[/QUESTION][SQL]SELECT p.Name AS Press_Name, COUNT(b.Book_ID) AS Number_of_Books FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE CAST(b.Sale_Amount AS INT) > 1000 GROUP BY p.Name ORDER BY Number_of_Books DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the author of best selling book?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the author of best selling book?[/QUESTION][SQL]SELECT b.author_id, a.name FROM book b JOIN author a ON b.author_id = a.author_id ORDER BY b.sale_amount DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Who wrote the best selling book? Give me the author name.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who wrote the best selling book? Give me the author name.[/QUESTION][SQL]SELECT b.author_id, a.name FROM book b JOIN author a ON b.author_id = a.author_id ORDER BY b.sale_amount DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]find the name and gender of the author who published the most books.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]find the name and gender of the author who published the most books.[/QUESTION][SQL]SELECT a.Name, a.Gender FROM author a JOIN (SELECT b.Author_ID, COUNT(b.Book_ID) AS book_count FROM book b GROUP BY b.Author_ID ORDER BY book_count DESC LIMIT 1) AS bc ON a.Author_ID = bc.Author_ID;
### TaskGenerate a SQL query to answer [QUESTION]Who wrote the largest number of books? Give me the author name and gender.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who wrote the largest number of books? Give me the author name and gender.[/QUESTION][SQL]SELECT a.Name, a.Gender FROM author a JOIN (SELECT b.Author_ID, COUNT(b.Book_ID) AS book_count FROM book b GROUP BY b.Author_ID ORDER BY book_count DESC LIMIT 1) AS bc ON a.Author_ID = bc.Author_ID;
### TaskGenerate a SQL query to answer [QUESTION]Find the names of the authors who did not have any book with the "Accor" press.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the names of the authors who did not have any book with the "Accor" press.[/QUESTION][SQL]SELECT DISTINCT a.Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE LOWER(p.Name) = 'accor')
### TaskGenerate a SQL query to answer [QUESTION]Which authors have never published under the "Accor" press? Give me their names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Which authors have never published under the "Accor" press? Give me their names.[/QUESTION][SQL]SELECT DISTINCT a.Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE LOWER(p.Name) = 'accor')
### TaskGenerate a SQL query to answer [QUESTION]Find the name and the yearly profit in billion for press that published more than two books.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the name and the yearly profit in billion for press that published more than two books.[/QUESTION][SQL]SELECT p.Name, SUM(p.Year_Profits_billion) AS total_yearly_profit FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name HAVING COUNT(b.Book_ID) > 2 ORDER BY total_yearly_profit DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Find the press that published more than two books, and return its name and yearly profit in billion.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Find the press that published more than two books, and return its name and yearly profit in billion.[/QUESTION][SQL]SELECT p.Name, SUM(p.Year_Profits_billion) AS total_yearly_profit FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name HAVING COUNT(b.Book_ID) > 2 ORDER BY total_yearly_profit DESC NULLS LAST LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many authors do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many authors do we have?[/QUESTION][SQL]SELECT COUNT(DISTINCT author_name) FROM Authors;
### TaskGenerate a SQL query to answer [QUESTION]Show all author names.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all author names.[/QUESTION][SQL]SELECT DISTINCT d.author_name FROM Documents d ORDER BY d.author_name;
### TaskGenerate a SQL query to answer [QUESTION]Show the names and other details for all authors.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names and other details for all authors.[/QUESTION][SQL]SELECT author_name, other_details FROM Authors ORDER BY author_name;
### TaskGenerate a SQL query to answer [QUESTION]Show the other details for the author Addison Denesik.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the other details for the author Addison Denesik.[/QUESTION][SQL]SELECT d.other_details FROM Authors a JOIN Documents d ON a.author_name = d.author_name WHERE a.author_name = 'Addison Denesik';
### TaskGenerate a SQL query to answer [QUESTION]Show the number of documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the number of documents.[/QUESTION][SQL]SELECT COUNT(*) FROM Documents;
### TaskGenerate a SQL query to answer [QUESTION]Who is the author of the document with id 4?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who is the author of the document with id 4?[/QUESTION][SQL]SELECT d.author_name FROM Documents d WHERE d.document_id = 4;
### TaskGenerate a SQL query to answer [QUESTION]Who is the author of the document "Travel to Brazil"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Who is the author of the document "Travel to Brazil"?[/QUESTION][SQL]SELECT d.author_name FROM Documents d WHERE LOWER(d.document_name) = 'travel to brazil';
### TaskGenerate a SQL query to answer [QUESTION]How many documents does has the author Era Kerluke written?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many documents does has the author Era Kerluke written?[/QUESTION][SQL]SELECT COUNT(d.document_id) FROM Documents d WHERE LOWER(d.author_name) = 'era kerluke';
### TaskGenerate a SQL query to answer [QUESTION]Show the names and descriptions for all documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names and descriptions for all documents.[/QUESTION][SQL]SELECT d.document_name, d.document_description FROM Documents d ORDER BY d.document_name;
### TaskGenerate a SQL query to answer [QUESTION]Show the ids and names for all documents by author Bianka Cummings.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the ids and names for all documents by author Bianka Cummings.[/QUESTION][SQL]SELECT d.document_id, d.author_name FROM Documents d WHERE LOWER(d.author_name) = 'bianka cummings' ORDER BY d.document_id;
### TaskGenerate a SQL query to answer [QUESTION]Show the author name and details for the document "Travel to China".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the author name and details for the document "Travel to China".[/QUESTION][SQL]SELECT d.author_name, d.other_details FROM Documents d WHERE d.document_name = 'Travel to China';
### TaskGenerate a SQL query to answer [QUESTION]Show all author names and number of documents corresponding to each.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all author names and number of documents corresponding to each.[/QUESTION][SQL]SELECT d.author_name, COUNT(d.document_id) AS document_count FROM Documents d GROUP BY d.author_name ORDER BY d.author_name;
### TaskGenerate a SQL query to answer [QUESTION]What is the name of the author with most number of documents?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the name of the author with most number of documents?[/QUESTION][SQL]SELECT d.author_name FROM Documents d GROUP BY d.author_name ORDER BY COUNT(d.document_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show the names for authors with at least two documents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the names for authors with at least two documents.[/QUESTION][SQL]SELECT d.author_name FROM Documents d GROUP BY d.author_name HAVING COUNT(d.document_id) >= 2 ORDER BY d.author_name;
### TaskGenerate a SQL query to answer [QUESTION]How many business processes do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many business processes do we have?[/QUESTION][SQL]SELECT COUNT(*) FROM Business_Processes;
### TaskGenerate a SQL query to answer [QUESTION]Show the next process id, process name, process description for process with id 9.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the next process id, process name, process description for process with id 9.[/QUESTION][SQL]SELECT b.next_process_id, b.process_name, b.process_description FROM Business_Processes b WHERE b.process_id = 9;
### TaskGenerate a SQL query to answer [QUESTION]What is the process name for the next process of the process with id 9?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the process name for the next process of the process with id 9?[/QUESTION][SQL]SELECT b.process_name FROM Business_Processes b WHERE b.process_id = (SELECT p.next_process_id FROM Business_Processes p WHERE p.process_id = 9);
### TaskGenerate a SQL query to answer [QUESTION]Show the number of process outcomes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the number of process outcomes.[/QUESTION][SQL]SELECT COUNT(process_outcome_code) FROM Process_Outcomes;
### TaskGenerate a SQL query to answer [QUESTION]List the codes and descriptions for all process outcomes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the codes and descriptions for all process outcomes.[/QUESTION][SQL]SELECT po.process_outcome_code, po.process_outcome_description FROM Process_Outcomes po ORDER BY po.process_outcome_code;
### TaskGenerate a SQL query to answer [QUESTION]What is the description for the process outcome code working?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the description for the process outcome code working?[/QUESTION][SQL]SELECT po.process_outcome_description FROM Process_Outcomes po WHERE LOWER(po.process_outcome_code) = 'working';
### TaskGenerate a SQL query to answer [QUESTION]Show the number of process status.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the number of process status.[/QUESTION][SQL]SELECT COUNT(*) FROM Process_Status;
### TaskGenerate a SQL query to answer [QUESTION]List the codes and descriptions for all process status.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the codes and descriptions for all process status.[/QUESTION][SQL]SELECT ps.process_status_code, ps.process_status_description FROM Process_Status ps ORDER BY ps.process_status_code;
### TaskGenerate a SQL query to answer [QUESTION]What is the description for process status code ct?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the description for process status code ct?[/QUESTION][SQL]SELECT ps.process_status_description FROM Process_Status ps WHERE LOWER(ps.process_status_code) = 'ct';
### TaskGenerate a SQL query to answer [QUESTION]How many staff do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many staff do we have?[/QUESTION][SQL]SELECT COUNT(*) FROM Staff;
### TaskGenerate a SQL query to answer [QUESTION]Show the ids and details for all staff.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the ids and details for all staff.[/QUESTION][SQL]SELECT s.staff_id, s.staff_details FROM Staff s ORDER BY s.staff_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the details for the staff member with id 100.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the details for the staff member with id 100.[/QUESTION][SQL]SELECT s.staff_details FROM Staff s WHERE s.staff_id = 100;
### TaskGenerate a SQL query to answer [QUESTION]Show the number of staff roles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the number of staff roles.[/QUESTION][SQL]SELECT COUNT(DISTINCT s.staff_role_code) FROM Staff_in_Processes s;
### TaskGenerate a SQL query to answer [QUESTION]List the codes and descriptions for all staff roles.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the codes and descriptions for all staff roles.[/QUESTION][SQL]SELECT r.staff_role_code, r.staff_role_description FROM Ref_Staff_Roles r ORDER BY r.staff_role_code;
### TaskGenerate a SQL query to answer [QUESTION]What is the description for staff role code HR?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the description for staff role code HR?[/QUESTION][SQL]SELECT rr.staff_role_description FROM Ref_Staff_Roles rr WHERE rr.staff_role_code = 'HR';
### TaskGenerate a SQL query to answer [QUESTION]How many documents have a process?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many documents have a process?[/QUESTION][SQL]SELECT COUNT(DISTINCT dp.document_id) FROM Documents_Processes dp;
### TaskGenerate a SQL query to answer [QUESTION]List all process ids with a document.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all process ids with a document.[/QUESTION][SQL]SELECT DISTINCT dp.process_id FROM Documents_Processes dp;
### TaskGenerate a SQL query to answer [QUESTION]Show all document ids without a process.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all document ids without a process.[/QUESTION][SQL]SELECT d.document_id FROM Documents d WHERE d.document_id NOT IN (SELECT dp.document_id FROM Documents_Processes dp);
### TaskGenerate a SQL query to answer [QUESTION]List all process ids with no document.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all process ids with no document.[/QUESTION][SQL]SELECT b.process_id FROM Business_Processes b WHERE b.process_id NOT IN (SELECT d.process_id FROM Documents_Processes d);
### TaskGenerate a SQL query to answer [QUESTION]What is the process outcome description and process status description for the document with id 0?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the process outcome description and process status description for the document with id 0?[/QUESTION][SQL]SELECT d.process_outcome_code, p.process_status_code FROM Documents d JOIN Documents_Processes dp ON d.document_id = dp.document_id JOIN Process_Outcomes o ON dp.process_outcome_code = o.process_outcome_code JOIN Process_Status p ON dp.process_status_code = p.process_status_code WHERE d.document_id = 0;
### TaskGenerate a SQL query to answer [QUESTION]What is the process name for the document "Travel to Brazil"?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the process name for the document "Travel to Brazil"?[/QUESTION][SQL]SELECT bp.process_name FROM Documents d JOIN Documents_Processes dp ON d.document_id = dp.document_id JOIN Business_Processes bp ON dp.process_id = bp.process_id WHERE LOWER(d.document_name) = 'travel to brazil';
### TaskGenerate a SQL query to answer [QUESTION]Show all process ids and the number of documents in each process.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all process ids and the number of documents in each process.[/QUESTION][SQL]SELECT b.process_id, COUNT(d.document_id) AS document_count FROM Business_Processes b JOIN Documents_Processes dp ON b.process_id = dp.process_id JOIN Documents d ON dp.document_id = d.document_id GROUP BY b.process_id ORDER BY b.process_id;
### TaskGenerate a SQL query to answer [QUESTION]How many staff are the document with id 0 and process with id 9.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many staff are the document with id 0 and process with id 9.[/QUESTION][SQL]SELECT COUNT(DISTINCT s.staff_id) FROM Staff_in_Processes sip JOIN Staff s ON sip.staff_id = s.staff_id WHERE sip.document_id = 0 AND sip.process_id = 9;
### TaskGenerate a SQL query to answer [QUESTION]Show all staff ids and the number of document processes for each staff.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all staff ids and the number of document processes for each staff.[/QUESTION][SQL]SELECT s.staff_id, COUNT(sp.document_id) AS num_processes FROM Staff_in_Processes sp JOIN Staff s ON sp.staff_id = s.staff_id GROUP BY s.staff_id ORDER BY num_processes DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show all staff role codes and the number of document processes for each role.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all staff role codes and the number of document processes for each role.[/QUESTION][SQL]SELECT s.staff_role_code, COUNT(s.staff_role_code) AS num_processes FROM Staff_in_Processes s GROUP BY s.staff_role_code ORDER BY num_processes DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many different roles does the staff with id 3 have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many different roles does the staff with id 3 have?[/QUESTION][SQL]SELECT COUNT(DISTINCT s.staff_role_code) FROM Staff_in_Processes s WHERE s.staff_id = 3;
### TaskGenerate a SQL query to answer [QUESTION]How many agencies do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many agencies do we have?[/QUESTION][SQL]SELECT COUNT(DISTINCT a.agency_id) FROM Agencies a;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of agencies.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of agencies.[/QUESTION][SQL]SELECT COUNT(*) FROM Agencies;
### TaskGenerate a SQL query to answer [QUESTION]Show all agency ids and details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all agency ids and details.[/QUESTION][SQL]SELECT a.agency_id, a.agency_details FROM Agencies a ORDER BY a.agency_id;
### TaskGenerate a SQL query to answer [QUESTION]What are all the agency ids and details?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the agency ids and details?[/QUESTION][SQL]SELECT a.agency_id, a.agency_details FROM Agencies a ORDER BY a.agency_id;
### TaskGenerate a SQL query to answer [QUESTION]Show the number of clients.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the number of clients.[/QUESTION][SQL]SELECT COUNT(*) FROM Clients;
### TaskGenerate a SQL query to answer [QUESTION]How many clients are there?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many clients are there?[/QUESTION][SQL]SELECT COUNT(DISTINCT c.client_id) FROM Clients c;
### TaskGenerate a SQL query to answer [QUESTION]List all client ids and client details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all client ids and client details.[/QUESTION][SQL]SELECT c.client_id, c.client_details FROM Clients c ORDER BY c.client_id;
### TaskGenerate a SQL query to answer [QUESTION]What are all the client ids and details?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all the client ids and details?[/QUESTION][SQL]SELECT c.client_id, c.client_details FROM Clients c ORDER BY c.client_id;
### TaskGenerate a SQL query to answer [QUESTION]Show agency ids and the number of clients for each agency.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show agency ids and the number of clients for each agency.[/QUESTION][SQL]SELECT c.agency_id, COUNT(c.client_id) AS num_clients FROM Clients c GROUP BY c.agency_id ORDER BY num_clients DESC;
### TaskGenerate a SQL query to answer [QUESTION]How many clients does each agency have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many clients does each agency have?[/QUESTION][SQL]SELECT c.agency_id, COUNT(c.client_id) AS number_of_clients FROM Clients c GROUP BY c.agency_id ORDER BY number_of_clients DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the agency id and details with most number of clients?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the agency id and details with most number of clients?[/QUESTION][SQL]SELECT c.agency_id, COUNT(c.client_id) AS client_count FROM Clients c GROUP BY c.agency_id ORDER BY client_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the agency id and details for the agency with the greatest number of clients.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the agency id and details for the agency with the greatest number of clients.[/QUESTION][SQL]SELECT c.agency_id, COUNT(c.client_id) AS client_count FROM Clients c GROUP BY c.agency_id ORDER BY client_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show agency ids and details with at least 2 clients.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show agency ids and details with at least 2 clients.[/QUESTION][SQL]SELECT c.agency_id, COUNT(c.client_id) AS client_count FROM Clients c GROUP BY c.agency_id HAVING COUNT(c.client_id) >= 2 ORDER BY c.agency_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the agency ids and details agencies with at least 2 clients?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the agency ids and details agencies with at least 2 clients?[/QUESTION][SQL]SELECT c.agency_id, COUNT(c.client_id) AS client_count FROM Clients c GROUP BY c.agency_id HAVING COUNT(c.client_id) >= 2 ORDER BY c.agency_id;
### TaskGenerate a SQL query to answer [QUESTION]Show agency details for client with detail 'Mac'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show agency details for client with detail 'Mac'.[/QUESTION][SQL]SELECT c.client_details FROM Clients c WHERE LOWER(c.client_details) ='mac';
### TaskGenerate a SQL query to answer [QUESTION]What are the agency details for clients with the detail Mac?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the agency details for clients with the detail Mac?[/QUESTION][SQL]SELECT c.client_details FROM Clients c WHERE LOWER(c.client_details) LIKE '%mac%'
### TaskGenerate a SQL query to answer [QUESTION]Show details for all clients and the details of their corresponding agents.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show details for all clients and the details of their corresponding agents.[/QUESTION][SQL]SELECT c.client_details AS client, s.staff_details AS agent FROM Clients c JOIN Staff s ON c.agency_id = s.agency_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the client details for each client and the corresponding details of their agencies?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the client details for each client and the corresponding details of their agencies?[/QUESTION][SQL]SELECT c.client_details, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id;
### TaskGenerate a SQL query to answer [QUESTION]Show all sic codes and the number of clients with each code.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all sic codes and the number of clients with each code.[/QUESTION][SQL]SELECT c.sic_code, COUNT(c.client_id) AS client_count FROM Clients c GROUP BY c.sic_code ORDER BY client_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many clients are there for each sic code?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many clients are there for each sic code?[/QUESTION][SQL]SELECT c.sic_code, COUNT(c.client_id) AS client_count FROM Clients c GROUP BY c.sic_code ORDER BY client_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]Show all client ids and details with sic code "Bad".[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all client ids and details with sic code "Bad".[/QUESTION][SQL]SELECT c.client_id, c.client_details FROM Clients c WHERE LOWER(c.sic_code) = 'bad';
### TaskGenerate a SQL query to answer [QUESTION]What are the client ideas and details for clients with the sic code Bad?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the client ideas and details for clients with the sic code Bad?[/QUESTION][SQL]SELECT c.client_details FROM Clients c WHERE LOWER(c.sic_code) = 'bad';
### TaskGenerate a SQL query to answer [QUESTION]Show all agency ids and details for agencies with a client.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all agency ids and details for agencies with a client.[/QUESTION][SQL]SELECT DISTINCT c.agency_id, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the agency ids and agency details for all agencies who have a client?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the agency ids and agency details for all agencies who have a client?[/QUESTION][SQL]SELECT DISTINCT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id ORDER BY a.agency_id;
### TaskGenerate a SQL query to answer [QUESTION]Show all agency ids without any client.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all agency ids without any client.[/QUESTION][SQL]SELECT DISTINCT a.agency_id FROM Agencies a WHERE a.agency_id NOT IN (SELECT c.agency_id FROM Clients c);
### TaskGenerate a SQL query to answer [QUESTION]What are ids of agencies that do not have any clients?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are ids of agencies that do not have any clients?[/QUESTION][SQL]SELECT a.agency_id FROM Agencies a WHERE a.agency_id NOT IN (SELECT c.agency_id FROM Clients c);
### TaskGenerate a SQL query to answer [QUESTION]How many invoices do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many invoices do we have?[/QUESTION][SQL]SELECT COUNT(*) FROM Invoices;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of invoices.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of invoices.[/QUESTION][SQL]SELECT COUNT(*) FROM Invoices;
### TaskGenerate a SQL query to answer [QUESTION]Show ids, status codes, and details for all invoices for clients.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show ids, status codes, and details for all invoices for clients.[/QUESTION][SQL]SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i ORDER BY i.invoice_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids, statuses, and details for all invoices?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids, statuses, and details for all invoices?[/QUESTION][SQL]SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i;
### TaskGenerate a SQL query to answer [QUESTION]Show all client ids and the number of invoices for each client.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all client ids and the number of invoices for each client.[/QUESTION][SQL]SELECT c.client_id, COUNT(i.invoice_id) AS invoice_count FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id ORDER BY invoice_count DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many invoices are there for each client id?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many invoices are there for each client id?[/QUESTION][SQL]SELECT i.client_id, COUNT(i.invoice_id) AS invoice_count FROM Invoices i GROUP BY i.client_id ORDER BY invoice_count DESC;
### TaskGenerate a SQL query to answer [QUESTION]List the client id and detail with most number of invoices.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the client id and detail with most number of invoices.[/QUESTION][SQL]SELECT i.client_id, COUNT(i.invoice_id) AS invoice_count FROM Invoices i GROUP BY i.client_id ORDER BY invoice_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are the client id and details for the client with the most invoices?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the client id and details for the client with the most invoices?[/QUESTION][SQL]SELECT i.client_id, c.client_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id GROUP BY i.client_id, c.client_details ORDER BY COUNT(i.invoice_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What are client ids for clients with at least 2 invoices.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are client ids for clients with at least 2 invoices.[/QUESTION][SQL]SELECT i.client_id FROM Invoices i GROUP BY i.client_id HAVING COUNT(i.invoice_id) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]Return the client ids for clients with two or more invoices?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the client ids for clients with two or more invoices?[/QUESTION][SQL]SELECT i.client_id FROM Invoices i GROUP BY i.client_id HAVING COUNT(i.invoice_id) >= 2;
### TaskGenerate a SQL query to answer [QUESTION]Show all invoice status codes and the number of invoices with each status.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all invoice status codes and the number of invoices with each status.[/QUESTION][SQL]SELECT i.invoice_status, COUNT(i.invoice_id) AS total_invoices FROM Invoices i GROUP BY i.invoice_status ORDER BY total_invoices DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many invoices are there for each status code?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many invoices are there for each status code?[/QUESTION][SQL]SELECT i.invoice_status, COUNT(i.invoice_id) AS number_of_invoices FROM Invoices i GROUP BY i.invoice_status ORDER BY number_of_invoices DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the invoice status code with most number of invoices.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the invoice status code with most number of invoices.[/QUESTION][SQL]SELECT i.invoice_status, COUNT(i.invoice_id) AS total_invoices FROM Invoices i GROUP BY i.invoice_status ORDER BY total_invoices DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the invoice status that has the most invoices.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the invoice status that has the most invoices.[/QUESTION][SQL]SELECT i.invoice_status FROM Invoices i GROUP BY i.invoice_status ORDER BY COUNT(i.invoice_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show all invoice status codes and details and the corresponding client id and details and agency id and details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all invoice status codes and details and the corresponding client id and details and agency id and details.[/QUESTION][SQL]SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_id, a.agency_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Agencies a ON c.agency_id = a.agency_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?[/QUESTION][SQL]SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_id, a.agency_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Agencies a ON c.agency_id = a.agency_id;
### TaskGenerate a SQL query to answer [QUESTION]List all meeting type codes and details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all meeting type codes and details.[/QUESTION][SQL]SELECT m.meeting_type, m.other_details FROM Meetings m ORDER BY m.meeting_type;
### TaskGenerate a SQL query to answer [QUESTION]What are all meeting types and other details?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all meeting types and other details?[/QUESTION][SQL]SELECT m.meeting_type, m.other_details FROM Meetings m ORDER BY m.meeting_type;
### TaskGenerate a SQL query to answer [QUESTION]Show all meeting outcomes and purposes.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all meeting outcomes and purposes.[/QUESTION][SQL]SELECT m.meeting_outcome, m.purpose_of_meeting FROM Meetings m ORDER BY m.meeting_id;
### TaskGenerate a SQL query to answer [QUESTION]What are all meeting outcomes and purposes?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all meeting outcomes and purposes?[/QUESTION][SQL]SELECT DISTINCT m.meeting_outcome, m.purpose_of_meeting FROM Meetings m ORDER BY m.meeting_outcome, m.purpose_of_meeting;
### TaskGenerate a SQL query to answer [QUESTION]Show all payment ids and details for invoices whose status is 'Working'.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all payment ids and details for invoices whose status is 'Working'.[/QUESTION][SQL]SELECT p.payment_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE LOWER(i.invoice_status) = 'working' ORDER BY p.payment_id;
### TaskGenerate a SQL query to answer [QUESTION]What are all payment ids and payment details for invoices with status Working?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are all payment ids and payment details for invoices with status Working?[/QUESTION][SQL]SELECT p.payment_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE LOWER(i.invoice_status) = 'working' ORDER BY p.payment_id;
### TaskGenerate a SQL query to answer [QUESTION]Show all invoice ids and statuses without a payment.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all invoice ids and statuses without a payment.[/QUESTION][SQL]SELECT i.invoice_id, i.invoice_status FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id WHERE p.invoice_id IS NULL ORDER BY i.invoice_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the invoice ids and statuses for invoices without a payment?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the invoice ids and statuses for invoices without a payment?[/QUESTION][SQL]SELECT i.invoice_id, i.invoice_status FROM Invoices i WHERE i.invoice_id NOT IN (SELECT p.invoice_id FROM Payments p);
### TaskGenerate a SQL query to answer [QUESTION]How many payments do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many payments do we have?[/QUESTION][SQL]SELECT COUNT(p.payment_id) FROM Payments p;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of payments.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of payments.[/QUESTION][SQL]SELECT COUNT(p.payment_id) FROM Payments p;
### TaskGenerate a SQL query to answer [QUESTION]List all payment ids and its corresponding invoice ids and details.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List all payment ids and its corresponding invoice ids and details.[/QUESTION][SQL]SELECT p.payment_id, i.invoice_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the payment ids, invoice ids, and payment details for all payments?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the payment ids, invoice ids, and payment details for all payments?[/QUESTION][SQL]SELECT p.payment_id, p.invoice_id, p.payment_details FROM Payments p;
### TaskGenerate a SQL query to answer [QUESTION]Show all the different invoice ids and statuses of the payments[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all the different invoice ids and statuses of the payments[/QUESTION][SQL]SELECT DISTINCT p.invoice_id, i.invoice_status FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id ORDER BY p.invoice_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the distinct invoice ids and statuses for all payments?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the distinct invoice ids and statuses for all payments?[/QUESTION][SQL]SELECT DISTINCT p.invoice_id, i.invoice_status FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id;
### TaskGenerate a SQL query to answer [QUESTION]Show all invoice ids and the number of payments for each invoice.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all invoice ids and the number of payments for each invoice.[/QUESTION][SQL]SELECT p.invoice_id, COUNT(p.payment_id) AS payment_count FROM Payments p GROUP BY p.invoice_id ORDER BY p.invoice_id;
### TaskGenerate a SQL query to answer [QUESTION]How many payments are there for each invoice?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many payments are there for each invoice?[/QUESTION][SQL]SELECT p.invoice_id, COUNT(p.payment_id) AS number_of_payments FROM Payments p GROUP BY p.invoice_id ORDER BY p.invoice_id;
### TaskGenerate a SQL query to answer [QUESTION]What is the invoice id, status code, and details for the invoice with most number of payments.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the invoice id, status code, and details for the invoice with most number of payments.[/QUESTION][SQL]SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id, i.invoice_status, i.invoice_details ORDER BY COUNT(p.payment_id) DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the invoice ids, statuses, and details for invoices with the most payments?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the invoice ids, statuses, and details for invoices with the most payments?[/QUESTION][SQL]SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id, i.invoice_status, i.invoice_details ORDER BY COUNT(p.payment_id) DESC LIMIT 5;
### TaskGenerate a SQL query to answer [QUESTION]How many staff do we have?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many staff do we have?[/QUESTION][SQL]SELECT COUNT(*) FROM Staff;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of staff.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of staff.[/QUESTION][SQL]SELECT COUNT(*) FROM Staff;
### TaskGenerate a SQL query to answer [QUESTION]Show the agency ids and the number of staff in each agent?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the agency ids and the number of staff in each agent?[/QUESTION][SQL]SELECT s.agency_id, COUNT(s.staff_id) AS total_staff FROM Staff s GROUP BY s.agency_id ORDER BY total_staff DESC;
### TaskGenerate a SQL query to answer [QUESTION]Return the agency ids and number of staff in each.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the agency ids and number of staff in each.[/QUESTION][SQL]SELECT s.agency_id, COUNT(s.staff_id) AS num_staff FROM Staff s GROUP BY s.agency_id ORDER BY num_staff DESC;
### TaskGenerate a SQL query to answer [QUESTION]What is the agent id and details for the agency with most staff?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the agent id and details for the agency with most staff?[/QUESTION][SQL]SELECT s.agency_id, COUNT(s.staff_id) AS staff_count FROM Staff s GROUP BY s.agency_id ORDER BY staff_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the id and detail for the agency with the most staff.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the id and detail for the agency with the most staff.[/QUESTION][SQL]SELECT s.agency_id, COUNT(s.staff_id) AS staff_count FROM Staff s GROUP BY s.agency_id ORDER BY staff_count DESC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]Show meeting outcome codes and the number of meeting in each outcome.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show meeting outcome codes and the number of meeting in each outcome.[/QUESTION][SQL]SELECT m.meeting_outcome, COUNT(m.meeting_id) AS total_meetings FROM Meetings m GROUP BY m.meeting_outcome ORDER BY total_meetings DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many meetings had each meeting outcome?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many meetings had each meeting outcome?[/QUESTION][SQL]SELECT m.meeting_outcome, COUNT(m.meeting_id) AS number_of_meetings FROM Meetings m GROUP BY m.meeting_outcome ORDER BY number_of_meetings DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]List the client ids and the number of meeting for each client.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the client ids and the number of meeting for each client.[/QUESTION][SQL]SELECT m.client_id, COUNT(m.meeting_id) AS total_meetings FROM Meetings m GROUP BY m.client_id ORDER BY total_meetings DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]How many meetings are there for each client id?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many meetings are there for each client id?[/QUESTION][SQL]SELECT m.client_id, COUNT(m.meeting_id) AS number_of_meetings FROM Meetings m GROUP BY m.client_id ORDER BY m.client_id;
### TaskGenerate a SQL query to answer [QUESTION]Show the meeting type codes and the number of meeting for each client.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the meeting type codes and the number of meeting for each client.[/QUESTION][SQL]SELECT m.meeting_type, COUNT(m.meeting_id) AS total_meetings FROM Meetings m GROUP BY m.client_id, m.meeting_type ORDER BY m.client_id, m.meeting_type;
### TaskGenerate a SQL query to answer [QUESTION]How many meetings are there for each meeting type?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many meetings are there for each meeting type?[/QUESTION][SQL]SELECT m.meeting_type, COUNT(m.meeting_id) AS number_of_meetings FROM Meetings m GROUP BY m.meeting_type ORDER BY number_of_meetings DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.[/QUESTION][SQL]SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?[/QUESTION][SQL]SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings AS m JOIN Clients AS c ON m.client_id = c.client_id;
### TaskGenerate a SQL query to answer [QUESTION]Show the meeting ids and the number of staff in each meeting.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the meeting ids and the number of staff in each meeting.[/QUESTION][SQL]SELECT m.meeting_id, COUNT(s.staff_id) AS num_staff FROM Meetings m JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id GROUP BY m.meeting_id ORDER BY num_staff DESC NULLS LAST;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of staff in each meeting by meeting id.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of staff in each meeting by meeting id.[/QUESTION][SQL]SELECT m.meeting_id, COUNT(s.staff_id) AS staff_count FROM Meetings m JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id GROUP BY m.meeting_id ORDER BY m.meeting_id;
### TaskGenerate a SQL query to answer [QUESTION]Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.[/QUESTION][SQL]SELECT s.staff_id, COUNT(sm.meeting_id) AS num_meetings FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id GROUP BY s.staff_id HAVING COUNT(sm.meeting_id) > 0 ORDER BY num_meetings ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]What is the staff id of the staff who attended the least meetings but attended some meeting?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What is the staff id of the staff who attended the least meetings but attended some meeting?[/QUESTION][SQL]SELECT s.staff_id FROM Staff s JOIN (SELECT sm.staff_id, COUNT(sm.meeting_id) AS num_meetings FROM Staff_in_Meetings sm GROUP BY sm.staff_id HAVING COUNT(sm.meeting_id) > 0) m ON s.staff_id = m.staff_id ORDER BY m.num_meetings ASC LIMIT 1;
### TaskGenerate a SQL query to answer [QUESTION]How many staff have attended a meeting?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many staff have attended a meeting?[/QUESTION][SQL]SELECT COUNT(DISTINCT sm.staff_id) FROM Staff_in_Meetings sm;
### TaskGenerate a SQL query to answer [QUESTION]Return the number of distinct staff who have attended a meeting?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the number of distinct staff who have attended a meeting?[/QUESTION][SQL]SELECT COUNT(DISTINCT sm.staff_id) FROM Staff_in_Meetings sm;
### TaskGenerate a SQL query to answer [QUESTION]How many staff did not attend any meeting?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]How many staff did not attend any meeting?[/QUESTION][SQL]SELECT COUNT(DISTINCT s.staff_id) FROM Staff s LEFT JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE sm.staff_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]Count the number of staff who did not attend any meeting.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Count the number of staff who did not attend any meeting.[/QUESTION][SQL]SELECT COUNT(DISTINCT s.staff_id) FROM Staff s LEFT JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE sm.staff_id IS NULL;
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and details of the clients who have attended any meeting or have any invoice?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and details of the clients who have attended any meeting or have any invoice?[/QUESTION][SQL]SELECT c.client_id, c.client_details FROM Clients c WHERE c.client_id IN (SELECT m.client_id FROM Meetings m UNION SELECT i.client_id FROM Invoices i);
### TaskGenerate a SQL query to answer [QUESTION]Return the ids and details of clients who have attended a meeting or had an invoice.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the ids and details of clients who have attended a meeting or had an invoice.[/QUESTION][SQL]SELECT c.client_id, c.client_details FROM Clients c WHERE c.client_id IN (SELECT m.client_id FROM Meetings m UNION SELECT i.client_id FROM Invoices i);
### TaskGenerate a SQL query to answer [QUESTION]What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter's'?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter's'?[/QUESTION][SQL]SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE s.staff_details ilike '%s%' GROUP BY s.staff_id, s.staff_details HAVING COUNT(sm.meeting_id) >= 1;
### TaskGenerate a SQL query to answer [QUESTION]Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?[/QUESTION][SQL]SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE LOWER(s.staff_details) LIKE '%s%' GROUP BY s.staff_id, s.staff_details HAVING COUNT(sm.meeting_id) >= 1 ORDER BY s.staff_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.[/QUESTION][SQL]SELECT c.client_id, c.sic_code, c.agency_id FROM Clients c JOIN Meetings m ON c.client_id = m.client_id WHERE (SELECT COUNT(m2.meeting_id) FROM Meetings m2 WHERE m2.client_id = c.client_id) >= 1 AND EXISTS (SELECT i.invoice_id FROM Invoices i WHERE i.client_id = c.client_id);
### TaskGenerate a SQL query to answer [QUESTION]Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.[/QUESTION][SQL]SELECT c.client_id, c.sic_code, c.agency_id FROM Clients c JOIN Meetings m ON c.client_id = m.client_id WHERE (SELECT COUNT(m2.meeting_id) FROM Meetings m2 WHERE m2.client_id = c.client_id) >= 1 AND EXISTS (SELECT i.invoice_id FROM Invoices i WHERE i.client_id = c.client_id);
### TaskGenerate a SQL query to answer [QUESTION]List the start time, end time of each meeting, and the corresponding client detail and staff detail.[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]List the start time, end time of each meeting, and the corresponding client detail and staff detail.[/QUESTION][SQL]SELECT m.start_date_time AS meeting_start, m.end_date_time AS meeting_end, c.client_details AS client_info, s.staff_details AS staff_info FROM Meetings m JOIN Clients c ON m.client_id = c.client_id JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id;
### TaskGenerate a SQL query to answer [QUESTION]What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?[/QUESTION]### Instructions- If you cannot answer the question with the available database schema, return 'I do not know'### Database SchemaThe query will run on a database with the following schema:CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))### AnswerGiven the database schema, here is the SQL query that answers [QUESTION]What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?[/QUESTION][SQL]SELECT m.meeting_id, c.client_details AS client_name, s.staff_details AS staff_name, m.start_date_time, m.end_date_time FROM Meetings m JOIN Clients c ON m.client_id = c.client_id JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id;
