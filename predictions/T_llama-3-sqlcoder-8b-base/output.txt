SELECT COUNT(*) FROM club;
SELECT COUNT(*) FROM club;
SELECT c.name FROM club c ORDER BY c.name ASC;
SELECT c.name FROM club c ORDER BY c.name ASC;
SELECT c.Name AS Club_Name, p.Name AS Player_Name FROM club c JOIN player p ON c.Manager = CAST(p.Player_ID AS text) OR c.Captain = CAST(p.Player_ID AS text);
SELECT c.Name AS Club_Name, c.Manager AS Manager, c.Captain AS Captain FROM club c ORDER BY c.Name NULLS LAST;
SELECT c.name FROM club c WHERE c.manufacturer!= 'Nike' ORDER BY c.name NULLS LAST;
SELECT c.Name FROM club c WHERE c.Manufacturer!= 'Nike' ORDER BY c.Name NULLS LAST;
SELECT p.name, p.wins_count FROM player p ORDER BY p.wins_count ASC;
SELECT p.Name FROM player p ORDER BY p.Wins_count ASC;
SELECT p.Name FROM player p WHERE p.Earnings = (SELECT MAX(p2.Earnings) FROM player p2);
SELECT p.Name FROM player p ORDER BY p.Earnings DESC NULLS LAST LIMIT 1;
SELECT DISTINCT p.Country FROM player p WHERE p.Earnings > 1200000 ORDER BY p.Country NULLS LAST;
SELECT p.country FROM player p WHERE p.earnings > 1200000 ORDER BY p.country NULLS LAST;
SELECT p.Country FROM player p WHERE p.Wins_count > 2 ORDER BY p.Earnings DESC NULLS LAST LIMIT 1;
SELECT p.Country FROM player p WHERE p.Wins_count > 2 ORDER BY p.Earnings DESC NULLS LAST LIMIT 1;
SELECT p.Name AS player_name, c.Name AS club_name FROM Player p JOIN Club c ON p.Club_ID = c.Club_ID;
SELECT p.name AS player_name, c.name AS club_name FROM player p JOIN club c ON p.club_id = c.club_id;
SELECT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2 GROUP BY c.Name;
SELECT c.Name FROM club c JOIN player p ON c.Club_ID = p.Club_ID WHERE p.Wins_count > 2 GROUP BY c.Name;
SELECT p.Name FROM player p JOIN club c ON p.Club_ID = c.Club_ID WHERE LOWER(c.Manager) ='sam allardyce';
SELECT p.Name FROM player p JOIN club c ON p.Club_ID = c.Club_ID WHERE LOWER(c.Manager) ='sam allardyce';
SELECT c.Name, AVG(p.Earnings) AS avg_earnings FROM club c JOIN player p ON c.Club_ID = p.Club_ID GROUP BY c.Name ORDER BY avg_earnings DESC NULLS LAST;
SELECT c.Name, AVG(p.Earnings) AS avg_earnings FROM player p JOIN club c ON p.Club_ID = c.Club_ID GROUP BY c.Name ORDER BY avg_earnings DESC NULLS LAST;
SELECT c.manufacturer, COUNT(c.club_id) AS num_clubs FROM club c GROUP BY c.manufacturer ORDER BY num_clubs DESC NULLS LAST;
SELECT c.manufacturer, COUNT(c.club_id) AS number_of_clubs FROM club c GROUP BY c.manufacturer ORDER BY number_of_clubs DESC NULLS LAST;
SELECT m.manufacturer, COUNT(*) AS count FROM club c JOIN (SELECT manufacturer FROM club GROUP BY manufacturer ORDER BY COUNT(*) DESC LIMIT 1) m ON c.manufacturer = m.manufacturer GROUP BY m.manufacturer;
SELECT c.manufacturer, COUNT(c.club_id) AS count_clubs FROM club c GROUP BY c.manufacturer ORDER BY count_clubs DESC LIMIT 1;
SELECT DISTINCT m.manufacturer FROM club c JOIN (SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(manufacturer) > 1) m ON c.manufacturer = m.manufacturer ORDER BY m.manufacturer NULLS LAST;
SELECT c.Manufacturer FROM club c GROUP BY c.Manufacturer HAVING COUNT(c.Club_ID) > 1 ORDER BY c.Manufacturer NULLS LAST;
SELECT p.country FROM player p GROUP BY p.country HAVING COUNT(p.player_id) > 1 ORDER BY p.country NULLS LAST;
SELECT p.country FROM player p GROUP BY p.country HAVING COUNT(p.player_id) > 1 ORDER BY p.country NULLS LAST;
SELECT c.Name FROM club c WHERE NOT EXISTS (SELECT 1 FROM player p WHERE p.Club_ID = c.Club_ID)
SELECT c.Name FROM club c WHERE c.Club_ID NOT IN (SELECT p.Club_ID FROM player p)
SELECT p.country FROM player p WHERE p.earnings > 1400000 OR p.earnings < 1100000 ORDER BY p.country NULLS LAST;
SELECT p.Country FROM player p WHERE p.Earnings > 1400000 AND EXISTS (SELECT 1 FROM player p2 WHERE p2.Country = p.Country AND p2.Earnings < 1100000) GROUP BY p.Country;
SELECT COUNT(DISTINCT p.Country) FROM player p;
SELECT COUNT(DISTINCT p.Country) FROM player p;
SELECT SUM(p.Earnings) AS total_earnings FROM player p WHERE LOWER(p.Country) IN ('australia', 'zimbabwe');
SELECT SUM(p.Earnings) AS total_earnings FROM player p WHERE LOWER(p.Country) IN ('australia', 'zimbabwe');
SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE (SELECT COUNT(o2.order_id) FROM Orders o2 WHERE o2.customer_id = c.customer_id) > 2 AND (SELECT COUNT(oi.order_item_id) FROM Order_Items oi WHERE oi.order_id IN (SELECT order_id FROM Orders WHERE customer_id = c.customer_id)) >= 3 GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name;
SELECT c.customer_id, c.customer_first_name, c.customer_last_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name HAVING COUNT(o.order_id) > 2 AND SUM(CASE WHEN oi.product_id IS NOT NULL THEN 1 ELSE 0 END) >= 3;
SELECT o.order_id, o.order_status_code, COUNT(oi.product_id) AS product_count FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code ORDER BY o.order_id NULLS LAST;
SELECT o.order_id, COUNT(oi.product_id) AS product_count, o.order_status_code FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.order_status_code ORDER BY o.order_id;
SELECT o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.order_item_id) > 1 ORDER BY o.date_order_placed ASC;
SELECT MIN(o.date_order_placed), COUNT(*) AS total_orders_with_multiple_items FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id HAVING COUNT(oi.order_item_id) > 1;
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c WHERE c.customer_id NOT IN (SELECT o.customer_id FROM Orders o)
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name FROM Customers c WHERE c.customer_id NOT IN (SELECT o.customer_id FROM Orders o);
SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi GROUP BY oi.product_id HAVING COUNT(oi.order_id) >= 2);
SELECT p.product_id, p.product_name, p.product_price, p.product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name, p.product_price, p.product_color HAVING COUNT(oi.order_id) < 2 ORDER BY p.product_id;
SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.product_id) >= 2 ORDER BY o.order_id;
SELECT o.order_id, o.date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.product_id) >= 2;
SELECT p.product_id, p.product_name, p.product_price, COUNT(o.order_id) AS order_count FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id GROUP BY p.product_id, p.product_name, p.product_price ORDER BY order_count DESC LIMIT 5;
SELECT p.product_id, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name, p.product_price ORDER BY COUNT(oi.order_item_id) DESC LIMIT 5;
SELECT oi.order_id, SUM(p.product_price) AS total_product_price FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id GROUP BY oi.order_id ORDER BY total_product_price ASC LIMIT 1;
SELECT o.order_id, SUM(p.product_price * oi.order_item_quantity) AS total_cost FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id ORDER BY total_cost ASC LIMIT 1;
SELECT cpm.payment_method_code, COUNT(cpm.payment_method_code) AS total_count FROM Customer_Payment_Methods cpm GROUP BY cpm.payment_method_code ORDER BY total_count DESC LIMIT 1;
SELECT cpm.payment_method_code FROM Customer_Payment_Methods cpm GROUP BY cpm.payment_method_code ORDER BY COUNT(cpm.customer_id) DESC LIMIT 1;
SELECT c.gender_code, COUNT(o.order_id) AS total_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY total_orders DESC;
SELECT c.gender_code, COUNT(o.order_id) AS total_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY total_orders DESC;
SELECT c.gender_code, COUNT(o.order_id) AS number_of_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY number_of_orders DESC;
SELECT c.gender_code, COUNT(o.order_id) AS number_of_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.gender_code ORDER BY number_of_orders DESC;
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM Customers c JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id
SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, p.payment_method_code FROM Customers c JOIN Customer_Payment_Methods p ON c.customer_id = p.customer_id;
SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices AS i JOIN Shipments AS s ON i.invoice_number = s.invoice_number ORDER BY i.invoice_date DESC;
SELECT i.invoice_status_code, i.invoice_date, s.shipment_date FROM Invoices i LEFT JOIN Shipments s ON i.invoice_number = s.invoice_number ORDER BY i.invoice_number;
SELECT p.product_name, s.shipment_date FROM Shipments s JOIN Shipment_Items si ON s.shipment_id = si.shipment_id JOIN Order_Items oi ON si.order_item_id = oi.order_item_id JOIN Products p ON oi.product_id = p.product_id;
SELECT p.product_name, s.shipment_date FROM Shipments s JOIN Shipment_Items si ON s.shipment_id = si.shipment_id JOIN Order_Items oi ON si.order_item_id = oi.order_item_id JOIN Products p ON oi.product_id = p.product_id;
SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id;
SELECT oi.order_item_status_code, s.shipment_tracking_number FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id JOIN Shipments s ON si.shipment_id = s.shipment_id;
SELECT p.product_name, p.product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id WHERE oi.order_item_status_code ='shipped' ORDER BY p.product_name;
SELECT p.product_name, p.product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id;
SELECT DISTINCT p.product_name, p.product_price, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE LOWER(c.gender_code) = 'f' ORDER BY p.product_name;
SELECT p.product_name, p.product_price, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE LOWER(c.gender_code) = 'f' GROUP BY p.product_name, p.product_price, p.product_description ORDER BY p.product_name NULLS LAST;
SELECT i.invoice_status_code FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number WHERE s.shipment_date IS NULL;
SELECT o.order_id, i.invoice_status_code FROM Orders o LEFT JOIN Shipments s ON o.order_id = s.order_id LEFT JOIN Invoices i ON s.invoice_number = i.invoice_number WHERE s.order_id IS NULL;
SELECT o.order_id, o.date_order_placed, SUM(p.product_price * oi.order_item_status_code::INTEGER) AS total_cost FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed ORDER BY o.order_id NULLS LAST;
SELECT o.order_id, o.date_order_placed, SUM(p.product_price) AS total_amount_paid FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id, o.date_order_placed ORDER BY o.order_id;
SELECT COUNT(DISTINCT o.customer_id) FROM Orders o;
SELECT COUNT(DISTINCT o.customer_id) FROM Orders o;
SELECT COUNT(DISTINCT oi.order_item_status_code) FROM Order_Items oi;
SELECT COUNT(DISTINCT oi.order_item_status_code) FROM Order_Items oi;
SELECT COUNT(DISTINCT cp.payment_method_code) FROM Customer_Payment_Methods cp;
SELECT COUNT(DISTINCT cp.payment_method_code) FROM Customer_Payment_Methods cp;
SELECT c.login_name, c.login_password FROM Customers c WHERE c.phone_number LIKE '+12%' ORDER BY c.customer_id;
SELECT c.login_name, c.login_password FROM Customers c WHERE c.phone_number LIKE '+12%' ORDER BY c.customer_id;
SELECT p.product_size FROM Products p WHERE p.product_name ILIKE '%Dell%' ORDER BY p.product_size;
SELECT p.product_size FROM Products p WHERE LOWER(p.product_name) LIKE '%dell%' ORDER BY p.product_size;
SELECT p.product_price, p.product_size FROM Products p WHERE p.product_price > (SELECT AVG(product_price) FROM Products);
SELECT p.product_id, p.product_price, p.product_size FROM Products p WHERE p.product_price > (SELECT AVG(product_price) FROM Products);
SELECT COUNT(DISTINCT p.product_id) FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL;
SELECT COUNT(p.product_id) FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi);
SELECT COUNT(DISTINCT c.customer_id) FROM Customers c LEFT JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id WHERE cp.customer_id IS NULL;
SELECT COUNT(DISTINCT c.customer_id) FROM Customers c LEFT JOIN Customer_Payment_Methods cp ON c.customer_id = cp.customer_id WHERE cp.customer_id IS NULL;
SELECT o.order_status_code, o.date_order_placed FROM Orders o ORDER BY o.date_order_placed;
SELECT o.order_status_code, o.date_order_placed FROM Orders o ORDER BY o.date_order_placed;
SELECT c.address_line_1, c.town_city, c.county FROM Customers c WHERE LOWER(c.country) = 'usa' ORDER BY c.customer_id;
SELECT c.address_line_1, c.town_city, c.county FROM Customers c WHERE LOWER(c.country) = 'united states' ORDER BY c.customer_id;
SELECT c.customer_first_name AS customer_first_name, p.product_name AS product_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id;
SELECT c.customer_first_name, p.product_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id;
SELECT COUNT(DISTINCT si.order_item_id) AS total_items_shipped FROM Shipment_Items si;
SELECT COUNT(DISTINCT oi.product_id) AS total_products_shipped FROM Order_Items oi JOIN Shipment_Items si ON oi.order_item_id = si.order_item_id;
SELECT AVG(p.product_price) AS average_product_price FROM Products p;
SELECT AVG(p.product_price) AS average_product_price FROM Products p;
SELECT AVG(p.product_price) AS average_product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id;
SELECT AVG(p.product_price) AS average_product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id;
SELECT c.email_address, c.town_city, c.county FROM Customers c JOIN (SELECT gender_code, COUNT(*) AS count_gender FROM Customers GROUP BY gender_code ORDER BY count_gender ASC LIMIT 1) g ON c.gender_code = g.gender_code;
SELECT c.email_address, c.town_city, c.county FROM Customers c JOIN (SELECT o.customer_id, COUNT(o.order_id) AS order_count FROM Orders o GROUP BY o.customer_id ORDER BY order_count ASC LIMIT 1) AS oc ON c.customer_id = oc.customer_id;
SELECT o.date_order_placed FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE c.customer_id IN (SELECT cp.customer_id FROM Customer_Payment_Methods cp GROUP BY cp.customer_id HAVING COUNT(DISTINCT cp.payment_method_code) >= 2);
SELECT o.date_order_placed FROM Orders o JOIN Customer_Payment_Methods cpm ON o.customer_id = cpm.customer_id GROUP BY o.order_id HAVING COUNT(DISTINCT cpm.payment_method_code) >= 2 ORDER BY o.date_order_placed;
SELECT o.order_status_code FROM Orders o GROUP BY o.order_status_code ORDER BY COUNT(o.order_status_code) ASC LIMIT 1;
SELECT o.order_status_code FROM Orders o GROUP BY o.order_status_code ORDER BY COUNT(o.order_status_code) ASC LIMIT 1;
SELECT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_description HAVING COUNT(oi.order_item_id) > 3 ORDER BY p.product_id;
SELECT p.product_id, p.product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_description HAVING COUNT(oi.order_item_id) > 3 ORDER BY p.product_id;
SELECT i.invoice_date, i.invoice_number FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number GROUP BY i.invoice_number, i.invoice_date HAVING COUNT(s.shipment_id) >= 2 ORDER BY i.invoice_date;
SELECT i.invoice_date, s.shipment_id FROM Shipments s JOIN Invoices i ON s.invoice_number = i.invoice_number GROUP BY i.invoice_date, s.shipment_id HAVING COUNT(s.shipment_id) >= 2 ORDER BY i.invoice_date;
SELECT s.shipment_tracking_number, s.shipment_date FROM Shipments s ORDER BY s.shipment_date NULLS LAST;
SELECT s.shipment_tracking_number, s.shipment_date FROM Shipments s ORDER BY s.shipment_date DESC;
SELECT p.product_color, p.product_description, p.product_size FROM Products p WHERE p.product_price < (SELECT MAX(product_price) FROM Products);
SELECT p.product_color, p.product_description, p.product_size FROM Products p WHERE p.product_price < (SELECT MAX(product_price) FROM Products);
SELECT d.Name FROM director d WHERE d.Age > (SELECT AVG(Age) FROM director);
SELECT d.Name FROM director d ORDER BY d.Age ASC LIMIT 1;
SELECT COUNT(*) FROM channel WHERE LOWER(internet) LIKE '%bbc%';
SELECT COUNT(DISTINCT c.Digital_terrestrial_channel) FROM channel c;
SELECT p.title FROM program p ORDER BY p.start_year DESC;
SELECT d.Name, COUNT(p.Program_ID) AS NumberOfPrograms FROM program p JOIN director d ON p.Director_ID = d.Director_ID GROUP BY d.Name ORDER BY NumberOfPrograms DESC LIMIT 1;
SELECT d.Name, d.Age FROM director d JOIN (SELECT p.Director_ID, COUNT(p.Program_ID) AS num_programs FROM program p GROUP BY p.Director_ID ORDER BY num_programs DESC LIMIT 1) AS p2 ON d.Director_ID = p2.Director_ID;
SELECT p.title FROM program p ORDER BY p.start_year DESC NULLS LAST LIMIT 1;
SELECT c.Name, COUNT(p.Program_ID) AS number_of_programs FROM channel c JOIN program p ON c.Channel_ID = p.Channel_ID GROUP BY c.Name HAVING COUNT(p.Program_ID) > 1 ORDER BY number_of_programs DESC NULLS LAST;
SELECT c.Name AS Channel_Name, COUNT(p.Program_ID) AS Number_of_Programs FROM program p JOIN channel c ON p.Channel_ID = c.Channel_ID GROUP BY c.Name ORDER BY Number_of_Programs DESC NULLS LAST;
SELECT COUNT(*) FROM channel c WHERE NOT EXISTS (SELECT 1 FROM program p WHERE p.Channel_ID = c.Channel_ID)
SELECT d.Name FROM program p JOIN director d ON p.Director_ID = d.Director_ID WHERE LOWER(p.Title) = 'dracula';
SELECT c.Name, COUNT(d.Director_ID) AS num_directors FROM director_admin da JOIN channel c ON da.Channel_ID = c.Channel_ID GROUP BY c.Name ORDER BY num_directors DESC LIMIT 1;
SELECT d.Name FROM director d WHERE d.Age BETWEEN 30 AND 60 ORDER BY d.Name NULLS LAST;
SELECT DISTINCT c.Name FROM channel c JOIN program p ON c.Channel_ID = p.Channel_ID JOIN director d ON p.Director_ID = d.Director_ID WHERE (d.Age < 40 AND d.Age > 60) ORDER BY c.Name NULLS LAST;
SELECT c.Channel_ID, c.Name FROM channel c WHERE NOT EXISTS (SELECT 1 FROM director d JOIN director_admin da ON d.Director_ID = da.Director_ID WHERE d.Name ilike '%Hank%Baskett%' AND da.Channel_ID = c.Channel_ID)
SELECT COUNT(*) FROM radio;
SELECT r.Transmitter FROM radio r ORDER BY CAST(r.ERP_kW AS FLOAT) ASC;
SELECT ts.tv_show_name, ts.original_airdate FROM tv_show ts ORDER BY ts.tv_show_name NULLS LAST;
SELECT cc.Station_name FROM city_channel cc WHERE LOWER(cc.Affiliation)!= 'abc' ORDER BY cc.Station_name NULLS LAST;
SELECT r.Transmitter FROM radio r WHERE (CAST(r.ERP_kW AS FLOAT) > 150 OR CAST(r.ERP_kW AS FLOAT) < 30);
SELECT r.Transmitter FROM radio r WHERE r.ERP_kW = (SELECT MAX(r2.ERP_kW) FROM radio r2);
SELECT AVG(CAST(r.ERP_kW AS FLOAT)) FROM radio r;
SELECT cc.Affiliation, COUNT(*) AS Number_of_City_Channels FROM city_channel cc GROUP BY cc.Affiliation ORDER BY Number_of_City_Channels DESC NULLS LAST;
SELECT cc.Affiliation, COUNT(*) AS Count FROM city_channel cc GROUP BY cc.Affiliation ORDER BY Count DESC LIMIT 1;
SELECT c.Affiliation FROM city_channel c GROUP BY c.Affiliation HAVING COUNT(c.ID) > 3 ORDER BY c.Affiliation NULLS LAST;
SELECT c.city, cc.station_name FROM city_channel cc JOIN city_channel_radio ccr ON cc.id = ccr.city_channel_id ORDER BY cc.station_name ASC;
SELECT r.Transmitter, c.City FROM radio r JOIN city_channel_radio cc ON r.Radio_ID = cc.Radio_ID JOIN city_channel c ON cc.City_channel_ID = c.ID;
SELECT r.Transmitter, c.Station_name, CAST(r.ERP_kW AS FLOAT) DESC FROM radio r JOIN city_channel_radio cc ON r.Radio_ID = cc.Radio_ID JOIN city_channel c ON cc.City_channel_ID = c.ID ORDER BY 3 DESC;
SELECT r.Transmitter, COUNT(ccr.City_channel_ID) AS num_city_channels FROM radio r JOIN city_channel_radio ccr ON r.Radio_ID = ccr.Radio_ID GROUP BY r.Transmitter ORDER BY num_city_channels DESC NULLS LAST;
SELECT DISTINCT r.Transmitter FROM radio r WHERE r.Radio_ID NOT IN (SELECT cc.Radio_ID FROM city_channel_radio cc) ORDER BY r.Transmitter NULLS LAST;
SELECT v.Model FROM vehicle v WHERE v.Power > 6000 ORDER BY v.Top_Speed DESC NULLS LAST LIMIT 1;
SELECT v.Model FROM vehicle v WHERE v.Power > 6000 ORDER BY v.Top_Speed DESC NULLS LAST LIMIT 1;
SELECT d.Name FROM driver d WHERE LOWER(d.Citizenship) = 'united states' ORDER BY d.Name NULLS LAST;
SELECT d.Name FROM driver d WHERE LOWER(d.Citizenship) = 'united states' ORDER BY d.Name NULLS LAST;
SELECT d.Driver_ID, COUNT(vd.Vehicle_ID) AS num_vehicles FROM vehicle_driver vd JOIN driver d ON vd.Driver_ID = d.Driver_ID GROUP BY d.Driver_ID ORDER BY num_vehicles DESC LIMIT 1;
SELECT d.Driver_ID, COUNT(vd.Vehicle_ID) AS num_vehicles FROM vehicle_driver vd JOIN driver d ON vd.Driver_ID = d.Driver_ID GROUP BY d.Driver_ID ORDER BY num_vehicles DESC LIMIT 1;
SELECT MAX(v.Power) AS max_power, AVG(v.Power) AS avg_power FROM vehicle v WHERE LOWER(v.Builder) = 'zhuzhou';
SELECT MAX(v.Power) AS max_power, AVG(v.Power) AS avg_power FROM vehicle v WHERE LOWER(v.Builder) = 'zhuzhou'
SELECT vd.Vehicle_ID FROM (SELECT v.Vehicle_ID, COUNT(vd.Driver_ID) AS num_drivers FROM vehicle v LEFT JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID GROUP BY v.Vehicle_ID) AS subquery ORDER BY num_drivers ASC LIMIT 1;
SELECT vd.Vehicle_ID FROM (SELECT v.Vehicle_ID, COUNT(*) AS num_drives FROM vehicle_driver vd JOIN driver d ON vd.Driver_ID = d.Driver_ID GROUP BY v.Vehicle_ID) AS subquery ORDER BY num_drives ASC NULLS LAST LIMIT 1;
SELECT v.top_speed, v.power FROM vehicle v WHERE v.build_year = '1996' ORDER BY v.top_speed DESC, v.power DESC LIMIT 1;
SELECT v.top_speed, v.power FROM vehicle v WHERE v.build_year = '1996' ORDER BY v.top_speed DESC, v.power DESC LIMIT 1;
SELECT v.build_year, v.model, v.builder FROM vehicle v;
SELECT v.build_year, v.model, v.builder FROM vehicle v ORDER BY v.build_year NULLS LAST;
SELECT COUNT(DISTINCT vd.Driver_ID) FROM vehicle_driver vd JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Build_Year = '2012';
SELECT COUNT(DISTINCT vd.Driver_ID) FROM vehicle v JOIN vehicle_driver vd ON v.Vehicle_ID = vd.Vehicle_ID WHERE v.Build_Year = '2012';
SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d WHERE LOWER(d.Racing_Series) = 'nascar';
SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d WHERE LOWER(d.Racing_Series) = 'nascar';
SELECT AVG(v.Top_Speed) AS Average_Top_Speed FROM vehicle v;
SELECT AVG(v.Top_Speed) AS Average_Top_Speed FROM vehicle v
SELECT DISTINCT d.Name FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000;
SELECT d.Name FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE v.Power > 5000;
SELECT v.model FROM vehicle v WHERE (v.total_production::int > 100 OR v.top_speed > 150) ORDER BY v.model NULLS LAST;
SELECT v.model FROM vehicle v WHERE (v.total_production::int > 100 OR v.top_speed > 150) ORDER BY v.model NULLS LAST;
SELECT v.model, v.build_year FROM vehicle v WHERE v.model ilike '%DJ%' ORDER BY v.model NULLS LAST;
SELECT v.model, v.build_year FROM vehicle v WHERE v.model ilike '%DJ%' ORDER BY v.model NULLS LAST;
SELECT v.Model FROM vehicle v WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver vd WHERE vd.Vehicle_ID = v.Vehicle_ID) ORDER BY v.Model NULLS LAST;
SELECT v.Model FROM vehicle v WHERE v.Vehicle_ID NOT IN (SELECT vd.Vehicle_ID FROM vehicle_driver vd)
SELECT v.Vehicle_ID, v.Model FROM vehicle v JOIN (SELECT vd.Vehicle_ID FROM vehicle_driver vd GROUP BY vd.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) >= 2) AS d ON v.Vehicle_ID = d.Vehicle_ID WHERE v.Builder ilike '%Ziyang%' ORDER BY v.Vehicle_ID NULLS LAST;
SELECT v.model, COUNT(vd.driver_id) AS num_drivers FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id WHERE v.builder ilike '%Ziyang%' GROUP BY v.model HAVING COUNT(vd.driver_id) = 2 UNION SELECT v.model, COUNT(vd.driver_id) AS num_drivers FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id GROUP BY v.model HAVING COUNT(vd.driver_id) = 2 ORDER BY model NULLS LAST;
SELECT v.Vehicle_ID, v.Model FROM vehicle v JOIN (SELECT vd.Vehicle_ID FROM vehicle_driver vd GROUP BY vd.Vehicle_ID HAVING COUNT(DISTINCT vd.Driver_ID) > 2 UNION SELECT vd.Vehicle_ID FROM vehicle_driver vd JOIN driver d ON vd.Driver_ID = d.Driver_ID WHERE LOWER(d.Name) = 'jeff gordon') AS t ON v.Vehicle_ID = t.Vehicle_ID ORDER BY v.Vehicle_ID NULLS LAST;
SELECT v.model, COUNT(vd.vehicle_id) AS num_drivers FROM vehicle v JOIN vehicle_driver vd ON v.vehicle_id = vd.vehicle_id WHERE vd.driver_id IN (SELECT d.driver_id FROM driver d WHERE LOWER(d.name) = 'jeff gordon') GROUP BY v.model HAVING COUNT(vd.vehicle_id) > 2 ORDER BY num_drivers DESC NULLS LAST;
SELECT COUNT(*) FROM (SELECT v.* FROM vehicle v ORDER BY v.Top_Speed DESC LIMIT 1) AS max_speed_vehicle;
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle);
SELECT d.Name FROM driver d ORDER BY d.Name ASC;
SELECT d.Name FROM driver d ORDER BY d.Name ASC;
SELECT d.Racing_Series, COUNT(d.Driver_ID) AS number_of_drivers FROM driver d GROUP BY d.Racing_Series ORDER BY number_of_drivers DESC NULLS LAST;
SELECT d.Racing_Series, COUNT(d.Driver_ID) AS total_drivers FROM driver d GROUP BY d.Racing_Series ORDER BY total_drivers DESC NULLS LAST;
SELECT d.Name, d.Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE LOWER(v.Model) = 'dj1';
SELECT d.Name, d.Citizenship FROM driver d JOIN vehicle_driver vd ON d.Driver_ID = vd.Driver_ID JOIN vehicle v ON vd.Vehicle_ID = v.Vehicle_ID WHERE LOWER(v.Model) = 'dj1' ORDER BY d.Name NULLS LAST;
SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d WHERE d.Driver_ID NOT IN (SELECT vd.Driver_ID FROM vehicle_driver vd);
SELECT COUNT(DISTINCT d.Driver_ID) FROM driver d WHERE d.Driver_ID NOT IN (SELECT vd.Driver_ID FROM vehicle_driver vd);
SELECT COUNT(*) FROM Exams;
SELECT COUNT(*) FROM Exams;
SELECT DISTINCT e.Subject_Code FROM Exams e ORDER BY e.Subject_Code ASC;
SELECT DISTINCT e.Subject_Code FROM Exams e ORDER BY e.Subject_Code ASC;
SELECT e.Exam_Name, e.Exam_Date FROM Exams e WHERE e.Subject_Code!= 'Database' ORDER BY e.Exam_Date DESC;
SELECT e.Exam_ID, e.Exam_Date, e.Exam_Name FROM Exams e WHERE e.Subject_Code!= 'Database' ORDER BY e.Exam_Date;
SELECT e.Exam_Date FROM Exams e WHERE e.Subject_Code ilike '%data%' ORDER BY e.Exam_Date DESC;
SELECT e.Exam_Date FROM Exams e WHERE e.Subject_Code ilike '%data%' ORDER BY e.Exam_Date DESC;
SELECT q.type_of_question_code, COUNT(*) AS number_of_questions FROM Questions q GROUP BY q.type_of_question_code ORDER BY number_of_questions DESC NULLS LAST;
SELECT q.type_of_question_code, COUNT(*) AS number_of_occurrences FROM questions q GROUP BY q.type_of_question_code ORDER BY number_of_occurrences DESC NULLS LAST;
SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE LOWER(sa.Comments) = 'normal' ORDER BY sa.Student_Answer_Text;
SELECT DISTINCT sa.Student_Answer_Text FROM Student_Answers sa WHERE LOWER(sa.Comments) = 'normal' ORDER BY sa.Student_Answer_Text;
SELECT COUNT(DISTINCT sa.Comments) FROM Student_Answers sa;
SELECT COUNT(DISTINCT sa.Comments) FROM Student_Answers sa;
SELECT sa.Student_Answer_Text, COUNT(*) AS Count FROM Student_Answers sa GROUP BY sa.Student_Answer_Text ORDER BY Count DESC;
SELECT sa.Student_Answer_Text, COUNT(*) AS Frequency FROM Student_Answers sa GROUP BY sa.Student_Answer_Text ORDER BY Frequency DESC;
SELECT s.First_Name, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID;
SELECT s.First_Name, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID;
SELECT s.Email_Adress, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID ORDER BY sa.Date_of_Answer DESC;
SELECT s.Email_Adress, sa.Date_of_Answer FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID ORDER BY sa.Date_of_Answer DESC;
SELECT sa.Assessment FROM Student_Assessments sa GROUP BY sa.Assessment ORDER BY COUNT(sa.Student_Answer_ID) ASC LIMIT 1;
SELECT sa.Assessment, COUNT(*) AS Frequency FROM Student_Assessments sa GROUP BY sa.Assessment ORDER BY Frequency ASC LIMIT 1;
SELECT s.First_Name FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID GROUP BY s.First_Name HAVING COUNT(sa.Student_Answer_ID) >= 2 ORDER BY s.First_Name;
SELECT s.First_Name FROM Students s JOIN Student_Answers sa ON s.Student_ID = sa.Student_ID GROUP BY s.First_Name HAVING COUNT(sa.Student_Answer_ID) >= 2 ORDER BY s.First_Name;
SELECT va.Valid_Answer_Text FROM Valid_Answers va GROUP BY va.Valid_Answer_Text ORDER BY COUNT(va.Valid_Answer_ID) DESC LIMIT 1;
SELECT va.Valid_Answer_Text FROM Valid_Answers va JOIN (SELECT Valid_Answer_ID, COUNT(*) AS Count FROM Student_Assessments GROUP BY Valid_Answer_ID ORDER BY Count DESC LIMIT 1) sa ON va.Valid_Answer_ID = sa.Valid_Answer_ID;
SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU!= 'M' ORDER BY s.Last_Name;
SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU!= 'M' ORDER BY s.Last_Name;
SELECT s.Gender_MFU, COUNT(s.Student_ID) AS Number_Of_Students FROM Students s GROUP BY s.Gender_MFU ORDER BY Number_Of_Students DESC;
SELECT s.Gender_MFU AS Gender, COUNT(s.Student_ID) AS Number_of_Students FROM Students s GROUP BY s.Gender_MFU ORDER BY s.Gender_MFU;
SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU IN ('F', 'M') ORDER BY s.Last_Name;
SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU IN ('F', 'M') ORDER BY s.Last_Name;
SELECT s.First_Name FROM Students s WHERE s.Student_ID NOT IN (SELECT sa.Student_ID FROM Student_Answers sa);
SELECT s.First_Name FROM Students s WHERE s.Student_ID NOT IN (SELECT sa.Student_ID FROM Student_Answers sa);
SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE sa.Comments ilike '%Normal%' AND sa.Comments ilike '%Absent%';
SELECT sa.Student_Answer_Text FROM Student_Answers sa WHERE LOWER(sa.Comments) IN ('normal', 'absent') GROUP BY sa.Student_Answer_Text HAVING COUNT(DISTINCT sa.Comments) = 2;
SELECT q.Type_of_Question_Code FROM Questions q GROUP BY q.Type_of_Question_Code HAVING COUNT(q.Question_ID) >= 3 ORDER BY q.Type_of_Question_Code;
SELECT q.Type_of_Question_Code FROM Questions q GROUP BY q.Type_of_Question_Code HAVING COUNT(q.Question_ID) >= 3 ORDER BY q.Type_of_Question_Code;
SELECT * FROM Students;
SELECT s.Student_ID, s.First_Name, s.Middle_Name, s.Last_Name, s.Gender_MFU, s.Student_Address, s.Email_Adress, s.Cell_Mobile_Phone, s.Home_Phone FROM Students s ORDER BY s.Student_ID;
SELECT COUNT(*) FROM Addresses;
SELECT COUNT(*) FROM Addresses;
SELECT a.address_id, a.address_details FROM Addresses a ORDER BY a.address_id NULLS LAST;
SELECT a.address_id, a.address_details FROM Addresses a ORDER BY a.address_id;
SELECT COUNT(*) FROM Products;
SELECT COUNT(*) FROM Products;
SELECT p.product_id, p.product_type_code, p.product_name FROM Products p ORDER BY p.product_id NULLS LAST;
SELECT p.product_id, p.product_type_code, p.product_name FROM Products p ORDER BY p.product_id NULLS LAST;
SELECT p.product_price FROM Products p WHERE LOWER(p.product_name) ='monitor';
SELECT p.product_price FROM Products p WHERE LOWER(p.product_name) ='monitor';
SELECT MIN(p.product_price) AS min_price, AVG(p.product_price) AS avg_price, MAX(p.product_price) AS max_price FROM Products p
SELECT MIN(p.product_price) AS min_price, AVG(p.product_price) AS avg_price, MAX(p.product_price) AS max_price FROM Products p;
SELECT AVG(p.product_price) AS average_product_price FROM Products p WHERE LOWER(p.product_type_code) = 'clothes';
SELECT AVG(p.product_price) AS average_price FROM Products p WHERE LOWER(p.product_type_code) = 'clothes';
SELECT COUNT(*) FROM Products p WHERE LOWER(p.product_type_code) = 'hardware';
SELECT COUNT(p.product_id) FROM Products p WHERE LOWER(p.product_type_code) = 'hardware';
SELECT p.product_name FROM Products p WHERE p.product_price > (SELECT AVG(product_price) FROM Products);
SELECT p.product_name FROM Products p WHERE p.product_price > (SELECT AVG(product_price) FROM Products);
SELECT p.product_name FROM Products p WHERE p.product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware') ORDER BY p.product_price DESC;
SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' AND p.product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware') ORDER BY p.product_name;
SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Clothes' ORDER BY p.product_price DESC LIMIT 1;
SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Clothes' ORDER BY p.product_price DESC LIMIT 1;
SELECT p.product_id, p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC LIMIT 1;
SELECT p.product_id, p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC LIMIT 1;
SELECT p.product_name, p.product_price FROM Products p ORDER BY p.product_price DESC;
SELECT p.product_name FROM Products p ORDER BY p.product_price DESC;
SELECT p.product_name, p.product_price FROM Products p WHERE p.product_type_code = 'hardware' ORDER BY p.product_price ASC;
SELECT p.product_name FROM Products p WHERE p.product_type_code = 'Hardware' ORDER BY p.product_price ASC;
SELECT p.product_type_code, COUNT(p.product_id) AS total_products FROM Products p GROUP BY p.product_type_code ORDER BY total_products DESC;
SELECT p.product_type_code, COUNT(p.product_id) AS number_of_products FROM Products p GROUP BY p.product_type_code ORDER BY number_of_products DESC NULLS LAST;
SELECT p.product_type_code, AVG(p.product_price) AS average_price FROM Products p GROUP BY p.product_type_code ORDER BY p.product_type_code;
SELECT p.product_type_code, AVG(p.product_price) AS average_product_price FROM Products p GROUP BY p.product_type_code ORDER BY p.product_type_code;
SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) >= 2 ORDER BY p.product_type_code;
SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code HAVING COUNT(p.product_id) >= 2 ORDER BY p.product_type_code;
SELECT p.product_type_code, COUNT(p.product_id) AS product_count FROM Products p GROUP BY p.product_type_code ORDER BY product_count DESC LIMIT 1;
SELECT p.product_type_code, COUNT(p.product_type_code) AS frequency FROM Products p GROUP BY p.product_type_code ORDER BY frequency DESC LIMIT 1;
SELECT COUNT(*) FROM Customers;
SELECT COUNT(*) FROM Customers;
SELECT c.customer_id, c.customer_name FROM Customers c ORDER BY c.customer_id NULLS LAST;
SELECT c.customer_id, c.customer_name FROM Customers c ORDER BY c.customer_id NULLS LAST;
SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE LOWER(c.customer_name) = 'jeromy';
SELECT c.customer_address, c.customer_phone, c.customer_email FROM Customers c WHERE LOWER(c.customer_name) = 'jeromy'
SELECT c.payment_method_code, COUNT(c.customer_id) AS customer_count FROM Customers c GROUP BY c.payment_method_code ORDER BY customer_count DESC NULLS LAST;
SELECT c.payment_method_code, COUNT(c.customer_id) AS number_of_customers FROM Customers c GROUP BY c.payment_method_code ORDER BY number_of_customers DESC;
SELECT c.payment_method_code, COUNT(c.customer_id) AS customer_count FROM Customers c GROUP BY c.payment_method_code ORDER BY customer_count DESC LIMIT 1;
SELECT c.payment_method_code FROM Customers c GROUP BY c.payment_method_code ORDER BY COUNT(c.customer_id) DESC LIMIT 1;
SELECT c.customer_name, COUNT(c.payment_method_code) AS count_customers FROM Customers c GROUP BY c.payment_method_code ORDER BY count_customers ASC LIMIT 1
SELECT c.customer_name FROM Customers c JOIN (SELECT payment_method_code, COUNT(*) AS count FROM Customers GROUP BY payment_method_code ORDER BY count ASC LIMIT 1) p ON c.payment_method_code = p.payment_method_code;
SELECT c.payment_method_code, c.customer_number FROM Customers c WHERE LOWER(c.customer_name) = 'jeromy';
SELECT c.payment_method_code, c.customer_number FROM Customers c WHERE LOWER(c.customer_name) = 'jeromy'
SELECT DISTINCT c.payment_method_code FROM Customers c ORDER BY c.payment_method_code;
SELECT DISTINCT c.payment_method_code FROM Customers c ORDER BY c.payment_method_code;
SELECT p.product_id, p.product_type_code FROM Products p ORDER BY p.product_name;
SELECT p.product_id, p.product_type_code FROM Products p ORDER BY p.product_name ASC;
SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_id) ASC LIMIT 1;
SELECT p.product_type_code FROM Products p GROUP BY p.product_type_code ORDER BY COUNT(p.product_id) ASC LIMIT 1;
SELECT COUNT(*) FROM Customer_Orders;
SELECT COUNT(*) FROM Customer_Orders co;
SELECT co.order_id, co.order_date, co.order_status_code FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id WHERE LOWER(c.customer_name) = 'jeromy';
SELECT co.order_id, co.order_date, co.order_status_code FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id WHERE LOWER(c.customer_name) = 'jeromy';
SELECT c.customer_name, c.customer_id, COUNT(co.order_id) AS order_count FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_name, c.customer_id ORDER BY order_count DESC NULLS LAST;
SELECT c.customer_name, c.customer_id, COUNT(o.order_id) AS order_count FROM Customers c JOIN Customer_Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name, c.customer_id ORDER BY order_count DESC NULLS LAST;
SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id GROUP BY c.customer_id, c.customer_name, c.customer_phone, c.customer_email ORDER BY COUNT(co.order_id) DESC LIMIT 1;
SELECT c.customer_id, c.customer_name, c.customer_phone, c.customer_email FROM Customers c JOIN (SELECT co.customer_id, COUNT(co.order_id) AS order_count FROM Customer_Orders co GROUP BY co.customer_id ORDER BY order_count DESC LIMIT 1) o ON c.customer_id = o.customer_id;
SELECT co.order_status_code, COUNT(co.order_id) AS total_orders FROM Customer_Orders co GROUP BY co.order_status_code ORDER BY total_orders DESC;
SELECT oc.order_status_code, COUNT(*) AS number_of_orders FROM Customer_Orders oc GROUP BY oc.order_status_code ORDER BY number_of_orders DESC;
SELECT oc.order_status_code, COUNT(*) AS count FROM Customer_Orders oc GROUP BY oc.order_status_code ORDER BY count DESC LIMIT 1;
SELECT co.order_status_code, COUNT(*) AS frequency FROM Customer_Orders co GROUP BY co.order_status_code ORDER BY frequency DESC LIMIT 1;
SELECT COUNT(DISTINCT c.customer_id) FROM Customers c LEFT JOIN Customer_Orders co ON c.customer_id = co.customer_id WHERE co.customer_id IS NULL;
SELECT COUNT(DISTINCT c.customer_id) FROM Customers c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM Customer_Orders co);
SELECT p.product_name FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi)
SELECT p.product_name FROM Products p WHERE p.product_id NOT IN (SELECT oi.product_id FROM Order_Items oi) ORDER BY p.product_name;
SELECT COUNT(*) AS total_monitor_orders FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE LOWER(p.product_name) ='monitor';
SELECT SUM(CAST(o.order_quantity AS INTEGER)) AS total_monitor_orders FROM Order_Items o JOIN Products p ON o.product_id = p.product_id WHERE LOWER(p.product_name) LIKE '%monitor%';
SELECT COUNT(DISTINCT c.customer_id) FROM Customer_Orders co JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id JOIN Customers c ON co.customer_id = c.customer_id WHERE LOWER(p.product_name) ='monitor';
SELECT COUNT(DISTINCT c.customer_id) FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE LOWER(p.product_name) LIKE '%monitor%'
SELECT COUNT(DISTINCT co.customer_id) FROM Customer_Orders co;
SELECT COUNT(DISTINCT co.customer_id) FROM Customer_Orders co;
SELECT c.customer_id FROM Customers c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM Customer_Orders co)
SELECT c.customer_id FROM Customers c WHERE c.customer_id NOT IN (SELECT co.customer_id FROM Customer_Orders co) ORDER BY c.customer_id;
SELECT co.order_date, co.order_id FROM Customer_Orders co JOIN Order_Items oi ON co.order_id = oi.order_id WHERE (oi.order_quantity::INTEGER > 6 OR (SELECT COUNT(*) FROM Order_Items o2 WHERE o2.order_id = co.order_id) > 3);
SELECT co.order_id, co.order_date FROM Customer_Orders co JOIN Order_Items oi ON co.order_id = oi.order_id WHERE (oi.order_quantity::INTEGER > 6 OR (SELECT COUNT(*) FROM Order_Items o2 WHERE o2.order_id = co.order_id) > 3);
SELECT COUNT(*) FROM building;
SELECT COUNT(*) FROM building;
SELECT b.name FROM building b ORDER BY b.number_of_stories ASC;
SELECT b.name, b.number_of_stories FROM building b ORDER BY b.number_of_stories ASC;
SELECT b.address FROM building b ORDER BY b.completed_year DESC;
SELECT b.address FROM building b ORDER BY b.completed_year DESC;
SELECT MAX(b.Number_of_Stories) FROM building b WHERE b.Completed_Year!= 1980;
SELECT MAX(b.Number_of_Stories) FROM building b WHERE b.Completed_Year!= 1980;
SELECT AVG(r.Population) AS Average_Population FROM region r;
SELECT AVG(r.Population) AS Average_Population FROM region r;
SELECT r.name FROM region r ORDER BY r.name ASC;
SELECT r.name FROM region r ORDER BY r.name ASC;
SELECT r.capital FROM region r WHERE r.area > 10000;
SELECT r.capital FROM region r WHERE r.area > 10000;
SELECT r.capital FROM region r WHERE r.population = (SELECT MAX(r2.population) FROM region r2);
SELECT r.name AS region_name, r.capital FROM region r WHERE r.population = (SELECT MAX(r2.population) FROM region r2);
SELECT r.name FROM region r ORDER BY r.area DESC NULLS LAST LIMIT 5;
SELECT r.name FROM region r ORDER BY r.area DESC NULLS LAST LIMIT 5;
SELECT b.name AS building_name, r.name AS region_name FROM building b JOIN region r ON b.region_id = r.region_id;
SELECT b.Name AS Building_Name, r.Name AS Region_Name FROM building b JOIN region r ON b.Region_ID = r.Region_ID;
SELECT r.Name FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Name HAVING COUNT(b.Building_ID) > 1 ORDER BY r.Name NULLS LAST;
SELECT r.Name FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Name HAVING COUNT(b.Building_ID) > 1 ORDER BY r.Name NULLS LAST;
SELECT r.Capital FROM region r JOIN (SELECT b.Region_ID, COUNT(b.Building_ID) AS Building_Count FROM building b GROUP BY b.Region_ID ORDER BY Building_Count DESC LIMIT 1) AS bc ON r.Region_ID = bc.Region_ID;
SELECT r.Name AS Region, r.Capital FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Name, r.Capital ORDER BY COUNT(b.Building_ID) DESC LIMIT 1;
SELECT b.address, r.capital FROM building b JOIN region r ON b.region_id = r.region_id;
SELECT b.address, r.name AS region_name FROM building b JOIN region r ON b.region_id = r.region_id;
SELECT SUM(b.Number_of_Stories) AS total_number_of_stories FROM building b JOIN region r ON b.Region_ID = r.Region_ID WHERE LOWER(r.Name) = 'abruzzo';
SELECT b.name AS building_name, b.number_of_stories FROM building b JOIN region r ON b.region_id = r.region_id WHERE LOWER(r.name) = 'abruzzo' ORDER BY b.name NULLS LAST;
SELECT b.Completed_Year, COUNT(b.Building_ID) AS NumberOfBuildings FROM building b GROUP BY b.Completed_Year ORDER BY b.Completed_Year NULLS LAST;
SELECT b.Completed_Year, COUNT(b.Building_ID) AS NumberOfBuildings FROM building b GROUP BY b.Completed_Year ORDER BY b.Completed_Year NULLS LAST;
SELECT b.Completed_Year, COUNT(b.Completed_Year) AS number_of_buildings FROM building b GROUP BY b.Completed_Year ORDER BY number_of_buildings DESC LIMIT 1;
SELECT b.Completed_Year, COUNT(b.Completed_Year) AS number_of_buildings FROM building b GROUP BY b.Completed_Year ORDER BY number_of_buildings DESC LIMIT 1;
SELECT r.Name FROM region r WHERE NOT EXISTS (SELECT 1 FROM building b WHERE b.Region_ID = r.Region_ID)
SELECT r.Name FROM region r WHERE NOT EXISTS (SELECT 1 FROM building b WHERE b.Region_ID = r.Region_ID)
SELECT b.Completed_Year FROM building b WHERE b.Number_of_Stories > 20 AND b.Number_of_Stories < 15 ORDER BY b.Completed_Year NULLS LAST;
SELECT DISTINCT b.Completed_Year FROM building b WHERE (b.Number_of_Stories > 20 OR b.Number_of_Stories < 15) ORDER BY b.Completed_Year NULLS LAST;
SELECT DISTINCT b.Address FROM building b ORDER BY b.Address NULLS LAST;
SELECT DISTINCT b.Address FROM building b ORDER BY b.Address NULLS LAST;
SELECT b.Completed_Year, b.Number_of_Stories FROM building b ORDER BY b.Number_of_Stories DESC;
SELECT b.name, b.completed_year FROM building b ORDER BY b.number_of_stories DESC;
SELECT c.Channel_Details FROM Channels c ORDER BY c.Channel_Details ASC;
SELECT c.Channel_Details FROM Channels c ORDER BY c.Channel_Details ASC;
SELECT COUNT(*) FROM Services;
SELECT COUNT(*) FROM Services;
SELECT al.Analytical_Layer_Type_Code, COUNT(*) AS Count FROM Analytical_Layer al GROUP BY al.Analytical_Layer_Type_Code ORDER BY Count DESC LIMIT 1;
SELECT al.Analytical_Layer_Type_Code, COUNT(*) AS frequency FROM Analytical_Layer al GROUP BY al.Analytical_Layer_Type_Code ORDER BY frequency DESC LIMIT 1;
SELECT s.Service_ID FROM Customers c JOIN Customers_and_Services cas ON c.Customer_ID = cas.Customer_ID JOIN Services s ON cas.Service_ID = s.Service_ID WHERE LOWER(c.Customer_Details) = 'hardy kutch';
SELECT s.Service_Details FROM Customers c JOIN Customers_and_Services cas ON c.Customer_ID = cas.Customer_ID JOIN Services s ON cas.Service_ID = s.Service_ID WHERE LOWER(c.Customer_Details) = 'hardy kutch';
SELECT s.Service_ID, s.Service_Details FROM Services s JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID GROUP BY s.Service_ID, s.Service_Details HAVING COUNT(ci.Customer_Interaction_ID) > 3 ORDER BY s.Service_ID;
SELECT s.Service_Details FROM Customers_and_Services cas JOIN Services s ON cas.Service_ID = s.Service_ID GROUP BY s.Service_Details HAVING COUNT(cas.Customers_and_Services_ID) > 3
SELECT c.Customer_Details, COUNT(cs.Customers_and_Services_ID) AS service_count FROM Customers_and_Services cs JOIN Customers c ON cs.Customer_ID = c.Customer_ID GROUP BY c.Customer_Details ORDER BY service_count DESC LIMIT 1;
SELECT c.Customer_Details, COUNT(cs.Customers_and_Services_ID) AS service_count FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID GROUP BY c.Customer_Details ORDER BY service_count DESC LIMIT 1;
SELECT c.Customer_Details FROM Customers c JOIN (SELECT ca.Customer_ID, COUNT(DISTINCT ca.Service_ID) AS service_count FROM Customers_and_Services ca GROUP BY ca.Customer_ID ORDER BY service_count DESC LIMIT 1) AS sc ON c.Customer_ID = sc.Customer_ID;
SELECT c.Customer_Details, COUNT(DISTINCT cs.Service_ID) AS service_count FROM Customers_and_Services cs JOIN Customers c ON cs.Customer_ID = c.Customer_ID GROUP BY c.Customer_Details ORDER BY service_count DESC LIMIT 1;
SELECT c.Customer_Details FROM Customers c WHERE c.Customer_ID NOT IN (SELECT cs.Customer_ID FROM Customers_and_Services cs);
SELECT c.Customer_Details FROM Customers c WHERE c.Customer_ID NOT IN (SELECT cs.Customer_ID FROM Customers_and_Services cs);
SELECT c.Customer_Details, s.Service_Details FROM Customers c JOIN Customers_and_Services cs ON c.Customer_ID = cs.Customer_ID JOIN Services s ON cs.Service_ID = s.Service_ID WHERE s.Service_ID IN (SELECT Service_ID FROM Services ORDER BY COUNT(cs.Customers_and_Services_ID) ASC LIMIT 1);
SELECT DISTINCT c.Customer_Details FROM Customers c JOIN Customers_and_Services cas ON c.Customer_ID = cas.Customer_ID ORDER BY COUNT(cas.Service_ID) ASC LIMIT 1;
SELECT COUNT(DISTINCT c.Customer_Details), COUNT(DISTINCT s.Service_Details) FROM Customers c CROSS JOIN Services s;
SELECT COUNT(DISTINCT c.Customer_ID), COUNT(DISTINCT s.Service_ID) FROM Customers c CROSS JOIN Services s;
SELECT c.Customer_ID FROM Customers c WHERE c.Customer_Details ilike '%Kutch%';
SELECT c.Customer_Details FROM Customers c WHERE c.Customer_Details LIKE '%Kutch%';
SELECT s.Service_Details FROM Services s JOIN Customers_and_Services cas ON s.Service_ID = cas.Service_ID WHERE cas.Customer_ID IN (SELECT c.Customer_ID FROM Customers c WHERE LOWER(c.Customer_Details) = 'hardy kutch') OR EXISTS (SELECT 1 FROM Customer_Interactions ci JOIN Integration_Platform ip ON ci.Customer_Interaction_ID = ip.Customer_Interaction_ID WHERE LOWER(ci.Status_Code) = 'good' AND ci.Service_ID = s.Service_ID);
SELECT s.Service_Details FROM Customers c JOIN Customers_and_Services cas ON c.Customer_ID = cas.Customer_ID JOIN Services s ON cas.Service_ID = s.Service_ID WHERE LOWER(c.Customer_Details) = 'hardy kutch' UNION SELECT s.Service_Details FROM Customer_Interactions ci JOIN Services s ON ci.Service_ID = s.Service_ID WHERE LOWER(ci.Status_Code) = 'good' ORDER BY s.Service_Details;
SELECT s.Service_Details FROM Customers_and_Services cas JOIN Services s ON cas.Service_ID = s.Service_ID JOIN Customer_Interactions ci ON cas.Customer_ID = ci.Customer_ID WHERE LOWER(cas.Customers_and_Services_Details) LIKE '%Hardy%Kutch%' AND LOWER(ci.Status_Code) = 'bad';
SELECT s.Service_Details FROM Customers_and_Services cas JOIN Services s ON cas.Service_ID = s.Service_ID WHERE cas.Customer_ID IN (SELECT c.Customer_ID FROM Customers c WHERE LOWER(c.Customer_Details) = 'hardy kutch') AND EXISTS (SELECT 1 FROM Customer_Interactions ci WHERE ci.Status_Code = 'bad' AND ci.Service_ID = s.Service_ID);
SELECT s.Service_Details FROM Services s JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID WHERE LOWER(ci.Status_Code) LIKE '%15 ij%' ORDER BY s.Service_Details;
SELECT s.Service_Details FROM Services s JOIN Customer_Interactions ci ON s.Service_ID = ci.Service_ID WHERE LOWER(ci.Status_Code) = '15 ij';
SELECT c.Customer_Details FROM Customer_Interactions ci JOIN Customers c ON ci.Customer_ID = c.Customer_ID WHERE LOWER(ci.Status_Code) ='stuck' AND LOWER(ci.Services_and_Channels_Details) LIKE '%bad%';
SELECT c.Customer_Details FROM Customer_Interactions ci JOIN Customers c ON ci.Customer_ID = c.Customer_ID WHERE LOWER(ci.Status_Code) ='stuck' AND LOWER(ci.Services_and_Channels_Details) LIKE '%bad%'
SELECT COUNT(*) AS Successful_Integration_Platforms FROM Integration_Platform ip JOIN Customer_Interactions ci ON ip.Customer_Interaction_ID = ci.Customer_Interaction_ID WHERE LOWER(ip.Integration_Platform_Details) LIKE '%successful%' OR LOWER(ip.Integration_Platform_Details) LIKE '%successfull%';
SELECT COUNT(*) FROM Integration_Platform ip WHERE LOWER(ip.Integration_Platform_Details) LIKE '%success%';
SELECT c.Customer_Details FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID JOIN Integration_Platform ip ON ci.Customer_Interaction_ID = ip.Customer_Interaction_ID WHERE LOWER(ip.Integration_Platform_Details) LIKE '%failed%' ORDER BY c.Customer_Details;
SELECT c.Customer_Details FROM Customers c JOIN Customer_Interactions ci ON c.Customer_ID = ci.Customer_ID JOIN Integration_Platform ip ON ci.Customer_Interaction_ID = ip.Customer_Interaction_ID WHERE LOWER(ip.Integration_Platform_Details) = 'fail'
SELECT s.Service_ID, s.Service_Details FROM Services s WHERE s.Service_ID NOT IN (SELECT cands.Service_ID FROM Customers_and_Services cands);
SELECT s.Service_Details FROM Services s WHERE s.Service_ID NOT IN (SELECT c.Service_ID FROM Customers_and_Services c);
SELECT al.Analytical_Layer_Type_Code, COUNT(*) AS Usage_Count FROM Analytical_Layer al GROUP BY al.Analytical_Layer_Type_Code ORDER BY Usage_Count DESC;
SELECT al.Analytical_Layer_Type_Code, COUNT(al.Analytical_ID) AS usage_count FROM Analytical_Layer al GROUP BY al.Analytical_Layer_Type_Code ORDER BY usage_count DESC;
SELECT s.Service_Details FROM Customers_and_Services cs JOIN Services s ON cs.Service_ID = s.Service_ID WHERE LOWER(cs.Customers_and_Services_Details) LIKE '%unsatisfied%' ORDER BY s.Service_Details;
SELECT s.Service_Details FROM Customers_and_Services cs JOIN Services s ON cs.Service_ID = s.Service_ID WHERE LOWER(cs.Customers_and_Services_Details) LIKE '%unsatisfied%'
SELECT COUNT(*) FROM Vehicles;
SELECT COUNT(*) FROM Vehicles;
SELECT v.name FROM Vehicles v ORDER BY v.model_year DESC;
SELECT v.name FROM Vehicles v ORDER BY v.Model_year DESC;
SELECT DISTINCT v.Type_of_powertrain FROM Vehicles v ORDER BY v.Type_of_powertrain NULLS LAST;
SELECT DISTINCT Type_of_powertrain FROM Vehicles ORDER BY Type_of_powertrain NULLS LAST;
SELECT v.name, v.type_of_powertrain, v.annual_fuel_cost FROM Vehicles v WHERE v.model_year = 2013 OR v.model_year = 2014 ORDER BY v.name NULLS LAST;
SELECT v.name AS vehicle_name, v.type_of_powertrain, v.annual_fuel_cost FROM Vehicles v WHERE v.model_year IN (2013, 2014) ORDER BY v.name NULLS LAST;
SELECT v.type_of_powertrain FROM Vehicles v WHERE v.model_year IN (2014, 2013) GROUP BY v.type_of_powertrain HAVING COUNT(DISTINCT CASE WHEN v.model_year = 2014 THEN v.id END) > 0 AND COUNT(DISTINCT CASE WHEN v.model_year = 2013 THEN v.id END) > 0 ORDER BY v.type_of_powertrain NULLS LAST;
SELECT DISTINCT v.type_of_powertrain FROM Vehicles v WHERE v.model_year IN (2013, 2014) ORDER BY v.type_of_powertrain NULLS LAST;
SELECT v.type_of_powertrain, COUNT(v.id) AS number_of_vehicles FROM Vehicles v GROUP BY v.type_of_powertrain ORDER BY number_of_vehicles DESC NULLS LAST;
SELECT v.type_of_powertrain, COUNT(v.id) AS number_of_vehicles FROM Vehicles v GROUP BY v.type_of_powertrain ORDER BY number_of_vehicles DESC NULLS LAST;
SELECT v.type_of_powertrain FROM Vehicles v GROUP BY v.type_of_powertrain ORDER BY COUNT(v.id) DESC LIMIT 1;
SELECT v.type_of_powertrain, COUNT(v.id) AS count FROM Vehicles v GROUP BY v.type_of_powertrain ORDER BY count DESC LIMIT 1;
SELECT MIN(v.Annual_fuel_cost) AS min_annual_fuel_cost, MAX(v.Annual_fuel_cost) AS max_annual_fuel_cost, AVG(v.Annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles v;
SELECT MIN(v.Annual_fuel_cost) AS min_annual_fuel_cost, MAX(v.Annual_fuel_cost) AS max_annual_fuel_cost, AVG(v.Annual_fuel_cost) AS avg_annual_fuel_cost FROM Vehicles v;
SELECT v.name, v.model_year FROM Vehicles v WHERE v.city_fuel_economy_rate <= v.highway_fuel_economy_rate ORDER BY v.name NULLS LAST;
SELECT v.name, v.model_year FROM Vehicles v WHERE v.city_fuel_economy_rate <= v.highway_fuel_economy_rate ORDER BY v.name NULLS LAST;
SELECT v.type_of_powertrain, AVG(v.annual_fuel_cost) AS average_annual_fuel_cost FROM Vehicles v GROUP BY v.type_of_powertrain HAVING COUNT(v.id) >= 2 ORDER BY average_annual_fuel_cost NULLS LAST;
SELECT v.type_of_powertrain, AVG(v.annual_fuel_cost) AS average_annual_fuel_cost FROM Vehicles v GROUP BY v.type_of_powertrain HAVING COUNT(v.id) >= 2 ORDER BY average_annual_fuel_cost NULLS LAST;
SELECT c.name, c.age, c.membership_credit FROM Customers c ORDER BY c.id NULLS LAST;
SELECT c.name, c.age, c.membership_credit FROM Customers c ORDER BY c.id NULLS LAST;
SELECT c.name, c.age FROM Customers c WHERE c.membership_credit = (SELECT MAX(membership_credit) FROM Customers);
SELECT c.name, c.age FROM Customers c ORDER BY c.membership_credit DESC NULLS LAST LIMIT 1;
SELECT AVG(c.age) AS average_age FROM Customers c WHERE c.membership_credit > (SELECT AVG(membership_credit) FROM Customers);
SELECT AVG(c.age) AS average_age FROM Customers c WHERE c.membership_credit > (SELECT AVG(membership_credit) FROM Customers);
SELECT d.id, d.name, d.membership_credit FROM Discount d ORDER BY d.id NULLS LAST;
SELECT d.id, d.name, d.membership_credit FROM Discount d ORDER BY d.id NULLS LAST;
SELECT v.name AS vehicle_name, SUM(rh.total_hours) AS total_rental_hours FROM Renting_history rh JOIN Vehicles v ON rh.vehicles_id = v.id GROUP BY v.name ORDER BY total_rental_hours DESC NULLS LAST;
SELECT v.name AS vehicle_name, SUM(rh.total_hours) AS total_rental_hours FROM Renting_history rh JOIN Vehicles v ON rh.vehicles_id = v.id GROUP BY v.name ORDER BY total_rental_hours DESC NULLS LAST;
SELECT v.name FROM Vehicles v WHERE v.id NOT IN (SELECT rh.vehicles_id FROM Renting_history rh)
SELECT v.name FROM Vehicles v WHERE v.id NOT IN (SELECT rh.vehicles_id FROM Renting_history rh) ORDER BY v.name NULLS LAST;
SELECT c.name FROM Customers c JOIN Renting_history rh ON c.id = rh.customer_id GROUP BY c.name HAVING COUNT(rh.id) >= 2;
SELECT c.name FROM Customers c JOIN Renting_history rh ON c.id = rh.customer_id GROUP BY c.name HAVING COUNT(rh.id) >= 2;
SELECT v.name, v.model_year FROM Vehicles v JOIN Renting_history rh ON v.id = rh.vehicles_id GROUP BY v.name, v.model_year ORDER BY COUNT(rh.id) DESC LIMIT 1;
SELECT v.name, v.model_year FROM Vehicles v JOIN Renting_history rh ON v.id = rh.vehicles_id GROUP BY v.name, v.model_year ORDER BY COUNT(rh.id) DESC LIMIT 1;
SELECT v.name, SUM(rh.total_hours) AS total_rental_hours FROM Renting_history rh JOIN Vehicles v ON rh.vehicles_id = v.id GROUP BY v.name ORDER BY total_rental_hours DESC;
SELECT v.name, SUM(rh.total_hours) AS total_rental_hours FROM Renting_history rh JOIN Vehicles v ON rh.vehicles_id = v.id GROUP BY v.name ORDER BY total_rental_hours DESC;
SELECT d.name, COUNT(rh.id) AS total_rentals FROM Renting_history rh JOIN Discount d ON rh.discount_id = d.id GROUP BY d.name ORDER BY total_rentals DESC LIMIT 1;
SELECT d.name FROM Discount d JOIN Renting_history r ON d.id = r.discount_id GROUP BY d.name ORDER BY COUNT(r.id) DESC LIMIT 1;
SELECT v.name AS vehicle_name, v.type_of_powertrain FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id WHERE r.total_hours > 30;
SELECT v.name AS vehicle_name, v.type_of_powertrain FROM Vehicles v JOIN Renting_history r ON v.id = r.vehicles_id WHERE r.total_hours > 30 ORDER BY v.name NULLS LAST;
SELECT v.type_of_powertrain, AVG(v.city_fuel_economy_rate) AS avg_city_fuel_rate, AVG(v.highway_fuel_economy_rate) AS avg_highway_fuel_rate FROM Vehicles v GROUP BY v.type_of_powertrain ORDER BY v.type_of_powertrain NULLS LAST;
SELECT v.type_of_powertrain, AVG(v.city_fuel_economy_rate) AS avg_city_fuel_economy_rate, AVG(v.highway_fuel_economy_rate) AS avg_highway_fuel_economy_rate FROM Vehicles v GROUP BY v.type_of_powertrain ORDER BY v.type_of_powertrain NULLS LAST;
SELECT AVG(sl.amount_of_loan) AS average_amount FROM Student_Loans sl;
SELECT AVG(sl.amount_of_loan) AS average_amount_of_loan FROM Student_Loans sl;
SELECT s.student_id, s.bio_data FROM Students s JOIN Classes c ON s.student_id = c.student_id WHERE (SELECT COUNT(*) FROM Classes WHERE student_id = s.student_id) >= 2 AND (SELECT COUNT(*) FROM Detention WHERE student_id = s.student_id) < 2;
SELECT s.student_id, s.bio_data FROM Students s JOIN Classes c ON s.student_id = c.student_id WHERE (SELECT COUNT(*) FROM Classes WHERE student_id = s.student_id) >= 2 UNION SELECT d.student_id, d.detention_summary AS bio_data FROM Detention d GROUP BY d.student_id HAVING COUNT(d.detention_id) < 2;
SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.class_details ilike '%data%' AND c.class_details not ilike 'net%';
SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.class_details ilike '%data%' AND c.class_details not ilike 'net%';
SELECT s.bio_data FROM Students s LEFT JOIN Detention d ON s.student_id = d.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE d.detention_id IS NULL AND sl.student_loan_id IS NULL;
SELECT s.bio_data FROM Students s WHERE s.student_id NOT IN (SELECT d.student_id FROM Detention d UNION SELECT sl.student_id FROM Student_Loans sl);
SELECT sl.amount_of_loan, sl.date_of_loan FROM Student_Loans sl JOIN Students s ON sl.student_id = s.student_id WHERE s.student_id IN (SELECT a.student_id FROM Achievements a GROUP BY a.student_id HAVING COUNT(a.achievement_id) >= 2);
SELECT sl.amount_of_loan, sl.date_of_loan FROM Student_Loans sl JOIN Students s ON sl.student_id = s.student_id WHERE s.student_id IN (SELECT a.student_id FROM Achievements a GROUP BY a.student_id HAVING COUNT(a.achievement_id) >= 2);
SELECT t.teacher_details, COUNT(c.class_id) AS total_classes FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_details ORDER BY total_classes DESC LIMIT 1;
SELECT t.teacher_details, COUNT(c.class_id) AS total_classes FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_details ORDER BY total_classes DESC LIMIT 1;
SELECT DISTINCT d.detention_summary FROM Detention d ORDER BY d.detention_summary;
SELECT DISTINCT d.detention_summary FROM Detention d ORDER BY d.detention_summary;
SELECT s.student_details, rat.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Ref_Address_Types rat ON sa.address_type_code = rat.address_type_code
SELECT s.student_details, rat.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Ref_Address_Types rat ON sa.address_type_code = rat.address_type_code;
SELECT s.student_id, s.bio_data, sa.address_details FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id;
SELECT s.student_id, s.bio_data, sa.address_details FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id;
SELECT s.bio_data, t.date_of_transcript FROM Students AS s JOIN Transcripts AS t ON s.student_id = t.student_id
SELECT s.bio_data, t.date_of_transcript FROM Students AS s JOIN Transcripts AS t ON s.student_id = t.student_id;
SELECT COUNT(DISTINCT b.student_id), b.behaviour_monitoring_details FROM Behaviour_Monitoring b GROUP BY b.behaviour_monitoring_details ORDER BY COUNT(DISTINCT b.student_id) DESC LIMIT 1
SELECT b.behaviour_monitoring_details AS Most_Common_Result, COUNT(*) AS Count FROM Behaviour_Monitoring b GROUP BY b.behaviour_monitoring_details ORDER BY COUNT DESC LIMIT 1;
SELECT s.student_id, s.bio_data, s.student_details FROM Students s JOIN (SELECT t.student_id, COUNT(t.transcript_details) AS transcript_count FROM Transcripts t GROUP BY t.student_id ORDER BY transcript_count DESC LIMIT 1) AS m ON s.student_id = m.student_id JOIN (SELECT b.student_id, COUNT(b.behaviour_monitoring_details) AS behaviour_count FROM Behaviour_Monitoring b GROUP BY b.student_id HAVING COUNT(b.behaviour_monitoring_details) >= 3) AS n ON s.student_id = n.student_id;
SELECT s.student_id, s.bio_data, s.student_details FROM Students s JOIN (SELECT t.transcript_details, COUNT(*) AS count FROM Transcripts t GROUP BY t.transcript_details ORDER BY count DESC LIMIT 1) m ON s.student_id = m.transcript_details AND s.student_id IN (SELECT b.behaviour_monitoring_details FROM Behaviour_Monitoring b GROUP BY b.behaviour_monitoring_details HAVING COUNT(b.behaviour_monitoring_details) >= 3);
SELECT s.student_id, s.bio_data FROM Students s JOIN Behaviour_Monitoring b ON s.student_id = b.student_id WHERE b.behaviour_monitoring_details IN (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1);
SELECT s.bio_data FROM Students s JOIN Behaviour_Monitoring bm ON s.student_id = bm.student_id GROUP BY s.bio_data ORDER BY COUNT(bm.behaviour_monitoring_details) DESC LIMIT 1;
SELECT s.bio_data, se.event_date FROM Students s JOIN Student_Events se ON s.student_id = se.student_id
SELECT s.bio_data, se.event_date FROM Students s JOIN Student_Events se ON s.student_id = se.student_id
SELECT COUNT(DISTINCT se.student_id), et.event_type_description FROM Student_Events se JOIN Ref_Event_Types et ON se.event_type_code = et.event_type_code GROUP BY et.event_type_description ORDER BY COUNT(DISTINCT se.student_id) DESC LIMIT 1
SELECT se.event_type_code, COUNT(DISTINCT se.student_id) AS num_students FROM Student_Events se GROUP BY se.event_type_code ORDER BY num_students DESC LIMIT 1;
SELECT a.achievement_details, r.achievement_type_description FROM Achievements a JOIN Ref_Achievement_Type r ON a.achievement_type_code = r.achievement_type_code ORDER BY a.achievement_id;
SELECT a.achievement_details, r.achievement_type_description FROM Achievements a JOIN Ref_Achievement_Type r ON a.achievement_type_code = r.achievement_type_code ORDER BY a.achievement_id;
SELECT COUNT(DISTINCT t.teacher_id) FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.student_id NOT IN (SELECT a.student_id FROM Achievements a);
SELECT COUNT(DISTINCT t.teacher_id) FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id WHERE c.student_id NOT IN (SELECT a.student_id FROM Achievements a);
SELECT t.date_of_transcript, t.transcript_details FROM Transcripts t ORDER BY t.date_of_transcript DESC;
SELECT t.date_of_transcript, t.transcript_details FROM Transcripts t ORDER BY t.date_of_transcript;
SELECT a.achievement_type_code, a.achievement_details, a.date_achievement FROM Achievements a ORDER BY a.date_achievement DESC;
SELECT a.achievement_type_code, a.achievement_details, a.date_achievement FROM Achievements a ORDER BY a.date_achievement DESC;
SELECT d.datetime_detention_start, d.datetime_detention_end FROM Detention d ORDER BY d.detention_id;
SELECT d.datetime_detention_start AS start_time, d.datetime_detention_end AS end_time FROM Detention d ORDER BY d.detention_id;
SELECT s.student_id, s.bio_data FROM Students s WHERE s.student_details LIKE '%Suite%' ORDER BY s.student_id;
SELECT s.student_id, s.bio_data FROM Students s WHERE s.student_details LIKE '%Suite%' ORDER BY s.student_id;
SELECT t.teacher_details, s.student_details FROM Teachers AS t JOIN Classes AS c ON t.teacher_id = c.teacher_id JOIN Students AS s ON c.student_id = s.student_id;
SELECT t.teacher_details AS teacher, s.student_details AS student FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Students s ON c.student_id = s.student_id;
SELECT MAX(ta.class_count), ta.teacher_id FROM (SELECT c.teacher_id, COUNT(c.class_id) AS class_count FROM Classes c GROUP BY c.teacher_id) AS ta
SELECT t.teacher_id, COUNT(c.class_id) AS num_classes FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id GROUP BY t.teacher_id ORDER BY num_classes DESC LIMIT 1;
SELECT MAX(COUNT(c.class_id)) AS max_courses FROM Classes c GROUP BY c.student_id ORDER BY max_courses DESC LIMIT 1;
SELECT s.student_id, COUNT(c.class_id) AS num_classes FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id ORDER BY num_classes DESC LIMIT 1;
SELECT s.student_id, s.student_details FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.student_details HAVING COUNT(c.class_id) >= 2
SELECT s.student_id, s.student_details FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.student_details HAVING COUNT(c.class_id) >= 2;
SELECT dt.detention_type_code, dt.detention_type_description FROM Ref_Detention_Type dt ORDER BY COUNT(DISTINCT d.detention_id) ASC LIMIT 1;
SELECT dt.detention_type_code, dt.detention_type_description FROM Ref_Detention_Type dt ORDER BY COUNT(DISTINCT d.detention_id) ASC LIMIT 1;
SELECT s.student_id, s.bio_data, s.student_details, sl.amount_of_loan FROM Student_Loans sl JOIN Students s ON sl.student_id = s.student_id WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans);
SELECT s.student_id, s.bio_data, s.student_details FROM Student_Loans sl JOIN Students s ON sl.student_id = s.student_id WHERE sl.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans);
SELECT MIN(sl.date_of_loan) FROM Student_Loans sl;
SELECT MIN(sl.date_of_loan) FROM Student_Loans sl
SELECT s.student_id, s.bio_data FROM Student_Loans sl JOIN Students s ON sl.student_id = s.student_id ORDER BY sl.amount_of_loan ASC LIMIT 1;
SELECT s.bio_data FROM Student_Loans sl JOIN Students s ON sl.student_id = s.student_id ORDER BY sl.amount_of_loan ASC LIMIT 1;
SELECT t.date_of_transcript FROM Transcripts t JOIN Student_Loans sl ON t.student_id = sl.student_id WHERE sl.amount_of_loan = (SELECT MAX(sl2.amount_of_loan) FROM Student_Loans sl2);
SELECT t.date_of_transcript FROM Transcripts t JOIN Student_Loans sl ON t.student_id = sl.student_id ORDER BY sl.amount_of_loan DESC LIMIT 1;
SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Students s ON c.student_id = s.student_id JOIN Transcripts tr ON s.student_id = tr.student_id WHERE tr.date_of_transcript = (SELECT MIN(tr2.date_of_transcript) FROM Transcripts tr2);
SELECT t.teacher_details FROM Teachers t JOIN Classes c ON t.teacher_id = c.teacher_id JOIN Students s ON c.student_id = s.student_id JOIN Transcripts tr ON s.student_id = tr.student_id WHERE tr.date_of_transcript = (SELECT MIN(date_of_transcript) FROM Transcripts);
SELECT sl.student_id, SUM(sl.amount_of_loan) AS total_amount_of_loan FROM Student_Loans sl GROUP BY sl.student_id ORDER BY sl.student_id;
SELECT s.student_id, SUM(sl.amount_of_loan) AS total_amount_of_loan FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id GROUP BY s.student_id
SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS number_of_classes FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data
SELECT s.student_id, s.bio_data, COUNT(c.class_id) AS num_classes FROM Students s JOIN Classes c ON s.student_id = c.student_id GROUP BY s.student_id, s.bio_data
SELECT COUNT(DISTINCT d.student_id) FROM Detention d;
SELECT COUNT(DISTINCT d.student_id) FROM Detention d;
SELECT sat.address_type_code, COUNT(*) AS frequency FROM Students_Addresses sat GROUP BY sat.address_type_code ORDER BY frequency DESC LIMIT 1;
SELECT sat.address_type_code, rat.address_type_description FROM Students_Addresses sat JOIN Ref_Address_Types rat ON sat.address_type_code = rat.address_type_code GROUP BY sat.address_type_code, rat.address_type_description ORDER BY COUNT(sat.student_address_id) DESC LIMIT 1;
SELECT s.bio_data FROM Students s JOIN Student_Events se ON s.student_id = se.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.student_id IS NULL ORDER BY s.student_id;
SELECT s.bio_data FROM Students s JOIN Student_Events se ON s.student_id = se.student_id LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.student_id IS NULL ORDER BY s.student_id;
SELECT sa.date_from AS start_time, sa.date_to AS end_time FROM Students_Addresses sa JOIN Transcripts t ON sa.student_id = t.student_id GROUP BY sa.student_id, sa.date_from, sa.date_to HAVING COUNT(t.transcript_id) >= 2 ORDER BY sa.student_id;
SELECT sa.date_from AS start_time, sa.date_to AS end_time FROM Students_Addresses sa JOIN Students s ON sa.student_id = s.student_id WHERE s.student_id IN (SELECT t.student_id FROM Transcripts t GROUP BY t.student_id HAVING COUNT(t.transcript_id) >= 2);
SELECT MIN(d.datetime_detention_start) AS earliest_detention_start FROM Detention d;
SELECT d.datetime_detention_start FROM Detention d ORDER BY d.datetime_detention_start;
SELECT DISTINCT a.Name FROM Author a ORDER BY a.Name;
SELECT DISTINCT a.Name FROM Author a;
SELECT c.Name AS client_name, c.Address FROM Client c ORDER BY c.Name;
SELECT c.Name, c.Address FROM Client c ORDER BY c.Name;
SELECT b.title, b.isbn, b.saleprice FROM book b ORDER BY b.title;
SELECT b.title, b.isbn, b.saleprice FROM book b;
SELECT COUNT(*) FROM Book;
SELECT COUNT(*) FROM Book;
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Client;
SELECT COUNT(*) FROM Client;
SELECT c.Name, c.Address FROM Client c ORDER BY c.Name ASC;
SELECT c.Name, c.Address FROM Client c ORDER BY c.Name ASC;
SELECT b.title, a.name AS author_name FROM Book b JOIN Author_Book ab ON b.isbn = ab.isbn JOIN Author a ON ab.author = a.idauthor;
SELECT b.title AS book_title, a.name AS author_name FROM Book b JOIN Author_Book ab ON b.isbn = ab.isbn JOIN Author a ON ab.author = a.idauthor;
SELECT o.IdOrder, c.Name FROM Orders o JOIN Client c ON o.IdClient = c.IdClient;
SELECT o.IdOrder, c.Name FROM Orders o JOIN Client c ON o.IdClient = c.IdClient;
SELECT a.Name AS author_name, COUNT(ab.ISBN) AS number_of_books FROM Author a JOIN Author_Book ab ON a.idAuthor = ab.Author GROUP BY a.Name ORDER BY number_of_books DESC;
SELECT a.Name AS author_name, COUNT(b.ISBN) AS number_of_books FROM Author a JOIN Author_Book ab ON a.idAuthor = ab.Author JOIN Book b ON ab.ISBN = b.ISBN GROUP BY a.Name ORDER BY number_of_books DESC;
SELECT bo.ISBN, COUNT(*) AS num_orders FROM Books_Order bo GROUP BY bo.ISBN ORDER BY num_orders DESC;
SELECT b.isbn, COUNT(b.isbn) AS total_orders FROM Book b JOIN Books_Order bo ON b.isbn = bo.isbn GROUP BY b.isbn ORDER BY total_orders DESC;
SELECT bo.ISBN, SUM(bo.amount) AS total_amount FROM Books_Order bo GROUP BY bo.ISBN ORDER BY total_amount DESC;
SELECT b.isbn, SUM(p.amount) AS total_amount_ordered FROM book b JOIN books_order p ON b.isbn = p.isbn GROUP BY b.isbn ORDER BY total_amount_ordered DESC;
SELECT b.title FROM book b JOIN (SELECT bo.isbn, COUNT(*) AS num_orders FROM books_order bo GROUP BY bo.isbn ORDER BY num_orders DESC LIMIT 1) o ON b.isbn = o.isbn;
SELECT b.title FROM Book b JOIN (SELECT bo.isbn, COUNT(*) AS total_orders FROM Books_Order bo GROUP BY bo.isbn ORDER BY total_orders DESC LIMIT 1) o ON b.isbn = o.isbn;
SELECT b.title, b.purchaseprice FROM book b JOIN (SELECT bo.isbn, COUNT(*) AS total_orders FROM books_order bo GROUP BY bo.isbn ORDER BY total_orders DESC LIMIT 1) o ON b.isbn = o.isbn;
SELECT b.title, SUM(bop.amount) AS total_amount FROM Book b JOIN Books_Order bop ON b.isbn = bop.isbn GROUP BY b.title ORDER BY total_amount DESC LIMIT 1;
SELECT DISTINCT b.title FROM book b JOIN Books_Order bo ON b.isbn = bo.isbn;
SELECT DISTINCT b.title FROM book b JOIN books_order bo ON b.isbn = bo.isbn;
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name HAVING COUNT(o.IdOrder) >= 1 ORDER BY c.Name;
SELECT DISTINCT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient ORDER BY c.Name;
SELECT c.Name AS client_name, COUNT(o.IdOrder) AS num_orders FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name ORDER BY num_orders DESC;
SELECT c.Name AS client_name, COUNT(o.IdOrder) AS number_of_orders FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name ORDER BY number_of_orders DESC;
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name ORDER BY COUNT(o.IdOrder) DESC LIMIT 1;
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient GROUP BY c.Name ORDER BY COUNT(o.IdOrder) DESC LIMIT 1;
SELECT c.Name AS client_name, SUM(b.amount) AS total_books_ordered FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order b ON o.IdOrder = b.IdOrder GROUP BY c.Name;
SELECT c.Name AS client_name, SUM(b.amount) AS total_books_ordered FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order b ON o.IdOrder = b.IdOrder GROUP BY c.Name ORDER BY total_books_ordered DESC;
SELECT c.Name, SUM(b.amount) AS TotalAmount FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order b ON o.IdOrder = b.IdOrder GROUP BY c.Name ORDER BY TotalAmount DESC LIMIT 1;
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient WHERE o.IdOrder IN (SELECT bo.IdOrder FROM Books_Order bo GROUP BY bo.IdOrder ORDER BY SUM(bo.amount) DESC LIMIT 1);
SELECT b.title FROM Book b WHERE b.isbn NOT IN (SELECT bo.isbn FROM Books_Order bo);
SELECT b.title FROM book b WHERE b.isbn NOT IN (SELECT bo.isbn FROM books_order bo);
SELECT c.Name FROM Client c WHERE c.IdClient NOT IN (SELECT o.IdClient FROM Orders o);
SELECT c.Name FROM Client c WHERE c.IdClient NOT IN (SELECT o.IdClient FROM Orders o);
SELECT MAX(b.SalePrice), MIN(b.SalePrice) FROM Book b;
SELECT MAX(b.SalePrice), MIN(b.SalePrice) FROM Book b;
SELECT AVG(b.purchaseprice) AS avg_purchase_price, AVG(b.saleprice) AS avg_sale_price FROM book b;
SELECT AVG(b.purchaseprice) AS avg_purchase_price, AVG(b.saleprice) AS avg_sale_price FROM Book b;
SELECT MAX(b.SalePrice - b.PurchasePrice) AS Max_Difference FROM Book b;
SELECT MAX(b.SalePrice - b.PurchasePrice) AS Max_Difference FROM Book b;
SELECT b.title FROM book b WHERE b.saleprice > (SELECT AVG(b2.saleprice) FROM book b2);
SELECT b.title FROM book b WHERE b.saleprice > (SELECT AVG(b2.saleprice) FROM book b2);
SELECT b.title FROM book b WHERE b.saleprice = (SELECT MIN(b2.saleprice) FROM book b2);
SELECT b.title FROM book b WHERE b.saleprice = (SELECT MIN(b2.saleprice) FROM book b2);
SELECT b.title FROM book b WHERE b.purchaseprice = (SELECT MAX(b2.purchaseprice) FROM book b2);
SELECT b.title FROM book b ORDER BY b.purchaseprice DESC LIMIT 1;
SELECT AVG(b.SalePrice) AS average_sale_price FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN WHERE LOWER(ab.Author::VARCHAR) = 'george orwell';
SELECT AVG(b.SalePrice) AS Average_Sale_Price FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN WHERE LOWER(ab.Author::VARCHAR) = 'george orwell';
SELECT b.saleprice FROM book b JOIN author_book ab ON b.isbn = ab.isbn WHERE LOWER(ab.author::text) = 'plato';
SELECT b.saleprice FROM book b JOIN author_book ab ON b.isbn = ab.isbn WHERE LOWER(ab.author::text) = 'plato';
SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn WHERE LOWER(ab.author::text) = 'george orwell' ORDER BY b.saleprice ASC LIMIT 1;
SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn WHERE LOWER(ab.author::text) = 'george orwell' ORDER BY b.saleprice ASC LIMIT 1;
SELECT b.title FROM Book b JOIN Author_Book ab ON b.isbn = ab.isbn WHERE b.author = (SELECT idauthor FROM author WHERE name = 'Plato') AND b.saleprice < (SELECT AVG(saleprice) FROM Book);
SELECT b.title FROM book b JOIN author_a ON b.isbn = author_a.isbn WHERE LOWER(b.author) = 'plato' AND b.saleprice < (SELECT AVG(saleprice) FROM book);
SELECT b.author FROM book b WHERE b.title = 'Pride and Prejudice';
SELECT a.Name FROM Book b JOIN Author_Book ab ON b.ISBN = ab.ISBN JOIN Author a ON ab.Author = a.idAuthor WHERE LOWER(b.Title) = 'pride and prejudice';
SELECT b.title FROM book b JOIN author_book ab ON b.isbn = ab.isbn JOIN author a ON ab.author = a.idauthor WHERE LOWER(a.name) LIKE '%plato%' ORDER BY b.title;
SELECT b.title FROM book b JOIN author_a ON b.isbn = author_a.isbn JOIN author ON author_a.author = author.idauthor WHERE LOWER(author.name) LIKE '%plato%' ORDER BY b.title;
SELECT COUNT(DISTINCT o.IdOrder) FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE LOWER(b.Title) = 'pride and prejudice';
SELECT COUNT(DISTINCT o.IdOrder) AS num_orders FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE LOWER(b.Title) = 'pride and prejudice';
SELECT o.IdOrder FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder WHERE bo.ISBN IN (SELECT b.ISBN FROM Book b WHERE LOWER(b.Title) = 'pride and prejudice') AND bo.ISBN IN (SELECT b.ISBN FROM Book b WHERE LOWER(b.Title) = 'the little prince');
SELECT DISTINCT o.IdOrder FROM Orders o JOIN Books_Order bo ON o.IdOrder = bo.IdOrder WHERE EXISTS (SELECT 1 FROM Book b WHERE b.ISBN = '978-2-253-16475-5' AND bo.ISBN = b.ISBN) AND EXISTS (SELECT 1 FROM Book c WHERE c.ISBN = '978-2-07-034362-7' AND bo.ISBN = c.ISBN);
SELECT DISTINCT bo.ISBN FROM Books_Order bo JOIN Orders o ON bo.IdOrder = o.IdOrder WHERE o.IdClient IN ('PETER DOE', 'JAMES SMITH') GROUP BY bo.ISBN HAVING COUNT(DISTINCT o.IdClient) = 2;
SELECT DISTINCT bo.ISBN FROM Books_Order bo JOIN Orders o ON bo.IdOrder = o.IdOrder WHERE o.IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') AND o.IdClient IN (SELECT IdClient FROM Client WHERE Name = 'James Smith');
SELECT DISTINCT b.title FROM book b JOIN books_order bo ON b.isbn = bo.isbn WHERE bo.idorder IN (SELECT o.idorder FROM orders o JOIN client c ON o.idclient = c.idclient WHERE c.name ilike '%Peter%Doe%') AND bo.idorder NOT IN (SELECT o.idorder FROM orders o JOIN client c ON o.idclient = c.idclient WHERE c.name ilike '%James%Smith%');
SELECT DISTINCT b.title FROM book b JOIN books_order bo ON b.isbn = bo.isbn WHERE bo.idorder IN (SELECT o.idorder FROM orders o WHERE o.idclient = 'Peter Doe') AND bo.idorder NOT IN (SELECT o.idorder FROM orders o WHERE o.idclient = 'James Smith');
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title ilike '%Pride%and%Prejudice%' GROUP BY c.Name;
SELECT c.Name FROM Client c JOIN Orders o ON c.IdClient = o.IdClient JOIN Books_Order bo ON o.IdOrder = bo.IdOrder JOIN Book b ON bo.ISBN = b.ISBN WHERE b.Title ilike '%Pride%and%Prejudice%'
SELECT COUNT(*) FROM book;
SELECT b.title FROM book b ORDER BY b.title ASC;
SELECT b.title FROM book b ORDER BY b.pages DESC;
SELECT b.type, b.release FROM book b ORDER BY b.type NULLS LAST;
SELECT b.title, MIN(b.chapters) AS min_chapters, MAX(b.chapters) AS max_chapters FROM book b GROUP BY b.title ORDER BY b.title NULLS LAST;
SELECT b.title FROM book b WHERE b.type!= 'Poet' ORDER BY b.title NULLS LAST;
SELECT AVG(r.Rating) AS Average_Rating FROM review r;
SELECT b.title, r.rating FROM book b JOIN review r ON b.book_id = r.book_id;
SELECT r.Rating FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY b.Chapters DESC LIMIT 1;
SELECT b.Book_ID, b.Pages, r.Rank FROM book b JOIN review r ON b.Book_ID = r.Book_ID ORDER BY b.Pages ASC LIMIT 1;
SELECT b.title FROM book b JOIN review r ON b.book_id = r.book_id WHERE r.rank = (SELECT MAX(r2.rank) FROM review r2);
SELECT AVG(r.Readers_in_Million) AS average_readers FROM book b JOIN review r ON b.Book_ID = r.Book_ID WHERE LOWER(b.Type) = 'novel';
SELECT b.type, COUNT(b.book_id) AS total_books FROM book b GROUP BY b.type ORDER BY total_books DESC NULLS LAST;
SELECT b.type, COUNT(b.type) AS count_type FROM book b GROUP BY b.type ORDER BY count_type DESC LIMIT 1;
SELECT b.type FROM book b GROUP BY b.type HAVING COUNT(b.book_id) >= 3 ORDER BY b.type NULLS LAST;
SELECT b.title, r.rating FROM book b JOIN review r ON b.book_id = r.book_id ORDER BY r.rating ASC;
SELECT b.title, b.audio, r.readers_in_million FROM book b JOIN review r ON b.book_id = r.book_id ORDER BY r.readers_in_million DESC NULLS LAST;
SELECT COUNT(DISTINCT b.Book_ID) FROM book b LEFT JOIN review r ON b.Book_ID = r.Book_ID WHERE r.Book_ID IS NULL;
SELECT DISTINCT b.Type FROM book b WHERE (b.Chapters > 75 OR b.Chapters < 50) ORDER BY b.Type NULLS LAST;
SELECT COUNT(DISTINCT b.Type) FROM book b;
SELECT b.type, b.title FROM book b LEFT JOIN review r ON b.book_id = r.book_id WHERE r.rating IS NULL;
SELECT COUNT(*) FROM customer;
SELECT COUNT(*) FROM customer;
SELECT c.name, c.level_of_membership FROM customer c ORDER BY c.level_of_membership ASC;
SELECT c.Name FROM customer c ORDER BY c.Level_of_Membership ASC;
SELECT c.Nationality, c.Card_Credit FROM customer c ORDER BY c.Nationality NULLS LAST;
SELECT c.Name, c.Nationality, c.Card_Credit FROM customer c
SELECT c.Name FROM customer c WHERE LOWER(c.Nationality) IN ('england', 'australia') ORDER BY c.Name NULLS LAST;
SELECT c.Name FROM customer c WHERE LOWER(c.Nationality) IN ('england', 'australia') ORDER BY c.Name NULLS LAST;
SELECT AVG(c.Card_Credit) AS average_card_credit FROM customer c WHERE c.Level_of_Membership > 1;
SELECT AVG(c.Card_Credit) AS average_card_credit FROM customer c WHERE c.Level_of_Membership > 1;
SELECT c.Card_Credit FROM customer c WHERE c.Level_of_Membership = (SELECT MAX(c2.Level_of_Membership) FROM customer c2);
SELECT c.Card_Credit FROM customer c WHERE c.Level_of_Membership = (SELECT MAX(c2.Level_of_Membership) FROM customer c2);
SELECT c.Nationality, COUNT(c.Customer_ID) AS Number_of_Customers FROM customer c GROUP BY c.Nationality ORDER BY Number_of_Customers DESC NULLS LAST;
SELECT c.Nationality, COUNT(c.Customer_ID) AS customer_count FROM customer c GROUP BY c.Nationality ORDER BY customer_count DESC NULLS LAST;
SELECT c.Nationality FROM customer c GROUP BY c.Nationality ORDER BY COUNT(c.Customer_ID) DESC LIMIT 1;
SELECT c.Nationality, COUNT(c.Customer_ID) AS number_of_customers FROM customer c GROUP BY c.Nationality ORDER BY number_of_customers DESC LIMIT 1;
SELECT c.Nationality FROM customer c WHERE (c.Card_Credit < 50 OR c.Card_Credit > 75) GROUP BY c.Nationality HAVING COUNT(DISTINCT CASE WHEN c.Card_Credit < 50 THEN c.Customer_ID END) > 0 AND COUNT(DISTINCT CASE WHEN c.Card_Credit > 75 THEN c.Customer_ID END) > 0;
SELECT c.Nationality FROM customer c WHERE (c.Card_Credit > 50 AND c.Card_Credit < 75) GROUP BY c.Nationality;
SELECT c.Name AS customer_name, co.Dish_Name AS dish_name FROM customer_order co JOIN customer c ON co.Customer_ID = c.Customer_ID;
SELECT c.Name AS Customer_Name, co.Dish_Name AS Dish_Name FROM customer_order co JOIN customer c ON co.Customer_ID = c.Customer_ID;
SELECT c.Name AS customer_name, co.Dish_Name AS dish_name, SUM(co.Quantity) AS total_quantity FROM customer_order co JOIN customer c ON co.Customer_ID = c.Customer_ID GROUP BY c.Name, co.Dish_Name ORDER BY total_quantity DESC;
SELECT c.Name AS Customer_Name, co.Dish_Name, co.Quantity FROM customer_order co JOIN customer c ON co.Customer_ID = c.Customer_ID ORDER BY co.Quantity DESC;
SELECT c.Name, SUM(co.Quantity) AS Total_Quantity FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name
SELECT c.Name, SUM(co.Quantity) AS Total_Quantity FROM customer c JOIN customer_order co ON c.Customer_ID = co.Customer_ID GROUP BY c.Name ORDER BY Total_Quantity DESC NULLS LAST;
SELECT c.Name FROM customer c JOIN (SELECT co.Customer_ID, SUM(co.Quantity) AS Total_Quantity FROM customer_order co GROUP BY co.Customer_ID HAVING SUM(co.Quantity) > 1) AS t ON c.Customer_ID = t.Customer_ID;
SELECT c.Name FROM customer c JOIN (SELECT co.Customer_ID, SUM(co.Quantity) AS Total_Quantity FROM customer_order co GROUP BY co.Customer_ID HAVING SUM(co.Quantity) > 1) AS t ON c.Customer_ID = t.Customer_ID;
SELECT DISTINCT b.Manager FROM branch b ORDER BY b.Manager NULLS LAST;
SELECT DISTINCT b.Manager FROM branch b;
SELECT c.Name FROM customer c WHERE c.Customer_ID NOT IN (SELECT co.Customer_ID FROM customer_order co)
SELECT c.Name FROM customer c WHERE NOT EXISTS (SELECT 1 FROM customer_order co WHERE co.Customer_ID = c.Customer_ID)
SELECT COUNT(*) FROM member;
SELECT m.name, m.age FROM member m ORDER BY m.age ASC;
SELECT m.name, m.nationality FROM member m ORDER BY m.name NULLS LAST;
SELECT m.name FROM member m WHERE m.nationality!= 'England' ORDER BY m.name NULLS LAST;
SELECT m.Name FROM member m WHERE m.Age = 19 OR m.Age = 20 ORDER BY m.Name NULLS LAST;
SELECT m.Name FROM member m ORDER BY m.Age ASC LIMIT 1;
SELECT m.Nationality, COUNT(*) AS member_count FROM member m GROUP BY m.Nationality ORDER BY member_count DESC NULLS LAST;
SELECT m.Nationality FROM member m GROUP BY m.Nationality ORDER BY COUNT(m.Member_ID) DESC LIMIT 1;
SELECT m.Nationality FROM member m GROUP BY m.Nationality HAVING COUNT(m.Member_ID) >= 2 ORDER BY m.Nationality NULLS LAST;
SELECT m.Name AS member_name, c.Club_Name FROM club_leader cl JOIN member m ON cl.Member_ID = m.Member_ID JOIN club c ON cl.Club_ID = c.Club_ID;
SELECT m.Name FROM club c JOIN club_leader cl ON c.Club_ID = cl.Club_ID JOIN member m ON cl.Member_ID = m.Member_ID WHERE c.Overall_Ranking > 100;
SELECT m.Name FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID WHERE cl.Year_Join < '2018' ORDER BY m.Name NULLS LAST;
SELECT m.Name FROM club c JOIN club_leader cl ON c.Club_ID = cl.Club_ID JOIN member m ON cl.Member_ID = m.Member_ID WHERE LOWER(c.Club_Name) = 'houston';
SELECT m.Name FROM member m WHERE m.Member_ID NOT IN (SELECT cl.Member_ID FROM club_leader cl)
SELECT m.Nationality FROM member m WHERE m.Age > 22 AND m.Age < 19 GROUP BY m.Nationality;
SELECT AVG(m.Age) AS Average_Age FROM member m JOIN club_leader cl ON m.Member_ID = cl.Member_ID;
SELECT c.Club_Name FROM club c WHERE c.Club_Name ilike '%state%';
SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs ORDER BY cs.Collection_Subset_Name;
SELECT cs.Collection_Subset_Name FROM Collection_Subsets cs;
SELECT cs.Collectection_Subset_Details FROM Collection_Subsets cs WHERE LOWER(cs.Collection_Subset_Name) = 'top collection';
SELECT cs.Collecrtion_Subset_Details FROM Collection_Subsets cs WHERE LOWER(cs.Collection_Subset_Name) = 'top collection';
SELECT ds.Document_Subset_Name FROM Document_Subsets ds ORDER BY ds.Document_Subset_Name;
SELECT ds.Document_Subset_Name FROM Document_Subsets ds;
SELECT ds.Document_Subset_Details FROM Document_Subsets ds WHERE LOWER(ds.Document_Subset_Name) = 'best for 2000';
SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, ds.Document_Subset_Details FROM Document_Subsets ds WHERE LOWER(ds.Document_Subset_Name) = 'best for 2000';
SELECT d.Document_Object_ID FROM Document_Objects d;
SELECT d.Document_Object_ID FROM Document_Objects d;
SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Owner = 'Marlin' AND d.Parent_Document_Object_ID IS NOT NULL;
SELECT d.Document_Object_ID FROM Document_Objects d WHERE LOWER(d.Owner) ='marlin';
SELECT d.Owner FROM Document_Objects d WHERE LOWER(d.Description) = 'braeden collection';
SELECT d.Owner FROM Document_Objects d JOIN Documents_in_Collections dc ON d.Document_Object_ID = dc.Document_Object_ID WHERE d.Description ilike '%Braeden%Collection%' ORDER BY d.Owner;
SELECT d.Owner FROM Document_Objects d WHERE d.Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin');
SELECT d.Owner FROM Document_Objects d WHERE d.Document_Object_ID IN (SELECT p.Parent_Document_Object_ID FROM Document_Objects p WHERE LOWER(p.Owner) ='marlin') ORDER BY d.Document_Object_ID;
SELECT DISTINCT d.description FROM document_objects d WHERE d.parent_document_object_id IS NULL;
SELECT DISTINCT d.description FROM Document_Objects d WHERE d.parent_document_object_id IS NULL;
SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Document_Objects d WHERE LOWER(d.Owner) ='marlin';
SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Document_Objects d WHERE LOWER(d.Owner) ='marlin';
SELECT DISTINCT d.Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NULL;
SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NULL;
SELECT d.Document_Object_ID, COUNT(DISTINCT m.Related_Document_Object_ID) AS num_children FROM Document_Objects d JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Document_Object_ID GROUP BY d.Document_Object_ID ORDER BY d.Document_Object_ID;
SELECT d.Document_Object_ID AS Parent_ID, COUNT(DISTINCT m.Related_Document_Object_ID) AS Child_Count FROM Document_Objects d JOIN Document_Subset_Members m ON d.Document_Object_ID = m.Document_Object_ID GROUP BY d.Document_Object_ID ORDER BY Child_Count DESC;
SELECT c.Collection_Name FROM Collections c ORDER BY c.Collection_Name;
SELECT c.Collection_Name FROM Collections c ORDER BY c.Collection_Name;
SELECT c.Collection_Description FROM Collections c WHERE LOWER(c.Collection_Name) = 'best';
SELECT c.Collection_Description FROM Collections c WHERE LOWER(c.Collection_Description) = 'best';
SELECT c.Collection_Description FROM Collections c WHERE c.Collection_Name = 'Nice';
SELECT c.Collection_Name FROM Collections c WHERE c.Collection_Name = 'Nice';
SELECT c.Collection_Name FROM Collections c WHERE c.Parent_Collection_ID IS NULL;
SELECT c.Collection_Name FROM Collections c WHERE c.Collection_ID NOT IN (SELECT Parent_Collection_ID FROM Collections);
SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Document_Object_ID HAVING COUNT(d.Document_Object_ID) > 1;
SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Document_Object_ID HAVING COUNT(d.Document_Object_ID) > 1;
SELECT COUNT(DISTINCT c2.Collection_ID) FROM Collections c1 JOIN Collection_Subset_Members csm ON c1.Collection_ID = csm.Collection_ID JOIN Collections c2 ON csm.Related_Collection_ID = c2.Collection_ID WHERE LOWER(c1.Collection_Name) = 'best';
SELECT COUNT(DISTINCT c2.Collection_ID) FROM Collections c1 JOIN Documents_in_Collections dic ON c1.Collection_ID = dic.Collection_ID JOIN Collections c2 ON dic.Document_Object_ID = c2.Parent_Collection_ID WHERE LOWER(c1.Collection_Name) = 'best';
SELECT d.Document_Object_ID FROM Document_Objects d WHERE d.Owner = 'Ransom';
SELECT d.Document_Object_ID FROM Document_Objects d WHERE LOWER(d.Owner) = 'ransom';
SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(cs.Collection_Subset_ID) AS num_collections FROM Collection_Subsets cs GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name ORDER BY cs.Collection_Subset_ID;
SELECT cs.Collection_Subset_ID, cs.Collection_Subset_Name, COUNT(cs.Collection_Subset_ID) AS Number_of_Collections FROM Collection_Subsets cs GROUP BY cs.Collection_Subset_ID, cs.Collection_Subset_Name ORDER BY cs.Collection_Subset_ID;
SELECT d.Document_Object_ID, COUNT(d.Document_Object_ID) AS NumberOfChildren FROM Document_Objects d WHERE d.Parent_Document_Object_ID IS NOT NULL GROUP BY d.Document_Object_ID ORDER BY NumberOfChildren DESC LIMIT 1;
SELECT d.Document_Object_ID, COUNT(DISTINCT d.Related_Document_Object_ID) AS child_count FROM Document_Objects d GROUP BY d.Document_Object_ID ORDER BY d.Document_Object_ID;
SELECT d.Document_Object_ID, COUNT(d.Document_Object_ID) AS num_related_documents FROM Document_Subset_Members dms JOIN Document_Objects d ON dms.Document_Object_ID = d.Document_Object_ID GROUP BY d.Document_Object_ID ORDER BY num_related_documents ASC LIMIT 1;
SELECT d.Document_Object_ID FROM Document_Objects d GROUP BY d.Document_Object_ID ORDER BY COUNT(d.Document_Object_ID) ASC LIMIT 1;
SELECT d.Document_Object_ID, COUNT(d.Document_Object_ID) AS num_related_documents FROM Document_Subset_Members dms JOIN Document_Objects d ON dms.Document_Object_ID = d.Document_Object_ID GROUP BY d.Document_Object_ID HAVING COUNT(d.Document_Object_ID) BETWEEN 2 AND 4 ORDER BY num_related_documents DESC;
SELECT d.Document_Object_ID, COUNT(d.Related_Document_Object_ID) AS number_of_related_documents FROM Document_Subset_Members d GROUP BY d.Document_Object_ID HAVING COUNT(d.Related_Document_Object_ID) BETWEEN 2 AND 4 ORDER BY d.Document_Object_ID;
SELECT DISTINCT d.Owner FROM Document_Objects d WHERE d.Document_Object_ID IN (SELECT r.Document_Object_ID FROM Document_Objects r JOIN Document_Subset_Members m ON r.Document_Object_ID = m.Document_Object_ID WHERE LOWER(r.Owner) = 'braeden') ORDER BY d.Owner;
SELECT DISTINCT d.Owner FROM Document_Objects d WHERE d.Owner = 'Braeden'
SELECT ds.Document_Subset_Name FROM Document_Objects do JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE LOWER(do.Owner) = 'braeden' GROUP BY ds.Document_Subset_Name;
SELECT DISTINCT ds.Document_Subset_Name FROM Document_Objects do JOIN Document_Subset_Members dsm ON do.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE LOWER(do.Owner) = 'braeden' ORDER BY ds.Document_Subset_Name;
SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dsm.Document_Object_ID) AS distinct_documents FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name ORDER BY distinct_documents DESC NULLS LAST;
SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dmo.Document_Object_ID) AS distinct_documents FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects dmo ON dsm.Document_Object_ID = dmo.Document_Object_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name ORDER BY distinct_documents DESC NULLS LAST;
SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dmo.Document_Object_ID) AS num_documents FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects dmo ON dsm.Document_Object_ID = dmo.Document_Object_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name ORDER BY num_documents DESC LIMIT 1;
SELECT ds.Document_Subset_ID, ds.Document_Subset_Name, COUNT(DISTINCT dmo.Document_Object_ID) AS num_documents FROM Document_Subsets ds JOIN Document_Subset_Members dsm ON ds.Document_Subset_ID = dsm.Document_Subset_ID JOIN Document_Objects dmo ON dsm.Document_Object_ID = dmo.Document_Object_ID GROUP BY ds.Document_Subset_ID, ds.Document_Subset_Name ORDER BY num_documents DESC LIMIT 1;
SELECT d.Document_Object_ID FROM Document_Objects d JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID WHERE dsm.Document_Subset_ID IN (SELECT ds.Document_Subset_ID FROM Document_Subsets ds WHERE LOWER(ds.Document_Subset_Name) = 'best for 2000');
SELECT d.Document_Object_ID FROM Document_Objects d JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID WHERE dsm.Document_Subset_ID IN (SELECT ds.Document_Subset_ID FROM Document_Subsets ds WHERE LOWER(ds.Document_Subset_Name) = 'best for 2000');
SELECT ds.Document_Subset_Name, dso.Document_Object_ID FROM Document_Subset_Members dsm JOIN Document_Objects dso ON dsm.Document_Object_ID = dso.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID;
SELECT dso.Document_Object_ID AS Document_ID, ds.Document_Subset_Name, ds.Document_Subset_ID FROM Document_Subset_Members dsm JOIN Document_Objects dso ON dsm.Document_Object_ID = dso.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID;
SELECT c.Collection_Name FROM Documents_in_Collections dic JOIN Document_Objects d ON dic.Document_Object_ID = d.Document_Object_ID JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE LOWER(d.Owner) = 'ransom' ORDER BY c.Collection_Name;
SELECT c.Collection_Name FROM Document_Objects d JOIN Documents_in_Collections dic ON d.Document_Object_ID = dic.Document_Object_ID JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE LOWER(d.Owner) = 'ransom';
SELECT d.Document_Object_ID, COUNT(DISTINCT c.Collection_ID) AS collection_count FROM Documents_in_Collections dic JOIN Document_Objects d ON dic.Document_Object_ID = d.Document_Object_ID GROUP BY d.Document_Object_ID ORDER BY collection_count DESC NULLS LAST;
SELECT d.Document_Object_ID, COUNT(DISTINCT c.Collection_ID) AS collection_count FROM Documents_in_Collections dic JOIN Document_Objects d ON dic.Document_Object_ID = d.Document_Object_ID JOIN Collections c ON dic.Collection_ID = c.Collection_ID GROUP BY d.Document_Object_ID ORDER BY d.Document_Object_ID;
SELECT COUNT(DISTINCT di.Document_Object_ID) FROM Documents_in_Collections di JOIN Collections c ON di.Collection_ID = c.Collection_ID WHERE LOWER(c.Collection_Name) = 'best';
SELECT COUNT(DISTINCT doc.Document_Object_ID) FROM Documents_in_Collections dic JOIN Document_Objects doc ON dic.Document_Object_ID = doc.Document_Object_ID WHERE LOWER(dic.Collection_ID::text) = 1;
SELECT d.Document_Object_ID FROM Documents_in_Collections dic JOIN Document_Objects d ON dic.Document_Object_ID = d.Document_Object_ID WHERE LOWER(dic.Collection_ID::text) = 'best';
SELECT COUNT(DISTINCT d.Document_Object_ID) FROM Documents_in_Collections dic JOIN Document_Objects d ON dic.Document_Object_ID = d.Document_Object_ID JOIN Collections c ON dic.Collection_ID = c.Collection_ID WHERE LOWER(c.Collection_Name) = 'best';
SELECT c.Collection_Name, c.Collection_ID, COUNT(DISTINCT di.Document_Object_ID) AS num_documents FROM Documents_in_Collections di JOIN Collections c ON di.Collection_ID = c.Collection_ID GROUP BY c.Collection_Name, c.Collection_ID ORDER BY num_documents DESC LIMIT 1;
SELECT c.Collection_Name, COUNT(di.Document_Object_ID) AS document_count FROM Collections c JOIN Documents_in_Collections di ON c.Collection_ID = di.Collection_ID WHERE c.Collection_Name ilike '%Best%' GROUP BY c.Collection_Name ORDER BY document_count DESC LIMIT 1;
SELECT d.Document_Object_ID FROM Document_Objects d JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name ilike '%Best%for%2000%' AND EXISTS (SELECT 1 FROM Documents_in_Collections dic WHERE dic.Document_Object_ID = d.Document_Object_ID AND dic.Collection_ID IN (SELECT c.Collection_ID FROM Collections c WHERE c.Collection_Name ilike '%Best%'));
SELECT DISTINCT d.Document_Object_ID FROM Document_Objects d JOIN Documents_in_Collections dc ON d.Document_Object_ID = dc.Document_Object_ID JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID JOIN Document_Subsets ds ON dsm.Document_Subset_ID = ds.Document_Subset_ID WHERE ds.Document_Subset_Name ilike '%Best%for%2000%' AND dc.Collection_ID IN (SELECT c.Collection_ID FROM Collections c WHERE c.Collection_Name ilike '%Best%');
SELECT d.Document_Object_ID FROM Documents_in_Collections dic JOIN Documents d ON dic.Document_Object_ID = d.Document_Object_ID WHERE dic.Collection_ID IN (SELECT c.Collection_ID FROM Collections c WHERE LOWER(c.Collection_Name) = 'best') AND d.Document_Object_ID NOT IN (SELECT ds.Document_Object_ID FROM Document_Subsets ds WHERE LOWER(ds.Document_Subset_Name) = 'best' AND ds.Document_Subset_Details LIKE '%2000%');
SELECT DISTINCT d.Document_Object_ID FROM Documents_in_Collections dc JOIN Document_Objects d ON dc.Document_Object_ID = d.Document_Object_ID WHERE dc.Collection_ID IN (SELECT c.Collection_ID FROM Collections c WHERE LOWER(c.Collection_Name) = 'best') AND d.Document_Object_ID NOT IN (SELECT ds.Document_Object_ID FROM Document_Subset_Members dsms JOIN Document_Subsets ds ON dsms.Document_Subset_ID = ds.Document_Subset_ID WHERE LOWER(ds.Document_Subset_Name) = 'best for 2000');
SELECT d.Document_Object_ID FROM Document_Objects d JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID WHERE dsm.Document_Subset_ID IN (SELECT ds.Document_Subset_ID FROM Document_Subsets ds WHERE LOWER(ds.Document_Subset_Name) = 'best') UNION SELECT c.Collection_ID FROM Collections c WHERE LOWER(c.Collection_Name) = 'best'
SELECT DISTINCT d.Document_Object_ID FROM Document_Objects d JOIN Document_Subset_Members dsm ON d.Document_Object_ID = dsm.Document_Object_ID WHERE dsm.Document_Subset_ID IN (SELECT ds.Document_Subset_ID FROM Document_Subsets ds WHERE LOWER(ds.Document_Subset_Name) = 'best for 2000') UNION SELECT DISTINCT c.Collection_ID FROM Collections c JOIN Collection_Subset_Members csm ON c.Collection_ID = csm.Collection_ID WHERE LOWER(csm.Collection_Subset_ID) IN (SELECT cs.Collection_Subset_ID FROM Collection_Subsets cs WHERE LOWER(cs.Collection_Subset_Name) = 'best');
SELECT c.Collection_Name FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Collection_ID WHERE cs.Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name ilike '%Best%') GROUP BY c.Collection_Name;
SELECT c.Collection_Name FROM Collections c JOIN Collection_Subset_Members cs ON c.Collection_ID = cs.Collection_ID WHERE cs.Related_Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') GROUP BY c.Collection_Name;
SELECT COUNT(DISTINCT c2.Collection_ID) FROM Collections c1 JOIN Collection_Subset_Members cm ON c1.Collection_ID = cm.Collection_ID JOIN Collections c2 ON cm.Related_Collection_ID = c2.Collection_ID WHERE LOWER(c1.Collection_Name) = 'best';
SELECT COUNT(DISTINCT c.Collection_ID) FROM Collections c JOIN Collection_Subset_Members cm ON c.Collection_ID = cm.Collection_ID WHERE LOWER(c.Collection_Name) = 'best';
SELECT cs.Collection_Subset_Name FROM Collections c JOIN Collection_Subset_Members cms ON c.Collection_ID = cms.Collection_ID JOIN Collection_Subsets cs ON cms.Collection_Subset_ID = cs.Collection_Subset_ID WHERE c.Collection_Name = 'Best';
SELECT cs.Collection_Subset_Name FROM Collections c JOIN Collection_Subset_Members cms ON c.Collection_ID = cms.Collection_ID JOIN Collection_Subsets cs ON cms.Collection_Subset_ID = cs.Collection_Subset_ID WHERE LOWER(c.Collection_Name) = 'best';
SELECT COUNT(*) FROM songs s WHERE LOWER(s.name) LIKE '%love%';
SELECT s.name FROM songs s ORDER BY s.name ASC;
SELECT s.name, s.language FROM songs s ORDER BY s.name NULLS LAST;
SELECT MAX(ps.voice_sound_quality) AS max_voice_sound_quality, MIN(ps.voice_sound_quality) AS min_voice_sound_quality FROM performance_score ps;
SELECT ps.voice_sound_quality, ps.rhythm_tempo, ps.stage_presence FROM performance_score ps JOIN participants p ON ps.participant_id = p.id WHERE LOWER(p.name) = 'freeway';
SELECT s.id, s.language, s.original_artist FROM songs s WHERE s.name!= 'Love' ORDER BY s.id NULLS LAST;
SELECT s.name AS song_name, s.original_artist FROM songs s WHERE LOWER(s.english_translation) = 'all the streets of love';
SELECT DISTINCT ps.stage_presence FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE LOWER(s.language) = 'english';
SELECT p.id AS participant_id, p.name FROM (SELECT ps.participant_id, COUNT(ps.songs_id) AS song_count FROM performance_score ps GROUP BY ps.participant_id HAVING COUNT(ps.songs_id) >= 2) AS subquery JOIN participants p ON p.id = subquery.participant_id ORDER BY p.id NULLS LAST;
SELECT p.id AS participant_id, p.name, p.popularity, COUNT(ps.songs_id) OVER (PARTITION BY ps.participant_id) AS num_songs FROM participants p JOIN performance_score ps ON p.id = ps.participant_id ORDER BY num_songs DESC NULLS LAST;
SELECT p.id AS participant_id, p.name FROM performance_score ps JOIN participants p ON ps.participant_id = p.id WHERE ps.voice_sound_quality = 5 OR ps.rhythm_tempo = 5 ORDER BY p.id NULLS LAST;
SELECT ps.voice_sound_quality FROM performance_score ps JOIN songs s ON ps.songs_id = s.id WHERE LOWER(s.name) = 'the balkan girls' AND LOWER(s.language) = 'english';
SELECT s.id AS song_id, s.name AS song_name FROM songs s JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.id, s.name ORDER BY COUNT(ps.participant_id) DESC LIMIT 1;
SELECT COUNT(*) FROM performance_score ps WHERE ps.stage_presence < 7 OR ps.stage_presence > 9;
SELECT COUNT(s.id) FROM songs s LEFT JOIN performance_score ps ON s.id = ps.songs_id WHERE ps.songs_id IS NULL;
SELECT s.language, AVG(ps.rhythm_tempo) AS avg_rhythm FROM songs s JOIN performance_score ps ON s.id = ps.songs_id GROUP BY s.language ORDER BY avg_rhythm DESC NULLS LAST;
SELECT DISTINCT p.name FROM performance_score ps JOIN songs s ON ps.songs_id = s.id JOIN participants p ON ps.participant_id = p.id WHERE LOWER(s.language) = 'english' ORDER BY p.name NULLS LAST;
SELECT p.name, p.popularity FROM participants p JOIN performance_score ps ON p.id = ps.participant_id JOIN songs s ON ps.songs_id = s.id WHERE s.language IN ('Croatian', 'English') GROUP BY p.name, p.popularity HAVING COUNT(DISTINCT CASE WHEN s.language = 'Croatian' THEN s.id END) > 0 AND COUNT(DISTINCT CASE WHEN s.language = 'English' THEN s.id END) > 0 ORDER BY p.popularity DESC NULLS LAST;
SELECT s.name FROM songs s WHERE s.name ilike '%is%' ORDER BY s.name NULLS LAST;
SELECT s.original_artist, p.voice_sound_quality FROM performance_score p JOIN songs s ON p.songs_id = s.id WHERE p.rhythm_tempo > 5 ORDER BY p.voice_sound_quality DESC;
SELECT COUNT(*) FROM City;
SELECT COUNT(*) FROM City;
SELECT DISTINCT c.state FROM City c ORDER BY c.state NULLS LAST;
SELECT DISTINCT c.state FROM City c ORDER BY c.state NULLS LAST;
SELECT COUNT(DISTINCT c.country) FROM City c;
SELECT COUNT(DISTINCT c.country) FROM City c;
SELECT c.city_name, c.city_code, c.state, c.country FROM City c ORDER BY c.city_name NULLS LAST;
SELECT c.city_name, c.city_code, c.state, c.country FROM City c ORDER BY c.city_name NULLS LAST;
SELECT c.latitude, c.longitude FROM City c WHERE LOWER(c.city_name) = 'baltimore'
SELECT c.latitude, c.longitude FROM City c WHERE LOWER(c.city_name) = 'baltimore';
SELECT c.city_name FROM City c WHERE LOWER(c.state) = 'pa' ORDER BY c.city_name NULLS LAST;
SELECT c.city_name FROM City c WHERE LOWER(c.state) = 'pa' ORDER BY c.city_name NULLS LAST;
SELECT COUNT(*) FROM City c WHERE LOWER(c.country) = 'canada';
SELECT COUNT(*) FROM City c WHERE LOWER(c.country) = 'canada';
SELECT c.city_name FROM City c WHERE c.country = 'USA' ORDER BY c.latitude NULLS LAST;
SELECT c.city_name FROM City c WHERE c.country = 'United States' ORDER BY c.latitude NULLS LAST;
SELECT c.state, COUNT(c.city_code) AS num_cities FROM City c GROUP BY c.state ORDER BY num_cities DESC NULLS LAST;
SELECT c.state, COUNT(c.city_code) AS number_of_cities FROM City c GROUP BY c.state ORDER BY number_of_cities DESC NULLS LAST;
SELECT c.country, COUNT(c.city_code) AS num_cities FROM City c GROUP BY c.country ORDER BY num_cities DESC NULLS LAST;
SELECT c.country, COUNT(c.city_code) AS number_of_cities FROM City c GROUP BY c.country ORDER BY number_of_cities DESC NULLS LAST;
SELECT c.state FROM City c GROUP BY c.state HAVING COUNT(c.city_code) >= 2
SELECT c.state FROM City c GROUP BY c.state HAVING COUNT(c.city_code) >= 2 ORDER BY c.state NULLS LAST;
SELECT c.state, COUNT(c.city_code) AS num_cities FROM City c GROUP BY c.state ORDER BY num_cities DESC LIMIT 1;
SELECT c.state, COUNT(c.city_code) AS number_of_cities FROM City c GROUP BY c.state ORDER BY number_of_cities DESC LIMIT 1;
SELECT c.country, COUNT(c.city_code) AS num_cities FROM City c GROUP BY c.country ORDER BY num_cities ASC LIMIT 1;
SELECT c.country FROM City c GROUP BY c.country ORDER BY COUNT(c.city_code) ASC LIMIT 1;
SELECT s.Fname, s.LName FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.state) ='md' ORDER BY s.StuID;
SELECT s.Fname ||'' || s.LName AS full_name FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.state) ='md' ORDER BY full_name NULLS LAST;
SELECT COUNT(*) FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.country) = 'china';
SELECT COUNT(*) FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.country) = 'china';
SELECT s.Fname, c.city_name FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.city_name) = 'baltimore';
SELECT s.Fname, c.city_name FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.city_name) = 'baltimore';
SELECT c.country, COUNT(s.StuID) AS num_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.country ORDER BY num_students DESC NULLS LAST;
SELECT c.country, COUNT(s.StuID) AS number_of_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.country ORDER BY number_of_students DESC NULLS LAST;
SELECT c.city_name, COUNT(s.StuID) AS num_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.city_name ORDER BY num_students DESC NULLS LAST;
SELECT s.city_code, COUNT(s.StuID) AS number_of_students FROM Student s GROUP BY s.city_code ORDER BY number_of_students DESC NULLS LAST;
SELECT c.state, COUNT(s.stuid) AS total_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.state ORDER BY total_students DESC LIMIT 1;
SELECT c.state, COUNT(s.stuid) AS student_count FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.state ORDER BY student_count DESC LIMIT 1;
SELECT c.country, COUNT(s.stuid) AS num_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.country ORDER BY num_students ASC LIMIT 1;
SELECT c.country FROM (SELECT s.city_code, COUNT(*) AS student_count FROM Student s GROUP BY s.city_code) AS sc JOIN City c ON sc.city_code = c.city_code ORDER BY sc.student_count ASC LIMIT 1;
SELECT c.city_name FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(s.StuID) >= 3 ORDER BY c.city_name NULLS LAST;
SELECT c.city_name FROM City c JOIN Student s ON c.city_code = s.city_code GROUP BY c.city_name HAVING COUNT(s.StuID) >= 3 ORDER BY c.city_name NULLS LAST;
SELECT c.state, COUNT(s.stuid) AS student_count FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.state HAVING COUNT(s.stuid) > 5 ORDER BY student_count DESC NULLS LAST;
SELECT c.state, COUNT(s.stuid) AS student_count FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY c.state HAVING COUNT(s.stuid) > 5 ORDER BY student_count DESC NULLS LAST;
SELECT s.StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.country)!= 'usa' ORDER BY s.StuID NULLS LAST;
SELECT s.StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.country)!= 'usa' ORDER BY s.StuID NULLS LAST;
SELECT s.StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(c.state) = 'pa' AND LOWER(s.Sex) = 'f';
SELECT s.StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'F' AND c.state = 'PA';
SELECT s.StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'M' AND c.country!= 'USA';
SELECT s.StuID FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.Sex = 'M' AND c.country!= 'USA';
SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI';
SELECT d.distance FROM Direct_distance d WHERE d.city1_code = 'BAL' AND d.city2_code = 'CHI';
SELECT d.distance FROM Direct_distance d WHERE (d.city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND d.city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')) OR (d.city1_code = (SELECT city_code FROM City WHERE city_name = 'Newark') AND d.city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston'));
SELECT d.distance FROM Direct_distance d WHERE (d.city1_code = (SELECT city_code FROM City WHERE city_name = 'Boston') AND d.city2_code = (SELECT city_code FROM City WHERE city_name = 'Newark')) OR (d.city1_code = (SELECT city_code FROM City WHERE city_name = 'Newark') AND d.city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston'));
SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance;
SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance;
SELECT d.city1_code, d.city2_code FROM Direct_distance d ORDER BY d.distance DESC LIMIT 1;
SELECT d.city1_code, d.city2_code FROM Direct_distance d WHERE d.distance = (SELECT MAX(distance) FROM Direct_distance);
SELECT d.city1_code, d.city2_code FROM Direct_distance d WHERE d.distance > (SELECT AVG(distance) FROM Direct_distance);
SELECT d.city1_code FROM Direct_distance d WHERE d.distance > (SELECT AVG(distance) FROM Direct_distance);
SELECT d.city1_code, d.city2_code FROM Direct_distance d WHERE d.distance < 1000;
SELECT d.city1_code FROM Direct_distance d WHERE d.distance < 1000 UNION SELECT d.city2_code FROM Direct_distance d WHERE d.distance < 1000;
SELECT SUM(d.distance) AS total_distance FROM Direct_distance d WHERE d.city1_code = 'BAL' OR d.city2_code = 'BAL';
SELECT SUM(d.distance) AS total_distance FROM Direct_distance d WHERE d.city1_code = 'BAL' OR d.city2_code = 'BAL';
SELECT AVG(d.distance) AS average_distance FROM Direct_distance d JOIN City c ON (d.city1_code = c.city_code OR d.city2_code = c.city_code) WHERE LOWER(c.city_name) = 'boston'
SELECT AVG(distance) AS average_distance FROM Direct_distance WHERE city1_code = (SELECT city_code FROM City WHERE LOWER(city_name) = 'boston') OR city2_code = (SELECT city_code FROM City WHERE LOWER(city_name) = 'boston');
SELECT c.city_name FROM City c JOIN (SELECT d.city1_code AS city_code FROM Direct_distance d WHERE d.city2_code = 'CHI') AS d ON c.city_code = d.city_code ORDER BY c.latitude - 41.8781 ASC NULLS LAST LIMIT 1;
SELECT c.city_name FROM City c JOIN (SELECT d.city1_code AS closest_city FROM Direct_distance d WHERE d.city2_code = 'CHI' ORDER BY d.distance LIMIT 1) AS cd ON c.city_code = cd.closest_city;
SELECT c.city_name FROM City c JOIN (SELECT d.city1_code AS farthest_city FROM Direct_distance d WHERE d.city2_code = (SELECT city_code FROM City WHERE city_name = 'Boston')) AS f ON c.city_code = f.farthest_city ORDER BY c.latitude DESC NULLS LAST LIMIT 1;
SELECT c.city_name FROM City c JOIN (SELECT d.city1_code AS max_distance_city FROM Direct_distance d WHERE d.distance = (SELECT MAX(distance) FROM Direct_distance)) m ON c.city_code = m.max_distance_city;
SELECT c.city_code, SUM(d.distance) AS total_distance FROM City c CROSS JOIN Direct_distance d GROUP BY c.city_code
SELECT c.city_code, SUM(d.distance) AS total_distance FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code OR c.city_code = d.city2_code GROUP BY c.city_code
SELECT c.city_name, AVG(d.distance) AS avg_distance FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code OR c.city_code = d.city2_code GROUP BY c.city_name
SELECT c.city_name, AVG(d.distance) AS avg_distance FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code OR c.city_code = d.city2_code GROUP BY c.city_name ORDER BY avg_distance NULLS LAST;
SELECT d.distance FROM Student s JOIN Direct_distance d ON s.city_code = d.city1_code WHERE s.Fname ilike '%Linda%' AND s.LName ilike '%Smith%' AND s.Fname ilike '%Tracy%' AND s.LName ilike '%Kim%';
SELECT d.distance FROM Student s JOIN City c ON s.city_code = c.city_code JOIN Direct_distance d ON c.city_code = d.city1_code WHERE (s.LName, s.Fname) IN (('Smith', 'Linda'), ('Kim', 'Tray'))
SELECT s.Fname, s.LName FROM Student s JOIN City c ON s.city_code = c.city_code WHERE (s.Fname ||'' || s.LName)!= 'Linda Smith' ORDER BY (c.latitude - 37.7749)^2 + (c.longitude - -122.4194)^2 DESC LIMIT 1;
SELECT s.Fname, s.LName FROM Student s JOIN Direct_distance d ON s.city_code = d.city1_code WHERE (s.Fname ||'' || s.LName)!= 'Linda Smith' ORDER BY d.distance DESC LIMIT 1;
SELECT c.state FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(s.fname) = 'linda';
SELECT c.state FROM Student s JOIN City c ON s.city_code = c.city_code WHERE LOWER(s.fname) = 'linda'
SELECT * FROM Sailors WHERE age > 30;
SELECT s.name, s.age FROM Sailors s WHERE s.age > 30;
SELECT s.name, s.age FROM Sailors s WHERE s.age < 30 ORDER BY s.age NULLS LAST;
SELECT s.name, s.age FROM Sailors s WHERE s.age < 30 ORDER BY s.age NULLS LAST;
SELECT b.name FROM Boats b JOIN Reserves r ON b.bid = r.bid WHERE r.sid = 1;
SELECT DISTINCT r.bid FROM Reserves r WHERE r.sid = 1;
SELECT s.name FROM Reserves r JOIN Sailors s ON r.sid = s.sid WHERE r.bid = 102;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 102;
SELECT DISTINCT r.bid FROM Reserves r
SELECT r.bid FROM Reserves r;
SELECT s.name FROM Sailors s WHERE s.name ilike '%e%' ORDER BY s.name NULLS LAST;
SELECT s.name FROM Sailors s WHERE s.name ilike '%e%' ORDER BY s.name NULLS LAST;
SELECT s.sid FROM Sailors s WHERE s.age > ALL (SELECT age FROM Sailors);
SELECT s.sid FROM Sailors s WHERE s.age!= (SELECT MIN(age) FROM Sailors);
SELECT s.name FROM Sailors s WHERE s.age > (SELECT MAX(s2.age) FROM Sailors s2 WHERE s2.rating > 7) GROUP BY s.name;
SELECT s.name FROM Sailors s WHERE s.age > (SELECT MAX(s2.age) FROM Sailors s2 WHERE s2.rating > 7);
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.name, s.sid HAVING COUNT(r.bid) > 0 ORDER BY s.name NULLS LAST;
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.name, s.sid HAVING COUNT(r.bid) > 0 ORDER BY s.name NULLS LAST;
SELECT s.sid, s.name FROM Sailors s JOIN (SELECT r.sid, COUNT(r.bid) AS num_reservations FROM Reserves r GROUP BY r.sid HAVING COUNT(r.bid) > 1) AS t ON s.sid = t.sid ORDER BY s.sid NULLS LAST;
SELECT s.name FROM Sailors s JOIN (SELECT r.sid FROM Reserves r GROUP BY r.sid HAVING COUNT(r.bid) >= 2) AS t ON s.sid = t.sid ORDER BY s.name NULLS LAST;
SELECT DISTINCT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue') ORDER BY r.sid NULLS LAST;
SELECT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue') ORDER BY r.sid NULLS LAST;
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue') ORDER BY s.name NULLS LAST;
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue') ORDER BY s.name NULLS LAST;
SELECT DISTINCT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue') ORDER BY r.sid NULLS LAST;
SELECT DISTINCT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) IN ('red', 'blue') ORDER BY r.sid NULLS LAST;
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') GROUP BY s.name, s.sid;
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') GROUP BY s.name, s.sid ORDER BY s.name NULLS LAST;
SELECT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
SELECT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
SELECT s.name, s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
SELECT s.name, s.sid FROM Sailors s LEFT JOIN Reserves r ON s.sid = r.sid WHERE r.sid IS NULL;
SELECT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
SELECT s.sid FROM Sailors s WHERE s.sid NOT IN (SELECT r.sid FROM Reserves r);
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 103;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 103;
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 WHERE s2.name = 'Luis');
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(rating) FROM Sailors sr WHERE sr.name = 'Luis');
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(rating) FROM Sailors sr WHERE sr.name = 'Luis');
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(rating) FROM Sailors WHERE name = 'Luis') ORDER BY s.name NULLS LAST;
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE s.rating > 2 ORDER BY s.sid NULLS LAST;
SELECT s.name, s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE s.rating >= 3 ORDER BY s.name NULLS LAST;
SELECT s.name, s.age FROM Sailors s WHERE s.age = (SELECT MAX(s2.age) FROM Sailors s2);
SELECT s.name, s.age FROM Sailors s WHERE s.age = (SELECT MAX(age) FROM Sailors);
SELECT COUNT(*) FROM Sailors;
SELECT COUNT(*) FROM Sailors;
SELECT AVG(s.age) FROM Sailors s WHERE s.rating = 7;
SELECT AVG(s.age) FROM Sailors s WHERE s.rating = 7;
SELECT COUNT(*) FROM Sailors s WHERE LOWER(s.name) LIKE 'd%';
SELECT COUNT(*) FROM Sailors s WHERE LOWER(s.name) LIKE 'd%';
SELECT AVG(s.rating) AS average_rating, MAX(s.age) AS max_age FROM Sailors s;
SELECT AVG(s.rating) AS average_rating, MAX(s.age) AS max_age FROM Sailors s;
SELECT r.bid, COUNT(r.day) AS num_reservations FROM Reserves r GROUP BY r.bid ORDER BY num_reservations DESC NULLS LAST;
SELECT r.bid, COUNT(r.sid) AS number_of_reservations FROM Reserves r GROUP BY r.bid ORDER BY number_of_reservations DESC NULLS LAST;
SELECT r.bid, COUNT(r.sid) AS num_reservations FROM Reserves r WHERE r.bid > 50 GROUP BY r.bid ORDER BY num_reservations DESC NULLS LAST;
SELECT r.bid, COUNT(r.sid) AS number_of_reservations FROM Reserves r WHERE r.bid > 50 GROUP BY r.bid ORDER BY number_of_reservations DESC NULLS LAST;
SELECT r.bid, COUNT(r.day) AS num_reservations FROM Reserves r GROUP BY r.bid HAVING COUNT(r.day) > 1 ORDER BY num_reservations DESC NULLS LAST;
SELECT r.bid, COUNT(r.day) AS number_of_reservations FROM Reserves r GROUP BY r.bid HAVING COUNT(r.day) > 1 ORDER BY number_of_reservations DESC NULLS LAST;
SELECT r.bid, COUNT(r.sid) AS num_reservations FROM Reserves r WHERE r.sid > 1 GROUP BY r.bid ORDER BY r.bid NULLS LAST;
SELECT r.bid, COUNT(r.sid) AS number_of_reservations FROM Reserves r WHERE r.sid > 1 GROUP BY r.bid ORDER BY number_of_reservations DESC NULLS LAST;
SELECT s.rating, AVG(s.age) AS average_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red' GROUP BY s.rating ORDER BY s.rating NULLS LAST;
SELECT s.rating, AVG(s.age) AS average_age FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red' GROUP BY s.rating ORDER BY s.rating NULLS LAST;
SELECT s.name, s.rating, s.age FROM Sailors s ORDER BY s.rating DESC, s.age ASC;
SELECT s.name, s.rating, s.age FROM Sailors s ORDER BY s.rating DESC, s.age ASC;
SELECT COUNT(*) FROM Boats;
SELECT COUNT(*) FROM Boats;
SELECT COUNT(*) FROM Boats b WHERE LOWER(b.color) ='red';
SELECT COUNT(*) FROM Boats b WHERE LOWER(b.color) ='red';
SELECT b.name FROM Boats b JOIN Reserves r ON b.bid = r.bid JOIN Sailors s ON r.sid = s.sid WHERE s.age BETWEEN 20 AND 30;
SELECT b.name FROM Boats b JOIN Reserves r ON b.bid = r.bid JOIN Sailors s ON r.sid = s.sid WHERE s.age BETWEEN 20 AND 30 ORDER BY b.name NULLS LAST;
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 JOIN Reserves r ON s2.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red');
SELECT s.name FROM Sailors s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailors s2 JOIN Reserves r ON s2.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.color) ='red');
SELECT MAX(s.rating) AS highest_rating FROM Sailors s;
SELECT MAX(rating) AS max_rating FROM Sailors;
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.name) ='melon';
SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE LOWER(b.name) ='melon';
SELECT s.name, s.age FROM Sailors s ORDER BY s.rating DESC;
SELECT s.name, s.age FROM Sailors s ORDER BY s.rating DESC;
SELECT h.Model FROM headphone h ORDER BY h.Price DESC NULLS LAST LIMIT 1;
SELECT h.model FROM headphone h WHERE h.price = (SELECT MAX(h2.price) FROM headphone h2);
SELECT DISTINCT h.Model FROM headphone h ORDER BY h.Model ASC;
SELECT DISTINCT h.Model FROM headphone h ORDER BY h.Model ASC;
SELECT h.class, COUNT(h.class) AS count FROM headphone h GROUP BY h.class ORDER BY count DESC LIMIT 1;
SELECT h.class, COUNT(h.headphone_id) AS count FROM headphone h GROUP BY h.class ORDER BY count DESC LIMIT 1;
SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(h.headphone_id) > 2 ORDER BY h.class NULLS LAST;
SELECT h.class FROM headphone h GROUP BY h.class HAVING COUNT(h.headphone_id) <= 2;
SELECT h.class, COUNT(*) AS count_headphones FROM headphone h WHERE h.price > 200 GROUP BY h.class ORDER BY h.class NULLS LAST;
SELECT h.class, COUNT(*) AS number_of_headphones FROM headphone h WHERE h.price > 200 GROUP BY h.class ORDER BY number_of_headphones DESC NULLS LAST;
SELECT COUNT(DISTINCT h.Earpads) FROM headphone h;
SELECT COUNT(DISTINCT h.Earpads) FROM headphone h;
SELECT h.Earpads, COUNT(*) AS usage_count FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY h.Earpads ORDER BY usage_count DESC LIMIT 2;
SELECT h.Earpads, COUNT(h.Earpads) AS Count FROM headphone h GROUP BY h.Earpads ORDER BY Count DESC LIMIT 2;
SELECT h.model, h.class, h.construction FROM headphone h WHERE h.price = (SELECT MIN(h2.price) FROM headphone h2);
SELECT h.model, h.class, h.construction FROM headphone h WHERE h.price = (SELECT MIN(h2.price) FROM headphone h2);
SELECT h.Construction, AVG(h.Price) AS Average_Price FROM headphone h GROUP BY h.Construction ORDER BY h.Construction NULLS LAST;
SELECT h.construction, AVG(h.price) AS average_price FROM headphone h GROUP BY h.construction ORDER BY h.construction NULLS LAST;
SELECT h.class FROM headphone h WHERE h.earpads IN ('Bowls', 'Comfort Pads') GROUP BY h.class HAVING COUNT(DISTINCT CASE WHEN h.earpads = 'Bowls' THEN h.headphone_id END) > 0 AND COUNT(DISTINCT CASE WHEN h.earpads = 'Comfort Pads' THEN h.headphone_id END) > 0 ORDER BY h.class NULLS LAST;
SELECT DISTINCT h.Class FROM headphone h WHERE h.Earpads IN ('Bowls', 'Comfort Pads') ORDER BY h.Class NULLS LAST;
SELECT DISTINCT h.Earpads FROM headphone h WHERE h.Construction!= 'plastic' ORDER BY h.Earpads NULLS LAST;
SELECT h.Earpads FROM headphone h WHERE h.Construction!= 'plastic' ORDER BY h.Earpads NULLS LAST;
SELECT h.model FROM headphone h WHERE h.price < (SELECT AVG(h2.price) FROM headphone h2);
SELECT h.model FROM headphone h WHERE h.price < (SELECT AVG(h2.price) FROM headphone h2);
SELECT s.name, TO_DATE(s.date_opened, 'YYYY-MM-DD') AS date_opened FROM store s ORDER BY date_opened;
SELECT s.name, TO_DATE(s.date_opened, 'YYYY-MM-DD') AS date_opened FROM store s ORDER BY date_opened;
SELECT s.Name, s.Parking FROM store s WHERE LOWER(s.Neighborhood) = 'tarzana' ORDER BY s.Name NULLS LAST;
SELECT s.Name, s.Parking FROM store s WHERE LOWER(s.Neighborhood) = 'tarzana' ORDER BY s.Name NULLS LAST;
SELECT COUNT(DISTINCT s.Neighborhood) FROM store s;
SELECT COUNT(DISTINCT s.Neighborhood) FROM store s;
SELECT s.Neighborhood, COUNT(s.Store_ID) AS store_count FROM store s GROUP BY s.Neighborhood ORDER BY store_count DESC NULLS LAST;
SELECT s.Neighborhood, COUNT(s.Store_ID) AS number_of_stores FROM store s GROUP BY s.Neighborhood ORDER BY number_of_stores DESC NULLS LAST;
SELECT s.Name, SUM(s.Quantity) AS total_headphones FROM stock s GROUP BY s.Store_ID ORDER BY total_headphones DESC LIMIT 1;
SELECT s.Name, SUM(st.Quantity) AS Total_Quantity FROM stock st JOIN store s ON st.Store_ID = s.Store_ID GROUP BY s.Name ORDER BY Total_Quantity DESC NULLS LAST;
SELECT s.Name FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock st WHERE st.Store_ID = s.Store_ID)
SELECT s.Name FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock st WHERE st.Store_ID = s.Store_ID)
SELECT h.Model FROM headphone h WHERE NOT EXISTS (SELECT 1 FROM stock s WHERE s.Headphone_ID = h.Headphone_ID)
SELECT h.Model FROM headphone h WHERE NOT EXISTS (SELECT 1 FROM stock s WHERE s.Headphone_ID = h.Headphone_ID)
SELECT h.Model, SUM(s.Quantity) AS total_quantity FROM stock s JOIN headphone h ON s.Headphone_ID = h.Headphone_ID GROUP BY h.Model ORDER BY total_quantity DESC LIMIT 1;
SELECT h.Model, SUM(s.Quantity) AS Total_Quantity FROM stock s JOIN headphone h ON s.Headphone_ID = h.Headphone_ID GROUP BY h.Model ORDER BY Total_Quantity DESC LIMIT 1;
SELECT SUM(s.Quantity) AS total_headphones FROM stock s JOIN store st ON s.Store_ID = st.Store_ID WHERE LOWER(st.Name) = 'woodman';
SELECT SUM(s.Quantity) AS Total_Quantity FROM stock s JOIN store st ON s.Store_ID = st.Store_ID WHERE LOWER(st.Name) = 'woodman';
SELECT s.Neighborhood FROM store s WHERE s.Store_ID NOT IN (SELECT s.Store_ID FROM stock) ORDER BY s.Neighborhood NULLS LAST;
SELECT s.Neighborhood FROM store s WHERE NOT EXISTS (SELECT 1 FROM stock st WHERE st.Store_ID = s.Store_ID) ORDER BY s.Neighborhood NULLS LAST LIMIT 1;
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Paper;
SELECT COUNT(*) FROM Paper;
SELECT COUNT(*) FROM Affiliation;
SELECT COUNT(*) FROM Affiliation;
SELECT COUNT(*) FROM Paper p WHERE LOWER(p.venue) = 'naacl' AND p.year = 2000;
SELECT COUNT(*) FROM Paper p WHERE LOWER(p.venue) = 'naacl' AND p.year = 2000;
SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.affiliation_id::text) = 'columbia university' AND p.year = 2009;
SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.affiliation_id::text) = 'columbia university' AND p.year = 2009;
SELECT a.name AS affiliation_name, a.address FROM Affiliation a ORDER BY a.name;
SELECT a.affiliation_id, a.name, a.address FROM Affiliation a ORDER BY a.affiliation_id;
SELECT p.venue, p.year FROM Paper p ORDER BY p.year;
SELECT p.venue, p.year FROM Paper p GROUP BY p.venue, p.year ORDER BY p.year NULLS LAST;
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE LOWER(af.name) = 'harvard university' ORDER BY p.year DESC;
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id JOIN Affiliation af ON al.affiliation_id = af.affiliation_id WHERE LOWER(af.name) = 'harvard university' ORDER BY p.year DESC;
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.author_id::text) ='mckeown' ORDER BY p.year DESC;
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.author_id::text) ='mckeown' ORDER BY p.year DESC;
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name IN ('Stanford University', 'Columbia University')) GROUP BY p.paper_id, p.title ORDER BY p.paper_id;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name ilike '%Stanford%') AND al.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name ilike '%Columbia%');
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown,%Kathleen%' OR name ilike '%Rambow,%Owen%') GROUP BY p.paper_id, p.title ORDER BY p.paper_id NULLS LAST;
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown,%Kathleen%' OR name ilike '%Rambow,%Owen%') GROUP BY p.title, p.paper_id;
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown%') AND al.author_id NOT IN (SELECT author_id FROM Author WHERE name ilike '%Rambow%');
SELECT p.title, p.paper_id FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown%') AND al.author_id NOT IN (SELECT author_id FROM Author WHERE name ilike '%Rambow%');
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown,%Kathleen%' OR name ilike '%Rambow,%Owen%') ORDER BY p.year DESC;
SELECT p.paper_id, p.title FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown,%Kathleen%' OR name ilike '%Rambow,%Owen%') ORDER BY p.paper_id NULLS LAST;
SELECT a.name, COUNT(al.paper_id) AS num_papers FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name ORDER BY num_papers DESC;
SELECT a.name, COUNT(al.paper_id) AS paper_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name ORDER BY paper_count DESC;
SELECT a.name, COUNT(al.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id GROUP BY a.name ORDER BY paper_count ASC;
SELECT a.name, COUNT(al.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id GROUP BY a.name ORDER BY paper_count DESC;
SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name HAVING COUNT(al.paper_id) > 50 ORDER BY a.name;
SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name HAVING COUNT(al.paper_id) > 50 ORDER BY a.name;
SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name HAVING COUNT(al.paper_id) = 1;
SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id GROUP BY a.name HAVING COUNT(al.paper_id) = 1;
SELECT p.venue, p.year, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue, p.year ORDER BY publication_count DESC LIMIT 1;
SELECT p.venue, p.year, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue, p.year ORDER BY publication_count DESC LIMIT 1;
SELECT p.venue FROM Paper p GROUP BY p.venue ORDER BY COUNT(p.paper_id) ASC LIMIT 1;
SELECT p.venue, COUNT(p.paper_id) AS publication_count FROM Paper p GROUP BY p.venue ORDER BY publication_count ASC LIMIT 1;
SELECT COUNT(*) FROM Citation c WHERE c.cited_paper_id = 'A00-1002';
SELECT COUNT(DISTINCT c.paper_id) FROM Citation c WHERE c.cited_paper_id = 'A00-1002';
SELECT COUNT(DISTINCT c.cited_paper_id) FROM Citation c WHERE c.paper_id = 'D12-1027';
SELECT COUNT(c.cited_paper_id) AS num_citations FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id WHERE p.paper_id = 'D12-1027';
SELECT p.paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY citation_count DESC LIMIT 1;
SELECT p.paper_id, COUNT(c.cited_paper_id) AS num_citations FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY num_citations DESC LIMIT 1;
SELECT p.title FROM Paper p JOIN (SELECT c.cited_paper_id, COUNT(c.paper_id) AS citation_count FROM Citation c GROUP BY c.cited_paper_id ORDER BY citation_count DESC LIMIT 1) AS cc ON p.paper_id = cc.cited_paper_id;
SELECT p.title FROM Paper p JOIN (SELECT c.paper_id, COUNT(c.cited_paper_id) AS num_citations FROM Citation c GROUP BY c.paper_id ORDER BY num_citations DESC LIMIT 1) AS m ON p.paper_id = m.paper_id;
SELECT p.paper_id, COUNT(c.cited_paper_id) AS num_citations FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY num_citations DESC LIMIT 10;
SELECT p.paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Paper p JOIN Citation c ON p.paper_id = c.paper_id GROUP BY p.paper_id ORDER BY citation_count DESC LIMIT 10;
SELECT COUNT(*) AS total_citations FROM Citation c JOIN Paper p ON c.paper_id = p.paper_id JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE LOWER(a.name) ='mckeown,kathleen';
SELECT COUNT(*) AS num_citations FROM Citation c JOIN Paper p ON c.cited_paper_id = p.paper_id JOIN Author_list al ON p.paper_id = al.paper_id JOIN Author a ON al.author_id = a.author_id WHERE LOWER(a.name) ='mckeown,kathleen';
SELECT COUNT(DISTINCT c.cited_paper_id) AS number_of_citations FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id WHERE LOWER(al.author_id::text) ='mckeown,kathleen';
SELECT COUNT(DISTINCT c.cited_paper_id) AS num_citations FROM Citation c JOIN Author_list al ON c.paper_id = al.paper_id WHERE LOWER(al.author_id::text) ='mckeown,kathleen';
SELECT a.name, COUNT(c.cited_paper_id) AS num_citations FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id LEFT JOIN Citation c ON p.paper_id = c.cited_paper_id GROUP BY a.name ORDER BY num_citations DESC LIMIT 1;
SELECT a.name, COUNT(c.paper_id) AS num_citations FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id LEFT JOIN Citation c ON p.paper_id = c.paper_id GROUP BY a.name ORDER BY num_citations DESC LIMIT 1;
SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.author_id::text) = 'kathleen mckeown' ORDER BY p.year NULLS LAST;
SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.author_id::text) = 'kathleen mckeown' ORDER BY p.year NULLS LAST;
SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University') ORDER BY p.year;
SELECT p.venue, p.year FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE al.affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University') ORDER BY p.year;
SELECT a.name, COUNT(al.paper_id) AS paper_count FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY paper_count DESC LIMIT 1;
SELECT a.name FROM Author a JOIN (SELECT al.author_id, COUNT(DISTINCT al.paper_id) AS paper_count FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY al.author_id ORDER BY paper_count DESC LIMIT 1) sub ON a.author_id = sub.author_id;
SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY paper_count DESC LIMIT 3;
SELECT a.name, COUNT(p.paper_id) AS paper_count FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.year = 2009 GROUP BY a.name ORDER BY paper_count DESC LIMIT 3;
SELECT COUNT(p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.affiliation_id::text) = 'columbia university' AND p.year <= 2009;
SELECT COUNT(p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.affiliation_id::text) = 'columbia university' AND p.year <= 2009;
SELECT COUNT(DISTINCT p.paper_id) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.affiliation_id::text) ='stanford university' AND p.year BETWEEN 2000 AND 2009;
SELECT COUNT(*) FROM Paper p JOIN Author_list al ON p.paper_id = al.paper_id WHERE LOWER(al.affiliation_id::text) ='stanford university' AND p.year BETWEEN 2000 AND 2009;
SELECT p.title FROM Paper p JOIN (SELECT al.paper_id, COUNT(DISTINCT al.author_id) AS author_count FROM Author_list al GROUP BY al.paper_id ORDER BY author_count DESC LIMIT 1) AS ac ON p.paper_id = ac.paper_id;
SELECT p.title FROM Paper p JOIN (SELECT al.paper_id, COUNT(DISTINCT al.author_id) AS author_count FROM Author_list al GROUP BY al.paper_id ORDER BY author_count DESC LIMIT 1) AS ac ON p.paper_id = ac.paper_id;
SELECT COUNT(DISTINCT al.author_id) FROM Author a JOIN Author_list al ON a.author_id = al.author_id WHERE LOWER(a.name) ='mckeown,kathleen';
SELECT COUNT(DISTINCT al.author_id) FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE LOWER(a.name) ='mckeown, kathleen';
SELECT COUNT(DISTINCT al.paper_id) AS paper_count FROM Author_list al JOIN Author a ON al.author_id = a.author_id WHERE LOWER(a.name) LIKE '%mckeown,%kathleen%' GROUP BY a.author_id ORDER BY paper_count DESC LIMIT 1;
SELECT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id WHERE al.author_id!= (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') GROUP BY a.name ORDER BY COUNT(al.paper_id) DESC LIMIT 1;
SELECT p.paper_id FROM Paper p WHERE LOWER(p.title) LIKE '%translation%' ORDER BY p.paper_id;
SELECT p.paper_id FROM Paper p WHERE LOWER(p.title) LIKE '%translation%' ORDER BY p.paper_id;
SELECT p.paper_id, p.title FROM Paper p WHERE p.paper_id NOT IN (SELECT c.cited_paper_id FROM Citation c);
SELECT p.paper_id, p.title FROM Paper p WHERE p.paper_id NOT IN (SELECT c.cited_paper_id FROM Citation c UNION SELECT c.paper_id FROM Citation c);
SELECT a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id GROUP BY a.name HAVING a.address ilike '%China%' ORDER BY COUNT(al.paper_id) DESC LIMIT 1;
SELECT a.name FROM Affiliation a JOIN Author_list al ON a.affiliation_id = al.affiliation_id WHERE a.address ilike '%China%' GROUP BY a.name ORDER BY COUNT(al.paper_id) DESC LIMIT 1;
SELECT p.venue, p.year, COUNT(p.paper_id) AS num_papers FROM Paper p GROUP BY p.venue, p.year ORDER BY p.venue, p.year;
SELECT p.venue, p.year, COUNT(p.paper_id) AS number_of_papers FROM Paper p GROUP BY p.venue, p.year ORDER BY p.venue, p.year;
SELECT al.affiliation_id, COUNT(DISTINCT al.paper_id) AS paper_count FROM Author_list al GROUP BY al.affiliation_id ORDER BY paper_count DESC;
SELECT al.affiliation_id, COUNT(DISTINCT al.paper_id) AS paper_count FROM Author_list al GROUP BY al.affiliation_id ORDER BY paper_count DESC;
SELECT p.title FROM Paper p JOIN (SELECT c.paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Citation c GROUP BY c.paper_id HAVING COUNT(c.cited_paper_id) > 50) cc ON p.paper_id = cc.paper_id ORDER BY p.title;
SELECT p.title FROM Paper p JOIN (SELECT c.paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Citation c GROUP BY c.paper_id HAVING COUNT(c.cited_paper_id) > 50) cc ON p.paper_id = cc.paper_id ORDER BY p.title;
SELECT COUNT(DISTINCT al.author_id) FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id LEFT JOIN (SELECT c.cited_paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Citation c GROUP BY c.cited_paper_id HAVING COUNT(c.cited_paper_id) > 50) cc ON p.paper_id = cc.cited_paper_id WHERE cc.cited_paper_id IS NULL;
SELECT COUNT(DISTINCT al.author_id) FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id LEFT JOIN (SELECT c.paper_id, COUNT(c.cited_paper_id) AS citation_count FROM Citation c GROUP BY c.paper_id HAVING COUNT(c.cited_paper_id) > 50) cc ON p.paper_id = cc.paper_id WHERE cc.paper_id IS NULL;
SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE LOWER(p.venue) IN ('naacl', 'acl') AND p.year = 2009 ORDER BY a.name;
SELECT DISTINCT a.name FROM Author a JOIN Author_list al ON a.author_id = al.author_id JOIN Paper p ON al.paper_id = p.paper_id WHERE p.venue IN ('NAACL', 'ACL') AND p.year = 2009;
SELECT DISTINCT a.name FROM Author a WHERE a.author_id NOT IN (SELECT al.author_id FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE LOWER(p.venue) = 'acl')
SELECT DISTINCT a.name FROM Author a WHERE a.author_id NOT IN (SELECT al.author_id FROM Author_list al JOIN Paper p ON al.paper_id = p.paper_id WHERE LOWER(p.venue) = 'acl') ORDER BY a.name;
SELECT COUNT(*) FROM conference;
SELECT COUNT(*) FROM conference;
SELECT DISTINCT c.Conference_Name FROM conference c ORDER BY c.Conference_Name NULLS LAST;
SELECT DISTINCT c.Conference_Name FROM conference c ORDER BY c.Conference_Name NULLS LAST;
SELECT c.Conference_Name, c.Year, c.Location FROM conference c ORDER BY c.Year NULLS LAST;
SELECT c.Conference_Name, c.Year, c.Location FROM conference c ORDER BY c.Year NULLS LAST;
SELECT c.Conference_Name, COUNT(c.Conference_ID) AS num_conferences FROM conference c GROUP BY c.Conference_Name ORDER BY num_conferences DESC NULLS LAST;
SELECT c.Conference_Name, COUNT(c.Conference_ID) AS number_of_conferences FROM conference c GROUP BY c.Conference_Name ORDER BY number_of_conferences DESC NULLS LAST;
SELECT c.year, COUNT(c.conference_id) AS num_conferences FROM conference c GROUP BY c.year ORDER BY c.year NULLS LAST;
SELECT c.year, COUNT(c.conference_id) AS number_of_conferences FROM conference c GROUP BY c.year ORDER BY c.year NULLS LAST;
SELECT c.year FROM conference c GROUP BY c.year ORDER BY COUNT(c.conference_id) ASC LIMIT 1;
SELECT c.year FROM conference c GROUP BY c.year ORDER BY COUNT(c.conference_id) ASC LIMIT 1;
SELECT c.Location FROM conference c GROUP BY c.Location HAVING COUNT(c.Conference_ID) >= 2 ORDER BY c.Location NULLS LAST;
SELECT c.Location FROM conference c GROUP BY c.Location HAVING COUNT(c.Conference_ID) >= 2 ORDER BY c.Location NULLS LAST;
SELECT i.Institution_Name, i.Location, TO_CHAR(TO_TIMESTAMP(i.Founded), 'YYYY') AS Founded FROM institution i ORDER BY i.Institution_Name NULLS LAST;
SELECT i.institution_name, i.location, TO_CHAR(TO_TIMESTAMP(i.founded), 'YYYY') AS founded_year FROM institution i ORDER BY i.institution_name NULLS LAST;
SELECT COUNT(*) FROM institution i WHERE i.founded BETWEEN 1850 AND 1900;
SELECT COUNT(*) FROM institution i WHERE i.founded BETWEEN 1850 AND 1900;
SELECT i.Institution_Name, i.Location FROM institution i ORDER BY i.Founded DESC LIMIT 1;
SELECT i.Institution_Name, i.Location FROM institution i ORDER BY i.Founded DESC LIMIT 1;
SELECT i.Institution_Name, COUNT(s.staff_ID) AS num_staff FROM institution i JOIN staff s ON i.Institution_ID = s.Institution_ID WHERE i.Founded > 1800 GROUP BY i.Institution_Name ORDER BY num_staff DESC NULLS LAST;
SELECT i.institution_id, COUNT(s.staff_id) AS number_of_staff, s.name FROM institution i JOIN staff s ON i.institution_id = s.institution_id WHERE i.founded > 1800 GROUP BY i.institution_id, s.name ORDER BY number_of_staff DESC NULLS LAST;
SELECT i.Institution_Name FROM institution i WHERE i.Institution_ID NOT IN (SELECT s.Institution_ID FROM staff s)
SELECT i.Institution_Name FROM institution i WHERE i.Institution_ID NOT IN (SELECT s.Institution_ID FROM staff s) ORDER BY i.Institution_Name NULLS LAST LIMIT 1;
SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(age) FROM staff);
SELECT s.name FROM staff s WHERE s.age > (SELECT AVG(age) FROM staff);
SELECT MAX(s.Age) AS max_age, MIN(s.Age) AS min_age FROM staff s WHERE LOWER(s.Nationality) = 'american' OR LOWER(s.Nationality) = 'united states';
SELECT MAX(s.Age) AS max_age, MIN(s.Age) AS min_age FROM staff s;
SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID JOIN staff s ON cp.staff_ID = s.staff_ID WHERE LOWER(s.Nationality) = 'canadian' ORDER BY c.Conference_Name NULLS LAST;
SELECT c.Conference_Name FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID JOIN staff s ON cp.staff_ID = s.staff_ID WHERE LOWER(s.Nationality) = 'canadian' ORDER BY c.Conference_Name NULLS LAST;
SELECT s.name FROM staff s WHERE s.staff_ID IN (SELECT cp.staff_ID FROM conference_participation cp WHERE LOWER(cp.role) ='speaker' AND cp.staff_ID IN (SELECT cp2.staff_ID FROM conference_participation cp2 WHERE LOWER(cp2.role) ='sponsor')) ORDER BY s.name NULLS LAST;
SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID WHERE LOWER(cp.role) IN ('speaker','sponsor') GROUP BY s.name HAVING COUNT(DISTINCT CASE WHEN LOWER(cp.role) ='speaker' THEN cp.Conference_ID ELSE NULL END) > 0 AND COUNT(DISTINCT CASE WHEN LOWER(cp.role) ='sponsor' THEN cp.Conference_ID ELSE NULL END) > 0;
SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID WHERE cp.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name ilike '%ACL%') AND cp.staff_ID IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name ilike '%NACCL%')) GROUP BY s.name;
SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID WHERE cp.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name ilike '%ACL%') AND cp.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name ilike '%NACCL%');
SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.year IN (2003, 2004) ORDER BY s.name NULLS LAST;
SELECT s.name FROM staff s JOIN conference_participation cp ON s.staff_ID = cp.staff_ID JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.year BETWEEN 2003 AND 2004 ORDER BY s.name NULLS LAST;
SELECT c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS participant_count FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name, c.Year ORDER BY c.Conference_Name NULLS LAST, c.Year NULLS LAST;
SELECT c.Conference_ID, c.Conference_Name, c.Year, COUNT(cp.staff_ID) AS num_participants FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_ID, c.Conference_Name, c.Year ORDER BY c.Conference_ID NULLS LAST;
SELECT c.Conference_Name, COUNT(cp.staff_ID) AS attendance_count FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY attendance_count DESC LIMIT 2
SELECT c.Conference_Name, COUNT(cp.staff_ID) AS attendance FROM conference c JOIN conference_participation cp ON c.Conference_ID = cp.Conference_ID GROUP BY c.Conference_Name ORDER BY attendance DESC LIMIT 2;
SELECT s.name, s.nationality FROM staff s LEFT JOIN conference_participation cp ON s.staff_ID = cp.staff_ID WHERE cp.staff_ID IS NULL;
SELECT s.name, s.nationality FROM staff s WHERE NOT EXISTS (SELECT 1 FROM conference_participation cp WHERE cp.staff_ID = s.staff_ID AND cp.Conference_ID IN (SELECT c.Conference_ID FROM conference c WHERE c.Location LIKE '%ACL%')) ORDER BY s.name NULLS LAST;
SELECT i.Institution_Name, i.Location FROM institution i LEFT JOIN (SELECT cp.staff_ID, c.Location AS Conference_Location FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004) AS cp2 ON i.Institution_ID = cp2.staff_ID WHERE cp2.staff_ID IS NULL;
SELECT i.Institution_Name, i.Location FROM institution i LEFT JOIN (SELECT cp.staff_ID, c.Location AS conference_location FROM conference_participation cp JOIN conference c ON cp.Conference_ID = c.Conference_ID WHERE c.Year = 2004) AS cp2 ON i.Institution_ID = cp2.staff_ID WHERE cp2.staff_ID IS NULL;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age = (SELECT MIN(ps2.age) FROM PilotSkills ps2);
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age = (SELECT MIN(ps2.age) FROM PilotSkills ps2);
SELECT ps.pilot_name, AVG(ps.age) AS avg_age FROM PilotSkills ps GROUP BY ps.pilot_name HAVING MIN(ps.age) < AVG(ps.age) ORDER BY ps.age ASC;
SELECT ps.pilot_name, AVG(ps.age) AS avg_age FROM PilotSkills ps GROUP BY ps.pilot_name HAVING MIN(ps.age) < AVG(ps.age) ORDER BY ps.age ASC;
SELECT ps.pilot_name, ps.age FROM PilotSkills ps WHERE ps.age < 30;
SELECT ps.pilot_name, ps.age FROM PilotSkills ps WHERE ps.age < 30;
SELECT ps.pilot_name FROM PilotSkills ps WHERE LOWER(ps.plane_name) = 'piper cub' AND ps.age < 35;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age < 35 AND LOWER(ps.plane_name) = 'piper cub' ORDER BY ps.pilot_name;
SELECT h.location FROM Hangar h WHERE h.plane_name = 'F-14 Fighter';
SELECT h.location FROM Hangar h WHERE h.plane_name = 'F-14 Fighter'
SELECT COUNT(DISTINCT h.location) FROM Hangar h;
SELECT COUNT(DISTINCT h.location) FROM Hangar h;
SELECT ps.plane_name FROM PilotSkills ps WHERE LOWER(ps.pilot_name) = 'jones' AND ps.age = 32;
SELECT ps.plane_name FROM PilotSkills ps WHERE LOWER(ps.pilot_name) = 'jones' AND ps.age = 32;
SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age > 40;
SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age > 40;
SELECT COUNT(*) AS number_of_planes FROM PilotSkills ps WHERE LOWER(ps.plane_name) = 'b-52 bomber' AND ps.age < 35;
SELECT COUNT(*) AS num_bombers FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(h.location) = 'b-52 bomber' AND ps.age < 35;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' ORDER BY ps.age ASC LIMIT 1;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' ORDER BY ps.age ASC LIMIT 1;
SELECT h.plane_name FROM Hangar h GROUP BY h.plane_name ORDER BY COUNT(h.plane_name) DESC LIMIT 1;
SELECT h.plane_name FROM Hangar h GROUP BY h.plane_name ORDER BY COUNT(h.plane_name) DESC LIMIT 1;
SELECT h.plane_name FROM Hangar h ORDER BY COUNT(DISTINCT ps.pilot_name) ASC LIMIT 1;
SELECT h.plane_name FROM Hangar h WHERE (SELECT COUNT(*) FROM PilotSkills ps WHERE ps.plane_name = h.plane_name) = (SELECT MIN(ps2.plane_name) FROM PilotSkills ps2);
SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(h.location) = 'chicago';
SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(h.location) = 'chicago';
SELECT ps.plane_name FROM PilotSkills ps WHERE LOWER(ps.pilot_name) ='smith' AND ps.age = 41;
SELECT ps.plane_name FROM PilotSkills ps WHERE LOWER(ps.pilot_name) ='smith' AND ps.age = 41;
SELECT COUNT(DISTINCT ps.plane_name) FROM PilotSkills ps;
SELECT COUNT(DISTINCT ps.plane_name) FROM PilotSkills ps;
SELECT COUNT(DISTINCT ps.plane_name) AS number_of_planes FROM PilotSkills ps WHERE LOWER(ps.pilot_name) ='smith';
SELECT COUNT(*) AS num_planes FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(ps.pilot_name) ='smith';
SELECT COUNT(DISTINCT ps.plane_name) FROM PilotSkills ps WHERE ps.age > 40;
SELECT COUNT(DISTINCT ps.plane_name) FROM PilotSkills ps WHERE ps.age > 40;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age BETWEEN 30 AND 40 ORDER BY ps.age ASC;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age BETWEEN 30 AND 40 ORDER BY ps.age ASC;
SELECT ps.pilot_name, ps.age FROM PilotSkills ps ORDER BY ps.age DESC;
SELECT ps.pilot_name FROM PilotSkills ps ORDER BY ps.age DESC;
SELECT h.location FROM Hangar h ORDER BY h.plane_name;
SELECT h.plane_name, h.location FROM Hangar h ORDER BY h.plane_name;
SELECT DISTINCT h.plane_name FROM Hangar h ORDER BY h.plane_name ASC;
SELECT DISTINCT h.plane_name FROM Hangar h ORDER BY h.plane_name ASC;
SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age > 40 OR ps.age < 30;
SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age > 40 OR ps.age < 30;
SELECT ps.pilot_name, ps.age FROM PilotSkills ps WHERE (ps.plane_name = 'Piper Cub' AND ps.age > 35) OR (ps.plane_name = 'F-14 Fighter' AND ps.age < 30);
SELECT ps.pilot_name, ps.age FROM PilotSkills ps WHERE (ps.plane_name = 'Piper Cub' AND ps.age > 35) OR (ps.plane_name = 'F-14 Fighter' AND ps.age < 30);
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM PilotSkills p2 WHERE p2.pilot_name = ps.pilot_name AND p2.plane_name = 'B-52 Bomber') ORDER BY ps.pilot_name;
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' AND NOT EXISTS (SELECT 1 FROM PilotSkills p2 WHERE p2.pilot_name = ps.pilot_name AND p2.plane_name = 'B-52 Bomber') ORDER BY ps.pilot_name;
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'B-52 Bomber') ORDER BY ps.pilot_name;
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY ps.pilot_name HAVING COUNT(DISTINCT ps.plane_name) = 2;
SELECT AVG(ps.age) AS average_age, MIN(ps.age) AS minimum_age FROM PilotSkills ps;
SELECT AVG(ps.age), MIN(ps.age) FROM PilotSkills ps;
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location IN ('Austin', 'Boston') GROUP BY ps.pilot_name HAVING COUNT(DISTINCT h.location) = 2;
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location IN ('Austin', 'Boston') ORDER BY ps.pilot_name;
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'F-14 Fighter') ORDER BY ps.pilot_name;
SELECT DISTINCT ps.pilot_name FROM PilotSkills ps WHERE ps.plane_name IN ('Piper Cub', 'F-14 Fighter') ORDER BY ps.pilot_name;
SELECT ps.plane_name, AVG(ps.age) AS average_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY ps.plane_name;
SELECT ps.plane_name, AVG(ps.age) AS average_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY ps.plane_name;
SELECT COUNT(*) AS total_planes FROM Hangar;
SELECT h.plane_name, COUNT(*) AS num_entries FROM Hangar h GROUP BY h.plane_name ORDER BY num_entries DESC;
SELECT ps.plane_name, MIN(ps.age) AS min_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY ps.plane_name;
SELECT ps.plane_name, MIN(ps.age) AS min_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY ps.plane_name;
SELECT ps.plane_name, MAX(ps.age) AS max_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY max_age DESC;
SELECT ps.plane_name, MIN(ps.age) AS min_age FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY min_age ASC;
SELECT ps.pilot_name, MAX(ps.age) AS max_age FROM PilotSkills ps GROUP BY ps.pilot_name ORDER BY ps.pilot_name;
SELECT ps.pilot_name, MAX(ps.age) AS max_age FROM PilotSkills ps GROUP BY ps.pilot_name ORDER BY ps.pilot_name;
SELECT h.location AS city, COUNT(DISTINCT ps.pilot_name) AS num_pilots, AVG(ps.age) AS avg_age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name GROUP BY h.location ORDER BY h.location;
SELECT h.location, COUNT(DISTINCT ps.pilot_name) AS number_of_pilots, AVG(ps.age) AS average_age FROM Hangar h JOIN PilotSkills ps ON h.plane_name = ps.plane_name GROUP BY h.location ORDER BY number_of_pilots DESC NULLS LAST;
SELECT COUNT(DISTINCT ps.pilot_name) AS num_pilots FROM PilotSkills ps WHERE ps.age < 35 GROUP BY ps.plane_name HAVING AVG(ps.age) < 35;
SELECT ps.plane_name, COUNT(DISTINCT ps.pilot_name) AS number_of_pilots FROM PilotSkills ps WHERE ps.age < 35 GROUP BY ps.plane_name ORDER BY number_of_pilots DESC;
SELECT h.location FROM Hangar h JOIN PilotSkills ps ON h.plane_name = ps.plane_name WHERE ps.age = (SELECT MIN(ps2.age) FROM PilotSkills ps2);
SELECT h.location FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE ps.age = (SELECT MIN(age) FROM PilotSkills);
SELECT ps.pilot_name, ps.age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(h.location) = 'austin' ORDER BY ps.pilot_name;
SELECT ps.pilot_name, ps.age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE LOWER(h.location) = 'austin' ORDER BY ps.pilot_name;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY ps.pilot_name ASC;
SELECT ps.pilot_name FROM PilotSkills ps WHERE ps.age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY ps.pilot_name ASC;
SELECT COUNT(DISTINCT ps1.pilot_name) FROM PilotSkills ps1 JOIN PilotSkills ps2 ON ps1.age < ps2.age WHERE LOWER(ps1.plane_name) = 'f-14 fighter' AND LOWER(ps2.plane_name) = 'f-14 fighter';
SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps WHERE ps.plane_name = 'F-14' AND ps.age < ALL (SELECT age FROM PilotSkills WHERE plane_name = 'F-14');
SELECT DISTINCT h.plane_name FROM Hangar h WHERE h.plane_name LIKE '%Bomber%' ORDER BY h.plane_name;
SELECT DISTINCT h.plane_name FROM Hangar h WHERE h.plane_name ilike '%Bomber%' ORDER BY h.plane_name;
SELECT COUNT(DISTINCT ps.pilot_name) FROM PilotSkills ps WHERE ps.plane_name = 'Piper Cub' AND ps.age > ALL (SELECT age FROM PilotSkills WHERE plane_name = 'Piper Cub');
SELECT COUNT(*) FROM PilotSkills ps WHERE ps.age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub');
SELECT d.Name FROM district d ORDER BY d.Area_km DESC NULLS LAST LIMIT 1;
SELECT d.area_km, d.government_website FROM district d WHERE d.population = (SELECT MIN(population) FROM district);
SELECT d.name, d.population FROM district d WHERE d.area_km > (SELECT AVG(area_km) FROM district);
SELECT MAX(d.Area_km) AS largest_area, AVG(d.Area_km) AS average_area FROM district d
SELECT SUM(d.Population) AS Total_Population FROM district d WHERE d.Area_km IN (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3);
SELECT d.District_ID, d.Name, d.Government_website FROM district d ORDER BY d.Population DESC;
SELECT d.Name FROM district d WHERE d.Government_website ilike '%.gov%' ORDER BY d.Name NULLS LAST;
SELECT d.District_ID, d.Name FROM district d WHERE d.Population > 4000 OR d.Area_km > 3000 ORDER BY d.District_ID NULLS LAST;
SELECT s.Name, s.Speach_title FROM spokesman s ORDER BY s.Name NULLS LAST;
SELECT AVG(s.Points) AS average_points, AVG(s.Age) AS average_age FROM spokesman s WHERE s.Rank_position = 1
SELECT s.name, s.points FROM spokesman s WHERE s.age < 40 ORDER BY s.points DESC NULLS LAST;
SELECT s.Name FROM spokesman s WHERE s.Age = (SELECT MAX(s2.Age) FROM spokesman s2);
SELECT s.Name FROM spokesman s WHERE s.Points < (SELECT AVG(s2.Points) FROM spokesman s2);
SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID GROUP BY d.Name ORDER BY COUNT(sd.Speaker_ID) DESC LIMIT 1;
SELECT s.Name FROM spokesman s JOIN spokesman_district sd ON s.Speaker_ID = sd.Speaker_ID WHERE CAST(sd.Start_Year AS integer) < 2004;
SELECT d.name AS district_name, COUNT(s.spokesman_id) AS number_of_spokesmen FROM spokesman s JOIN spokesman_district sd ON s.spokesman_id = sd.spokesman_id JOIN district d ON sd.district_id = d.district_id GROUP BY d.name ORDER BY number_of_spokesmen DESC NULLS LAST;
SELECT d.Name FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID WHERE sd.Spokesman_ID IN (SELECT s.Spokesman_ID FROM spokesman s WHERE s.Rank_position = 1) AND sd.Spokesman_ID IN (SELECT s.Spokesman_ID FROM spokesman s WHERE s.Rank_position = 2) GROUP BY d.Name;
SELECT d.Name FROM district d JOIN (SELECT sd.District_ID, COUNT(sd.Speaker_ID) AS num_spokesmen FROM spokesman_district sd GROUP BY sd.District_ID HAVING COUNT(sd.Speaker_ID) > 1) AS s ON d.District_ID = s.District_ID;
SELECT COUNT(DISTINCT d.District_ID) FROM district d LEFT JOIN spokesman_district sd ON d.District_ID = sd.District_ID WHERE sd.District_ID IS NULL;
SELECT s.Name FROM spokesman s WHERE NOT EXISTS (SELECT 1 FROM spokesman_district sd WHERE sd.Speaker_ID = s.Speaker_ID)
SELECT SUM(d.Population) AS total_population, AVG(d.Population) AS average_population FROM district d JOIN spokesman_district sd ON d.District_ID = sd.District_ID;
SELECT s.title FROM Sculptures s ORDER BY s.year DESC LIMIT 1;
SELECT s.title FROM Sculptures s ORDER BY s.year DESC LIMIT 1;
SELECT p.title, p.location FROM Paintings p ORDER BY p.year ASC LIMIT 1;
SELECT p.title, p.location FROM Paintings p WHERE p.year = (SELECT MIN(p2.year) FROM Paintings p2);
SELECT s.title FROM Sculptures s WHERE s.location = 'gallery 226';
SELECT s.title FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID WHERE LOWER(s.location) LIKE '%gallery%226%' ORDER BY s.title NULLS LAST;
SELECT p.title, p.location FROM Paintings p ORDER BY p.title NULLS LAST;
SELECT p.title, p.location FROM Paintings p ORDER BY p.title NULLS LAST;
SELECT s.title, s.location FROM Sculptures s ORDER BY s.title NULLS LAST;
SELECT s.title, s.location FROM Sculptures s ORDER BY s.title NULLS LAST;
SELECT p.medium FROM Paintings p WHERE p.paintingID = 80;
SELECT p.medium FROM Paintings p WHERE p.paintingID = 80;
SELECT a.fname, a.lname FROM Artists a WHERE a.birthYear > 1850 ORDER BY a.birthYear NULLS LAST;
SELECT a.lname || ','|| a.fname AS full_name FROM Artists a WHERE a.birthYear > 1850 ORDER BY a.lname NULLS LAST, a.fname NULLS LAST;
SELECT s.title, s.year FROM Sculptures s WHERE s.location!= 'Gallery 226' ORDER BY s.year NULLS LAST;
SELECT s.title, to_char(s.year, 'YYYY') AS YEAR, a.lname || ','|| a.fname AS artist_name FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID WHERE s.location!= 'Gallery 226' ORDER BY s.title NULLS LAST;
SELECT DISTINCT a.fname, a.lname FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year < 1900 ORDER BY a.lname NULLS LAST;
SELECT DISTINCT a.fname, a.lname FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year < 1900 ORDER BY a.lname NULLS LAST;
SELECT DISTINCT a.birthYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year > 1920 ORDER BY a.birthYear NULLS LAST;
SELECT DISTINCT a.birthYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year > 1920 ORDER BY a.birthYear NULLS LAST;
SELECT a.fname, a.lname FROM Artists a WHERE a.deathYear - a.birthYear = (SELECT MAX(a2.deathYear - a2.birthYear) FROM Artists a2);
SELECT a.fname ||'' || a.lname AS full_name FROM Artists a WHERE a.deathYear IS NULL ORDER BY a.birthYear ASC LIMIT 1;
SELECT MIN(a.deathYear - a.birthYear) AS shortest_life FROM Artists a WHERE a.deathYear IS NOT NULL;
SELECT MIN(a.deathYear - a.birthYear) AS shortest_life_span FROM Artists a;
SELECT a.fname, a.age FROM (SELECT a.artistID, a.fname, EXTRACT(YEAR FROM AGE(CURRENT_DATE, TO_TIMESTAMP(a.birthYear))) AS age FROM Artists a WHERE a.deathYear IS NULL UNION SELECT a.artistID, a.fname, EXTRACT(YEAR FROM AGE(CURRENT_DATE, TO_TIMESTAMP(a.birthYear))) AS age FROM Artists a WHERE a.deathYear IS NOT NULL AND a.deathYear > EXTRACT(YEAR FROM CURRENT_DATE)) AS subquery ORDER BY subquery.age DESC LIMIT 1;
SELECT a.fname, EXTRACT(YEAR FROM AGE(CURRENT_DATE, TO_TIMESTAMP(a.birthYear))) AS age FROM Artists a WHERE a.deathYear IS NULL ORDER BY age DESC LIMIT 1;
SELECT COUNT(p.paintingID) FROM Paintings p WHERE p.location = 'Gallery 240';
SELECT COUNT(p.paintingID) FROM Paintings p JOIN Exhibitions e ON p.paintingID = e.paintingID WHERE LOWER(e.galleryName) = 'gallery 240';
SELECT COUNT(p.paintingID) AS total_paintings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE a.deathYear - a.birthYear = (SELECT MAX(a2.deathYear - a2.birthYear) FROM Artists a2);
SELECT COUNT(p.paintingID) AS total_paintings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE a.deathYear - a.birthYear = (SELECT MAX(a2.deathYear - a2.birthYear) FROM Artists a2);
SELECT p.title, p.year FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE LOWER(a.fname) ='mary' ORDER BY p.year NULLS LAST;
SELECT p.title AS painting_title, p.year FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE LOWER(a.fname) ='mary' ORDER BY p.year NULLS LAST;
SELECT p.width_mm FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < 1850 ORDER BY p.width_mm NULLS LAST;
SELECT AVG(p.width_mm) AS average_width FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear < 1850;
SELECT p.location, p.medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE LOWER(a.fname) = 'pablo';
SELECT p.location, p.medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE LOWER(a.fname) = 'pablo' ORDER BY p.location NULLS LAST;
SELECT DISTINCT a.fname, a.lname FROM Artists a WHERE a.artistID IN (SELECT p.painterID FROM Paintings p UNION SELECT s.sculptorID FROM Sculptures s);
SELECT DISTINCT a.lname || ','|| a.fname AS full_name FROM Artists a JOIN Paintings p ON a.artistID = p.painterID JOIN Sculptures s ON a.artistID = s.sculptorID;
SELECT DISTINCT a.fname, a.lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium = 'oil' AND p.mediumOn LIKE '%lithography%' ORDER BY a.fname NULLS LAST;
SELECT DISTINCT a.fname, a.lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.medium IN ('oil', 'lithographic') GROUP BY a.fname, a.lname HAVING COUNT(DISTINCT p.medium) = 2;
SELECT a.birthYear FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE p.year = 1884 AND p.mediumOn = 'canvas';
SELECT a.birthYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.year = 1884;
SELECT DISTINCT p.painterID, a.fname FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE p.medium = 'oil' AND p.location = 'gallery 241';
SELECT DISTINCT a.fname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE p.location = 'Gallery 241' AND LOWER(p.medium) = 'oil';
SELECT p.medium, COUNT(p.paintingID) AS number_of_paintings FROM Paintings p GROUP BY p.medium UNION SELECT s.medium, COUNT(s.sculptureID) AS number_of_sculptures FROM Sculptures s GROUP BY s.medium ORDER BY p.medium;
SELECT p.medium, COUNT(p.paintingID) AS number_of_paintings FROM Paintings p GROUP BY p.medium UNION SELECT s.medium, COUNT(s.sculptureID) AS number_of_sculptures FROM Sculptures s GROUP BY s.medium ORDER BY p.medium;
SELECT p.medium, AVG(p.height_mm) AS average_height FROM Paintings p GROUP BY p.medium ORDER BY p.medium NULLS LAST;
SELECT p.medium, AVG(p.height_mm) AS average_height FROM Paintings p GROUP BY p.medium ORDER BY p.medium NULLS LAST;
SELECT p.location, COUNT(p.paintingID) AS number_of_paintings FROM Paintings p WHERE p.year < 1900 GROUP BY p.location ORDER BY number_of_paintings DESC NULLS LAST;
SELECT p.location, COUNT(p.paintingID) AS number_of_paintings FROM Paintings p WHERE p.year < 1900 GROUP BY p.location ORDER BY number_of_paintings DESC NULLS LAST;
SELECT p.title FROM Paintings p WHERE p.year > 1910 AND LOWER(p.medium) = 'oil' ORDER BY p.title NULLS LAST;
SELECT p.title FROM Paintings p WHERE p.year > 1910 AND LOWER(p.medium) = 'oil' ORDER BY p.title NULLS LAST;
SELECT DISTINCT p.painterID FROM Paintings p WHERE p.location = 'Gallery 240' AND LOWER(p.medium) = 'oil';
SELECT DISTINCT p.painterID FROM Paintings p WHERE p.location = 'Gallery 240' AND LOWER(p.medium) = 'oil';
SELECT DISTINCT p.title FROM Paintings p WHERE p.height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE medium = 'canvas');
SELECT DISTINCT p.title FROM Paintings p WHERE p.height_mm > ANY (SELECT height_mm FROM Paintings WHERE medium = 'canvas') ORDER BY p.title NULLS LAST;
SELECT DISTINCT p.paintingID FROM Paintings p WHERE p.year < (SELECT MIN(p2.year) FROM Paintings p2 WHERE p2.location = 'gallery 240');
SELECT DISTINCT p.paintingID FROM Paintings p WHERE p.year < (SELECT MIN(p2.year) FROM Paintings p2 JOIN Sculptures s ON p2.paintingID = s.sculptorID WHERE s.location LIKE '%Gallery%240%');
SELECT p.paintingID FROM Paintings p WHERE p.year = (SELECT MIN(p2.year) FROM Paintings p2);
SELECT p.paintingID FROM Paintings p WHERE p.year = (SELECT MIN(p2.year) FROM Paintings p2);
SELECT a.fname, a.lname FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID WHERE s.title ilike '%female%' LIMIT 1;
SELECT a.lname || ','|| a.fname AS full_name FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID WHERE s.title ilike '%female%' LIMIT 1;
SELECT DISTINCT p.title FROM Paintings p ORDER BY p.title ASC;
SELECT DISTINCT p.title FROM Paintings p ORDER BY p.title ASC;
SELECT p.title FROM Paintings p ORDER BY LENGTH(p.title);
SELECT p.title FROM Paintings p ORDER BY p.height_mm ASC;
SELECT p.title AS painting_title, s.title AS sculpture_title FROM Paintings p JOIN Sculptures s ON p.year = s.year WHERE p.year BETWEEN 1900 AND 1950;
SELECT p.title AS painting_title, s.title AS sculpture_title FROM Paintings p JOIN Sculptures s ON TRUE WHERE p.year BETWEEN 1900 AND 1950 UNION SELECT NULL AS painting_title, s.title AS sculpture_title FROM Sculptures s WHERE s.year BETWEEN 1900 AND 1950 ORDER BY painting_title NULLS LAST;
SELECT p.title AS painting_title, s.title AS sculpture_title FROM Paintings p JOIN Sculptures s ON p.painterID = s.sculptorID WHERE p.painterID = 222 OR s.sculptorID = 222;
SELECT p.title AS painting_title, s.title AS sculpture_title FROM Paintings p JOIN Sculptures s ON p.painterID = s.sculptorID WHERE p.painterID = 222 OR s.sculptorID = 222;
SELECT p.painterID FROM Paintings p WHERE p.year < 1900 GROUP BY p.painterID ORDER BY COUNT(p.paintingID) DESC LIMIT 1;
SELECT p.painterID FROM Paintings p WHERE p.year < 1900 GROUP BY p.painterID ORDER BY COUNT(p.paintingID) DESC LIMIT 1;
SELECT s.sculptorID, COUNT(s.sculptureID) AS num_sculptures FROM Sculptures s GROUP BY s.sculptorID ORDER BY num_sculptures DESC LIMIT 1;
SELECT s.sculptorID, COUNT(s.sculptureID) AS num_sculptures FROM Sculptures s GROUP BY s.sculptorID ORDER BY num_sculptures DESC LIMIT 1;
SELECT p.title FROM Paintings p WHERE p.width_mm < 600 OR p.height_mm > 800;
SELECT p.title FROM Paintings p WHERE p.width_mm < 600 OR p.height_mm > 800;
SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930 ORDER BY p.location NULLS LAST;
SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930 ORDER BY p.location NULLS LAST;
SELECT p.paintingID FROM Paintings p WHERE p.height_mm > 500 AND p.height_mm < 2000;
SELECT p.paintingID FROM Paintings p WHERE p.height_mm > 500 AND p.height_mm < 2000;
SELECT DISTINCT p.location FROM Paintings p WHERE p.medium = 'on panel' OR p.medium = 'on canvas';
SELECT DISTINCT p.location FROM Paintings p WHERE p.medium = 'on panels' OR p.medium = 'on canvas';
SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 AND p.year > 1930 ORDER BY p.location NULLS LAST;
SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 AND p.year > 1930 ORDER BY p.location NULLS LAST;
SELECT AVG(p.height_mm), AVG(p.width_mm) FROM Paintings p WHERE LOWER(p.mediumOn) = 'oil' AND LOWER(p.location) = 'gallery 241';
SELECT AVG(p.height_mm), AVG(p.width_mm) FROM Paintings p JOIN Artists ar ON p.painterID = ar.artistID WHERE LOWER(p.medium) = 'oil' AND LOWER(ar.lname) = 'gallery 241';
SELECT MAX(p.height_mm), p.paintingID FROM Paintings p WHERE p.year < 1900 GROUP BY p.paintingID ORDER BY p.paintingID NULLS LAST;
SELECT p.height_mm, p.paintingID FROM Paintings p WHERE p.year < 1900 ORDER BY p.height_mm DESC LIMIT 1;
SELECT p.year, MAX(p.height_mm) AS max_height, MAX(p.width_mm) AS max_width FROM Paintings p GROUP BY p.year ORDER BY p.year NULLS LAST;
SELECT p.year, MAX(p.height_mm) AS max_height, MAX(p.width_mm) AS max_width FROM Paintings p GROUP BY p.year ORDER BY p.year NULLS LAST;
SELECT p.painterID, a.fname, a.lname, AVG(p.height_mm) AS avg_height, AVG(p.width_mm) AS avg_width FROM Paintings p JOIN Artists a ON p.painterID = a.artistID GROUP BY p.painterID, a.fname, a.lname ORDER BY a.fname, a.lname NULLS LAST;
SELECT p.painterID, a.fname, a.lname, AVG(p.height_mm) AS avg_height, AVG(p.width_mm) AS avg_width FROM Paintings p JOIN Artists a ON p.painterID = a.artistID GROUP BY p.painterID, a.fname, a.lname ORDER BY a.fname, a.lname NULLS LAST;
SELECT a.fname, COUNT(p.paintingID) AS num_paintings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.fname HAVING COUNT(p.paintingID) >= 2 ORDER BY num_paintings DESC NULLS LAST;
SELECT a.fname, COUNT(p.paintingID) AS num_paintings FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.fname HAVING COUNT(p.paintingID) >= 2 ORDER BY num_paintings DESC NULLS LAST;
SELECT a.deathYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.deathYear HAVING COUNT(p.paintingID) <= 3 ORDER BY a.deathYear NULLS LAST;
SELECT a.fname, a.lname, a.deathYear FROM Artists a JOIN Paintings p ON a.artistID = p.painterID GROUP BY a.fname, a.lname, a.deathYear HAVING COUNT(p.paintingID) < 4 ORDER BY a.deathYear NULLS LAST;
SELECT a.deathYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY a.artistID ORDER BY COUNT(s.sculptureID) ASC LIMIT 1;
SELECT a.deathYear FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID GROUP BY a.deathYear ORDER BY COUNT(s.sculptureID) ASC LIMIT 1;
SELECT p.paintingID, p.height_mm FROM Paintings p WHERE p.location = 'Gallery 240' ORDER BY p.width_mm DESC LIMIT 1;
SELECT p.height_mm, p.paintingID FROM Paintings p WHERE p.location = 'Gallery 240' ORDER BY p.width_mm DESC LIMIT 1;
SELECT p.paintingID FROM Paintings p WHERE p.year < ALL (SELECT YEAR FROM Paintings WHERE LOCATION = 'Gallery 240');
SELECT p.paintingID FROM Paintings p WHERE p.year < (SELECT MIN(year) FROM Paintings WHERE location = 'Gallery 240');
SELECT p.paintingID FROM Paintings p WHERE p.year <= 1900 ORDER BY p.height_mm DESC;
SELECT p.paintingID FROM Paintings p WHERE p.height_mm > (SELECT MAX(p2.height_mm) FROM Paintings p2 WHERE p2.year > 1900);
SELECT p.painterID, COUNT(p.paintingID) AS num_paintings FROM Paintings p WHERE LOWER(p.medium) = 'oil' GROUP BY p.painterID ORDER BY num_paintings DESC LIMIT 3;
SELECT p.painterID, COUNT(p.paintingID) AS num_paintings FROM Paintings p WHERE LOWER(p.mediumOn) = 'oil' GROUP BY p.painterID ORDER BY num_paintings DESC LIMIT 5;
SELECT p.paintingID, p.location, p.title FROM Paintings p WHERE LOWER(p.mediumOn) = 'oil' ORDER BY p.year ASC;
SELECT p.paintingID, p.location, p.title FROM Paintings p WHERE p.medium = 'oil' ORDER BY p.year ASC;
SELECT p.year, p.location, p.title FROM Paintings p WHERE p.height_mm > 1000 ORDER BY p.title NULLS LAST;
SELECT p.year, p.location, p.title FROM Paintings p WHERE p.height_mm > 1000 ORDER BY p.title ASC;
SELECT DISTINCT a.fname, a.lname FROM Artists a JOIN Paintings p ON a.artistID = p.painterID WHERE a.artistID NOT IN (SELECT s.sculptorID FROM Sculptures s) ORDER BY a.fname NULLS LAST, a.lname NULLS LAST;
SELECT DISTINCT a.fname, a.lname FROM Artists a LEFT JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.sculptorID IS NULL AND a.artistID IN (SELECT p.painterID FROM Paintings p);
SELECT DISTINCT p.location FROM Paintings p WHERE p.year < 1885 AND p.mediumOn NOT ILIKE '%canvas%' ORDER BY p.location NULLS LAST;
SELECT p.title FROM Paintings p WHERE p.year < 1885 AND p.medium!= 'canvas' ORDER BY p.title NULLS LAST;
SELECT COUNT(*) FROM race;
SELECT COUNT(*) FROM race;
SELECT r.winning_driver, r.winning_team FROM race r ORDER BY r.winning_team ASC;
SELECT r.winning_driver, r.winning_team FROM race r ORDER BY r.winning_team ASC;
SELECT r.race_name, d.driver_name FROM race r JOIN driver d ON r.driver_id = d.driver_id WHERE r.pole_position!= 'Junior Strous' AND r.winning_driver = d.driver_name;
SELECT r.Race_Name, d.Driver_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Driver_Name!= 'Junior Strous' AND d.Driver_Name = r.Winning_driver;
SELECT d.Constructor, d.Age FROM driver d ORDER BY d.Age ASC;
SELECT d.Constructor, d.Age FROM driver d ORDER BY d.Age ASC;
SELECT DISTINCT d.Entrant FROM driver d WHERE d.Age >= 20 ORDER BY d.Entrant NULLS LAST;
SELECT DISTINCT d.Entrant FROM driver d WHERE d.Age >= 20 ORDER BY d.Entrant NULLS LAST;
SELECT MAX(d.Age) AS max_age, MIN(d.Age) AS min_age FROM driver d;
SELECT MAX(d.Age) AS max_age, MIN(d.Age) AS min_age FROM driver d;
SELECT COUNT(DISTINCT d.Engine) FROM driver d WHERE d.Age > 30 OR d.Age < 20;
SELECT COUNT(DISTINCT d.Engine) FROM driver d WHERE d.Age > 30 OR d.Age < 20;
SELECT d.Driver_Name FROM driver d ORDER BY d.Driver_Name DESC;
SELECT d.driver_name FROM driver d ORDER BY d.driver_name DESC;
SELECT d.Driver_Name, r.Race_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID;
SELECT d.Driver_Name, r.Race_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID;
SELECT d.Driver_Name, COUNT(r.Road) AS num_races FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name ORDER BY num_races DESC NULLS LAST;
SELECT d.Driver_Name, COUNT(r.Road) AS number_of_races FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID GROUP BY d.Driver_Name ORDER BY number_of_races DESC NULLS LAST;
SELECT d.age FROM driver d JOIN (SELECT r.driver_id, COUNT(r.road) AS num_races FROM race r GROUP BY r.driver_id ORDER BY num_races DESC LIMIT 1) AS mr ON d.driver_id = mr.driver_id;
SELECT d.Age FROM (SELECT r.Driver_ID, COUNT(r.Road) AS num_races FROM race r GROUP BY r.Driver_ID ORDER BY num_races DESC LIMIT 1) AS m JOIN driver d ON m.Driver_ID = d.Driver_ID;
SELECT d.Driver_Name, d.Age FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_Name, d.Age HAVING COUNT(r.Road) >= 2 ORDER BY d.Driver_Name NULLS LAST;
SELECT d.Driver_Name, d.Age FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID GROUP BY d.Driver_ID, d.Driver_Name, d.Age HAVING COUNT(r.Road) >= 2 ORDER BY d.Driver_Name NULLS LAST;
SELECT r.Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26 ORDER BY r.Road NULLS LAST;
SELECT r.Race_Name FROM race r JOIN driver d ON r.Driver_ID = d.Driver_ID WHERE d.Age >= 26 ORDER BY r.Road NULLS LAST;
SELECT d.Driver_Name FROM driver d WHERE d.Constructor!= 'Bugatti' ORDER BY d.Driver_Name NULLS LAST;
SELECT d.Driver_Name FROM driver d WHERE d.Constructor!= 'Bugatti' ORDER BY d.Driver_Name NULLS LAST;
SELECT d.Constructor, COUNT(d.Driver_ID) AS num_drivers FROM driver d GROUP BY d.Constructor ORDER BY num_drivers DESC NULLS LAST;
SELECT d.Constructor, COUNT(d.Driver_ID) AS number_of_drivers FROM driver d GROUP BY d.Constructor ORDER BY number_of_drivers DESC NULLS LAST;
SELECT d.engine, COUNT(d.engine) AS count FROM driver d GROUP BY d.engine ORDER BY count DESC LIMIT 1;
SELECT d.engine, COUNT(d.engine) AS count FROM driver d GROUP BY d.engine ORDER BY count DESC LIMIT 1;
SELECT d.Engine FROM driver d GROUP BY d.Engine HAVING COUNT(d.Driver_ID) >= 2 ORDER BY d.Engine NULLS LAST;
SELECT d.Engine FROM driver d GROUP BY d.Engine HAVING COUNT(d.Driver_ID) >= 2 ORDER BY d.Engine NULLS LAST;
SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r)
SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r) ORDER BY d.Driver_Name NULLS LAST;
SELECT d.Constructor FROM driver d WHERE d.Age < 20 AND d.Age > 30 GROUP BY d.Constructor;
SELECT d.Constructor FROM driver d WHERE d.Age < 20 AND d.Age > 30 GROUP BY d.Constructor HAVING COUNT(d.Constructor) = (SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Age < 20 AND Age > 30);
SELECT r.winning_team FROM race r GROUP BY r.winning_team HAVING COUNT(r.winning_team) > 1 ORDER BY r.winning_team NULLS LAST;
SELECT r.winning_team FROM race r GROUP BY r.winning_team HAVING COUNT(r.Road) > 1 ORDER BY r.winning_team;
SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE r.Pole_Position ilike '%James%Hinchcliffe%' AND r.Pole_Position ilike '%Carl%Skerlong%' GROUP BY d.Driver_Name;
SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE LOWER(r.Pole_Position) IN ('james hinchcliffe', 'carl skerlong') GROUP BY d.Driver_Name HAVING COUNT(DISTINCT r.Road) >= 2;
SELECT d.Driver_Name FROM driver d WHERE d.Driver_ID NOT IN (SELECT r.Driver_ID FROM race r WHERE LOWER(r.Pole_Position) = 'james hinchcliffe')
SELECT d.Driver_Name FROM driver d JOIN race r ON d.Driver_ID = r.Driver_ID WHERE d.Driver_Name!= 'James Hinchcliffe' AND d.Driver_Name NOT IN (SELECT r.Pole_Position FROM race r) ORDER BY d.Driver_Name NULLS LAST;
SELECT COUNT(DISTINCT l.id) FROM languages l;
SELECT COUNT(DISTINCT l.id) FROM languages l;
SELECT l.name FROM languages l ORDER BY l.name ASC;
SELECT l.name FROM languages l ORDER BY l.name ASC;
SELECT l.name FROM languages l WHERE l.name ilike '%ish%';
SELECT l.name FROM languages l WHERE l.name ilike '%ish%' ORDER BY l.name NULLS LAST;
SELECT c.name, c.overall_score FROM countries c ORDER BY c.overall_score DESC NULLS LAST;
SELECT c.name FROM countries c ORDER BY c.overall_score DESC;
SELECT AVG(c.justice_score) AS average_justice_score FROM countries c;
SELECT AVG(c.justice_score) AS average_justice_score FROM countries c;
SELECT MAX(c.health_score) AS max_health_score, MIN(c.health_score) AS min_health_score FROM countries c WHERE c.name!= 'Norway';
SELECT MAX(c.health_score) AS max_health_score, MIN(c.health_score) AS min_health_score FROM countries c WHERE c.name!= 'Norway';
SELECT COUNT(DISTINCT ol.language_id) FROM official_languages ol;
SELECT COUNT(DISTINCT ol.language_id) FROM official_languages ol;
SELECT c.name FROM countries c ORDER BY c.education_score DESC;
SELECT c.name FROM countries c ORDER BY c.education_score DESC;
SELECT c.name FROM countries c WHERE c.politics_score = (SELECT MAX(c2.politics_score) FROM countries c2);
SELECT c.name FROM countries c ORDER BY c.politics_score DESC NULLS LAST LIMIT 1;
SELECT c.name AS country_name, l.name AS language_name FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id;
SELECT c.name AS country_name, l.name AS language_name FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id;
SELECT l.name AS language, COUNT(*) AS country_count FROM official_languages ol JOIN languages l ON ol.language_id = l.id GROUP BY l.name ORDER BY country_count DESC NULLS LAST;
SELECT l.name AS language, COUNT(*) AS country_count FROM official_languages ol JOIN languages l ON ol.language_id = l.id GROUP BY l.name ORDER BY country_count DESC NULLS LAST;
SELECT l.name FROM languages l JOIN (SELECT ol.language_id, COUNT(*) AS country_count FROM official_languages ol GROUP BY ol.language_id ORDER BY country_count DESC LIMIT 1) AS c ON l.id = c.language_id;
SELECT l.name FROM languages l JOIN (SELECT ol.language_id, COUNT(*) AS count FROM official_languages ol GROUP BY ol.language_id ORDER BY count DESC LIMIT 1) AS c ON l.id = c.language_id;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id GROUP BY l.name HAVING COUNT(DISTINCT ol.country_id) >= 2 ORDER BY l.name NULLS LAST;
SELECT l.name FROM languages l JOIN (SELECT ol.language_id, COUNT(DISTINCT ol.country_id) AS country_count FROM official_languages ol GROUP BY ol.language_id HAVING COUNT(DISTINCT ol.country_id) >= 2) AS c ON l.id = c.language_id ORDER BY l.name NULLS LAST;
SELECT AVG(c.overall_score) AS average_overall_score FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id WHERE LOWER(l.name) = 'english';
SELECT AVG(c.overall_score) AS average_overall_score FROM countries c JOIN official_languages ol ON c.id = ol.country_id WHERE ol.language_id IN (SELECT id FROM languages WHERE name ilike '%English%');
SELECT l.name FROM official_languages ol JOIN languages l ON ol.language_id = l.id GROUP BY l.name ORDER BY COUNT(ol.country_id) DESC LIMIT 3;
SELECT l.name FROM languages l JOIN (SELECT ol.language_id, COUNT(*) AS country_count FROM official_languages ol GROUP BY ol.language_id ORDER BY country_count DESC LIMIT 3) AS c ON l.id = c.language_id ORDER BY c.country_count DESC NULLS LAST;
SELECT l.name, AVG(c.overall_score) AS avg_overall_score FROM official_languages ol JOIN languages l ON ol.language_id = l.id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY avg_overall_score DESC NULLS LAST;
SELECT l.name, AVG(c.overall_score) AS avg_overall_score FROM official_languages ol JOIN languages l ON ol.language_id = l.id JOIN countries c ON ol.country_id = c.id GROUP BY l.name ORDER BY avg_overall_score DESC NULLS LAST;
SELECT c.name FROM countries c JOIN (SELECT o.country_id, COUNT(o.language_id) AS num_of_languages FROM official_languages o GROUP BY o.country_id ORDER BY num_of_languages DESC LIMIT 1) ol ON c.id = ol.country_id;
SELECT c.name FROM countries c JOIN (SELECT ol.country_id, COUNT(ol.language_id) AS num_of_languages FROM official_languages ol GROUP BY ol.country_id ORDER BY num_of_languages DESC LIMIT 1) AS o ON c.id = o.country_id;
SELECT l.name FROM languages l WHERE NOT EXISTS (SELECT 1 FROM official_languages o WHERE o.language_id = l.id) ORDER BY l.name NULLS LAST;
SELECT l.name FROM languages l WHERE NOT EXISTS (SELECT 1 FROM official_languages o WHERE o.language_id = l.id) ORDER BY l.name NULLS LAST;
SELECT c.name FROM countries c WHERE c.id NOT IN (SELECT ol.country_id FROM official_languages ol)
SELECT c.name FROM countries c WHERE c.id NOT IN (SELECT o.country_id FROM official_languages o)
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id WHERE ol.country_id IN (SELECT id FROM countries WHERE overall_score > 95) AND ol.country_id IN (SELECT id FROM countries WHERE overall_score < 90) GROUP BY l.name;
SELECT l.name FROM languages l JOIN official_languages ol ON l.id = ol.language_id WHERE ol.country_id IN (SELECT id FROM countries WHERE overall_score > 95 AND overall_score < 90) GROUP BY l.name HAVING COUNT(DISTINCT ol.country_id) >= 2;
SELECT DISTINCT country, town_city FROM Addresses ORDER BY country, town_city;
SELECT a.address_id, a.country, a.town_city FROM Addresses a ORDER BY a.address_id;
SELECT p.property_id, a.county_state_province AS state FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id;
SELECT p.property_id, a.county_state_province AS state_province FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id
SELECT f.feature_description FROM Features f WHERE LOWER(f.feature_name) = 'rooftop';
SELECT f.feature_description FROM Features f WHERE LOWER(f.feature_name) = 'rooftop';
SELECT f.feature_name, f.feature_description FROM Features f JOIN Property_Features pf ON f.feature_id = pf.feature_id GROUP BY f.feature_name, f.feature_description ORDER BY COUNT(pf.property_id) DESC LIMIT 1;
SELECT f.feature_name, f.feature_description FROM Features f JOIN Property_Features pf ON f.feature_id = pf.feature_id GROUP BY f.feature_name, f.feature_description ORDER BY COUNT(pf.property_id) DESC LIMIT 1;
SELECT MIN(CAST(p.room_count AS INTEGER)) FROM Properties p;
SELECT MIN(CAST(p.room_count AS INTEGER)) FROM Properties p;
SELECT COUNT(*) FROM Properties p WHERE (p.parking_lots = '1' OR p.garage_yn = '1');
SELECT COUNT(*) FROM Properties p WHERE (p.parking_lots = '1' OR p.garage_yn = '1');
SELECT u.age_category_code FROM Users u WHERE LOWER(u.other_user_details) LIKE '%mother%' ORDER BY u.age_category_code;
SELECT u.age_category_code FROM Users u WHERE LOWER(u.other_user_details) LIKE '%mother%' ORDER BY u.age_category_code;
SELECT u.first_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id GROUP BY u.first_name ORDER BY COUNT(p.property_id) DESC LIMIT 1;
SELECT u.first_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id GROUP BY u.first_name ORDER BY COUNT(p.property_id) DESC LIMIT 1;
SELECT AVG(CAST(p.room_count AS INTEGER)) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id WHERE LOWER(pf.feature_value) LIKE '%garden%' AND CAST(p.room_count AS INTEGER) IS NOT NULL;
SELECT AVG(CAST(p.room_count AS INTEGER)) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id WHERE LOWER(pf.feature_value) LIKE '%garden%' AND CAST(p.room_count AS INTEGER) IS NOT NULL;
SELECT DISTINCT p.property_address_id, a.town_city FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id JOIN Addresses a ON p.property_address_id = a.address_id WHERE LOWER(f.feature_name) LIKE '%swimming pool%' ORDER BY a.town_city;
SELECT DISTINCT p.property_address_id, a.town_city FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id JOIN Features f ON pf.feature_id = f.feature_id JOIN Addresses a ON p.property_address_id = a.address_id WHERE LOWER(f.feature_name) LIKE '%swimming pool%' ORDER BY a.town_city;
SELECT p.property_id, MIN(p.vendor_requested_price) AS min_vendor_price FROM Properties p GROUP BY p.property_id ORDER BY min_vendor_price ASC LIMIT 1;
SELECT p.property_id, MIN(p.vendor_requested_price) AS min_vendor_requested_price FROM Properties p GROUP BY p.property_id ORDER BY min_vendor_requested_price ASC LIMIT 1;
SELECT AVG(CAST(p.room_count AS INTEGER)) FROM Properties p;
SELECT AVG(CAST(p.room_count AS INTEGER)) FROM Properties p;
SELECT COUNT(DISTINCT r.room_size) FROM Rooms r;
SELECT COUNT(DISTINCT r.room_size) FROM Rooms r;
SELECT u.user_id, us.search_string FROM Users u JOIN User_Searches us ON u.user_id = us.user_id GROUP BY u.user_id, us.search_string HAVING COUNT(us.search_seq) >= 2 ORDER BY u.user_id;
SELECT us.user_id, us.search_seq FROM User_Searches us GROUP BY us.user_id, us.search_seq HAVING COUNT(us.search_seq) >= 2 ORDER BY us.user_id;
SELECT u.user_id, u.first_name, u.last_name, us.search_datetime FROM Users u JOIN User_Searches us ON u.user_id = us.user_id ORDER BY us.search_datetime DESC LIMIT 1;
SELECT us.search_datetime FROM User_Searches us ORDER BY us.search_datetime DESC LIMIT 1;
SELECT us.search_datetime, us.search_string FROM User_Searches us ORDER BY us.search_string DESC;
SELECT us.search_string, us.search_datetime FROM User_Searches us ORDER BY us.search_string DESC;
SELECT DISTINCT p.property_address_id, a.zip_postcode FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id WHERE p.owner_user_id IN (SELECT user_id FROM Users u JOIN User_Property_History uph ON u.user_id = uph.user_id GROUP BY user_id HAVING COUNT(property_id) > 2);
SELECT DISTINCT p.property_address_id, a.zip_postcode FROM Properties p JOIN Addresses a ON p.property_address_id = a.address_id WHERE p.owner_user_id IN (SELECT user_id FROM Users u JOIN User_Property_History uph ON u.user_id = uph.user_id GROUP BY user_id HAVING COUNT(property_id) > 2);
SELECT u.user_category_code, u.user_id FROM Users u JOIN (SELECT us.user_id, COUNT(us.search_seq) AS search_count FROM User_Searches us GROUP BY us.user_id HAVING COUNT(us.search_seq) = 1) AS s ON u.user_id = s.user_id ORDER BY u.user_category_code;
SELECT u.user_id, u.age_category_code FROM Users u JOIN User_Searches us ON u.user_id = us.user_id GROUP BY u.user_id, u.age_category_code HAVING COUNT(us.search_seq) = 1
SELECT u.age_category_code FROM Users u JOIN (SELECT us.user_id FROM User_Searches us ORDER BY us.search_datetime ASC LIMIT 1) AS recent_search ON u.user_id = recent_search.user_id;
SELECT u.age_category_code FROM Users u JOIN User_Searches us ON u.user_id = us.user_id ORDER BY us.search_datetime ASC LIMIT 1;
SELECT u.login_name FROM Users u JOIN Ref_Age_Categories rac ON u.age_category_code = rac.age_category_code WHERE LOWER(rac.age_category_description) LIKE '%senior%' ORDER BY u.first_name ASC;
SELECT u.login_name FROM Users u JOIN Ref_Age_Categories rac ON u.age_category_code = rac.age_category_code WHERE LOWER(rac.age_category_description) ='senior citizen' ORDER BY u.first_name ASC;
SELECT SUM(search_seq) AS total_searches FROM User_Searches us JOIN Users u ON us.user_id = u.user_id WHERE LOWER(u.is_buyer) = 'y';
SELECT COUNT(*) AS total_searches FROM User_Searches us JOIN Users u ON us.user_id = u.user_id WHERE LOWER(u.is_buyer) = 'y';
SELECT u.date_registered FROM Users u WHERE LOWER(u.login_name) = 'ratione';
SELECT u.date_registered FROM Users u WHERE LOWER(u.login_name) = 'ratione';
SELECT u.first_name, u.middle_name, u.last_name, u.login_name FROM Users u WHERE u.is_seller = '1' ORDER BY u.user_id;
SELECT u.first_name, u.middle_name, u.last_name, u.login_name FROM Users u WHERE LOWER(u.is_seller) = 'y' ORDER BY u.user_id;
SELECT u.user_address_id, a.line_1_number_building, a.line_2_number_street, a.town_city FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id WHERE LOWER(u.age_category_code) IN (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Senior%Citizen%') ORDER BY u.user_address_id;
SELECT u.user_id, u.first_name, u.last_name, a.line_1_number_building, a.line_2_number_street, a.town_city FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id WHERE u.age_category_code IN (SELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description = 'Senior') ORDER BY u.user_id;
SELECT COUNT(DISTINCT p.property_id) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id GROUP BY p.property_id HAVING COUNT(pf.feature_id) >= 2;
SELECT COUNT(DISTINCT p.property_id) FROM Properties p JOIN Property_Features pf ON p.property_id = pf.property_id GROUP BY p.property_id HAVING COUNT(pf.feature_id) >= 2;
SELECT p.property_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id ORDER BY p.property_id;
SELECT p.property_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.property_id ORDER BY p.property_id;
SELECT p.owner_user_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.owner_user_id ORDER BY photo_count DESC;
SELECT p.owner_user_id, COUNT(pp.photo_seq) AS photo_count FROM Properties p JOIN Property_Photos pp ON p.property_id = pp.property_id GROUP BY p.owner_user_id ORDER BY photo_count DESC NULLS LAST;
SELECT SUM(p.price_max) AS total_max_price FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE (u.user_category_code ='single_mother' OR u.user_category_code ='student');
SELECT SUM(p.price_max) AS total_max_price FROM Properties p JOIN Users u ON p.owner_user_id = u.user_id WHERE (u.age_category_code IN ('18-24', '25-34') OR u.user_category_code = 'Single Mother');
SELECT uph.datestamp, p.property_name FROM User_Property_History AS uph JOIN Properties AS p ON uph.property_id = p.property_id ORDER BY uph.datestamp;
SELECT uph.datestamp, p.property_name FROM User_Property_History AS uph JOIN Properties AS p ON uph.property_id = p.property_id ORDER BY uph.datestamp;
SELECT pt.property_type_description, pt.property_type_code FROM Ref_Property_Types pt JOIN (SELECT p.property_type_code, COUNT(p.property_id) AS count FROM Properties p GROUP BY p.property_type_code ORDER BY count DESC LIMIT 1) AS c ON pt.property_type_code = c.property_type_code
SELECT pt.property_type_description FROM Ref_Property_Types pt JOIN Properties p ON pt.property_type_code = p.property_type_code GROUP BY pt.property_type_description ORDER BY COUNT(p.property_id) DESC LIMIT 1;
SELECT ac.age_category_description FROM Ref_Age_Categories ac WHERE LOWER(ac.age_category_code) = 'over 60';
SELECT ac.age_category_description FROM Ref_Age_Categories ac WHERE LOWER(ac.age_category_code) = 'over 60';
SELECT r.room_size, COUNT(r.room_size) AS count FROM Rooms r GROUP BY r.room_size ORDER BY r.room_size;
SELECT r.room_size, COUNT(r.room_size) AS room_count FROM Rooms r GROUP BY r.room_size ORDER BY room_count DESC;
SELECT u.user_address_id, a.country FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id WHERE LOWER(u.first_name) = 'robbie';
SELECT u.user_address_id, a.country FROM Users u JOIN Addresses a ON u.user_address_id = a.address_id WHERE LOWER(u.first_name) = 'robbie' LIMIT 1;
SELECT u.first_name, u.middle_name, u.last_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE u.user_address_id = p.property_address_id ORDER BY u.first_name NULLS LAST, u.middle_name NULLS LAST, u.last_name NULLS LAST;
SELECT u.first_name ||'' || u.middle_name ||'' || u.last_name AS full_name FROM Users u JOIN Properties p ON u.user_id = p.owner_user_id WHERE u.user_address_id = p.property_address_id;
SELECT us.search_string FROM Users u JOIN User_Searches us ON u.user_id = us.user_id WHERE u.user_id NOT IN (SELECT p.owner_user_id FROM Properties p);
SELECT us.search_string FROM User_Searches us JOIN Users u ON us.user_id = u.user_id WHERE u.user_id NOT IN (SELECT p.owner_user_id FROM Properties p);
SELECT u.last_name, u.user_id FROM Users u JOIN (SELECT user_id, COUNT(property_id) AS property_count FROM User_Property_History GROUP BY user_id HAVING COUNT(property_id) >= 2) p ON u.user_id = p.user_id WHERE u.user_id IN (SELECT user_id FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) <= 2);
SELECT u.last_name, u.user_id FROM Users u JOIN User_Searches us ON u.user_id = us.user_id WHERE (SELECT COUNT(*) FROM User_Searches us2 WHERE us2.user_id = u.user_id) <= 2 AND (SELECT COUNT(*) FROM Properties p WHERE p.owner_user_id = u.user_id) >= 2 GROUP BY u.last_name, u.user_id;
SELECT COUNT(*) FROM bike WHERE weight > 780;
SELECT b.product_name, b.weight FROM bike b ORDER BY b.price ASC;
SELECT c.heat, c.name, c.nation FROM cyclist c ORDER BY c.heat NULLS LAST;
SELECT MAX(b.weight) AS max_weight, MIN(b.weight) AS min_weight FROM bike b;
SELECT AVG(b.price) AS average_price FROM bike b WHERE LOWER(b.material) = 'carbon cc';
SELECT c.name, c.result FROM cyclist c WHERE c.nation!= 'Russia';
SELECT DISTINCT b.id AS bike_id, b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE cob.purchase_year > 2015 ORDER BY bike_id NULLS LAST;
SELECT b.id AS bike_id, b.product_name FROM bike b JOIN (SELECT c.bike_id FROM cyclists_own_bikes c GROUP BY c.bike_id HAVING COUNT(c.cyclist_id) >= 4) AS d ON b.id = d.bike_id ORDER BY b.id NULLS LAST;
SELECT c.id AS cyclist_id, c.name, COUNT(bike_id) AS bike_count FROM cyclists_own_bikes cob JOIN cyclist c ON cob.cyclist_id = c.id GROUP BY c.id, c.name ORDER BY bike_count DESC LIMIT 1;
SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.nation IN ('Russia', 'Great Britain') ORDER BY b.product_name NULLS LAST;
SELECT COUNT(DISTINCT c.heat) FROM cyclist c;
SELECT COUNT(DISTINCT c.id) FROM cyclist c LEFT JOIN (SELECT co.cyclist_id FROM cyclists_own_bikes co WHERE co.purchase_year > 2015 GROUP BY co.cyclist_id) AS o ON c.id = o.cyclist_id WHERE o.cyclist_id IS NULL;
SELECT DISTINCT b.product_name FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id JOIN cyclist c ON cob.cyclist_id = c.id WHERE c.result < 241.558 ORDER BY b.product_name NULLS LAST;
SELECT b.product_name, b.price FROM bike b JOIN cyclists_own_bikes cob ON b.id = cob.bike_id WHERE (cob.cyclist_id IN (SELECT id FROM cyclist WHERE name ilike '%Bradley%Wiggins%') AND cob.cyclist_id IN (SELECT id FROM cyclist WHERE name ilike '%Antonio%Tauler%')) GROUP BY b.product_name, b.price HAVING COUNT(DISTINCT cob.cyclist_id) = 2;
SELECT c.name, c.nation, c.result FROM cyclist c LEFT JOIN cyclists_own_bikes cob ON c.id = cob.cyclist_id WHERE cob.bike_id NOT IN (SELECT id FROM bike WHERE product_name ilike '%racing%') ORDER BY c.name NULLS LAST;
SELECT b.product_name FROM bike b WHERE b.material ilike '%fiber%' ORDER BY b.product_name NULLS LAST;
SELECT c.id AS cyclist_id, COUNT(cob.bike_id) AS bike_count FROM cyclists_own_bikes cob JOIN cyclist c ON cob.cyclist_id = c.id GROUP BY c.id ORDER BY c.id NULLS LAST;
SELECT g.Flavor, MAX(g.Price) AS max_price FROM goods g WHERE g.Food = 'cake' GROUP BY g.Flavor ORDER BY max_price DESC LIMIT 1;
SELECT g.id, g.flavor FROM goods g WHERE g.food = 'cake' ORDER BY g.price DESC LIMIT 1;
SELECT g.Flavor, MIN(g.Price) AS min_price FROM goods g WHERE g.Food = 'cookie' GROUP BY g.Flavor ORDER BY min_price ASC LIMIT 1;
SELECT g.id, g.flavor FROM goods g WHERE g.food = 'cookie' ORDER BY g.price ASC LIMIT 1;
SELECT g.id FROM goods g WHERE LOWER(g.flavor) = 'apple';
SELECT g.id FROM goods g WHERE LOWER(g.flavor) = 'apple';
SELECT g.id FROM goods g WHERE g.price < 3;
SELECT g.id FROM goods g WHERE g.price < 3;
SELECT DISTINCT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor ilike '%lemon%' AND g.Food ilike '%cake%';
SELECT DISTINCT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE LOWER(g.Flavor) = 'lemon' AND LOWER(g.Food) = 'cake';
SELECT g.food, COUNT(DISTINCT r.customerid) AS customer_count FROM items i JOIN goods g ON i.item = g.id JOIN receipts r ON i.receipt = r.receiptnumber GROUP BY g.food ORDER BY customer_count DESC NULLS LAST;
SELECT g.food, COUNT(DISTINCT r.receiptnumber) AS number_of_customers FROM items i JOIN goods g ON i.item = g.id JOIN receipts r ON i.receipt = r.receiptnumber GROUP BY g.food ORDER BY number_of_customers DESC NULLS LAST;
SELECT c.Id FROM receipts r JOIN customers c ON r.CustomerId = c.Id WHERE r.Date LIKE '%bakery%' GROUP BY c.Id HAVING COUNT(r.ReceiptNumber) >= 15;
SELECT r.CustomerId FROM receipts r GROUP BY r.CustomerId HAVING COUNT(r.ReceiptNumber) >= 15;
SELECT c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId WHERE r.ReceiptNumber IN (SELECT ReceiptNumber FROM items i WHERE i.Item LIKE '%bakery%') GROUP BY c.LastName HAVING COUNT(r.ReceiptNumber) > 10;
SELECT c.LastName FROM receipts r JOIN customers c ON r.CustomerId = c.Id GROUP BY c.LastName HAVING COUNT(r.ReceiptNumber) > 10 ORDER BY c.LastName NULLS LAST;
SELECT COUNT(DISTINCT g.Flavor) FROM goods g WHERE LOWER(g.Food) = 'cake';
SELECT COUNT(DISTINCT g.Flavor) FROM goods g WHERE g.Food = 'cake';
SELECT DISTINCT g.Flavor FROM goods g WHERE LOWER(g.Food) = 'croissant';
SELECT DISTINCT g.Flavor FROM goods g WHERE LOWER(g.Food) = 'croissant' ORDER BY g.Flavor NULLS LAST;
SELECT DISTINCT i.Item FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE r.CustomerId = 15;
SELECT DISTINCT i.item FROM receipts r JOIN items i ON r.receiptnumber = i.receipt WHERE r.customerid = 15;
SELECT g.food, AVG(g.price) AS avg_price, MAX(g.price) AS max_price, MIN(g.price) AS min_price FROM goods g GROUP BY g.food ORDER BY g.food NULLS LAST;
SELECT g.food, AVG(g.price) AS average_price, MIN(g.price) AS min_price, MAX(g.price) AS max_price FROM goods g GROUP BY g.food ORDER BY g.food NULLS LAST;
SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item IN ('Cake', 'Cookie') GROUP BY r.ReceiptNumber HAVING COUNT(DISTINCT i.Item) = 2;
SELECT DISTINCT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Food IN ('cakes', 'cookies') ORDER BY i.Receipt NULLS LAST;
SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE LOWER(r.CustomerId::TEXT) IN (SELECT c.Id::TEXT FROM customers c WHERE LOWER(c.LastName) = 'logan') AND LOWER(g.Food) = 'croissant';
SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE LOWER(r.CustomerId::TEXT) IN (SELECT c.Id FROM customers c WHERE LOWER(c.LastName) = 'logan') AND LOWER(g.Food) = 'croissant';
SELECT r.ReceiptNumber, MAX(g.Price) AS max_price FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.ReceiptNumber ORDER BY max_price DESC LIMIT 1;
SELECT r.ReceiptNumber, MAX(g.Price) AS max_price FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id GROUP BY r.ReceiptNumber ORDER BY max_price DESC LIMIT 1;
SELECT i.item FROM items i GROUP BY i.item ORDER BY COUNT(i.receipt) ASC LIMIT 1;
SELECT i.item, COUNT(i.receipt) AS count FROM items i GROUP BY i.item ORDER BY count ASC LIMIT 1;
SELECT g.food, COUNT(g.id) AS number_of_goods FROM goods g GROUP BY g.food ORDER BY number_of_goods DESC NULLS LAST;
SELECT g.food, COUNT(*) AS total_goods FROM goods g GROUP BY g.food ORDER BY total_goods DESC NULLS LAST;
SELECT g.food, AVG(g.price) AS average_price FROM goods g GROUP BY g.food ORDER BY g.food NULLS LAST;
SELECT g.food, AVG(g.price) AS average_price FROM goods g GROUP BY g.food ORDER BY g.food NULLS LAST;
SELECT g.id FROM goods g WHERE g.flavor ilike '%apricot%' AND g.price < 5;
SELECT g.id FROM goods g WHERE g.flavor ilike '%apricot%' AND g.price < 5;
SELECT g.Flavor FROM goods g WHERE g.Price > 10 AND g.Food = 'cake';
SELECT g.Flavor FROM goods g WHERE g.Price > 10 AND g.Food = 'cake';
SELECT DISTINCT g.id, g.price FROM goods g WHERE g.price < (SELECT AVG(price) FROM goods);
SELECT g.id, g.price FROM goods g WHERE g.price < (SELECT AVG(price) FROM goods);
SELECT DISTINCT g.Id FROM goods g WHERE g.Price < (SELECT MIN(g2.Price) FROM goods g2 WHERE g2.Flavor = 'Tart');
SELECT DISTINCT g.Id FROM goods g WHERE g.Price < (SELECT MIN(g2.Price) FROM goods g2 WHERE g2.Flavor = 'Tart') ORDER BY g.Id NULLS LAST;
SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 13.00;
SELECT DISTINCT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Price > 13;
SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15 ORDER BY r.Date NULLS LAST LIMIT 1;
SELECT MAX(r.Date) AS latest_receipt_date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 15;
SELECT g.id FROM goods g WHERE g.id ilike '%app%' ORDER BY g.id NULLS LAST;
SELECT g.id FROM goods g WHERE g.id ilike '%app%' ORDER BY g.id NULLS LAST;
SELECT g.id, g.price FROM goods g WHERE g.id LIKE '%70%' LIMIT 1;
SELECT g.id, g.price FROM goods g WHERE g.id ilike '%70%'
SELECT c.LastName FROM customers c ORDER BY c.LastName ASC;
SELECT c.LastName FROM customers c ORDER BY c.LastName ASC;
SELECT g.id FROM goods g ORDER BY g.id NULLS LAST;
SELECT DISTINCT i.item FROM items i ORDER BY i.item NULLS LAST;
SELECT DISTINCT r.ReceiptNumber FROM items i JOIN goods g ON i.Item = g.Id JOIN receipts r ON i.Receipt = r.ReceiptNumber WHERE g.Flavor ilike '%apple%' OR r.CustomerId = 12 ORDER BY r.ReceiptNumber NULLS LAST;
SELECT DISTINCT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item = 'apple' OR r.CustomerId = 12;
SELECT r.ReceiptNumber, MAX(r.Date) AS latest_date FROM receipts r GROUP BY r.ReceiptNumber ORDER BY latest_date DESC;
SELECT r.ReceiptNumber, MAX(r.Date) AS LatestDate FROM receipts r GROUP BY r.ReceiptNumber ORDER BY LatestDate DESC LIMIT 1;
SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE (r.Date = (SELECT MIN(r2.Date) FROM receipts r2) OR i.Item IN (SELECT g.Id FROM goods g WHERE g.Price > 10)) ORDER BY r.ReceiptNumber NULLS LAST;
SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item IN (SELECT g.Id FROM goods g WHERE g.Price > 10) OR r.Date = (SELECT MIN(r2.Date) FROM receipts r2);
SELECT g.id FROM goods g WHERE g.price BETWEEN 3 AND 7 AND g.food IN ('Cookie', 'Cake') ORDER BY g.id NULLS LAST;
SELECT g.id FROM goods g WHERE g.price BETWEEN 3 AND 7 AND (g.food = 'Cookies' OR g.food = 'Cakes') ORDER BY g.id NULLS LAST;
SELECT c.FirstName, c.LastName FROM receipts r JOIN customers c ON r.CustomerId = c.Id ORDER BY r.Date ASC LIMIT 1;
SELECT c.FirstName, c.LastName FROM receipts r JOIN customers c ON r.CustomerId = c.Id ORDER BY r.Date ASC LIMIT 1;
SELECT AVG(g.Price) FROM goods g WHERE LOWER(g.Flavor) IN ('blackberry', 'blueberry');
SELECT AVG(g.Price) AS average_price FROM goods g WHERE g.Flavor ilike '%blackberry%' OR g.Flavor ilike '%blueberry%';
SELECT MIN(g.Price) AS CheapestPrice FROM goods g WHERE LOWER(g.Flavor) = 'cheese';
SELECT g.id, g.price FROM goods g WHERE g.flavor ilike '%cheese%' ORDER BY g.price ASC NULLS LAST LIMIT 1;
SELECT g.Flavor, MAX(g.Price) AS max_price, MIN(g.Price) AS min_price, AVG(g.Price) AS avg_price FROM goods g GROUP BY g.Flavor ORDER BY g.Flavor NULLS LAST;
SELECT g.Flavor, MAX(g.Price) AS max_price, MIN(g.Price) AS min_price, AVG(g.Price) AS avg_price FROM goods g GROUP BY g.Flavor ORDER BY g.Flavor NULLS LAST;
SELECT g.food, MIN(g.price) AS min_price, MAX(g.price) AS max_price FROM goods g GROUP BY g.food ORDER BY g.food NULLS LAST;
SELECT g.food, MIN(g.price) AS min_price, MAX(g.price) AS max_price FROM goods g GROUP BY g.food ORDER BY g.food NULLS LAST;
SELECT r.Date, COUNT(r.ReceiptNumber) AS NumberOfReceipts FROM receipts r GROUP BY r.Date ORDER BY NumberOfReceipts DESC LIMIT 3;
SELECT r.Date, COUNT(r.ReceiptNumber) AS NumberOfReceipts FROM receipts r GROUP BY r.Date ORDER BY NumberOfReceipts DESC LIMIT 3;
SELECT c.FirstName, c.LastName, COUNT(r.ReceiptNumber) AS NumberOfReceipts FROM receipts r JOIN customers c ON r.CustomerId = c.Id GROUP BY c.FirstName, c.LastName ORDER BY NumberOfReceipts DESC LIMIT 1;
SELECT r.CustomerId, COUNT(i.Receipt) AS purchase_count FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt GROUP BY r.CustomerId ORDER BY purchase_count DESC LIMIT 1;
SELECT r.date, COUNT(DISTINCT r.customerid) AS unique_customers FROM receipts r GROUP BY r.date ORDER BY r.date NULLS LAST;
SELECT r.date, COUNT(DISTINCT r.customerid) AS number_of_customers FROM receipts r GROUP BY r.date ORDER BY r.date NULLS LAST;
SELECT c.FirstName, c.LastName FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item = 'Tart' AND i.Flavor = 'Apple';
SELECT c.FirstName, c.LastName FROM receipts r JOIN customers c ON r.CustomerId = c.Id JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item = 'Tart' AND i.Flavor = 'Apple';
SELECT g.id FROM goods g WHERE g.food = 'Cookie' AND g.price < (SELECT MIN(g2.price) FROM goods g2 WHERE g2.food = 'Croissant');
SELECT g.id FROM goods g WHERE g.food = 'cookie' AND g.price < (SELECT MIN(g2.price) FROM goods g2 WHERE g2.food = 'croissant');
SELECT g.id FROM goods g WHERE g.food = 'Cake' AND g.price >= (SELECT AVG(g2.price) FROM goods g2 WHERE g2.food = 'Tart');
SELECT g.id FROM goods g WHERE g.food = 'Tart' AND g.price >= (SELECT AVG(g2.price) FROM goods g2 WHERE g2.food = 'Cake');
SELECT g.id FROM goods g WHERE g.price > 2 * (SELECT AVG(price) FROM goods);
SELECT g.id FROM goods g WHERE g.price > 2 * (SELECT AVG(price) FROM goods);
SELECT g.id, g.flavor, g.food, g.price FROM goods g ORDER BY g.price DESC;
SELECT g.id, g.flavor, g.food, g.price FROM goods g ORDER BY g.price NULLS LAST;
SELECT g.id, g.flavor FROM goods g WHERE g.food = 'Cake' ORDER BY g.flavor NULLS LAST;
SELECT g.id, g.flavor FROM goods g WHERE g.food = 'cake' ORDER BY g.flavor NULLS LAST;
SELECT i.item FROM items i JOIN goods g ON i.item = g.id WHERE g.flavor ilike '%chocolate%' GROUP BY i.item HAVING COUNT(i.receipt) <= 10 ORDER BY i.item NULLS LAST;
SELECT i.item FROM items i JOIN goods g ON i.item = g.id WHERE g.flavor ilike '%chocolate%' GROUP BY i.item ORDER BY COUNT(i.receipt) ASC LIMIT 1;
SELECT g.Flavor FROM goods g WHERE g.Food = 'Cake' AND NOT EXISTS (SELECT 1 FROM goods g2 WHERE g2.Food = 'Tart' AND g2.Flavor = g.Flavor);
SELECT g.Flavor FROM goods g WHERE g.Food = 'Cake' AND g.Id NOT IN (SELECT i.Item FROM items i JOIN goods gi ON i.Item = gi.Id WHERE gi.Food = 'Tart');
SELECT g.id, COUNT(i.item) AS item_count FROM items i JOIN goods g ON i.item = g.id GROUP BY g.id ORDER BY item_count DESC LIMIT 3;
SELECT i.item, COUNT(i.receipt) AS total_sales FROM items i GROUP BY i.item ORDER BY total_sales DESC LIMIT 3;
SELECT c.Id FROM receipts r JOIN customers c ON r.CustomerId = c.Id GROUP BY c.Id HAVING SUM(r.ReceiptNumber * i.Ordinal * g.Price) > 150
SELECT r.CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt GROUP BY r.CustomerId HAVING SUM(i.Ordinal * g.Price) > 150;
SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.ReceiptNumber = i.Receipt GROUP BY c.Id HAVING AVG(i.Ordinal * g.Price) > 5
SELECT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId WHERE c.Id IN (SELECT i.Receipt FROM items i GROUP BY i.Receipt HAVING AVG(i.Ordinal) > 5);
SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt GROUP BY r.Date HAVING SUM(i.Ordinal * g.Price) > 100;
SELECT r.Date FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt GROUP BY r.Date HAVING SUM(i.Ordinal * g.Price) > 100;
SELECT COUNT(*) FROM driver;
SELECT COUNT(*) FROM driver;
SELECT d.make, COUNT(d.driver_id) AS num_drivers FROM driver d WHERE CAST(d.points AS INTEGER) > 150 GROUP BY d.make ORDER BY num_drivers DESC NULLS LAST;
SELECT d.make, COUNT(d.driver_id) AS number_of_drivers FROM driver d WHERE CAST(d.points AS integer) > 150 GROUP BY d.make ORDER BY number_of_drivers DESC NULLS LAST;
SELECT d.make, AVG(d.age) AS average_age FROM driver d GROUP BY d.make ORDER BY d.make NULLS LAST;
SELECT d.make, AVG(d.age) AS average_age FROM driver d GROUP BY d.make ORDER BY d.make;
SELECT AVG(d.Laps) AS average_laps FROM driver d WHERE d.Age < 20;
SELECT AVG(d.Laps) AS Average_Laps FROM driver d WHERE d.Age < 20;
SELECT t.Manager, t.Sponsor, t.Car_Owner FROM team t ORDER BY t.Car_Owner NULLS LAST;
SELECT t.team, t.manager, t.sponsor, t.car_owner FROM team t ORDER BY t.car_owner NULLS LAST;
SELECT t.make FROM team t GROUP BY t.make HAVING COUNT(t.team_id) > 1 ORDER BY t.make NULLS LAST;
SELECT t.make FROM team t GROUP BY t.make HAVING COUNT(t.team_id) > 1 ORDER BY t.make NULLS LAST;
SELECT t.make FROM team t WHERE LOWER(t.car_owner) = 'buddy arrington' ORDER BY t.team_id NULLS LAST;
SELECT t.make FROM team t WHERE LOWER(t.car_owner) = 'buddy arrington';
SELECT MAX(CAST(d.Points AS integer)) AS max_points, MIN(CAST(d.Points AS integer)) AS min_points FROM driver d;
SELECT MAX(d.points) AS max_points, MIN(d.points) AS min_points FROM driver d;
SELECT COUNT(*) FROM driver d WHERE CAST(d.points AS integer) < 150;
SELECT COUNT(*) FROM driver d WHERE CAST(d.points AS INT) < 150;
SELECT d.driver, d.age FROM driver d ORDER BY d.age ASC;
SELECT d.driver, d.age FROM driver d ORDER BY d.age ASC;
SELECT d.driver, CAST(d.points AS integer) AS points FROM driver d ORDER BY points DESC;
SELECT d.Driver, CAST(d.Points AS integer) AS Points FROM driver d ORDER BY Points DESC;
SELECT d.driver, c.country FROM driver d JOIN country c ON d.country = c.country_id ORDER BY d.driver NULLS LAST;
SELECT d.driver, c.country FROM driver d JOIN country c ON d.country = c.country_id
SELECT MAX(d.points) AS max_points FROM driver d JOIN country c ON d.country = c.country_id WHERE LOWER(c.capital) = 'dublin';
SELECT MAX(d.Points) AS max_points FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE LOWER(c.Capital) = 'dublin';
SELECT AVG(d.Age) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE LOWER(c.Official_Native_Language) = 'english';
SELECT AVG(d.Age) FROM driver d JOIN country c ON d.Country = c.Country_Id WHERE LOWER(c.Official_native_language) = 'english';
SELECT d.country FROM driver d WHERE CAST(d.points AS INTEGER) > 150 GROUP BY d.country;
SELECT d.country FROM driver d WHERE CAST(d.points AS INT) > 150 GROUP BY d.country;
SELECT c.capital FROM driver d JOIN country c ON d.country = c.country_id ORDER BY d.points DESC LIMIT 1;
SELECT c.capital FROM driver d JOIN country c ON d.country = c.country_id ORDER BY d.points DESC LIMIT 1;
SELECT d.make, COUNT(d.driver_id) AS num_drivers FROM driver d GROUP BY d.make ORDER BY num_drivers DESC NULLS LAST;
SELECT d.make, COUNT(d.driver_id) AS number_of_drivers FROM driver d GROUP BY d.make ORDER BY number_of_drivers DESC NULLS LAST;
SELECT d.make, COUNT(d.driver_id) AS number_of_drivers FROM driver d GROUP BY d.make ORDER BY number_of_drivers DESC LIMIT 1;
SELECT d.make, COUNT(d.driver_id) AS number_of_drivers FROM driver d GROUP BY d.make ORDER BY number_of_drivers DESC LIMIT 1;
SELECT d.make FROM driver d GROUP BY d.make HAVING COUNT(d.driver_id) >= 3 ORDER BY d.make NULLS LAST;
SELECT d.make FROM driver d GROUP BY d.make HAVING COUNT(d.driver_id) >= 3 ORDER BY d.make NULLS LAST;
SELECT t.Team FROM team t WHERE NOT EXISTS (SELECT 1 FROM team_driver td WHERE td.Team_ID = t.Team_ID)
SELECT t.Team FROM team t WHERE NOT EXISTS (SELECT 1 FROM team_driver td WHERE td.Team_ID = t.Team_ID)
SELECT d.country FROM driver d WHERE d.make IN ('Dodge', 'Chevrolet') GROUP BY d.country HAVING COUNT(DISTINCT CASE WHEN d.make = 'Dodge' THEN d.driver_id END) > 0 AND COUNT(DISTINCT CASE WHEN d.make = 'Chevrolet' THEN d.driver_id END) > 0;
SELECT DISTINCT d.country FROM driver d WHERE d.make IN ('Dodge', 'Chevrolet') ORDER BY d.country NULLS LAST;
SELECT SUM(CAST(d.Points AS integer)) AS total_points, AVG(CAST(d.Points AS integer)) AS average_points FROM driver d;
SELECT SUM(CAST(d.Points AS integer)) AS total_points, AVG(CAST(d.Points AS integer)) AS average_points FROM driver d;
SELECT c.country FROM country c WHERE NOT EXISTS (SELECT 1 FROM driver d WHERE d.country = c.country) ORDER BY c.country NULLS LAST;
SELECT c.Country FROM country c WHERE NOT EXISTS (SELECT 1 FROM driver d WHERE d.Country = c.Country) ORDER BY c.Country NULLS LAST;
SELECT t.Manager, t.Sponsor FROM (SELECT td.Team_ID, COUNT(*) AS num_drivers FROM team_driver td GROUP BY td.Team_ID ORDER BY num_drivers DESC LIMIT 1) AS m JOIN team t ON m.Team_ID = t.Team_ID;
SELECT t.Manager, t.Sponsor FROM (SELECT td.Team_ID, COUNT(*) AS num_drivers FROM team_driver td GROUP BY td.Team_ID ORDER BY num_drivers DESC LIMIT 1) AS m JOIN team t ON m.Team_ID = t.Team_ID;
SELECT t.Manager, t.Car_Owner FROM team t WHERE (SELECT COUNT(*) FROM team_driver td WHERE td.Team_ID = t.Team_ID) >= 2;
SELECT t.Manager, t.Car_Owner FROM team t JOIN (SELECT td.Team_ID FROM team_driver td GROUP BY td.Team_ID HAVING COUNT(DISTINCT td.Driver_ID) >= 2) AS d ON t.Team_ID = d.Team_ID ORDER BY t.Team_ID NULLS LAST;
SELECT COUNT(*) FROM institution;
SELECT COUNT(*) FROM institution;
SELECT i.name FROM institution i ORDER BY i.name ASC;
SELECT i.name FROM institution i ORDER BY i.name ASC;
SELECT i.name FROM institution i ORDER BY i.founded ASC;
SELECT i.name, to_char(i.founded, 'YYYY') AS founded_year FROM institution i ORDER BY i.founded NULLS LAST;
SELECT i.city, i.province FROM institution i ORDER BY i.city NULLS LAST, i.province NULLS LAST;
SELECT i.city, i.province FROM institution i ORDER BY i.city NULLS LAST;
SELECT MAX(i.Enrollment) AS max_enrollment, MIN(i.Enrollment) AS min_enrollment FROM institution i;
SELECT MAX(i.Enrollment) AS max_enrollment, MIN(i.Enrollment) AS min_enrollment FROM institution i;
SELECT DISTINCT i.Affiliation FROM institution i WHERE LOWER(i.City)!= 'vancouver' ORDER BY i.Affiliation NULLS LAST;
SELECT i.Affiliation FROM institution i WHERE LOWER(i.City)!= 'vancouver' ORDER BY i.Institution_ID NULLS LAST;
SELECT i.stadium, i.capacity FROM institution i ORDER BY i.capacity DESC NULLS LAST;
SELECT i.Stadium, i.Capacity FROM institution i ORDER BY i.Capacity DESC NULLS LAST;
SELECT i.Stadium FROM institution i ORDER BY i.Enrollment DESC LIMIT 1;
SELECT i.Stadium FROM institution i ORDER BY i.Enrollment DESC LIMIT 1;
SELECT i.name AS institution_name, c.nickname AS nickname FROM institution i JOIN championship c ON i.institution_id = c.institution_id;
SELECT i.Name, c.Nickname FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID;
SELECT c.Nickname FROM Championship c JOIN Institution i ON c.Institution_ID = i.Institution_ID WHERE i.Enrollment = (SELECT MIN(Enrollment) FROM Institution);
SELECT c.Nickname FROM Championship c JOIN Institution i ON c.Institution_ID = i.Institution_ID WHERE i.Enrollment = (SELECT MIN(i2.Enrollment) FROM Institution i2);
SELECT i.Name, c.Number_of_Championships FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID ORDER BY c.Number_of_Championships DESC NULLS LAST;
SELECT i.Name, c.Number_of_Championships FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID ORDER BY c.Number_of_Championships DESC NULLS LAST;
SELECT i.Name FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID WHERE c.Number_of_Championships > 0 ORDER BY i.Name NULLS LAST;
SELECT i.Name FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID WHERE c.Number_of_Championships >= 1 ORDER BY i.Name NULLS LAST;
SELECT SUM(c.Number_of_Championships) AS Total_Public_Championships FROM Championship c JOIN Institution i ON c.Institution_ID = i.Institution_ID WHERE LOWER(i.Affiliation) LIKE '%public%'
SELECT SUM(c.Number_of_Championships) AS Total_Public_Championships FROM Championship c JOIN institution i ON c.Institution_ID = i.Institution_ID WHERE LOWER(i.Affiliation) LIKE '%public%'
SELECT i.Affiliation, COUNT(i.Institution_ID) AS Number_of_Institutions FROM institution i GROUP BY i.Affiliation ORDER BY Number_of_Institutions DESC NULLS LAST;
SELECT i.affiliation, COUNT(i.institution_id) AS number_of_institutions FROM institution i GROUP BY i.affiliation ORDER BY number_of_institutions DESC NULLS LAST;
SELECT i.Affiliation, COUNT(i.Institution_ID) AS Count FROM institution i GROUP BY i.Affiliation ORDER BY Count DESC LIMIT 1;
SELECT i.Affiliation FROM institution i GROUP BY i.Affiliation ORDER BY COUNT(i.Institution_ID) DESC LIMIT 1;
SELECT DISTINCT i.Founded FROM institution i GROUP BY i.Founded HAVING COUNT(i.Institution_ID) > 1 ORDER BY i.Founded NULLS LAST;
SELECT i.founded AS year_founded, COUNT(i.institution_id) AS num_institutions FROM institution i GROUP BY i.founded HAVING COUNT(i.institution_id) > 1 ORDER BY i.founded NULLS LAST;
SELECT c.Nickname, i.Capacity FROM Championship c JOIN Institution i ON c.Institution_ID = i.Institution_ID ORDER BY i.Capacity DESC NULLS LAST;
SELECT c.Nickname, i.Capacity FROM Championship c JOIN Institution i ON c.Institution_ID = i.Institution_ID ORDER BY i.Capacity DESC NULLS LAST;
SELECT SUM(i.Enrollment) AS Total_Enrollment FROM institution i WHERE LOWER(i.City) IN ('vancouver', 'calgary');
SELECT i.Name, i.Enrollment FROM institution i WHERE LOWER(i.City) = 'vancouver' OR LOWER(i.City) = 'calgary';
SELECT DISTINCT i.Province FROM institution i WHERE i.Founded < 1920 AND i.Founded > 1950 ORDER BY i.Province NULLS LAST;
SELECT DISTINCT i.Province FROM institution i WHERE i.Founded < 1920 AND i.Founded > 1950 ORDER BY i.Province NULLS LAST;
SELECT COUNT(DISTINCT i.Province) FROM institution i;
SELECT COUNT(DISTINCT i.Province) FROM institution i;
SELECT w.Code AS warehouse_code, w.Location AS location, w.Capacity AS capacity FROM Warehouses w ORDER BY w.Code;
SELECT * FROM Warehouses;
SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) = 'new york' ORDER BY b.Contents;
SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) = 'new york' ORDER BY b.Contents;
SELECT b.contents FROM Boxes b WHERE b.value > 150;
SELECT b.contents FROM Boxes b WHERE b.value > 150;
SELECT w.Code AS warehouse_code, AVG(b.Value) AS average_box_value FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code ORDER BY w.Code;
SELECT w.Code AS warehouse_code, AVG(b.Value) AS average_box_value FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code GROUP BY w.Code ORDER BY w.Code;
SELECT AVG(b.Value) AS average_value, SUM(b.Value) AS total_value FROM Boxes b;
SELECT AVG(b.Value) AS average_value, SUM(b.Value) AS total_value FROM Boxes b;
SELECT AVG(w.Capacity) AS average_capacity, SUM(w.Capacity) AS total_capacity FROM Warehouses w;
SELECT AVG(w.Capacity) AS average_capacity, SUM(w.Capacity) AS total_capacity FROM Warehouses w;
SELECT b.contents, AVG(b.value) AS average_value, MAX(b.value) AS max_value FROM Boxes b GROUP BY b.contents ORDER BY b.contents;
SELECT b.contents, AVG(b.value) AS average_value, MAX(b.value) AS max_value FROM Boxes b GROUP BY b.contents ORDER BY b.contents;
SELECT b.Contents, SUM(b.Value) AS TotalValue FROM Boxes b GROUP BY b.Contents ORDER BY TotalValue DESC LIMIT 1;
SELECT b.Contents FROM Boxes b ORDER BY b.Value DESC LIMIT 1;
SELECT AVG(b.Value) AS Average_Box_Value FROM Boxes b;
SELECT AVG(b.Value) AS Average_Box_Value FROM Boxes b;
SELECT DISTINCT b.Contents FROM Boxes b ORDER BY b.Contents;
SELECT DISTINCT b.Contents FROM Boxes b ORDER BY b.Contents;
SELECT COUNT(DISTINCT b.Contents) FROM Boxes b;
SELECT COUNT(DISTINCT b.Contents) FROM Boxes b;
SELECT DISTINCT w.Location FROM Warehouses w ORDER BY w.Location;
SELECT DISTINCT w.Location FROM Warehouses w ORDER BY w.Location;
SELECT b.Code FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) IN ('chicago', 'new york') ORDER BY b.Code;
SELECT b.Code FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) IN ('chicago', 'new york') ORDER BY b.Code;
SELECT SUM(b.Value) AS TotalValue FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) IN ('chicago', 'new york');
SELECT SUM(b.Value) AS TotalValue FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) IN ('chicago', 'new york');
SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) IN ('chicago', 'new york') ORDER BY b.Contents;
SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w1 ON b.Warehouse = w1.Code JOIN Warehouses w2 ON b.Warehouse = w2.Code WHERE LOWER(w1.Location) = 'chicago' AND LOWER(w2.Location) = 'new york';
SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location)!= 'new york' ORDER BY b.Contents;
SELECT DISTINCT b.Contents FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location)!= 'new york' ORDER BY b.Contents;
SELECT w.Location FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents ilike '%Rocks%' AND b.Contents not ilike '%Scissors%' ORDER BY w.Location;
SELECT w.Location FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents ilike '%Rocks%' AND b.Contents not ilike '%Scissors%' ORDER BY w.Location;
SELECT DISTINCT b.Warehouse FROM Boxes b WHERE b.Contents IN ('Rocks', 'Scissors') ORDER BY b.Warehouse;
SELECT DISTINCT b.Warehouse FROM Boxes b WHERE b.Contents IN ('Rocks', 'Scissors') ORDER BY b.Warehouse;
SELECT w.Location FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents IN ('Rocks', 'Scissors') GROUP BY w.Location;
SELECT DISTINCT w.Location FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Contents ilike '%Rocks%Scissors%' ORDER BY w.Location;
SELECT b.Code, b.Contents, b.Value FROM Boxes b ORDER BY b.Value DESC;
SELECT b.Code, b.Contents, b.Value FROM Boxes b ORDER BY b.Value DESC;
SELECT b.Code, b.Contents FROM Boxes b WHERE b.Value = (SELECT MIN(b2.Value) FROM Boxes b2);
SELECT b.Code, b.Contents FROM Boxes b WHERE b.Value = (SELECT MIN(b2.Value) FROM Boxes b2);
SELECT DISTINCT b.Contents FROM Boxes b WHERE b.Value > (SELECT AVG(Value) FROM Boxes);
SELECT DISTINCT b.Contents FROM Boxes b WHERE b.Value > (SELECT AVG(Value) FROM Boxes);
SELECT DISTINCT b.Contents FROM Boxes b ORDER BY b.Contents;
SELECT DISTINCT b.Contents FROM Boxes b ORDER BY b.Contents ASC;
SELECT b.Code FROM Boxes b WHERE b.Value > (SELECT MAX(b2.Value) FROM Boxes b2 WHERE b2.Contents = 'Rocks')
SELECT b.Code FROM Boxes b WHERE b.Value > (SELECT MAX(b2.Value) FROM Boxes b2 WHERE b2.Contents = 'Rocks') ORDER BY b.Code;
SELECT b.Code, b.Contents FROM Boxes b WHERE b.Value > (SELECT AVG(b2.Value) FROM Boxes b2 WHERE b2.Contents = 'Scissors') ORDER BY b.Value DESC;
SELECT b.Code, b.Contents FROM Boxes b WHERE b.Value > (SELECT MAX(b2.Value) FROM Boxes b2 WHERE b2.Contents LIKE '%Scissors%') ORDER BY b.Value DESC;
SELECT SUM(b.Value) AS TotalValue FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code ORDER BY w.Capacity DESC LIMIT 1;
SELECT SUM(b.Value) AS TotalValue FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code ORDER BY w.Capacity DESC LIMIT 1;
SELECT w.Code, AVG(b.Value) AS avg_value FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code HAVING AVG(b.Value) > 150 ORDER BY avg_value DESC;
SELECT b.Warehouse, AVG(b.Value) AS average_value FROM Boxes b GROUP BY b.Warehouse HAVING AVG(b.Value) > 150 ORDER BY average_value DESC;
SELECT b.contents, SUM(b.value) AS total_value, COUNT(*) AS box_count FROM Boxes b GROUP BY b.contents ORDER BY b.contents;
SELECT b.contents, SUM(b.value) AS total_value, COUNT(*) AS box_count FROM Boxes b GROUP BY b.contents ORDER BY b.contents;
SELECT w.Location, SUM(w.Capacity) AS Total_Capacity, AVG(w.Capacity) AS Average_Capacity, MAX(w.Capacity) AS Max_Capacity FROM Warehouses w GROUP BY w.Location ORDER BY w.Location;
SELECT w.Location, SUM(w.Capacity) AS Total_Capacity, AVG(w.Capacity) AS Average_Capacity, MAX(w.Capacity) AS Max_Capacity FROM Warehouses w GROUP BY w.Location ORDER BY w.Location;
SELECT SUM(w.Capacity) AS Total_Capacity FROM Warehouses w;
SELECT SUM(w.Capacity) AS TotalCapacity FROM Warehouses w;
SELECT w.Location, MAX(b.Value) AS MaxValue FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code GROUP BY w.Location ORDER BY MaxValue DESC;
SELECT w.Location, MAX(b.Value) AS MaxValue FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code GROUP BY w.Location ORDER BY MaxValue DESC;
SELECT w.Code AS warehouse_code, COUNT(b.Code) AS box_count FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse GROUP BY w.Code ORDER BY box_count DESC NULLS LAST;
SELECT b.Warehouse, COUNT(b.Code) AS box_count FROM Boxes b GROUP BY b.Warehouse ORDER BY b.Warehouse;
SELECT COUNT(DISTINCT w.Location) FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(b.Contents) = 'rocks';
SELECT COUNT(DISTINCT b.Warehouse) FROM Boxes b WHERE LOWER(b.Contents) = 'rocks';
SELECT b.Code, w.Location AS City FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code;
SELECT b.Code AS Box_Code, w.Location AS Warehouse_Location FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code;
SELECT b.Code FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) = 'chicago' ORDER BY b.Code;
SELECT b.Code FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location) = 'chicago' ORDER BY b.Code;
SELECT b.Warehouse, COUNT(b.Code) AS box_count FROM Boxes b GROUP BY b.Warehouse ORDER BY b.Warehouse;
SELECT b.Warehouse, COUNT(b.Code) AS box_count FROM Boxes b GROUP BY b.Warehouse ORDER BY b.Warehouse;
SELECT b.Warehouse, COUNT(DISTINCT b.Contents) AS num_contents FROM Boxes b GROUP BY b.Warehouse ORDER BY b.Warehouse;
SELECT b.Warehouse, COUNT(DISTINCT b.Contents) AS distinct_contents_count FROM Boxes b GROUP BY b.Warehouse ORDER BY b.Warehouse;
SELECT w.Code FROM Warehouses w WHERE w.Capacity < 1000;
SELECT w.Code FROM Warehouses w JOIN Boxes b ON w.Code = b.Warehouse WHERE b.Code > w.Capacity;
SELECT SUM(b.Value) AS TotalValue FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location)!= 'chicago';
SELECT SUM(b.Value) AS TotalValue FROM Boxes b JOIN Warehouses w ON b.Warehouse = w.Code WHERE LOWER(w.Location)!= 'chicago';
SELECT u.University_Name, u.City, u.State FROM university u ORDER BY u.University_Name ASC;
SELECT u.University_Name, u.City, u.State FROM university u ORDER BY u.University_Name ASC;
SELECT COUNT(*) FROM university u WHERE LOWER(u.state) = 'illinois' OR LOWER(u.state) = 'ohio';
SELECT COUNT(*) FROM university u WHERE LOWER(u.state) = 'illinois' OR LOWER(u.state) = 'ohio';
SELECT MAX(u.Enrollment) AS max_enrollment, AVG(u.Enrollment) AS avg_enrollment, MIN(u.Enrollment) AS min_enrollment FROM university u;
SELECT MAX(u.Enrollment) AS max_enrollment, AVG(u.Enrollment) AS avg_enrollment, MIN(u.Enrollment) AS min_enrollment FROM university u;
SELECT u.team_name FROM university u WHERE u.enrollment > (SELECT AVG(u2.enrollment) FROM university u2);
SELECT u.Team_Name FROM university u WHERE u.Enrollment > (SELECT AVG(Enrollment) FROM university);
SELECT DISTINCT u.Home_Conference FROM university u ORDER BY u.Home_Conference NULLS LAST;
SELECT DISTINCT u.Home_Conference FROM university u ORDER BY u.Home_Conference NULLS LAST;
SELECT u.Home_Conference, COUNT(u.University_ID) AS num_universities FROM university u GROUP BY u.Home_Conference ORDER BY num_universities DESC NULLS LAST;
SELECT u.Home_Conference, COUNT(u.University_ID) AS number_of_universities FROM university u GROUP BY u.Home_Conference ORDER BY number_of_universities DESC NULLS LAST;
SELECT u.State, COUNT(u.University_ID) AS NumberOfUniversities FROM university u GROUP BY u.State ORDER BY NumberOfUniversities DESC LIMIT 1;
SELECT u.State, COUNT(u.University_ID) AS NumberOfUniversities FROM university u GROUP BY u.State ORDER BY NumberOfUniversities DESC LIMIT 1;
SELECT u.Home_Conference FROM university u WHERE u.Enrollment > 2000 GROUP BY u.Home_Conference ORDER BY COUNT(u.University_ID) DESC NULLS LAST;
SELECT u.Home_Conference FROM university u WHERE AVG(u.Enrollment) > 2000 GROUP BY u.Home_Conference;
SELECT u.Home_Conference, SUM(u.Enrollment) AS Total_Enrollment FROM university u GROUP BY u.Home_Conference ORDER BY Total_Enrollment ASC LIMIT 1;
SELECT u.Home_Conference, MIN(u.Enrollment) AS Min_Enrollment FROM university u GROUP BY u.Home_Conference ORDER BY Min_Enrollment ASC NULLS LAST LIMIT 1;
SELECT m.major_name, m.major_code FROM major m ORDER BY m.major_code NULLS LAST;
SELECT m.major_name, m.major_code FROM major m ORDER BY m.major_code NULLS LAST;
SELECT m.major_name, mr.rank FROM major AS m JOIN major_ranking AS mr ON m.major_id = mr.major_id JOIN university u ON mr.university_id = u.university_id WHERE LOWER(u.university_name) = 'augustana college' ORDER BY mr.rank NULLS LAST;
SELECT mr.rank, m.major_name FROM major_ranking mr JOIN major m ON mr.major_id = m.major_id WHERE mr.university_id IN (SELECT u.university_id FROM university u WHERE LOWER(u.city) = 'rock island' AND LOWER(u.state) = 'il') ORDER BY mr.rank NULLS LAST;
SELECT u.University_Name, u.City, u.State FROM major_ranking mr JOIN university u ON mr.University_ID = u.University_ID WHERE mr.Major_ID IN (SELECT m.Major_ID FROM major m WHERE LOWER(m.Major_Name) = 'accounting') AND mr.Rank = 1;
SELECT u.University_Name, u.City, u.State FROM major m JOIN major_ranking mr ON m.Major_ID = mr.Major_ID JOIN university u ON mr.University_ID = u.University_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank = 1;
SELECT u.University_Name FROM major_ranking mr JOIN university u ON mr.University_ID = u.University_ID WHERE mr.Rank = 1 GROUP BY u.University_Name ORDER BY COUNT(mr.Major_ID) DESC LIMIT 1;
SELECT u.University_Name FROM major_ranking mr JOIN university u ON mr.University_ID = u.University_ID WHERE mr.Rank = 1 GROUP BY u.University_Name ORDER BY COUNT(mr.Major_ID) DESC LIMIT 1;
SELECT u.University_Name FROM university u WHERE NOT EXISTS (SELECT 1 FROM major_ranking mr WHERE mr.Rank = 1 AND mr.University_ID = u.University_ID) ORDER BY u.University_Name NULLS LAST;
SELECT u.University_Name FROM university u WHERE NOT EXISTS (SELECT 1 FROM major_ranking mr WHERE mr.Rank = 1 AND mr.University_ID = u.University_ID) ORDER BY u.University_Name NULLS LAST;
SELECT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Major_ID IN (SELECT m.Major_ID FROM major m WHERE LOWER(m.Major_Name) = 'accounting') AND mr.Major_ID IN (SELECT m.Major_ID FROM major m WHERE LOWER(m.Major_Name) = 'urban education');
SELECT DISTINCT u.University_Name FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Major_ID IN (SELECT m.Major_ID FROM major m WHERE LOWER(m.Major_Name) = 'accounting' OR LOWER(m.Major_Name) = 'urban education') ORDER BY u.University_Name NULLS LAST;
SELECT u.University_Name, o.Rank FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID WHERE LOWER(u.State) = 'wi' ORDER BY o.Rank NULLS LAST;
SELECT u.University_Name, o.Rank FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID WHERE LOWER(u.State) = 'wi' ORDER BY o.Rank NULLS LAST;
SELECT u.University_Name FROM overall_ranking o JOIN university u ON o.University_ID = u.University_ID WHERE o.Research_point = (SELECT MAX(Research_point) FROM overall_ranking);
SELECT u.University_Name FROM overall_ranking o JOIN university u ON o.University_ID = u.University_ID ORDER BY o.Research_point DESC NULLS LAST LIMIT 1;
SELECT u.University_Name, o.Reputation_point FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID ORDER BY o.Reputation_point ASC;
SELECT u.University_Name, o.Reputation_point FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID ORDER BY o.Reputation_point ASC;
SELECT u.University_Name FROM major_ranking mr JOIN major m ON mr.Major_ID = m.Major_ID JOIN university u ON mr.University_ID = u.University_ID WHERE m.Major_Name ilike '%Accounting%' AND mr.Rank >= 3;
SELECT u.University_Name FROM major m JOIN major_ranking mr ON m.Major_ID = mr.Major_ID JOIN university u ON mr.University_ID = u.University_ID WHERE m.Major_Name ilike '%Accounting%' AND mr.Rank >= 3 ORDER BY u.University_Name NULLS LAST;
SELECT SUM(u.Enrollment) AS Total_Enrollment FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID WHERE o.Rank <= 5;
SELECT SUM(u.Enrollment) AS Total_Enrollment FROM overall_ranking o JOIN university u ON o.University_ID = u.University_ID WHERE o.Rank <= 5;
SELECT u.University_Name, o.Citation_point FROM overall_ranking o JOIN university u ON o.University_ID = u.University_ID WHERE o.Reputation_point >= 3 ORDER BY o.Citation_point DESC NULLS LAST;
SELECT u.University_Name, o.Citation_point FROM overall_ranking o JOIN university u ON o.University_ID = u.University_ID ORDER BY o.Reputation_point DESC LIMIT 3;
SELECT u.State FROM university u WHERE u.Enrollment < 3000 GROUP BY u.State HAVING COUNT(u.University_ID) > 2 ORDER BY u.State NULLS LAST;
SELECT u.State FROM university u WHERE u.Enrollment < 3000 GROUP BY u.State HAVING COUNT(u.University_ID) > 2 ORDER BY u.State NULLS LAST;
SELECT m.Title FROM Movies m WHERE m.Rating IS NULL;
SELECT m.title FROM Movies m WHERE m.rating IS NULL;
SELECT m.title FROM Movies m WHERE LOWER(m.rating) = 'g' ORDER BY m.title;
SELECT m.title FROM Movies m WHERE LOWER(m.rating) = 'g';
SELECT m.Title FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code WHERE LOWER(mt.Name) = 'odeon';
SELECT m.Title FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE LOWER(mt.Name) = 'odeon' ORDER BY m.Title;
SELECT m.title AS movie_title, mt.name AS theater_name FROM Movies m JOIN MovieTheaters mt ON m.code = mt.movie;
SELECT m.title AS movie_title, mt.name AS theater_name FROM Movies m JOIN MovieTheaters mt ON m.code = mt.movie;
SELECT COUNT(*) FROM Movies m WHERE LOWER(m.Rating) = 'g';
SELECT COUNT(*) FROM Movies m WHERE LOWER(m.Rating) = 'g';
SELECT COUNT(DISTINCT mt.Code) FROM MovieTheaters mt;
SELECT COUNT(DISTINCT mt.Code) FROM MovieTheaters mt;
SELECT COUNT(DISTINCT mt.Movie) FROM MovieTheaters mt;
SELECT COUNT(DISTINCT mt.Movie) FROM MovieTheaters mt;
SELECT COUNT(DISTINCT mt.Code) FROM MovieTheaters mt;
SELECT COUNT(DISTINCT mt.Code) FROM MovieTheaters mt;
SELECT m.Rating FROM Movies m WHERE m.Title ilike '%citizen%';
SELECT m.Rating FROM Movies m WHERE LOWER(m.Title) LIKE '%citizen%';
SELECT mt.Name FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code WHERE m.Rating IN ('G', 'PG') ORDER BY mt.Name;
SELECT mt.Name FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code WHERE m.Rating IN ('G', 'PG') ORDER BY mt.Name;
SELECT m.title FROM Movies m JOIN MovieTheaters mt ON m.code = mt.movie WHERE mt.name IN ('Odeon', 'Imperial') ORDER BY m.title;
SELECT m.Title FROM Movies m JOIN MovieTheaters mt ON m.Code = mt.Movie WHERE mt.Name IN ('Odeon', 'Imperial') ORDER BY m.Title;
SELECT m.Title FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code WHERE mt.Name IN ('Odeon', 'Imperial') GROUP BY m.Title HAVING COUNT(DISTINCT mt.Name) = 2;
SELECT m.Title FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code WHERE mt.Name IN ('Odeon', 'Imperial') GROUP BY m.Title HAVING COUNT(DISTINCT mt.Name) = 2;
SELECT m.title FROM Movies m WHERE m.code NOT IN (SELECT mt.movie FROM MovieTheaters mt WHERE LOWER(mt.name) = 'odeon') ORDER BY m.title;
SELECT m.title FROM movies m WHERE m.code NOT IN (SELECT mt.movie FROM movietheaters mt WHERE LOWER(mt.name) = 'odeon') ORDER BY m.title;
SELECT m.title FROM Movies m ORDER BY m.title ASC;
SELECT m.title FROM movies m ORDER BY m.title ASC;
SELECT m.title, m.rating FROM Movies m ORDER BY m.rating DESC;
SELECT m.title, m.rating FROM Movies m ORDER BY m.rating DESC;
SELECT mt.Name FROM MovieTheaters mt GROUP BY mt.Name ORDER BY COUNT(mt.Movie) DESC LIMIT 1;
SELECT mt.Name FROM MovieTheaters mt GROUP BY mt.Name ORDER BY COUNT(mt.Movie) DESC LIMIT 1;
SELECT m.title FROM movies m JOIN (SELECT mt.movie, COUNT(*) AS theater_count FROM movietheaters mt GROUP BY mt.movie ORDER BY theater_count DESC LIMIT 1) t ON m.code = t.movie;
SELECT m.title FROM movies m JOIN movietheaters mt ON m.code = mt.movie GROUP BY m.title ORDER BY COUNT(mt.code) DESC LIMIT 1;
SELECT m.Rating, COUNT(m.Code) AS NumberOfMovies FROM Movies m GROUP BY m.Rating ORDER BY NumberOfMovies DESC;
SELECT m.Rating, COUNT(m.Code) AS NumberOfMovies FROM Movies m GROUP BY m.Rating ORDER BY NumberOfMovies DESC;
SELECT COUNT(*) FROM Movies WHERE Rating IS NOT NULL;
SELECT COUNT(*) FROM Movies WHERE Movies.Rating IS NOT NULL;
SELECT mt.Name FROM MovieTheaters mt WHERE mt.Movie IS NOT NULL GROUP BY mt.Name HAVING COUNT(mt.Code) > 0 ORDER BY mt.Name;
SELECT mt.Name FROM MovieTheaters mt WHERE mt.Movie IS NOT NULL GROUP BY mt.Name
SELECT mt.Name FROM MovieTheaters mt WHERE mt.Movie IS NULL;
SELECT mt.Name FROM MovieTheaters mt WHERE mt.Movie IS NULL;
SELECT mt.Name FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code WHERE LOWER(m.Rating) = 'g' ORDER BY mt.Name;
SELECT mt.Name FROM MovieTheaters mt JOIN Movies m ON mt.Movie = m.Code WHERE LOWER(m.Rating) = 'g';
SELECT m.Title FROM Movies m ORDER BY m.Code;
SELECT m.title FROM movies m ORDER BY m.title;
SELECT DISTINCT m.Rating FROM Movies m ORDER BY m.Rating;
SELECT DISTINCT m.Rating FROM Movies m ORDER BY m.Rating;
SELECT m.Code, m.Title FROM Movies m WHERE m.Rating IS NULL;
SELECT m.title FROM Movies m WHERE m.rating IS NULL;
SELECT m.Title FROM Movies m WHERE m.Code NOT IN (SELECT mt.Movie FROM MovieTheaters mt);
SELECT m.title FROM Movies m WHERE m.code NOT IN (SELECT mt.movie FROM MovieTheaters mt);
SELECT p.Recipient, MAX(p.Weight) AS Max_Weight FROM Package p GROUP BY p.Recipient ORDER BY Max_Weight DESC LIMIT 1;
SELECT p.Recipient, c.Name FROM Package p JOIN Client c ON p.Recipient = c.AccountNumber ORDER BY p.Weight DESC LIMIT 1;
SELECT SUM(p.Weight) AS TotalWeight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE LOWER(c.Name) = 'leo wong';
SELECT SUM(p.Weight) AS TotalWeight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE LOWER(c.Name) = 'leo wong';
SELECT e.Position FROM Employee e WHERE LOWER(e.Name) = 'amy wong';
SELECT e.Position FROM Employee e WHERE LOWER(e.Name) = 'amy wong';
SELECT e.Salary, e.Position FROM Employee e WHERE LOWER(e.Name) = 'turanga leela';
SELECT e.Salary, e.Position FROM Employee e WHERE LOWER(e.Name) = 'turanga leela';
SELECT AVG(salary) AS average_salary FROM employee WHERE position = 'Intern';
SELECT AVG(e.Salary) AS AverageSalary FROM Employee e WHERE LOWER(e.Position) = 'intern';
SELECT e.Position FROM Employee e WHERE LOWER(e.Position) = 'physician';
SELECT h.Level FROM Has_Clearance h JOIN Employee e ON h.Employee = e.EmployeeID WHERE LOWER(e.Position) LIKE '%physician%' LIMIT 1;
SELECT p.PackageNumber FROM Package p JOIN Employee e ON p.Sender = e.EmployeeID WHERE LOWER(e.Name) = 'leo wong';
SELECT COUNT(p.PackageNumber) FROM Package p JOIN Employee e ON p.Sender = e.EmployeeID WHERE LOWER(e.Name) = 'leo wong';
SELECT p.PackageNumber FROM Package p JOIN Client c ON p.Recipient = c.AccountNumber WHERE LOWER(c.Name) = 'leo wong';
SELECT p.PackageNumber FROM Package p JOIN Employee e ON p.Recipient = e.EmployeeID WHERE LOWER(e.Name) = 'leo wong';
SELECT p.PackageNumber FROM Package p JOIN Client c ON p.Sender = c.AccountNumber OR p.Recipient = c.AccountNumber WHERE LOWER(c.Name) = 'leo wong';
SELECT DISTINCT p.PackageNumber FROM Package p JOIN Employee e ON p.Sender = e.EmployeeID OR p.Recipient = e.EmployeeID WHERE LOWER(e.Name) = 'leo wong' ORDER BY p.PackageNumber;
SELECT COUNT(*) FROM Package p JOIN Client c ON p.Sender = c.AccountNumber AND p.Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong') WHERE c.Name = 'Ogden Wernstrom';
SELECT COUNT(*) FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE LOWER(c.Name) = 'ogden wernstrom' AND p.Recipient IN (SELECT AccountNumber FROM Client WHERE LOWER(Name) = 'leo wong');
SELECT p.contents FROM employee e JOIN shipment s ON e.employeeid = s.manager JOIN package p ON s.shipmentid = p.shipment WHERE LOWER(e.name) = 'john zoidfarb';
SELECT p.contents FROM employee e JOIN shipment s ON e.employeeid = s.manager JOIN package p ON s.shipmentid = p.shipment WHERE LOWER(e.name) = 'john zoidfarb';
SELECT p.PackageNumber, p.Weight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE LOWER(c.Name) LIKE '%john%' ORDER BY p.Weight DESC LIMIT 1;
SELECT p.PackageNumber, MAX(p.Weight) AS MaxWeight FROM Package p JOIN Client c ON p.Sender = c.AccountNumber WHERE LOWER(c.Name) LIKE '%john%' GROUP BY p.PackageNumber ORDER BY MaxWeight DESC LIMIT 1;
SELECT p.PackageNumber, p.Weight FROM Package p ORDER BY p.Weight ASC LIMIT 3
SELECT p.PackageNumber, p.Weight FROM Package p ORDER BY p.Weight ASC LIMIT 3;
SELECT c.Name, COUNT(p.PackageNumber) AS NumberOfPackages FROM Package p JOIN Client c ON p.Sender = c.AccountNumber GROUP BY c.Name ORDER BY NumberOfPackages DESC LIMIT 1;
SELECT c.Name AS sender_name, COUNT(p.PackageNumber) AS number_of_packages FROM Package p JOIN Client c ON p.Sender = c.AccountNumber GROUP BY c.Name ORDER BY number_of_packages DESC LIMIT 1;
SELECT c.Name, COUNT(p.PackageNumber) AS NumberOfPackages FROM Client c JOIN Package p ON c.AccountNumber = p.Recipient GROUP BY c.Name ORDER BY NumberOfPackages ASC LIMIT 1;
SELECT p.Recipient, COUNT(p.PackageNumber) AS package_count FROM Package p GROUP BY p.Recipient ORDER BY package_count ASC LIMIT 1;
SELECT c.Name FROM Client c JOIN Package p ON c.AccountNumber = p.Sender GROUP BY c.Name HAVING COUNT(p.PackageNumber) > 1 ORDER BY c.Name;
SELECT c.Name FROM Client c JOIN Package p ON c.AccountNumber = p.Sender GROUP BY c.Name HAVING COUNT(p.PackageNumber) > 1 ORDER BY c.Name;
SELECT p.Coordinates FROM Planet p WHERE LOWER(p.Name) ='mars';
SELECT p.Coordinates FROM Planet p WHERE LOWER(p.Name) ='mars';
SELECT p.Name, p.Coordinates FROM Planet p ORDER BY p.Name ASC;
SELECT p.Name, p.Coordinates FROM Planet p ORDER BY p.Name ASC;
SELECT s.ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID WHERE LOWER(e.Name) = 'phillip j. fry';
SELECT s.ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID WHERE LOWER(e.Name) = 'phillip j fry';
SELECT s.Date FROM Shipment s ORDER BY s.Date;
SELECT s.Date FROM Shipment s ORDER BY s.Date;
SELECT s.ShipmentID FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID WHERE LOWER(p.Name) ='mars';
SELECT s.ShipmentID FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID WHERE LOWER(p.Name) ='mars';
SELECT s.ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID WHERE LOWER(e.Name) = 'turanga leela' AND s.Planet = (SELECT p.PlanetID FROM Planet p WHERE LOWER(p.Name) ='mars');
SELECT s.ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID JOIN Planet p ON s.Planet = p.PlanetID WHERE LOWER(e.Name) = 'turanga leela' AND LOWER(p.Name) ='mars';
SELECT s.ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID WHERE LOWER(e.Name) = 'turanga leela' OR s.Planet IN (SELECT p.PlanetID FROM Planet p WHERE LOWER(p.Name) ='mars') ORDER BY s.ShipmentID;
SELECT s.ShipmentID FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID WHERE LOWER(e.Name) = 'turanga leela' AND s.Planet = (SELECT p.PlanetID FROM Planet p WHERE LOWER(p.Name) ='mars');
SELECT p.Name AS Planet, COUNT(s.ShipmentID) AS TotalShipments FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID GROUP BY p.Name ORDER BY TotalShipments DESC;
SELECT p.Name AS Planet, COUNT(s.ShipmentID) AS NumberOfShipments FROM Shipment s JOIN Planet p ON s.Planet = p.PlanetID GROUP BY p.Name ORDER BY NumberOfShipments DESC NULLS LAST;
SELECT p.Name FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet GROUP BY p.Name ORDER BY COUNT(s.ShipmentID) DESC LIMIT 1;
SELECT p.Name FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet GROUP BY p.Name ORDER BY COUNT(s.ShipmentID) DESC LIMIT 1;
SELECT e.Name AS manager_name, COUNT(s.ShipmentID) AS number_of_shipments FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID GROUP BY e.Name ORDER BY number_of_shipments DESC;
SELECT e.Name AS Manager, COUNT(s.ShipmentID) AS NumberOfShipments FROM Shipment s JOIN Employee e ON s.Manager = e.EmployeeID GROUP BY e.Name ORDER BY NumberOfShipments DESC;
SELECT SUM(p.Weight) AS TotalWeight FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID WHERE LOWER(pl.Name) ='mars';
SELECT SUM(p.Weight) AS TotalWeight FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Planet pl ON s.Planet = pl.PlanetID WHERE LOWER(pl.Name) ='mars';
SELECT p.Name AS PlanetName, SUM(pg.Weight) AS TotalWeight FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet JOIN Package pg ON s.ShipmentID = pg.Shipment GROUP BY p.Name;
SELECT p.Name AS PlanetName, SUM(pg.Weight) AS TotalPackageWeight FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet JOIN Package pg ON s.ShipmentID = pg.Shipment GROUP BY p.Name ORDER BY TotalPackageWeight DESC;
SELECT p.Name FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet GROUP BY p.Name HAVING SUM(s.Date) > 30
SELECT p.Name FROM Planet p JOIN Shipment s ON p.PlanetID = s.Planet GROUP BY p.Name HAVING SUM(s.Date) > 30;
SELECT p.PackageNumber FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Employee e ON s.Manager = e.EmployeeID WHERE LOWER(p.Contents) LIKE '%Zapp%Brannigan%' AND s.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) = 'omicron persei 8');
SELECT COUNT(p.PackageNumber) FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Employee e ON s.Manager = e.EmployeeID JOIN Has_Clearance h ON e.EmployeeID = h.Employee AND s.Planet = h.Planet WHERE LOWER(e.Name) = 'zapp brannigan' AND s.Planet IN (SELECT PlanetID FROM Planet WHERE LOWER(Name) = 'omicron persei 8');
SELECT p.PackageNumber FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID JOIN Employee e ON s.Manager = e.EmployeeID WHERE LOWER(p.Contents) LIKE '%Omicron%Persei%' OR LOWER(e.Name) LIKE '%Zapp%Brannigan%' ORDER BY p.PackageNumber;
SELECT COUNT(*) AS total_packages FROM Package p JOIN Shipment s ON p.Shipment = s.ShipmentID WHERE LOWER(p.Contents) LIKE '%Omicron%Persei%' OR s.Manager IN (SELECT e.EmployeeID FROM Employee e WHERE LOWER(e.Name) = 'Zapp Brannigan');
SELECT p.PackageNumber, p.Weight FROM Package p WHERE p.Weight BETWEEN 10 AND 30 ORDER BY p.PackageNumber;
SELECT p.PackageNumber, p.Weight FROM Package p WHERE p.Weight BETWEEN 10 AND 30 ORDER BY p.PackageNumber;
SELECT e.Name FROM Employee e WHERE e.EmployeeID NOT IN (SELECT h.Employee FROM Has_Clearance h JOIN Planet p ON h.Planet = p.PlanetID WHERE LOWER(p.Name) ='mars')
SELECT e.Name FROM Employee e WHERE e.EmployeeID NOT IN (SELECT h.Employee FROM Has_Clearance h JOIN Planet p ON h.Planet = p.PlanetID WHERE LOWER(p.Name) ='mars') ORDER BY e.Name;
SELECT e.Name FROM Employee e JOIN Has_Clearance h ON e.EmployeeID = h.Employee WHERE LOWER(h.Planet) = 'omega iii';
SELECT e.Name FROM Employee e JOIN Has_Clearance h ON e.EmployeeID = h.Employee WHERE LOWER(h.Planet) = 'omega iii';
SELECT p.Name FROM Planet p JOIN (SELECT h.Planet FROM Has_Clearance h GROUP BY h.Planet HAVING COUNT(DISTINCT h.Employee) = 1) AS t ON p.PlanetID = t.Planet ORDER BY p.Name;
SELECT p.Name FROM Planet p JOIN (SELECT h.Clearance.Planet FROM Has_Clearance h GROUP BY h.Clearance.Planet HAVING COUNT(DISTINCT h.Clearance.Employee) = 1) AS c ON p.PlanetID = c.Planet;
SELECT e.Name FROM Employee e WHERE e.Salary BETWEEN 5000 AND 10000 ORDER BY e.Salary;
SELECT e.Name FROM Employee e WHERE e.Salary BETWEEN 5000 AND 10000 ORDER BY e.Salary;
SELECT e.Name FROM Employee e WHERE e.Salary > (SELECT AVG(Salary) FROM Employee) OR e.Salary > 5000 ORDER BY e.Salary DESC;
SELECT e.Name FROM Employee e WHERE e.Salary > (SELECT AVG(Salary) FROM Employee) OR e.Salary > 5000 ORDER BY e.Salary DESC;
SELECT COUNT(DISTINCT e.EmployeeID) FROM Employee e LEFT JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee AND hc.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) ='mars') WHERE hc.Employee IS NULL;
SELECT COUNT(DISTINCT e.EmployeeID) FROM Employee e LEFT JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee AND hc.Planet = (SELECT PlanetID FROM Planet WHERE LOWER(Name) ='mars') WHERE hc.Employee IS NULL;
SELECT COUNT(*) FROM game;
SELECT COUNT(*) FROM game;
SELECT g.title, g.developers, g.units_sold_millions FROM game g ORDER BY g.units_sold_millions DESC;
SELECT g.title, g.developers, g.units_sold_millions FROM game g ORDER BY g.units_sold_millions DESC;
SELECT AVG(g.Units_sold_Millions) AS Average_Units_Sold FROM game g WHERE g.Developers NOT ILIKE '%Nintendo%'
SELECT AVG(g.Units_sold_Millions) AS Average_Units_Sold FROM game g WHERE g.Developers NOT ILIKE '%Nintendo%'
SELECT p.platform_name, p.market_district FROM platform p ORDER BY p.platform_name NULLS LAST;
SELECT p.platform_name, p.market_district FROM platform p ORDER BY p.platform_name NULLS LAST;
SELECT p.Platform_name, p.Platform_ID FROM platform p WHERE p.Download_rank = 1;
SELECT p.Platform_name, p.Platform_ID FROM platform p WHERE p.Download_rank = 1 ORDER BY p.Platform_ID NULLS LAST;
SELECT MAX(p.rank_of_the_year) AS max_rank, MIN(p.rank_of_the_year) AS min_rank FROM player p;
SELECT MAX(p.rank_of_the_year) AS max_rank, MIN(p.rank_of_the_year) AS min_rank FROM player p
SELECT COUNT(*) FROM player p WHERE p.rank_of_the_year < 3;
SELECT COUNT(*) FROM player p WHERE p.rank_of_the_year <= 3;
SELECT p.player_name FROM player p ORDER BY p.player_name ASC;
SELECT p.player_name FROM player p ORDER BY p.player_name ASC;
SELECT p.player_name, p.college FROM player p ORDER BY p.rank_of_the_year DESC;
SELECT p.player_name, p.college FROM player p ORDER BY p.rank_of_the_year DESC;
SELECT p.Player_name, p.Rank_of_the_year FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE LOWER(g.Title) ='super mario world';
SELECT p.Player_name, p.Rank_of_the_year FROM player p JOIN game_player gp ON p.Player_ID = gp.Player_ID JOIN game g ON gp.Game_ID = g.Game_ID WHERE LOWER(g.Title) ='super mario world' ORDER BY p.Rank_of_the_year DESC NULLS LAST;
SELECT DISTINCT g.Developers FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE LOWER(p.College) = 'auburn' ORDER BY g.Developers NULLS LAST;
SELECT DISTINCT g.developers FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE LOWER(p.college) = 'auburn' ORDER BY g.developers NULLS LAST;
SELECT AVG(g.Units_sold_Millions) AS average_units_sold FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE LOWER(p.Position) = 'guard';
SELECT AVG(g.Units_sold_Millions) AS average_units_sold FROM game g JOIN game_player gp ON g.Game_ID = gp.Game_ID JOIN player p ON gp.Player_ID = p.Player_ID WHERE LOWER(p.Position) = 'guard';
SELECT g.title, p.platform_name FROM game g JOIN platform p ON g.platform_id = p.platform_id;
SELECT g.title, p.platform_name FROM game g JOIN platform p ON g.platform_id = p.platform_id;
SELECT g.title FROM game g JOIN platform p ON g.platform_id = p.platform_id WHERE LOWER(p.market_district) IN ('asia', 'usa') ORDER BY g.title NULLS LAST;
SELECT g.title FROM game g JOIN platform p ON g.platform_id = p.platform_id WHERE LOWER(p.market_district) IN ('asia', 'usa') ORDER BY g.title NULLS LAST;
SELECT g.Franchise, COUNT(g.Game_ID) AS Number_of_Games FROM Game g GROUP BY g.Franchise ORDER BY Number_of_Games DESC NULLS LAST;
SELECT g.Franchise, COUNT(g.Game_ID) AS number_of_games FROM game g GROUP BY g.Franchise ORDER BY number_of_games DESC NULLS LAST;
SELECT g.Franchise, COUNT(g.Game_ID) AS Game_Count FROM game g GROUP BY g.Franchise ORDER BY Game_Count DESC LIMIT 1;
SELECT g.Franchise, COUNT(g.Game_ID) AS number_of_games FROM game g GROUP BY g.Franchise ORDER BY number_of_games DESC LIMIT 1;
SELECT g.Franchise FROM game g GROUP BY g.Franchise HAVING COUNT(g.Game_ID) >= 2 ORDER BY g.Franchise NULLS LAST;
SELECT g.Franchise FROM game g GROUP BY g.Franchise HAVING COUNT(g.Game_ID) >= 2 ORDER BY g.Franchise NULLS LAST;
SELECT p.Player_name FROM player p WHERE NOT EXISTS (SELECT 1 FROM game_player gp WHERE gp.Player_ID = p.Player_ID)
SELECT p.Player_name FROM player p WHERE NOT EXISTS (SELECT 1 FROM game_player gp WHERE gp.Player_ID = p.Player_ID)
SELECT g.title FROM game g JOIN game_player gp ON g.game_id = gp.game_id WHERE gp.player_id IN (SELECT p.player_id FROM player p WHERE LOWER(p.college) = 'oklahoma') AND gp.player_id IN (SELECT p.player_id FROM player p WHERE LOWER(p.college) = 'auburn');
SELECT DISTINCT g.title FROM game g JOIN game_player gp ON g.game_id = gp.game_id JOIN player p ON gp.player_id = p.player_id WHERE LOWER(p.college) IN ('oklahoma', 'auburn') ORDER BY g.title NULLS LAST;
SELECT DISTINCT g.Franchise FROM game g ORDER BY g.Franchise NULLS LAST;
SELECT DISTINCT g.Franchise FROM game g ORDER BY g.Franchise NULLS LAST;
SELECT g.title FROM game g WHERE NOT EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE LOWER(p.position) = 'guard') ORDER BY g.title NULLS LAST;
SELECT g.title FROM game g WHERE NOT EXISTS (SELECT 1 FROM game_player gp JOIN player p ON gp.player_id = p.player_id WHERE LOWER(p.position) = 'guard') ORDER BY g.title NULLS LAST;
SELECT p.Name, p.Year_Profits_billion FROM press p ORDER BY p.Year_Profits_billion DESC;
SELECT p.Name FROM press p ORDER BY p.Year_Profits_billion DESC;
SELECT p.name FROM press p WHERE p.year_profits_billion > 15 OR p.month_profits_billion > 1 ORDER BY p.name NULLS LAST;
SELECT p.Name FROM press p WHERE p.Year_Profits_billion > 15 OR p.Month_Profits_billion > 1;
SELECT p.year_profits_billion AS average_profit, MAX(p.year_profits_billion) AS max_profit FROM press p GROUP BY p.year_profits_billion;
SELECT p.name AS press_name, AVG(p.year_profits_billion) AS avg_yearly_profit, MAX(p.year_profits_billion) AS max_yearly_profit FROM press p GROUP BY p.name ORDER BY p.name NULLS LAST;
SELECT p.Name FROM press p WHERE p.Month_Profits_billion = (SELECT MAX(p2.Month_Profits_billion) FROM press p2);
SELECT p.Name FROM press p WHERE p.Month_Profits_billion = (SELECT MAX(p2.Month_Profits_billion) FROM press p2);
SELECT p.Name FROM press p WHERE p.Month_Profits_billion = (SELECT MAX(p2.Month_Profits_billion) FROM press p2) OR p.Month_Profits_billion = (SELECT MIN(p3.Month_Profits_billion) FROM press p3);
SELECT p.Name, MAX(p.Month_Profits_billion) AS max_monthly_profit, MIN(p.Month_Profits_billion) AS min_monthly_profit FROM press p GROUP BY p.Name ORDER BY max_monthly_profit DESC NULLS LAST, min_monthly_profit ASC NULLS FIRST LIMIT 1;
SELECT COUNT(*) FROM author WHERE Age < 30;
SELECT COUNT(*) FROM author WHERE Age < 30;
SELECT a.gender, AVG(a.age) AS average_age FROM author a GROUP BY a.gender ORDER BY a.gender NULLS LAST;
SELECT a.gender, AVG(a.age) AS average_age FROM author a GROUP BY a.gender
SELECT a.gender, COUNT(*) AS count_authors FROM author a WHERE a.age > 30 GROUP BY a.gender ORDER BY a.gender NULLS LAST;
SELECT a.gender, COUNT(a.author_id) AS number_of_authors FROM author a WHERE a.age > 30 GROUP BY a.gender ORDER BY number_of_authors DESC NULLS LAST;
SELECT b.title, TO_DATE(b.release_date, 'YYYY-MM-DD') AS release_date FROM book b ORDER BY release_date DESC;
SELECT b.title FROM book b ORDER BY TO_DATE(b.release_date, 'YYYY-MM-DD') DESC;
SELECT bs.Book_Series, COUNT(*) AS book_count FROM book bs GROUP BY bs.Book_Series ORDER BY book_count DESC NULLS LAST;
SELECT bs.Book_Series, COUNT(*) AS Book_Count FROM BOOK bs GROUP BY bs.Book_Series ORDER BY Book_Count DESC NULLS LAST;
SELECT b.title, b.release_date FROM book b ORDER BY CAST(b.sale_amount AS INTEGER) DESC NULLS LAST LIMIT 5;
SELECT b.title, b.release_date FROM book b ORDER BY CAST(b.sale_amount AS INTEGER) DESC NULLS LAST LIMIT 5;
SELECT DISTINCT bs.Book_Series FROM Book bs WHERE (bs.Sale_Amount > '1000' AND bs.Sale_Amount < '500')
SELECT DISTINCT bs.Book_Series FROM Book bs WHERE (bs.Sale_Amount > '1000' AND bs.Sale_Amount < '500') ORDER BY bs.Book_Series NULLS LAST;
SELECT DISTINCT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID WHERE b.Book_Series IN ('MM', 'LT') GROUP BY a.Name HAVING COUNT(DISTINCT b.Book_Series) = 2;
SELECT DISTINCT a.Name FROM book b JOIN author a ON b.Author_ID = a.Author_ID WHERE b.Book_Series IN ('MM', 'LT') GROUP BY a.Name HAVING COUNT(DISTINCT b.Book_Series) = 2;
SELECT a.Name, a.Age FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b)
SELECT DISTINCT a.Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b)
SELECT DISTINCT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Name HAVING COUNT(b.Book_ID) > 1 ORDER BY a.Name NULLS LAST;
SELECT DISTINCT a.Name FROM author a JOIN book b ON a.Author_ID = b.Author_ID GROUP BY a.Name HAVING COUNT(b.Book_ID) > 1 ORDER BY a.Name NULLS LAST;
SELECT b.title, a.name AS author_name, p.name AS press_name FROM book b JOIN author a ON b.author_id = a.author_id JOIN press p ON b.press_id = p.press_id ORDER BY b.sale_amount DESC NULLS LAST LIMIT 3;
SELECT b.title, a.name AS author_name, p.name AS press_name FROM book b JOIN author a ON b.author_id = a.author_id JOIN press p ON b.press_id = p.press_id ORDER BY b.sale_amount DESC NULLS LAST LIMIT 3;
SELECT p.Name AS Press_Name, SUM(CAST(b.Sale_Amount AS integer)) AS Total_Sales FROM Book b JOIN Press p ON b.Press_ID = p.Press_ID GROUP BY p.Name
SELECT p.Name AS Press_Name, SUM(CAST(b.Sale_Amount AS integer)) AS Total_Sales FROM Book b JOIN Press p ON b.Press_ID = p.Press_ID GROUP BY p.Name ORDER BY Total_Sales DESC NULLS LAST;
SELECT p.Name AS Press_Name, COUNT(*) AS Number_of_Books FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE CAST(b.Sale_Amount AS INT) > 1000 GROUP BY p.Name ORDER BY Number_of_Books DESC NULLS LAST;
SELECT p.Name AS Press_Name, COUNT(b.Book_ID) AS Number_of_Books FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE CAST(b.Sale_Amount AS INT) > 1000 GROUP BY p.Name ORDER BY Number_of_Books DESC NULLS LAST;
SELECT b.author_id, a.name FROM book b JOIN author a ON b.author_id = a.author_id ORDER BY b.sale_amount DESC LIMIT 1;
SELECT b.author_id, a.name FROM book b JOIN author a ON b.author_id = a.author_id ORDER BY b.sale_amount DESC LIMIT 1;
SELECT a.Name, a.Gender FROM author a JOIN (SELECT b.Author_ID, COUNT(b.Book_ID) AS book_count FROM book b GROUP BY b.Author_ID ORDER BY book_count DESC LIMIT 1) AS bc ON a.Author_ID = bc.Author_ID;
SELECT a.Name, a.Gender FROM author a JOIN (SELECT b.Author_ID, COUNT(b.Book_ID) AS book_count FROM book b GROUP BY b.Author_ID ORDER BY book_count DESC LIMIT 1) AS bc ON a.Author_ID = bc.Author_ID;
SELECT DISTINCT a.Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE LOWER(p.Name) = 'accor')
SELECT DISTINCT a.Name FROM author a WHERE a.Author_ID NOT IN (SELECT b.Author_ID FROM book b JOIN press p ON b.Press_ID = p.Press_ID WHERE LOWER(p.Name) = 'accor')
SELECT p.Name, SUM(p.Year_Profits_billion) AS total_yearly_profit FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name HAVING COUNT(b.Book_ID) > 2 ORDER BY total_yearly_profit DESC NULLS LAST;
SELECT p.Name, SUM(p.Year_Profits_billion) AS total_yearly_profit FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Name HAVING COUNT(b.Book_ID) > 2 ORDER BY total_yearly_profit DESC NULLS LAST LIMIT 1;
SELECT COUNT(DISTINCT author_name) FROM Authors;
SELECT DISTINCT d.author_name FROM Documents d ORDER BY d.author_name;
SELECT author_name, other_details FROM Authors ORDER BY author_name;
SELECT d.other_details FROM Authors a JOIN Documents d ON a.author_name = d.author_name WHERE a.author_name = 'Addison Denesik';
SELECT COUNT(*) FROM Documents;
SELECT d.author_name FROM Documents d WHERE d.document_id = 4;
SELECT d.author_name FROM Documents d WHERE LOWER(d.document_name) = 'travel to brazil';
SELECT COUNT(d.document_id) FROM Documents d WHERE LOWER(d.author_name) = 'era kerluke';
SELECT d.document_name, d.document_description FROM Documents d ORDER BY d.document_name;
SELECT d.document_id, d.author_name FROM Documents d WHERE LOWER(d.author_name) = 'bianka cummings' ORDER BY d.document_id;
SELECT d.author_name, d.other_details FROM Documents d WHERE d.document_name = 'Travel to China';
SELECT d.author_name, COUNT(d.document_id) AS document_count FROM Documents d GROUP BY d.author_name ORDER BY d.author_name;
SELECT d.author_name FROM Documents d GROUP BY d.author_name ORDER BY COUNT(d.document_id) DESC LIMIT 1;
SELECT d.author_name FROM Documents d GROUP BY d.author_name HAVING COUNT(d.document_id) >= 2 ORDER BY d.author_name;
SELECT COUNT(*) FROM Business_Processes;
SELECT b.next_process_id, b.process_name, b.process_description FROM Business_Processes b WHERE b.process_id = 9;
SELECT b.process_name FROM Business_Processes b WHERE b.process_id = (SELECT p.next_process_id FROM Business_Processes p WHERE p.process_id = 9);
SELECT COUNT(process_outcome_code) FROM Process_Outcomes;
SELECT po.process_outcome_code, po.process_outcome_description FROM Process_Outcomes po ORDER BY po.process_outcome_code;
SELECT po.process_outcome_description FROM Process_Outcomes po WHERE LOWER(po.process_outcome_code) = 'working';
SELECT COUNT(*) FROM Process_Status;
SELECT ps.process_status_code, ps.process_status_description FROM Process_Status ps ORDER BY ps.process_status_code;
SELECT ps.process_status_description FROM Process_Status ps WHERE LOWER(ps.process_status_code) = 'ct';
SELECT COUNT(*) FROM Staff;
SELECT s.staff_id, s.staff_details FROM Staff s ORDER BY s.staff_id;
SELECT s.staff_details FROM Staff s WHERE s.staff_id = 100;
SELECT COUNT(DISTINCT s.staff_role_code) FROM Staff_in_Processes s;
SELECT r.staff_role_code, r.staff_role_description FROM Ref_Staff_Roles r ORDER BY r.staff_role_code;
SELECT rr.staff_role_description FROM Ref_Staff_Roles rr WHERE rr.staff_role_code = 'HR';
SELECT COUNT(DISTINCT dp.document_id) FROM Documents_Processes dp;
SELECT DISTINCT dp.process_id FROM Documents_Processes dp;
SELECT d.document_id FROM Documents d WHERE d.document_id NOT IN (SELECT dp.document_id FROM Documents_Processes dp);
SELECT b.process_id FROM Business_Processes b WHERE b.process_id NOT IN (SELECT d.process_id FROM Documents_Processes d);
SELECT d.process_outcome_code, p.process_status_code FROM Documents d JOIN Documents_Processes dp ON d.document_id = dp.document_id JOIN Process_Outcomes o ON dp.process_outcome_code = o.process_outcome_code JOIN Process_Status p ON dp.process_status_code = p.process_status_code WHERE d.document_id = 0;
SELECT bp.process_name FROM Documents d JOIN Documents_Processes dp ON d.document_id = dp.document_id JOIN Business_Processes bp ON dp.process_id = bp.process_id WHERE LOWER(d.document_name) = 'travel to brazil';
SELECT b.process_id, COUNT(d.document_id) AS document_count FROM Business_Processes b JOIN Documents_Processes dp ON b.process_id = dp.process_id JOIN Documents d ON dp.document_id = d.document_id GROUP BY b.process_id ORDER BY b.process_id;
SELECT COUNT(DISTINCT s.staff_id) FROM Staff_in_Processes sip JOIN Staff s ON sip.staff_id = s.staff_id WHERE sip.document_id = 0 AND sip.process_id = 9;
SELECT s.staff_id, COUNT(sp.document_id) AS num_processes FROM Staff_in_Processes sp JOIN Staff s ON sp.staff_id = s.staff_id GROUP BY s.staff_id ORDER BY num_processes DESC;
SELECT s.staff_role_code, COUNT(s.staff_role_code) AS num_processes FROM Staff_in_Processes s GROUP BY s.staff_role_code ORDER BY num_processes DESC;
SELECT COUNT(DISTINCT s.staff_role_code) FROM Staff_in_Processes s WHERE s.staff_id = 3;
SELECT COUNT(DISTINCT a.agency_id) FROM Agencies a;
SELECT COUNT(*) FROM Agencies;
SELECT a.agency_id, a.agency_details FROM Agencies a ORDER BY a.agency_id;
SELECT a.agency_id, a.agency_details FROM Agencies a ORDER BY a.agency_id;
SELECT COUNT(*) FROM Clients;
SELECT COUNT(DISTINCT c.client_id) FROM Clients c;
SELECT c.client_id, c.client_details FROM Clients c ORDER BY c.client_id;
SELECT c.client_id, c.client_details FROM Clients c ORDER BY c.client_id;
SELECT c.agency_id, COUNT(c.client_id) AS num_clients FROM Clients c GROUP BY c.agency_id ORDER BY num_clients DESC;
SELECT c.agency_id, COUNT(c.client_id) AS number_of_clients FROM Clients c GROUP BY c.agency_id ORDER BY number_of_clients DESC;
SELECT c.agency_id, COUNT(c.client_id) AS client_count FROM Clients c GROUP BY c.agency_id ORDER BY client_count DESC LIMIT 1;
SELECT c.agency_id, COUNT(c.client_id) AS client_count FROM Clients c GROUP BY c.agency_id ORDER BY client_count DESC LIMIT 1;
SELECT c.agency_id, COUNT(c.client_id) AS client_count FROM Clients c GROUP BY c.agency_id HAVING COUNT(c.client_id) >= 2 ORDER BY c.agency_id;
SELECT c.agency_id, COUNT(c.client_id) AS client_count FROM Clients c GROUP BY c.agency_id HAVING COUNT(c.client_id) >= 2 ORDER BY c.agency_id;
SELECT c.client_details FROM Clients c WHERE LOWER(c.client_details) ='mac';
SELECT c.client_details FROM Clients c WHERE LOWER(c.client_details) LIKE '%mac%'
SELECT c.client_details AS client, s.staff_details AS agent FROM Clients c JOIN Staff s ON c.agency_id = s.agency_id;
SELECT c.client_details, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id;
SELECT c.sic_code, COUNT(c.client_id) AS client_count FROM Clients c GROUP BY c.sic_code ORDER BY client_count DESC NULLS LAST;
SELECT c.sic_code, COUNT(c.client_id) AS client_count FROM Clients c GROUP BY c.sic_code ORDER BY client_count DESC;
SELECT c.client_id, c.client_details FROM Clients c WHERE LOWER(c.sic_code) = 'bad';
SELECT c.client_details FROM Clients c WHERE LOWER(c.sic_code) = 'bad';
SELECT DISTINCT c.agency_id, a.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id;
SELECT DISTINCT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id ORDER BY a.agency_id;
SELECT DISTINCT a.agency_id FROM Agencies a WHERE a.agency_id NOT IN (SELECT c.agency_id FROM Clients c);
SELECT a.agency_id FROM Agencies a WHERE a.agency_id NOT IN (SELECT c.agency_id FROM Clients c);
SELECT COUNT(*) FROM Invoices;
SELECT COUNT(*) FROM Invoices;
SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i ORDER BY i.invoice_id;
SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i;
SELECT c.client_id, COUNT(i.invoice_id) AS invoice_count FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id ORDER BY invoice_count DESC NULLS LAST;
SELECT i.client_id, COUNT(i.invoice_id) AS invoice_count FROM Invoices i GROUP BY i.client_id ORDER BY invoice_count DESC;
SELECT i.client_id, COUNT(i.invoice_id) AS invoice_count FROM Invoices i GROUP BY i.client_id ORDER BY invoice_count DESC LIMIT 1;
SELECT i.client_id, c.client_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id GROUP BY i.client_id, c.client_details ORDER BY COUNT(i.invoice_id) DESC LIMIT 1;
SELECT i.client_id FROM Invoices i GROUP BY i.client_id HAVING COUNT(i.invoice_id) >= 2;
SELECT i.client_id FROM Invoices i GROUP BY i.client_id HAVING COUNT(i.invoice_id) >= 2;
SELECT i.invoice_status, COUNT(i.invoice_id) AS total_invoices FROM Invoices i GROUP BY i.invoice_status ORDER BY total_invoices DESC NULLS LAST;
SELECT i.invoice_status, COUNT(i.invoice_id) AS number_of_invoices FROM Invoices i GROUP BY i.invoice_status ORDER BY number_of_invoices DESC;
SELECT i.invoice_status, COUNT(i.invoice_id) AS total_invoices FROM Invoices i GROUP BY i.invoice_status ORDER BY total_invoices DESC LIMIT 1;
SELECT i.invoice_status FROM Invoices i GROUP BY i.invoice_status ORDER BY COUNT(i.invoice_id) DESC LIMIT 1;
SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_id, a.agency_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Agencies a ON c.agency_id = a.agency_id;
SELECT i.invoice_status, i.invoice_details, c.client_id, c.client_details, a.agency_id, a.agency_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Agencies a ON c.agency_id = a.agency_id;
SELECT m.meeting_type, m.other_details FROM Meetings m ORDER BY m.meeting_type;
SELECT m.meeting_type, m.other_details FROM Meetings m ORDER BY m.meeting_type;
SELECT m.meeting_outcome, m.purpose_of_meeting FROM Meetings m ORDER BY m.meeting_id;
SELECT DISTINCT m.meeting_outcome, m.purpose_of_meeting FROM Meetings m ORDER BY m.meeting_outcome, m.purpose_of_meeting;
SELECT p.payment_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE LOWER(i.invoice_status) = 'working' ORDER BY p.payment_id;
SELECT p.payment_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE LOWER(i.invoice_status) = 'working' ORDER BY p.payment_id;
SELECT i.invoice_id, i.invoice_status FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id WHERE p.invoice_id IS NULL ORDER BY i.invoice_id;
SELECT i.invoice_id, i.invoice_status FROM Invoices i WHERE i.invoice_id NOT IN (SELECT p.invoice_id FROM Payments p);
SELECT COUNT(p.payment_id) FROM Payments p;
SELECT COUNT(p.payment_id) FROM Payments p;
SELECT p.payment_id, i.invoice_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id;
SELECT p.payment_id, p.invoice_id, p.payment_details FROM Payments p;
SELECT DISTINCT p.invoice_id, i.invoice_status FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id ORDER BY p.invoice_id;
SELECT DISTINCT p.invoice_id, i.invoice_status FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id;
SELECT p.invoice_id, COUNT(p.payment_id) AS payment_count FROM Payments p GROUP BY p.invoice_id ORDER BY p.invoice_id;
SELECT p.invoice_id, COUNT(p.payment_id) AS number_of_payments FROM Payments p GROUP BY p.invoice_id ORDER BY p.invoice_id;
SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id, i.invoice_status, i.invoice_details ORDER BY COUNT(p.payment_id) DESC LIMIT 1;
SELECT i.invoice_id, i.invoice_status, i.invoice_details FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY i.invoice_id, i.invoice_status, i.invoice_details ORDER BY COUNT(p.payment_id) DESC LIMIT 5;
SELECT COUNT(*) FROM Staff;
SELECT COUNT(*) FROM Staff;
SELECT s.agency_id, COUNT(s.staff_id) AS total_staff FROM Staff s GROUP BY s.agency_id ORDER BY total_staff DESC;
SELECT s.agency_id, COUNT(s.staff_id) AS num_staff FROM Staff s GROUP BY s.agency_id ORDER BY num_staff DESC;
SELECT s.agency_id, COUNT(s.staff_id) AS staff_count FROM Staff s GROUP BY s.agency_id ORDER BY staff_count DESC LIMIT 1;
SELECT s.agency_id, COUNT(s.staff_id) AS staff_count FROM Staff s GROUP BY s.agency_id ORDER BY staff_count DESC LIMIT 1;
SELECT m.meeting_outcome, COUNT(m.meeting_id) AS total_meetings FROM Meetings m GROUP BY m.meeting_outcome ORDER BY total_meetings DESC NULLS LAST;
SELECT m.meeting_outcome, COUNT(m.meeting_id) AS number_of_meetings FROM Meetings m GROUP BY m.meeting_outcome ORDER BY number_of_meetings DESC NULLS LAST;
SELECT m.client_id, COUNT(m.meeting_id) AS total_meetings FROM Meetings m GROUP BY m.client_id ORDER BY total_meetings DESC NULLS LAST;
SELECT m.client_id, COUNT(m.meeting_id) AS number_of_meetings FROM Meetings m GROUP BY m.client_id ORDER BY m.client_id;
SELECT m.meeting_type, COUNT(m.meeting_id) AS total_meetings FROM Meetings m GROUP BY m.client_id, m.meeting_type ORDER BY m.client_id, m.meeting_type;
SELECT m.meeting_type, COUNT(m.meeting_id) AS number_of_meetings FROM Meetings m GROUP BY m.meeting_type ORDER BY number_of_meetings DESC NULLS LAST;
SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id;
SELECT m.meeting_id, m.meeting_outcome, m.meeting_type, c.client_details FROM Meetings AS m JOIN Clients AS c ON m.client_id = c.client_id;
SELECT m.meeting_id, COUNT(s.staff_id) AS num_staff FROM Meetings m JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id GROUP BY m.meeting_id ORDER BY num_staff DESC NULLS LAST;
SELECT m.meeting_id, COUNT(s.staff_id) AS staff_count FROM Meetings m JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id GROUP BY m.meeting_id ORDER BY m.meeting_id;
SELECT s.staff_id, COUNT(sm.meeting_id) AS num_meetings FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id GROUP BY s.staff_id HAVING COUNT(sm.meeting_id) > 0 ORDER BY num_meetings ASC LIMIT 1;
SELECT s.staff_id FROM Staff s JOIN (SELECT sm.staff_id, COUNT(sm.meeting_id) AS num_meetings FROM Staff_in_Meetings sm GROUP BY sm.staff_id HAVING COUNT(sm.meeting_id) > 0) m ON s.staff_id = m.staff_id ORDER BY m.num_meetings ASC LIMIT 1;
SELECT COUNT(DISTINCT sm.staff_id) FROM Staff_in_Meetings sm;
SELECT COUNT(DISTINCT sm.staff_id) FROM Staff_in_Meetings sm;
SELECT COUNT(DISTINCT s.staff_id) FROM Staff s LEFT JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE sm.staff_id IS NULL;
SELECT COUNT(DISTINCT s.staff_id) FROM Staff s LEFT JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE sm.staff_id IS NULL;
SELECT c.client_id, c.client_details FROM Clients c WHERE c.client_id IN (SELECT m.client_id FROM Meetings m UNION SELECT i.client_id FROM Invoices i);
SELECT c.client_id, c.client_details FROM Clients c WHERE c.client_id IN (SELECT m.client_id FROM Meetings m UNION SELECT i.client_id FROM Invoices i);
SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE s.staff_details ilike '%s%' GROUP BY s.staff_id, s.staff_details HAVING COUNT(sm.meeting_id) >= 1;
SELECT s.staff_id, s.staff_details FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id WHERE LOWER(s.staff_details) LIKE '%s%' GROUP BY s.staff_id, s.staff_details HAVING COUNT(sm.meeting_id) >= 1 ORDER BY s.staff_id;
SELECT c.client_id, c.sic_code, c.agency_id FROM Clients c JOIN Meetings m ON c.client_id = m.client_id WHERE (SELECT COUNT(m2.meeting_id) FROM Meetings m2 WHERE m2.client_id = c.client_id) >= 1 AND EXISTS (SELECT i.invoice_id FROM Invoices i WHERE i.client_id = c.client_id);
SELECT c.client_id, c.sic_code, c.agency_id FROM Clients c JOIN Meetings m ON c.client_id = m.client_id WHERE (SELECT COUNT(m2.meeting_id) FROM Meetings m2 WHERE m2.client_id = c.client_id) >= 1 AND EXISTS (SELECT i.invoice_id FROM Invoices i WHERE i.client_id = c.client_id);
SELECT m.start_date_time AS meeting_start, m.end_date_time AS meeting_end, c.client_details AS client_info, s.staff_details AS staff_info FROM Meetings m JOIN Clients c ON m.client_id = c.client_id JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id;
SELECT m.meeting_id, c.client_details AS client_name, s.staff_details AS staff_name, m.start_date_time, m.end_date_time FROM Meetings m JOIN Clients c ON m.client_id = c.client_id JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id;
