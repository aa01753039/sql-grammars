[
  {
    "id": 0,
    "db_id": "soccer_3",
    "question": "How many clubs are there?",
    "answer": "\n When we had 200 members, and 50% of them went to one place, that means that the other 50% had to go to 4 different clubs. We do not have any data on the number of members who could only attend three clubs.\n\nComment: @favoretti I think it should be (200 - (100 - x)) / 5 = (x + 100) / 5, which"
  },
  {
    "id": 1,
    "db_id": "soccer_3",
    "question": "Count the number of clubs.",
    "answer": " 2500 members, 1500 active players, 1600 members total.\n\u201cIt\u2019s a big club, but we\u2019re not going to lose any more members to other clubs,\u201d he said. \u201cWe will get a big crowd for the games.\u201d\nThe ACT has a big event with its annual tournament and a lot of activities, but there\u2019s also an emphasis on community involvement and the game is just one part of that"
  },
  {
    "id": 2,
    "db_id": "soccer_3",
    "question": "List the name of clubs in ascending alphabetical order.",
    "answer": " \n  list_clubs = Club.all.order(name: :asc)\n  @clubs = list_clubs.map do |club|\n    { name: club.name }\n  end\n  render json: { data: @clubs }, status: 200\nend"
  },
  {
    "id": 3,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered alphabetically?",
    "answer": "\n You may choose to display the name of the club in a particular language by specifying an ISO-639-1 code. The default is English.\n\n### Example\n`GET /api/v2/clubs/?language=fr&order=clubName`"
  },
  {
    "id": 4,
    "db_id": "soccer_3",
    "question": "What are the managers and captains of clubs?",
    "answer": "\n When there's a problem, you don't go to the player. Instead, you go to the manager or captain. You don't want to be a part of that group. It is not nice to be in the wrong place. We know what we want. We don't need to explain anything to anyone else. The way we are, we are able to make things happen and we can be very productive.\nI do think we have a lot of responsibility on"
  },
  {
    "id": 5,
    "db_id": "soccer_3",
    "question": "Return the managers and captains of all clubs.",
    "answer": " 72 teams will be represented in the tournament.\nThe World Cup is organized by FIFA (F\u00e9d\u00e9ration Internationale de Football Association), which is an international football association that was founded on December 17, 1904. The organization is made up of a number of national associations from around the world that are affiliated with the F\u00e9d\u00e9ration Internationale de Football.\nThe World Cup was first held in 1930 and since then it has been held every four years"
  },
  {
    "id": 6,
    "db_id": "soccer_3",
    "question": "List the name of clubs whose manufacturer is not \"Nike\"",
    "answer": " and which are also not made in China. \n\n SELECT c.name FROM club c WHERE c.manufacturer != 'Nike' AND c.country_code_of_manufacture != 'CN';"
  },
  {
    "id": 7,
    "db_id": "soccer_3",
    "question": "What are the names of clubs who do not have the manufacturer Nike?",
    "answer": "\n CoolBricks.com is a platform to help you connect with people that like to stay active, enjoy sports and fitness and are looking for clubs that don't have the Nike logo on them. It's also a great way to discover new clubs outside of your area or to find clubs in the Nike league."
  },
  {
    "id": 8,
    "db_id": "soccer_3",
    "question": "What are the names of players in ascending order of wins count?",
    "answer": "\n  List<string> GetPlayersWithHighestWinsCount() const;\n // Returns list of players in descending order of wins count.\n  List<string> GetPlayersInDescendingOrderOfWinsCount() const; // What are the names of players in ascending order of games played?\n  List<string> GetPlayersInAscendingOrderOfGamesPlayed() const; // Returns list of players in descending order of games"
  },
  {
    "id": 9,
    "db_id": "soccer_3",
    "question": "Return the names of players in order of count of wins, ascending.",
    "answer": "  */\n\ndef player_wins(games):\n    players = {player: games[player].count for player in games}\n    return sorted(players, key=players.get)\n\n\ndef main():\n    \"\"\" Prompts the user to enter a number of games. Then displays the name and win count of the players in alphabetical order. \"\"\"\n    num_games = int(input('Number of games: '))\n   "
  },
  {
    "id": 10,
    "db_id": "soccer_3",
    "question": "What is the name of the player with the highest earnings?",
    "answer": "\n  #=> \"J.R. Smith\"\n\\end{code}\n\nI have no idea how to do this. I've tried a few different things, but can't figure out a solution. Any help would be greatly appreciated. Thanks!\n\nComment: Welcome to Stack Overflow! Can you please show us some code that you have already tried and explain why it did not work? Also, your example is not very helpful as there are multiple players with the highest"
  },
  {
    "id": 11,
    "db_id": "soccer_3",
    "question": "Return the name of the player who earns the most money.",
    "answer": " \n */\n public String getMostValuablePlayer(List<String[]> playerData) {\n   return \" \";\n }\n}"
  },
  {
    "id": 12,
    "db_id": "soccer_3",
    "question": "What are the distinct countries of players with earnings higher than 1200000?",
    "answer": "\n (This is the highest amount that can be earned in a month)\n Aaron Ramsey, Rory McIlroy, Danny Willett and Henrik Stenson all have high earnings and are thus not included.\nSELECT p.country_code, c.name FROM players p JOIN countries c ON p.country_code = c.code WHERE p.earnings > 120000;"
  },
  {
    "id": 13,
    "db_id": "soccer_3",
    "question": "From which countries are players who make more than 1200000 from?",
    "answer": "\n Is this correct?\n I am sorry for the long post but I don't know any other way to show you the problem.\n\nComment: @user3576447 yes, this is correct. For every country, the amount of players can be different. But if we look at it as a whole, most of the countries have less than 120000 players (I believe it's around 110000 in total"
  },
  {
    "id": 14,
    "db_id": "soccer_3",
    "question": "What is the country of the player with the highest earnings among players that have more than 2 win counts?",
    "answer": "\n # Returns: a string like \"United States\" or an empty string if no player meets this condition.\ndef country_with_highest_earnings(players):\n    max_wins = 0\n    country = \"\"\n    for player in players:\n        if player['win_count'] > max_wins:\n            country = player['country']\n            max_wins = player['win_count']\n    return country\n"
  },
  {
    "id": 15,
    "db_id": "soccer_3",
    "question": "Of players who have more than 2 wins, what is the country of the player who makes the most?",
    "answer": "\n CCCP: Russia.\nAverage win percentage for teams with at least one win in the first 3 games: .675 (US) and .611 (Russia)."
  },
  {
    "id": 16,
    "db_id": "soccer_3",
    "question": "Show names of players and names of clubs they are in.",
    "answer": " 2) a list of all the teams, including their name and the number of members.\n\nThe code I have so far is:\n\n\\begin{code}\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner (System.in);\n    String s = \"\";\n    List <Team> teamList = new ArrayList <>();\n    Map <String, Team> playerMap = new HashMap <> ();\n    Map <String,"
  },
  {
    "id": 17,
    "db_id": "soccer_3",
    "question": "What are the names of players and the corresponding clubs that they are in?",
    "answer": "\n The clubs for each player can be found on Wikipedia.\n This is not a full list of all the players and their clubs, but rather just a selection of them.\n\n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = ="
  },
  {
    "id": 18,
    "db_id": "soccer_3",
    "question": "Show names of clubs that have players with more than 2 win counts.",
    "answer": " A club that is shown in the table has at least one player with a win count above 2.\n\nAnswer: You can do this by adding an additional column to your `clubs` table which stores whether a club has players with a win count of 2 or higher.\n\n\\begin{code}\n SELECT c.club_name, COUNT(DISTINCT p.id) AS player_count, c.has_player_with_win_count_of"
  },
  {
    "id": 19,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that have players who have won more than twice?",
    "answer": "\n A) Only list the name of the club, not the name of the player.\n B) Use a SELECT DISTINCT statement."
  },
  {
    "id": 20,
    "db_id": "soccer_3",
    "question": "Show names of players from the club with manager \"Sam Allardyce\".",
    "answer": "\n 13. A list of players who played for the club under managers who have left the team, but whose names are still associated with the club.\n 14. The number of titles won by the club.\n 15. An image of a badge representing the club.\n */\nstruct Club {\n    \n    var name: String = \"\"\n    var address: String? = nil\n    var phoneNumber: Int = 0\n    var"
  },
  {
    "id": 21,
    "db_id": "soccer_3",
    "question": "What are the names of players from the club managed by Sam Allardyce?",
    "answer": "\n My team's manager is a former Arsenal player and I have no information about other players who played for the club."
  },
  {
    "id": 22,
    "db_id": "soccer_3",
    "question": "Show names of clubs in descending order of average earnings of players belonging.",
    "answer": " 2018-2019 season\nThe 2017-2018 NHL season was played on 30 teams, and the average salaries of players are not easily accessible. However, the average salaries for the 2018-2019 NHL season can be derived from the average salaries of the previous season, taking into account that a player with high average salary in the current season is likely to have higher"
  },
  {
    "id": 23,
    "db_id": "soccer_3",
    "question": "What are the names of clubs, ordered descending by the average earnings of players within each?",
    "answer": "\n A) For a given club, find the top 5 players with the highest average earning. B) Which clubs have the most players with the highest average earnings? C) Average earning for the entire league.\n\\end{blockquote}\n\nAnswer: A) SELECT c.name AS name_of_club, p.name AS name_of_player, AVG(e.amount) OVER (PARTITION BY e.team_id ORDER BY"
  },
  {
    "id": 24,
    "db_id": "soccer_3",
    "question": "Show different manufacturers and the number of clubs they are associated with.",
    "answer": " \n* [x] A list of all teams, along with their name, member count and a description of their website (if provided).\n\n* [x] A list of members, including member information like name, email, and a description of each team they have joined.\n* [x] An invitation system to add or remove members from teams.\n"
  },
  {
    "id": 25,
    "db_id": "soccer_3",
    "question": "How many clubs use each manufacturer?",
    "answer": "\n Homepage, or a list of all manufacturers? Or do I have to create one for every manufacturer?\n You're right, this is a lot of work. In that case it would make sense to just display the manufacturer's name on your homepage and a link to a list of their products (and to add the manufacturer's info to the product description)\n\nAnswer: As an alternative you could have a one-to-many relationship between"
  },
  {
    "id": 26,
    "db_id": "soccer_3",
    "question": "Please show the most common manufacturer of clubs.",
    "answer": " 18/20/2023.\nHonestly, I would love to see the following manufacturers:\n- Mizuno (for their clubs and shoes)\n- Puma (for their clubs and shoes)\nI know this is a bit biased towards them but I have tried those clubs and they are great! :)"
  },
  {
    "id": 27,
    "db_id": "soccer_3",
    "question": "Which manufacturer is most common among clubs?",
    "answer": "\n How to know if a product is a member of the club\u2019s membership program or not?\n Category: Customer service Tags: Customer service, Membership, Products, Service management, Services"
  },
  {
    "id": 28,
    "db_id": "soccer_3",
    "question": "List the manufacturers that are associated with more than one club.",
    "answer": " \n   SELECT m.name FROM Manufacturer m JOIN Club c ON m.id = c.manufacturer_id GROUP BY m.name HAVING COUNT(c.id) > 1 ORDER BY m.name NULLS LAST;"
  },
  {
    "id": 29,
    "db_id": "soccer_3",
    "question": "Which manufacturers work for more than 1 club?",
    "answer": "\n It\u2019s a common misconception that players can only work for one team in the NHL. In fact, there are several clubs in the league that have players on their roster from multiple teams. That is why it is important to check your research before you pick a player to write about. Here is how you can find out whether a player has played for more than one team.\n How do I know if a player has played for multiple teams?\n There are several ways to"
  },
  {
    "id": 30,
    "db_id": "soccer_3",
    "question": "List the country that have more than one player.",
    "answer": "  If we assume there are no ties, the highest score will be selected.  If we do have ties, the first score in the list is selected.\n\n    :rtype: string\n    \"\"\"\n    team_scores = get_team_scores(players)\n    highest_score = max(team_scores.values())\n    team = team_scores[highest_score]\n    return team\n\ndef get_"
  },
  {
    "id": 31,
    "db_id": "soccer_3",
    "question": "Which countries have produced more than one player?",
    "answer": "\n Homework, huh?\n I don\u2019t know about you guys but it seems to me that the United States is the only country in the world that has produced a single player of note. Surely no other country can boast of such a unique accomplishment as that.\nSurely no other country can boost of such a unique accomplishment as that.\nWell, maybe no other country except for Brazil but I don\u2019t know how to pronounce the name of"
  },
  {
    "id": 32,
    "db_id": "soccer_3",
    "question": "List the name of clubs that do not have players.",
    "answer": "  */\n  for (i = 0; i < p->num_of_clubs; i++) {\n    if (p->club[i].num_of_players == 0) {\n      printf(\"%s\", p->club[i].name);\n    }\n  }\n}\n```\n"
  },
  {
    "id": 33,
    "db_id": "soccer_3",
    "question": "What are the names of clubs that do not have any players?",
    "answer": "\n \n<ul>\n    <li *ngFor=\"let club of unassignedClubs\">{{club.name}}</li>\n  </ul>\n```"
  },
  {
    "id": 34,
    "db_id": "soccer_3",
    "question": "Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.",
    "answer": " A query can do this:\n\n SELECT (CASE WHEN p.earnings > 1400000 THEN 'Over' ELSE 'Under' END) AS bracket, COUNT(*) AS number_of_players FROM players p GROUP BY bracket ORDER BY bracket;"
  },
  {
    "id": 35,
    "db_id": "soccer_3",
    "question": "Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?",
    "answer": "\n Tags: NBA, NBA Draft, NBA General Draft 2013, NBA Combine, NBA Prospects, NBA Prospect Rankings, NBA Prospect Roster, NBA Draft Picks, NBA College Draft, NBA Top Prospects, NBA Highlighted Players, NBA Scouting Reports\n FYI, NBA Headline News, NBA Trade Rumors, NBA News"
  },
  {
    "id": 36,
    "db_id": "soccer_3",
    "question": "What is the number of distinct countries of all players?",
    "answer": "\n 2. Which country has the most players in a team (including duplicate countries) and how many do they have?\n 3. What percentage of players are from the United States, and which team(s) do they belong to?\n4. What is the average age of players in a team, taking into account only those whose nationality is not \"United States\"?\n5. Which player has spent the longest time without changing teams, and how many teams did he change"
  },
  {
    "id": 37,
    "db_id": "soccer_3",
    "question": "How many different countries are players from?",
    "answer": "\n One person per country.\nHow many games of chess will be played? Four games between each pair of players, two games per player.\nIf a player is eliminated, do the other players continue playing with the remaining players? Yes, but with one less player.\nWho wins the tournament? The team with the higher score on the end of the game."
  },
  {
    "id": 38,
    "db_id": "soccer_3",
    "question": "Show the earnings of players from country \"Australia\" or \"Zimbabwe\".",
    "answer": "\n  \\item Include a player's country and name in the output.\n  \\item Do not show players with no country.\n  \\item Sort the players by their total earnings descending (i.e. highest total earnings first).\n\n\\end{itemize}\n\\end{blockquote}\n\nAnswer: Try this query:\n\n SELECT p.country, p.name, SUM(p.earnings) AS total_earnings FROM players"
  },
  {
    "id": 39,
    "db_id": "soccer_3",
    "question": "What are the earnings of players from either of the countries of Australia or Zimbabwe?",
    "answer": "\n My apologies for not being able to answer this question.\nI have no access to this information at this time."
  },
  {
    "id": 40,
    "db_id": "e_commerce",
    "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.",
    "answer": " #914\n SELECT c.id, c.first_name, c.last_name FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.id, c.first_name, c.last_name HAVING COUNT(o.order_id) > 2 AND COUNT(DISTINCT o.order_item_id) >= 3;"
  },
  {
    "id": 41,
    "db_id": "e_commerce",
    "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?",
    "answer": "\n \" + customer_query.to_sql() + \"\\n\")\n\n\n# Now we will try to query for a specific customer. We will use the id of the customer (customer_id) and not the name or last name. Let's find a customer with customer_id = 757071\n\ncustomer_query = customers_table.where(customers_table.c.customer_id == 757071)"
  },
  {
    "id": 42,
    "db_id": "e_commerce",
    "question": "For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.",
    "answer": " \n * of products in the order.\n */\npublic class OrderDetails {\n\tprivate int orderId;\n\tprivate String status;\n\tprivate int numProducts;\n\t\n\t// Construct an order details object with the given values\n\tpublic OrderDetails(int oid, String sts, int np) {\n\t\torderId = oid;\n\t\tstatus = sts;\n\t\tnumProducts = np;\n\t}\n\t"
  },
  {
    "id": 43,
    "db_id": "e_commerce",
    "question": "For every order, how many products does it contain, and what are the orders' statuses and ids?",
    "answer": "\n  SELECT c.customer_name, COUNT(o.product_id) AS total_products_ordered, o.status AS order_status, o.order_id FROM customers c JOIN orders o ON c.customer_id = o.customer_id ORDER BY total_products_ordered DESC NULLS LAST;"
  },
  {
    "id": 44,
    "db_id": "e_commerce",
    "question": "List the dates of the orders which were placed at the earliest time or have more than 1 items.",
    "answer": " \"Order date\" and \"item count\" are two different things\n\n\nComment: @vivek_23 I am sorry, but I do not understand what you mean by your comment. Perhaps you should edit your question with an example of a list of orders like this."
  },
  {
    "id": 45,
    "db_id": "e_commerce",
    "question": "What are the dates of the earliest order and the dates of all orders with more than 1 item?",
    "answer": "\n  The output should be in the format: YYYY-MM-DD\n  You can assume that the input is a valid date.\n  \"\"\"\n  def earliest_date(orders) do\n    orders |> Enum.map(& &1[:order_date]) |> Enum.min() |> Timex.format!(\"{YYYY}-{MM}-{DD}\")\n  end\n\n  def dates_with_more_than_one"
  },
  {
    "id": 46,
    "db_id": "e_commerce",
    "question": "Which customers did not make any orders? List the first name, middle initial and last name.",
    "answer": " \n * of those customers who made no orders.\n */\npublic class NoOrderCustomers {\n    public static void main(String[] args) {\n        // Schema\n        // CUSTOMER (customer_id, first_name, middle_name, last_name)\n        // ORDERS (order_id, customer_id) -- customer_id is foreign key to CUSTOMER.customer_id\n\n        // SELECT c.first"
  },
  {
    "id": 47,
    "db_id": "e_commerce",
    "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?",
    "answer": "\n  SELECT c.first_name, c.last_name, c.middle_initial FROM customer c LEFT JOIN orders o ON c.id = o.customer_id WHERE o.customer_id IS NULL;"
  },
  {
    "id": 48,
    "db_id": "e_commerce",
    "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?",
    "answer": "\n Tags: database, sql-server-2016\n \n"
  },
  {
    "id": 49,
    "db_id": "e_commerce",
    "question": "What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?",
    "answer": "\n  */\n\n    SELECT p.id AS product_id, p.name AS product_name, p.price AS product_price, p.color AS product_color, COUNT(DISTINCT o.id) AS order_count FROM products p LEFT JOIN orders o ON p.id = (SELECT product_id FROM order_products WHERE product_id = p.id LIMIT 1) GROUP BY p.id, p.name, p.price, p"
  },
  {
    "id": 50,
    "db_id": "e_commerce",
    "question": "Which orders have at least 2 products on it? List the order id and date.",
    "answer": " \" +\n        \"of the most recent order for each customer.\",\n    \"select o.order_id, row_number() OVER(PARTITION BY c.customer_id ORDER BY o.date DESC) AS recent_order_rank from orders o JOIN customers c ON o.customer_id = c.customer_id\",\n    [\n        ('order_id', int),\n        ('recent_order_rank', int)\n    ]\n)"
  },
  {
    "id": 51,
    "db_id": "e_commerce",
    "question": "What are the ids and dates of the orders with at least two products?",
    "answer": "\n  SELECT o.id, o.date_ordered FROM order_product op JOIN orders o ON op.order_id = o.id WHERE op.quantity >= 2;"
  },
  {
    "id": 52,
    "db_id": "e_commerce",
    "question": "Which product are listed in orders most frequently? List the id, product name and price.",
    "answer": "  for all products in the order.\n\\item How many different products are there?\n\\end{itemize}"
  },
  {
    "id": 53,
    "db_id": "e_commerce",
    "question": "What are the ids, names, and prices of all products that are ordered most frequently?",
    "answer": "\n 1. Find the product with the highest sales rank (number of orders) from the year 2019.\n SELECT p.product_id, p.product_name, SUM(o.order_quantity) AS total_orders FROM order_product o JOIN products p ON o.order_product = p.product_id WHERE EXTRACT(YEAR FROM o.order_date) = 2019 GROUP BY p.product_id"
  },
  {
    "id": 54,
    "db_id": "e_commerce",
    "question": "Which order have the least sum of the product prices. List the order id and sum.",
    "answer": "\n``` SELECT o.order_id, SUM(o.order_total) AS total_sum FROM orders o GROUP BY o.order_id ORDER BY total_sum DESC NULLS LAST;"
  },
  {
    "id": 55,
    "db_id": "e_commerce",
    "question": "What is the order that total cost the least , and how much is the total cost ?",
    "answer": "\n Tags: algorithms, dynamic-programming, greedy, knapsack, memoization\n KDVars: cost, profit, weight, knapsack, capacity, items_count, values, item_weights, weights, profits\n Author: Yuriy Stak\n Summary: Solution for the problem 462. Profit in Least Weight Knapsack Problem with Memoization.\n*/\n#include <iostream>\n#include"
  },
  {
    "id": 56,
    "db_id": "e_commerce",
    "question": "What is the most popular payment method?",
    "answer": "\n Making the process of paying for your insurance premiums a breeze. With the Click and Buy feature, you can purchase your premium in just a few clicks on your computer screen. When the policyholder logs into their account to pay for the insurance premium, they will be asked whether or not they would like to pay using a credit card (Visa, MasterCard, American Express) or bank transfer.\nThis is great news for the policyholder who"
  },
  {
    "id": 57,
    "db_id": "e_commerce",
    "question": "What is the payment method that most customers use?",
    "answer": "\n Prepayment cards are the most popular form of payment for online purchases in the US. Credit card and debit card payments are also common, but they account for less than 20% of all transactions. The rest are made through PayPal (eBay), Google Checkout or e-wallets like OLO and iDEAL."
  },
  {
    "id": 58,
    "db_id": "e_commerce",
    "question": "How many number of products does each gender of customers buy? List the gender and the number",
    "answer": " of products that it buys. \n# and rank the products by most popular among males to least popular among females.\ncustomers_gender_products = defaultdict(list)\nfor order in orders:\n    customer_gender = customers[orders[order].customer_id - 1].gender.lower()\n    product = products[orders[order].product_id - 1]\n    quantity = orders[order].quantity\n    customers_gender_products"
  },
  {
    "id": 59,
    "db_id": "e_commerce",
    "question": "How many products does each gender buy?",
    "answer": "\n We would love to know what you think of the products we\u2019ve reviewed here.\nWe will continue to add more products for you to try and we hope you enjoy them!\nOur friends at Vantastic have provided us with a special promotion just for new customers:\nTake 20% off on your first order as our first customer!"
  },
  {
    "id": 60,
    "db_id": "e_commerce",
    "question": "How many orders has each gender of customers placed?",
    "answer": "\n  # for g in Gender:\n 'M'|'F' SELECT c.gender, COUNT(*) AS order_count FROM Customer c JOIN Order o ON c.id = o.customer_id GROUP BY c.gender ORDER BY order_count DESC;"
  },
  {
    "id": 61,
    "db_id": "e_commerce",
    "question": "How many orders has each gender placed?",
    "answer": "\n \n Post the total number of orders per gender in a pie chart.\n```\n SELECT g.gender_code, COUNT(o.order_id) AS order_count FROM orders o JOIN customers c ON o.customer_id = c.customer_id JOIN gender g ON c.gender_code = g.gender_code GROUP BY g.gender_code ORDER BY order_count DESC;"
  },
  {
    "id": 62,
    "db_id": "e_commerce",
    "question": "List the customers' first name, middle initial, last name and payment methods.",
    "answer": " \n            from customer_payments cp JOIN customer_profiles cp ON cp.customer_id = cp.customer_id JOIN payments p ON p.payment_method_id = cp.payment_method_id;"
  },
  {
    "id": 63,
    "db_id": "e_commerce",
    "question": "What are the first names, middle initials, last names, and payment methods of all customers?",
    "answer": "\n  customer.getAllCustomers();\n  // Get all customers' first names, last names, and phone numbers.\n  customer.getAllCustomerNamesAndPhoneNumbers();\n  // Create a new customer with the specified first name, middle initial, last name, and phone number.\n  customer.createNewCustomer(fname, mname, lname, pnumber);"
  },
  {
    "id": 64,
    "db_id": "e_commerce",
    "question": "List the invoices' status, date and the date of shipment.",
    "answer": " \nThe result is a list of invoices with their state, date of issue, and date of shipping. \n*/\npublic class Invoice {\n\tprivate String id;\n    private string status;\n    private DateTime dateIssued;\n    private DateTime dateShipped;\n}"
  },
  {
    "id": 65,
    "db_id": "e_commerce",
    "question": "What are the statuses, dates, and shipment dates for all invoices?",
    "answer": "\n  Invoice.all_statuses_and_shipment_dates(salesforce_account_id)\n    # => [{\"invoice_number\"=>\"0612\", \"shipping_date\"=>\"2013-02-05\", \"shipment_date\"=>\"2014-08-14\", \"status\"=>\"Delivered\"},\n         {\"invoice_number\"=>\"0712\","
  },
  {
    "id": 66,
    "db_id": "e_commerce",
    "question": "List the names of the products being shipped and the corresponding shipment date.",
    "answer": " \n * This method is used to display the products in a shipment.\n * @return array The array containing the product name and shipment date\n */\npublic function getProductInfo() {\n    return [\n        'productName' => $this->shipment->getShipmentProducts(),\n        'shipmentDate' => $this->shipment->getShipmentDate()\n    ];\n}"
  },
  {
    "id": 67,
    "db_id": "e_commerce",
    "question": "What are the names of the products tht have been shipped, and on what days were they shipped?",
    "answer": "\n The results from this query will be in the following format: product_name, day_shipped. For example, if a product was shipped on Monday, it would look like this: 'Product A', 'Monday'. If a product was shipped multiple days, each day would be listed separately like this: 'Product A', 'Monday', 'Tuesday', etc.\n SELECT p.product_name, to_char(s.ship_date"
  },
  {
    "id": 68,
    "db_id": "e_commerce",
    "question": "What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?",
    "answer": "\n The value can be obtained from the following place:\n  https://developer.fedex.com/docs/services/shipping/carrier_code_service.html\n  This table lists all possible values for FedEx's carrier codes, such as \"FDXE\" and their associated shipping method, status code, and tracking number. For example, FDXE is a carrier code that represents FedEx, the shipping method is \"FE"
  },
  {
    "id": 69,
    "db_id": "e_commerce",
    "question": "What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?",
    "answer": "\n A response object should be returned with a 200 status code. The data should look like this:\n\n```json\n{\n    \"status\": \"shipped\",\n    \"tracking\": \"987654321\"\n}\n```"
  },
  {
    "id": 70,
    "db_id": "e_commerce",
    "question": "What is the product name and the color of the ordered items which have been shipped?",
    "answer": "\n The response to the above question will be a single row with three columns. The first column should contain the product name, the second column should contain the color of the product, and the third column should contain the date the product was shipped.\n\\item How many customers have ordered more than one item in their shopping cart? The response to this question will be a single row with three columns. The first column should contain the number of customers who have more than one item in their sho"
  },
  {
    "id": 71,
    "db_id": "e_commerce",
    "question": "What are the names and colors of all products that have been shipped?",
    "answer": "\n  # [2015-06-25] We can simply use `shipment_id` as a unique key to get each shipment's products.\n  def all_product_names_and_colors(shipments) do\n    shipments\n    |> Enum.map(&products/1)\n    |> flatten()\n    |> Enum.reduce([], fn product, acc -> [product[\"name\"], product"
  },
  {
    "id": 72,
    "db_id": "e_commerce",
    "question": "List all the distinct product names, price and descriptions which are bought by female customers.",
    "answer": " \n        $female_products = [];\n        foreach ($product_customer_purchases as $purchase) {\n            if($purchase->gender == 'F'){\n                $product = Product::where('id',$purchase->product_id)->first();\n                $product_details = json_decode($product->product_details);\n                $female_products[] = [\n                    'name' => $product_"
  },
  {
    "id": 73,
    "db_id": "e_commerce",
    "question": "What are the different names, prices, and descriptions for all products bought by female customers?",
    "answer": "\n  - In the product_purchases table, we'll use a product_id column to identify which product was purchased. We'll also add a customer_id column to identify which customer made the purchase.\n  - The product_purchases table should have an index on both product_id and customer_id, but no other columns.\n    */\n   SELECT p.product_name, p.price, c.customer_first_name FROM product"
  },
  {
    "id": 74,
    "db_id": "e_commerce",
    "question": "What are invoices status of all the orders which have not been shipped?",
    "answer": "\n \n `orders_without_shipment`: a list of orders without shipments. The status is not \"shipped\" for these orders.\n  `orders_with_shipment`: a list of orders with shipments. The status is \"shipped\" for these orders.\n  `orders`: a list of all orders (with or without shipments, with or without status)\n  `shipment`: the shipment associated to the order. If there is no"
  },
  {
    "id": 75,
    "db_id": "e_commerce",
    "question": "What are the invoice statuses for all orderes that have not been shipped out yet?",
    "answer": "\n  public static List<InvoiceStatus> unshippedStatuses = new List<InvoiceStatus>();\n [Static]\n  public static InvoiceStatus Unshipped => null; // If there are no unshipped invoices, what is the return value of this property?\n}"
  },
  {
    "id": 76,
    "db_id": "e_commerce",
    "question": "What are the total cost of all the orders ? List the order id , date , and total cost .",
    "answer": "\n  For example :\n  Order Id, Date, Total Cost.\n  2005984759, 2016-03-24, 759.99\n  2006058749, 2016-04-14, 587.99\n */"
  },
  {
    "id": 77,
    "db_id": "e_commerce",
    "question": "For each order, what is its id, date, and total amount paid?",
    "answer": "\n  \"\"\"\nquery = \" SELECT o.id AS order_id, to_char(o.date_ordered, 'YYYY-MM-DD') AS order_date, SUM(i.product_price) AS total_amount_spent FROM orders o JOIN order_items oi ON o.id = oi.order_id JOIN products p ON oi.product_id = p.id WHERE to_char(o.date_ordered, '"
  },
  {
    "id": 78,
    "db_id": "e_commerce",
    "question": "How many customers have placed any order?",
    "answer": "\n The following methods can be used to get the total number of customers who have placed a purchase.\n */\n\n/**\n * Returns the total number of customers who have placed a purchase in the last month. This method uses the \"customers_with_purchased_products\" table to check for customer activity in the last month and then returns the count of unique customer IDs found.\n */\n public function getCustomersWithPurchasesInPastMonth() {\n "
  },
  {
    "id": 79,
    "db_id": "e_commerce",
    "question": "How many different customers have ordered things?",
    "answer": "\n C. They don't know what they are buying? D. They may not like the products that they purchase? A. They are looking for a specific product or service? B. They do not feel confident in their purchasing decisions? (Select one answer)"
  },
  {
    "id": 80,
    "db_id": "e_commerce",
    "question": "How many item states are there in the orders?",
    "answer": "\n \n CLASS_ATTRIBUTE_FIELD_COUNT,\n        \n        // Which item attribute field is used for the description?\n        CLASS_ATTRIBUTE_FIELD_DESCRIPTION_INDEX,  \n        \n        // How many class attributes are there in the orders?\n        CLASSIFICATION_ATTRIBUTE_COUNT,        \n        \n        // Which classification attribute field is used for"
  },
  {
    "id": 81,
    "db_id": "e_commerce",
    "question": "How many different item status codes are there listed in ordered items?",
    "answer": "\n  */\n  const int num_item_statuses = 4; // TODO: This value should be taken from the ItemStatus enum.\n  for (int i = 0; i < num_item_statuses; ++i) {\n    item_status_counts[i] = 0;\n  }\n  for (std::vector<OrderItem>::const_iterator order_item = order_items->begin(); order_item !="
  },
  {
    "id": 82,
    "db_id": "e_commerce",
    "question": "How many different payment methods are there?",
    "answer": "\n You have the ability to add more than one. \n2. Do you see a place where a user can go to find the status of their orders? \n3. Can the user pay through PayPal or credit card? \n4. How do users typically view their order history? \n5. Can users make changes or adjustments to their order after placement? "
  },
  {
    "id": 83,
    "db_id": "e_commerce",
    "question": "How many different payment methods can customers choose from?",
    "answer": "\n A: All the payment methods available on the Marketplace are displayed in a list with their icons. For example, customers can choose between PayPal, Visa, Mastercard, and others.\nQ: Will my customers be able to pay with a debit card, like a Visa or Mastercard? A: Yes, you'll see all payment methods available in the Marketplace on the checkout page.\nA: You can also help your customers find the right payment method for"
  },
  {
    "id": 84,
    "db_id": "e_commerce",
    "question": "What are the login names and passwords of the customers whose phone number have the prefix '+12'?",
    "answer": "\n  SELECT c.login_name, c.password FROM customer c WHERE c.phone_number LIKE '+12%';"
  },
  {
    "id": 85,
    "db_id": "e_commerce",
    "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?",
    "answer": "\n  SELECT c.username, c.password FROM customers c WHERE c.phone_number LIKE '+12%' ORDER BY c.username NULLS LAST;"
  },
  {
    "id": 86,
    "db_id": "e_commerce",
    "question": "What are the product sizes of the products whose name has the substring 'Dell'?",
    "answer": "\n  SELECT p.size FROM Products p WHERE p.name ILIKE '%Dell%' ORDER BY p.size NULLS LAST;"
  },
  {
    "id": 87,
    "db_id": "e_commerce",
    "question": "What are the sizes of all products whose name includes the word 'Dell'?",
    "answer": "\n  (SELECT p.name FROM Products p WHERE p.name ILIKE '%Dell%')"
  },
  {
    "id": 88,
    "db_id": "e_commerce",
    "question": "What are the product price and the product size of the products whose price is above average?",
    "answer": "\n  The data can be found in the \"Product\" table.\n*/\nSELECT p.product_name, CAST(p.price AS TEXT) AS product_price, CAST(AVG(p.price) AS TEXT) AS average_price FROM Product p WHERE p.price > (SELECT AVG(price) FROM Product) GROUP BY p.product_name;"
  },
  {
    "id": 89,
    "db_id": "e_commerce",
    "question": "What are the prices and sizes of all products whose price is above the mean?",
    "answer": "\n  SELECT p.name, p.price FROM Products p WHERE p.price > (SELECT AVG(p2.price) FROM Products p2);"
  },
  {
    "id": 90,
    "db_id": "e_commerce",
    "question": "How many kinds of products have not been sold?",
    "answer": "\n C. A) 10,000 B) 5,000 C) 2,000 D) 3,000 E) 4,500 F) 6,000\nWhich year was the first computer mouse introduced? A) 1955 B) 1962 C) 1975 D) 1985 E) 1995 F)"
  },
  {
    "id": 91,
    "db_id": "e_commerce",
    "question": "What is the number of products that have not been ordered yet?",
    "answer": "\n  total_products = Product.count() - orders.pluck(:product_id)\n\n  # return a random selection of unordered products\n  Product.order(order_by).limit(total_products)\nend\n\\end{code}"
  },
  {
    "id": 92,
    "db_id": "e_commerce",
    "question": "How many customers do not have any payment method?",
    "answer": "\n  return \"No Payment Method\";\n #else\n   return $this->paymentMethod; #end if;\n  }\n}"
  },
  {
    "id": 93,
    "db_id": "e_commerce",
    "question": "How many customers do not have a listed payment method?",
    "answer": "\n  var billing_address = null;\n #ifdef BILLING_ADDRESS_IS_MISSING, display an error message to the user.\n  if (!billing_address) {\n    console.error('Please fill in your address before adding a payment method.');\n  } else {\n  \n    // Create a new customer object with the given email and billing address.\n    var customer = Stripe.createCustomer(email"
  },
  {
    "id": 94,
    "db_id": "e_commerce",
    "question": "What are all the order status and all the dates of orders?",
    "answer": "\n The answer is a table with two columns:\n 1) Order number, which is just an increasing integer, and 2) Date, which is the date the order was placed.\n */\n SELECT oi.order_number, oi.date FROM ORDERS oi ORDER BY oi.date NULLS LAST;"
  },
  {
    "id": 95,
    "db_id": "e_commerce",
    "question": "What are the status codes and dates placed for all of the orders?",
    "answer": "\n 1. If there is a status code and date, place them in the row that has the corresponding order number.\n 2. If there is no status code or date, do not change that row (keep it blank)\n\\end{code}\n\nSo the result should look like this:\n\n\\begin{pre}\n\n    Order Number | Status Code | Date   | Order Total | Payment Method | Shipping Address\n    ------------|------------"
  },
  {
    "id": 96,
    "db_id": "e_commerce",
    "question": "List the address, town and county information of the customers who live in the USA.",
    "answer": " \n   - A list of all the products and their prices which are available for purchase from your website \n   - The ability to add a product to the shopping cart and check the total cost of the products currently in the cart\n   - The ability to remove an item from the cart\n   - The ability to checkout with the appropriate information (name, address, town, county) \n   - An order confirmation email is sent when an item is purchased\n   - A"
  },
  {
    "id": 97,
    "db_id": "e_commerce",
    "question": "What are the addresses, towns, and county information for all customers who live in the United States?",
    "answer": "\n A. Give the customer's name, address, town, and county. B. Only give the customer's name and address. C. Only give the customer's name. D. Give only the customer's county."
  },
  {
    "id": 98,
    "db_id": "e_commerce",
    "question": "List all the pairs of buyer first names and product names.",
    "answer": " \n\n\t    SELECT b.first_name, p.product_name FROM buyer b JOIN purchases p ON b.id = p.buyer_id;"
  },
  {
    "id": 99,
    "db_id": "e_commerce",
    "question": "What are the first names of all buyers and what products did they buy? List them in pairs.",
    "answer": " 1: Buyer, Product\n    public static void main(String[] args) {\n        for (String name : customers.keySet()) {\n            System.out.println(name + \", \" + customers.get(name));\n            // 2: Buyer, Product\n        }\n    }\n}"
  },
  {
    "id": 100,
    "db_id": "e_commerce",
    "question": "How many items are shipped?",
    "answer": "\n It\u2019s important to note that the number of items shipped is not necessarily an indicator of sales performance. While shipping a single item may be more expensive than shipping multiple items, it can still be considered a successful sale if it brings in enough revenue to meet your business goals.\n The cost per unit of shipped items affects sales performance. A higher-cost-per-unit means a smaller number of shipments will generate the same revenue as a lower-cost"
  },
  {
    "id": 101,
    "db_id": "e_commerce",
    "question": "How many products have been shipped?",
    "answer": "\n \u201cDue to the ongoing COVID-19 pandemic, the delivery of products may be delayed or not happen at all.\u201d\n By the end of 2023, the company is expecting that all products will be delivered.\nHow will the company achieve this goal? \u201cWe have a very comprehensive plan for how we\u2019re going to deliver products without compromising our ability to do so if needed, but it involves a number of people and systems working together.\u201d\n"
  },
  {
    "id": 102,
    "db_id": "e_commerce",
    "question": "What is the product average price?",
    "answer": "\n  \"products\" => [\n  {\n    \"product_name\" => \"Chocolate\",\n    \"product_price\" => 10.5,\n  },\n]\n\nI want to calculate the average price of products:\n avg_price = (10.5 + 12.6) / 2 = 11.7\n\\end{code}"
  },
  {
    "id": 103,
    "db_id": "e_commerce",
    "question": "How much do the products cost on average?",
    "answer": "\n Posted in: Business, Economics, Health, Politics, Social Issues\n Mental Health\nSunday, July 26, 2015 by Paul Hodson\nEarlier this week I wrote about a report from the Economic Policy Institute (EPI) that the cost of health insurance premiums in the United States for an average American could be as high as $8.7 million per year. It turns out that the EPI"
  },
  {
    "id": 104,
    "db_id": "e_commerce",
    "question": "What is the average price of the products being ordered?",
    "answer": "\n The data has been provided in a CSV file and can be downloaded from this link https://github.com/hariharan1987/data-science-projects/blob/master/avg_price.csv.\n"
  },
  {
    "id": 105,
    "db_id": "e_commerce",
    "question": "What is the price of all products being ordered on average?",
    "answer": "\n  avg_price = total_price / total_items;\n #3.859206410714286\n  print(f\"Average price of products: {avg_price}\")\n  "
  },
  {
    "id": 106,
    "db_id": "e_commerce",
    "question": "What are the email address, town and county of the customers who are of the least common gender?",
    "answer": "\n  SELECT c.email, c.town, c.county FROM customer c WHERE c.gender = 'other' ORDER BY c.email ASC;"
  },
  {
    "id": 107,
    "db_id": "e_commerce",
    "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?",
    "answer": "\n  * Gender: Male, Email Addresses: [email1@gmail.com, email2@yahoo.com], City: New York, County: New York, Frequency of purchases: 5 times per month\n  * Gender: Male, Email Addresses: [email3@hotmail.com, email4@aol.com], City: London, County: London, Frequency of purchases: 7 times per month\n  *"
  },
  {
    "id": 108,
    "db_id": "e_commerce",
    "question": "List the order date of the orders who are placed by customers with at least 2 payment methods.",
    "answer": " \" +\n                \"GROUP BY o.order_date HAVING COUNT(DISTINCT p.payment_method) >= 2;\")\n        .getResultList();\n\\end{code}"
  },
  {
    "id": 109,
    "db_id": "e_commerce",
    "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?",
    "answer": "\n [Furthermore, I would like to see a total count of all payment methods.]\n BONUS: Show the customer who has made the most payments.\n SELECT c.customer_name, COUNT(DISTINCT p.payment_method) AS number_of_payment_methods, SUM(CASE WHEN p.is_primary = 1 THEN 1 ELSE 0 END) AS primary_payment_count, u.user_name FROM customers c JOIN"
  },
  {
    "id": 110,
    "db_id": "e_commerce",
    "question": "What is the most uncommon order status?",
    "answer": "\n  - 'order_status' = 'completed' would be the most common. 'order_status' = 'canceled' would be the least common.\n- I don't know, I haven't done that yet. I don't know if it's a good idea. I don't have an opinion on that."
  },
  {
    "id": 111,
    "db_id": "e_commerce",
    "question": "What is the least common order status?",
    "answer": "\n  \"Shipped\"\n  \"Delivered\"\n  \"Returned\"\n  \"Canceled\"\n}\n```"
  },
  {
    "id": 112,
    "db_id": "e_commerce",
    "question": "For all the products sold for more than 3 times, list their id and description.",
    "answer": " \" +\n        \"FROM Products p GROUP BY p.id, p.description HAVING COUNT(p.id) > 3;\",\n    );\n    expect(result).toEqual([]);\n  });\n});"
  },
  {
    "id": 113,
    "db_id": "e_commerce",
    "question": "For all products sold more than 3 times, what are their ids and descriptions?",
    "answer": "\n I know i can do this with a for loop:\n CURRENT_TIMESTAMP()::DATE - INTERVAL '7 days' <= p.sale_date AND p.sale_date < CURRENT_TIMESTAMP()::DATE, but is there any way to write a single query that will accomplish this?\n\nComment: Does this answer your question? [How do I use HAVING COUNT(*) > 3 in a SELECT statement?]("
  },
  {
    "id": 114,
    "db_id": "e_commerce",
    "question": "List the invoice dates and ids of the invoices causing at least 2 shipments.",
    "answer": " \" +\n        \"within a time window.\";\n\n    private static final String MESSAGE_PREFIX = \"### Invoice-Shipment-Window ### \";\n\n    public FindInvoiceShipmentWindowCommand(TimeWindow timeWindow) {\n        super(timeWindow);\n    }\n\n    @Override\n    public List<Invoice> getInvoices() throws SQLException {\n        String invoiceIds = \"\";\n       "
  },
  {
    "id": 115,
    "db_id": "e_commerce",
    "question": "What are the dates and ids of the invoices that are related to at least 2 shipments?",
    "answer": "\n [Here](https://stackoverflow.com/a/56047285/939210) is a solution that uses `COUNT(DISTINCT s.invoice_id) >= 2` to filter out the invoices that are related to at least two shipments.\n\nHowever, I would like to do more than just filtering and counting. I'd also like to know which invoices have been shipped together with"
  },
  {
    "id": 116,
    "db_id": "e_commerce",
    "question": "what are all shipment tracking numbers and shipment dates?",
    "answer": "\n MONGODB_CONNECTION = \"mongodb://127.0.0.1:27017\"\nMONGODB_DATABASE = \"test\""
  },
  {
    "id": 117,
    "db_id": "e_commerce",
    "question": "What are the tracking numbers and dates for all shipments listed?",
    "answer": "\n A) Show the total number of shipments for each customer. B) Show the total shipped items per order, in a customer's orders. C) Show the date of the latest shipment for any given customer. D) Show the total time that a given shipment was delayed.\n\nA. SELECT c.customer_name, COUNT(o.order_id) AS number_of_orders, COUNT(DISTINCT s.shipment_id) AS"
  },
  {
    "id": 118,
    "db_id": "e_commerce",
    "question": "What are the color, description and size of the products priced below the maximum price.",
    "answer": " \n# If no such products exist, print \"No products found.\".\nmax_price = 1000\nproducts = [('Red', 'Bike', 150), ('White', 'Motorcycle', 750)]\n\nfor product in products:\n    if product[2] <= max_price:\n        print(product)"
  },
  {
    "id": 119,
    "db_id": "e_commerce",
    "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?",
    "answer": "\n  SELECT product_id, description, size, color FROM Products WHERE price < (SELECT MAX(price) FROM Products);"
  },
  {
    "id": 120,
    "db_id": "bbc_channels",
    "question": "Return the names of directors who are older than the average age.",
    "answer": " \n * The average age is calculated from all the director's years of birth in the system. */\nfunction getOlderThanAverage(directorService) {\n    const avgAge = calculateAverageAge(directorService);\n    return directorService.findDirectorsByAgeOlderThan(avgAge);\n}"
  },
  {
    "id": 121,
    "db_id": "bbc_channels",
    "question": "Find the the name of the oldest director.",
    "answer": " \n  var director = people.OrderBy(p => p.Directed).FirstOrDefault();\n  Console.WriteLine(\"The oldest director is {0}\", director.Name);\n}\n```"
  },
  {
    "id": 122,
    "db_id": "bbc_channels",
    "question": "How many channels have the word 'bbc' in their internet link?",
    "answer": "\n You could try:\n  - `https://www.google.com/search?q=site%3Abbc.co.uk+bbc`\n  - `https://twitter.com/search?q=bbc&src=typd`\n  - `https://en.wikipedia.org/w/index.php?search=bbc&go=`\n\\end{code}"
  },
  {
    "id": 123,
    "db_id": "bbc_channels",
    "question": "How many different digital terrestrial channels are there?",
    "answer": "\n A) The number of digital terrestrial channels that can be tuned on a DTV receiver is dependent on the specific receiver model and manufacturer. This is because the number of available digital channels depends on the total amount of memory on the receiver, which determines the capacity of the DVB-H (Digital Video Broadcast) or ISDB-T (Japanese digital television) tuners on the receiver.\n Q: What are the technical requirements for a DTV receiver to support"
  },
  {
    "id": 124,
    "db_id": "bbc_channels",
    "question": "List all program titles in the order of starting year. List the most recent one first.",
    "answer": "\n\t\treturn this.programs.sort(function (a, b) { return a.startingYear > b.startingYear ? -1 : 1; });\n\t}\n});\n"
  },
  {
    "id": 125,
    "db_id": "bbc_channels",
    "question": "Which director is in charge of the most programs?",
    "answer": "\n WEBSITE: http://www.tgacalifornia.com/programs-and-projects/wildlife-conservation/\nTGAC, the organization I am supporting, has a wildlife conservation program. A wildlife biologist is in charge of this program and another scientist helps to review programs and projects. The director and staff members of TGAC are available to respond to questions and provide guidance as needed."
  },
  {
    "id": 126,
    "db_id": "bbc_channels",
    "question": "Find the name and age of the director who is in charge of the most programs?",
    "answer": "\n  SELECT d.name, d.age FROM Director d ORDER BY d.age DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 127,
    "db_id": "bbc_channels",
    "question": "Return the title of the program that began most recently.",
    "answer": "  For example, the following code will return \"Calculator\" in Windows:\n```\nshell_exec(\"title\", \"\");\n```\n\n# Arguments\nNone."
  },
  {
    "id": 128,
    "db_id": "bbc_channels",
    "question": "Find the name and website link of the channels that have more than one program.",
    "answer": " \n     * @return array\n     */\n    public static function getChannelsWithMultiplePrograms() {\n        $channels = [];\n        foreach (self::getAllPrograms() as $program) {\n            if ($program->getParentalChannel()->isMulticast()) continue;\n            $programCount = self::countPrograms($program->getParentalChannel());\n            if ($programCount > 1) {\n                $ch"
  },
  {
    "id": 129,
    "db_id": "bbc_channels",
    "question": "Find the number of programs for each channel. Return the name of each channel as well.",
    "answer": "\n  - A list of all channels and their number of programs (in any order).\n\"\"\"\n\ndef find_programs(channels, programs):\n    # Your code here...\n    channels = sorted(channels)\n    output = []\n    for c in channels:\n        channel = c[0]\n        num_programs = len(c[1])\n        output.append((channel, num_programs))\n    return output"
  },
  {
    "id": 130,
    "db_id": "bbc_channels",
    "question": "Find the number of channels that do not run any program.",
    "answer": " \nint i = 0;\nfor(i=0;i<64;i++){\n\tif((1<<i)&channels_running){\n\t\tchannel_running++;\n\t}\n}\nreturn channel_running;"
  },
  {
    "id": 131,
    "db_id": "bbc_channels",
    "question": "What is the name of the director who is in the \"Dracula\" program?",
    "answer": "\n Cory Anderson is the director of the Dracula program at the National Center for Atmospheric Research."
  },
  {
    "id": 132,
    "db_id": "bbc_channels",
    "question": "Find the name and internet web of the channel that is directed by the most directors.",
    "answer": " \nThe channels with the highest number of directors are: Channel 4, followed by Channel 3. \n\n5) What is the name of the director who has worked on the most movies in total? \nIt is Adrian Dunbar.\n"
  },
  {
    "id": 133,
    "db_id": "bbc_channels",
    "question": "Find the name of the directors whose age is between 30 and 60.",
    "answer": " Calls are grouped into buckets based on their ages, with all the members in the first bucket being less than 25, the second bucket having members between 25 and 30, and so forth.\n\nAnswer: SELECT d.age, COUNT(d.name) AS number_of_directors FROM director d WHERE d.age BETWEEN 30 AND 60 GROUP BY d.age ORDER BY d.age;"
  },
  {
    "id": 134,
    "db_id": "bbc_channels",
    "question": "give me the name of channels that have both a director younger than 40 and a director older than 60.",
    "answer": " C.\nSELECT c.name FROM channels c JOIN directors d ON c.name = d.name WHERE (d.age > 60 AND d.age < 70) OR (d.age > 40 AND d.age < 50);"
  },
  {
    "id": 135,
    "db_id": "bbc_channels",
    "question": "Find the id and name of the channel that is not directed by Hank Baskett.",
    "answer": " \n   * @return a list of channels where the user is not directed by the director.\n   */\n  public List<Channel> getChannelsNotDirectedBy(String userId, String name) {\n    List<Channel> myList = new ArrayList<>();\n    for (Channel channel : channels) {\n      if (!channel.getDirector().equalsIgnoreCase(name)) {\n        myList.add(channel);\n      }\n    }"
  },
  {
    "id": 136,
    "db_id": "tv_shows",
    "question": "How many radios are there?",
    "answer": "\n WRITE(3)\n 757071 - What do you want to be when you grow up?\nWhat is your favorite hobby?\n WRITE(4) 757072 - I enjoy writing, especially in the form of letters and stories.My favorite hobby is to write letters to my friends back home. I wish to be a writer when I am grown up. I would like to write stories that will make"
  },
  {
    "id": 137,
    "db_id": "tv_shows",
    "question": "List the transmitters of radios in ascending order of erp kw .",
    "answer": "\n  Radio.sort(function (a, b) {\n    return a.erpKw - b.erpKw;\n  });\n  // console.log(Radio);\n};\n"
  },
  {
    "id": 138,
    "db_id": "tv_shows",
    "question": "What are the names and original air dates of tv shows?",
    "answer": "\n \u201cFrozen\u201d is a Disney Channel original series that first aired in February 2016. It has two seasons, with 35 episodes in total. The last episode of the second season aired on January 24, 2020.\n\u201cThe Good Place\u201d first aired on October 7, 2019. It has one season, with nine episodes."
  },
  {
    "id": 139,
    "db_id": "tv_shows",
    "question": "List the station names of city channels whose affiliation is not \"ABC\".",
    "answer": "\n  ChannelList = Channel.objects.filter(affiliation__not_i_contains=\"ABC\")\n\\end{code}"
  },
  {
    "id": 140,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.",
    "answer": " A person may want to filter out these radios to save power on his computer. The following example shows how to use the filter function.\n\n```js\nvar radios = [{\"name\": \"RadioA\", \"erp\": 151}, {\"name\": \"RadioB\", \"erp\": 30}];\nvar filteredRadios = radioFilter(radios);\nconsole.log(filteredRadios); // [\"RadioA\", \"RadioB"
  },
  {
    "id": 141,
    "db_id": "tv_shows",
    "question": "What is the transmitter of the radio with the largest ERP_kW?",
    "answer": "\n  var transmitters = [];\n  for (var i = 0; i < radios.length; i++) {\n    var radio = radios[i];\n    if (radio.erp_kw > maxErp) {\n      transmitters = [radio];\n      maxErp = radio.erp_kw;\n    } else if (radio.erp_kw === maxErp) {\n      transmitters.push(radio"
  },
  {
    "id": 142,
    "db_id": "tv_shows",
    "question": "What is the average ERP across all radios?",
    "answer": "\n  print \"Average ERP: \", avg_erp(radios)\n <?php } else { ?>\n  // If there are no radios, display an error message.\n  alert(\"No radios!\");\n<?php } ?>"
  },
  {
    "id": 143,
    "db_id": "tv_shows",
    "question": "Show the different affiliations of city channels and the number of city channels with each affiliation.",
    "answer": " \n   */\n  public static function get_city_affiliations() {\n    $sql = \" SELECT c.city, COUNT(c.city) AS num_cities FROM city c JOIN city_affiliation ca ON c.id = ca.city GROUP BY c.city ORDER BY num_cities DESC\";\n    return self::$_db->query($sql)->result();\n  }\n  \n  /**\n   * Returns the number of"
  },
  {
    "id": 144,
    "db_id": "tv_shows",
    "question": "Please show the most common affiliation for city channels.",
    "answer": " 1-1000\n    *\n    * @return array\n    */\n    public function getCityChannels() {\n        return $this->cityChannels;\n    }\n    \n    /**\n    * Set the number of times we have seen a specific affiliation for city channels. 1-1000\n    * @param array $cityChannels\n    */\n    public function setCityChannels(array $cityChannels"
  },
  {
    "id": 145,
    "db_id": "tv_shows",
    "question": "List the affiliations shared by more than three city channels.",
    "answer": " \n# See also: https://github.com/frenkel/affinity_clustering/blob/master/README.md for more information on affinity clustering.\nfrom affinity_clustering import AffinityClusterer\nclusterer = AffinityClusterer(affinity='full', random_state=42) # Initialize the Affinity Clusterer.\ncities = ['New York City', 'Los Angeles', 'Ch"
  },
  {
    "id": 146,
    "db_id": "tv_shows",
    "question": "Show the cities and station names of city channels in ascending alphabetical order of station name.",
    "answer": " \n-d - Display the cities and station names in descending alphabetical order of station name \n-c - Display the cities and station names in a random order \n-m - Display only the station names, not the cities \n-l - Display a list of all the stations that match a partial station name. For example if you type -l \"Met\" it will find and display all the stations that contain the word \"Met\".\n-h - Display this help"
  },
  {
    "id": 147,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the cities of the channels they are associated with.",
    "answer": "  The second number in each row is the channel that it is assigned to.\n        /// </summary>\n        public static IEnumerable<string[]> GetTransmitterChannels() => new string[,][]{new string[] {\"KWLV\", \"53\"}, new string[] {\"W2MTH\", \"49\"} };\n    }\n}"
  },
  {
    "id": 148,
    "db_id": "tv_shows",
    "question": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.",
    "answer": "  The data\n    /// is obtained from the information service (IS) which is part of the ISDB-Teletext specification.\n    /// </summary>\n    public class TransmitterERP {\n        /// <summary>\n        /// A transmitter identifier.\n        /// </summary>\n        public int TransmitterId { get; set; }\n\n        /// <summary>\n        /// The name of a channel the transmitter is associated with."
  },
  {
    "id": 149,
    "db_id": "tv_shows",
    "question": "Show the transmitters of the radios and the number of city channels they are associated with.",
    "answer": "  For\n     * example, a transmitter can be associated to multiple city channels through different frequency bands, so\n     * the result set may contain duplicate transmitters.\n     */\n    @Select(\" SELECT t.transmitter_id, r.city, b.frequency_band, b.channel_number FROM tune_request AS t JOIN receiver AS r ON t.receiver_id = r.receiver_id AND t.transmitter_"
  },
  {
    "id": 150,
    "db_id": "tv_shows",
    "question": "Show the distinct transmitters of radios that are not associated with any city channel.",
    "answer": "  For example, this is useful for finding a transmitter's location based on a signal strength reading:\n \n `transmitters = RadioData.get_transmitters()`\n\n ### Get Transmitters by City Channel\n \n A list of distinct transmitters that are associated with the given city channel. For example, this is useful for finding all of the transmitters associated with a specific city channel: \n \n `transmitters = RadioData.get"
  },
  {
    "id": 151,
    "db_id": "vehicle_driver",
    "question": "What is the model of the vehicle with maximum top speed whose power is higher than 6000?",
    "answer": "\n (It would be a good idea to add the \"WHERE\" clause as well. )\n SELECT v.model, v.top_speed FROM vehicles v WHERE v.power > 6000 ORDER BY v.top_speed DESC NULLS LAST;"
  },
  {
    "id": 152,
    "db_id": "vehicle_driver",
    "question": "Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.",
    "answer": " \"\n        + \"If there are multiple vehicles with the same maximum speed, return their models separated by comma and space.\",\n    \"vehicles\" : [{\"model\": \"Golden Ring\", \"power\": 7500}, {\"model\": \"Bolt\", \"power\": 6350}] }"
  },
  {
    "id": 153,
    "db_id": "vehicle_driver",
    "question": "What are the names of the drivers who are citizens of the 'United States'?",
    "answer": "\n The answer is that there are no such drivers, because all of the drivers in a given population are citizens of some country. However, if you want to know which countries have drivers with the name \"John\" for example, then the answer is that any country can have one or more drivers with that name.\nThe difference between a driver who has the name \"John\" and one who does not is that the first one belongs to a country where \"John\" is a common name, while"
  },
  {
    "id": 154,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers with citizenship from the United States.",
    "answer": " The method to find out if a driver has US citizenship is through the issuing a request to the US Department of State, using their API.\n    * @param {string}  - the value of 's' in 'ssn' (it should be between 100000 and 999999)\n    * @param {number}  - the value of 'd' in 'ssn' (it should be between 1"
  },
  {
    "id": 155,
    "db_id": "vehicle_driver",
    "question": "How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?",
    "answer": "\n 1) SELECT COUNT(DISTINCT v.vehicle_id) AS num_vehicles, d.driver_id FROM Vehicle v JOIN Driver d ON v.vehicle_id = d.vehicle_id GROUP BY d.driver_id ORDER BY num_vehicles DESC;"
  },
  {
    "id": 156,
    "db_id": "vehicle_driver",
    "question": "What is the id of the driver who has driven the most vehicles, and how many vehicles is this?",
    "answer": "\n  SELECT d.driver_id, COUNT(v.vehicle_id) AS number_of_vehicles FROM drivers d JOIN vehicles_driven vd ON d.driver_id = vd.driver_id JOIN vehicles v ON vd.vehicle_id = v.vehicle_id GROUP BY d.driver_id ORDER BY number_of_vehicles DESC LIMIT 1;"
  },
  {
    "id": 157,
    "db_id": "vehicle_driver",
    "question": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?",
    "answer": "\n  max_power = 0;\n # initialize max power to zero. If a car has a higher power, update max power accordingly.\n  avg_power = 0; # initialize average power to zero. Update average power as we add more cars and divide by the number of cars added so far.\n  for (car in cars) {\n    if (car[7] > max_power) {\n      max_power = car[7]; #"
  },
  {
    "id": 158,
    "db_id": "vehicle_driver",
    "question": "Return the maximum and average power for the vehicles built by Zhuzhou.",
    "answer": " 418570, which is an affiliate company of Tianqi Motors, has been announced in a press release from the Ministry of Industry and Information Technology. The average power for the Chinese market is 63 kilowatt-hours, with a maximum of 82 kilowatt-hours per vehicle.\nThe report was also made available on Zhuzhou 418570's website, which has an English version and"
  },
  {
    "id": 159,
    "db_id": "vehicle_driver",
    "question": "What is the id of the vehicle driven for the least times for the vehicles ever used?",
    "answer": "\n  car_id = min(vehicles, key=vehicles.count())\n\n  return cars[car_id]\n\ndef get_least_driven_car():\n  \"\"\"Returns the name of the least driven vehicle in the list.\"\"\"\n  return vehicles.get(min(vehicles, key=vehicles.count()), '')"
  },
  {
    "id": 160,
    "db_id": "vehicle_driver",
    "question": "Return the id of the vehicle that has been driven the fewest times.",
    "answer": " \n   * @return The id of the vehicle that has been driven the fewest times, or null if no such vehicle exists (i.e. all vehicles have been driven at least once). \n   */\n  public Integer getVehicleWithLeastTimesDriven() {\n    Map<Integer, Integer> timeDriven = new HashMap<>();\n    for(int i : this) {\n      int time = timeDriven.getOr"
  },
  {
    "id": 161,
    "db_id": "vehicle_driver",
    "question": "What is the top speed and power of the vehicle manufactured in the year of 1996?",
    "answer": "\n In fact, there are no records of any vehicle being manufactured in 1996. There were only a few vehicles manufactured in 1995, and they weren't very high-performance models."
  },
  {
    "id": 162,
    "db_id": "vehicle_driver",
    "question": "Return the top speed and power of the vehicle that was built in the year 1996.",
    "answer": "  The values should be returned in an array.\n * @return {array} A two element array, the first value being the maximum speed and the second value being the maximum power.\n */\nfunction getSpeedsAndPower(vehicle) {\n    if (vehicle.speed === vehicle.power) {\n        return [vehicle.speed, vehicle.speed];\n    } else if (vehicle.speed < vehicle.power) {\n"
  },
  {
    "id": 163,
    "db_id": "vehicle_driver",
    "question": "What are the build year, model name and builder of the vehicles?",
    "answer": "\n Home page and car page should be in the top 5 Google search results for any given car. All relevant data on a car must be displayed on both the home page and the car page. Above all else, the site should look professional and well organized."
  },
  {
    "id": 164,
    "db_id": "vehicle_driver",
    "question": "Give the build year, model, and builder of each vehicle.",
    "answer": " \n  3. Find the number of vehicles produced in a specific year (e.g., 1950) by the manufacturer Ford Motor Company. \n  4. Find the name of all vehicles produced by Toyota Motor Corporation in a specific year."
  },
  {
    "id": 165,
    "db_id": "vehicle_driver",
    "question": "How many drivers have driven vehicles built in 2012?",
    "answer": "\n My search has turned up 756 listings. The average price for a used vehicle built in 2012 was $3,098.\nHow many used cars were built in the year 2012? 251 are listed for sale. The average price for a used car in 2012 is $4,676.\nWhat kind of car might have been built in 2012? 18"
  },
  {
    "id": 166,
    "db_id": "vehicle_driver",
    "question": "Count the number of different drivers who have driven vehicles built in 2012.",
    "answer": " 269857\n2012 Ford Transit Connect - Built between 2012 and 2013 models, this is a popular choice for those looking to purchase an SUV or truck-like vehicle, as it's got a lot of space inside, plenty of cargo room, but with the added benefit of being an automatic. Ford's Transit Connect has got four doors, and has got plenty of storage capacity. It'"
  },
  {
    "id": 167,
    "db_id": "vehicle_driver",
    "question": "How many drivers have raced in 'NASCAR'?",
    "answer": "\n WRANGLE: What is the average speed of a NASCAR car when it's running at full speed?\n KEATON: 75 miles per hour.\nGILBERT: That's pretty fast! I guess we've got to go at least that fast, since we're going so fast!\nKEATON: We'll try our best! (laughing)\nGILBERT: Yeah, yeah, we'"
  },
  {
    "id": 168,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have raced in NASCAR.",
    "answer": " 5260 drivers have competed in the Grand National Series since its inception, with many of those drivers becoming successful NASCAR drivers and others continuing to race in other professional motorsports circuits throughout their careers.\nThe NASCAR circuit is widely regarded as one of the most popular racing leagues in North America and a key part of the sporting landscape for drivers in NASCAR's various touring series, such as the Busch Series, the C"
  },
  {
    "id": 169,
    "db_id": "vehicle_driver",
    "question": "What is the average top speed of vehicles?",
    "answer": "\n  return vehicles.map(v => v.speed).average();\n};\n\nconst avgTopSpeed = getAverageTopSpeed([vehicle1, vehicle2]); //=> 60\n```\n\n### 8.20) Implement a function to check if all values in an array are numbers and return true or false (or throw an error for non-numeric values)\n\n```javascript\nconst allNumeric = (arr)"
  },
  {
    "id": 170,
    "db_id": "vehicle_driver",
    "question": "Return the average top speed across all vehicles.",
    "answer": " 78 miles per hour.\nAverage Speed in Miles Per Hour 78 mph"
  },
  {
    "id": 171,
    "db_id": "vehicle_driver",
    "question": "What are the distinct driver names who have driven vehicles with power more than 5000 ?",
    "answer": "\n A) SELECT DISTINCT d.name FROM Driver d JOIN Vehicle v ON d.id = v.driver_id WHERE v.power > 5000;"
  },
  {
    "id": 172,
    "db_id": "vehicle_driver",
    "question": "Return the names of drivers who have driven vehicles with power over 5000.",
    "answer": " 'Bhp' to be displayed in a list\nThe following is a program that demonstrates the use of a function and an array, to store the names of drivers who have driven vehicles with power over 5000 'Bhp'. The function displays_names uses a for loop to iterate over the elements in the array, displaying their values.\n\ndef displays_names(array):\n    for item in array:\n        print(item)\n\ndef get_dri"
  },
  {
    "id": 173,
    "db_id": "vehicle_driver",
    "question": "Which car models have total production larger than 100 or top speed higher than 150?",
    "answer": "\n I have this query but it's not working:\n # SELECT m.manufacturer, SUM(m.total_production) AS total_production FROM manufacturers m JOIN vehicles v ON m.id = v.manufacturer WHERE EXISTS (SELECT 1 FROM vehicles v2 WHERE v2.model = v.model AND v2.year > v.year AND ((v2.total_production / NULLIF(v2.speed, 0)) >"
  },
  {
    "id": 174,
    "db_id": "vehicle_driver",
    "question": "Give the models of cars that have a total production of over 100 or a top speed over 150.",
    "answer": " Cars in this class are considered to be \"big\" and typically have an interior space of more than 2.3 cubic meters.\nThe D-segment is the most common category for passenger vehicles, although some cars in the B-segment may also be included due to their size. The term \"durchgepresst\" describes this class of cars, which have a total production volume (in tonnes) greater than 100 and are considered to be \"big\"."
  },
  {
    "id": 175,
    "db_id": "vehicle_driver",
    "question": "What are the model names and build year of the cars with 'DJ' in its model name?",
    "answer": "\n A: SELECT c.model, c.build_year FROM car c WHERE c.model ilike '%DJ%' ORDER BY c.build_year NULLS LAST;"
  },
  {
    "id": 176,
    "db_id": "vehicle_driver",
    "question": "Return the model and build year of cars that include \"DJ\" in their model names.",
    "answer": "  I can do this using a regular expression like `^[A-Za-z]{2,4}[0-9]{3}$` but I'm not sure how to incorporate the \"or\" operator into it.\n\nI was hoping for an answer that uses only basic regex syntax and has a single expression, ideally.  Thanks!\n\nComment: Are you going to accept anything like \"DJ1234\" or just \"DJ\"?"
  },
  {
    "id": 177,
    "db_id": "vehicle_driver",
    "question": "What are the models which have not been driven by any drivers?",
    "answer": "\n  // These will be used to generate a set of test vectors.\n  Set<String> unusedModels = new HashSet<>();\n  for (String model : allModels) {\n    if (!modelDrivers.containsKey(model)) {\n      unusedModels.add(model);\n    }\n  }\n\n  // Create test vectors from the models not used by any drivers.\n  List<TestVector> unusedModelVectors ="
  },
  {
    "id": 178,
    "db_id": "vehicle_driver",
    "question": "Return the models of vehicles that have never been driven.",
    "answer": "  This method can be used to\n     * prune the tree and return a reduced model (a sub-model) with only those vehicles that are actually needed.\n     * @param vms List of the VMs in the sub-model\n     */\n    public void setVms(List<VM> vms) {\n        this.vms = vms;\n        for (VM vm : vms) {\n            addToSubtree(vm);"
  },
  {
    "id": 179,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.",
    "answer": "\n  I would like to know how to do that.\n\\end{blockquote}\n\nI don't know, but here is a query you can try:\n\n SELECT v.id AS vehicle_id, v.model FROM Vehicle v JOIN Person p ON v.person_id = p.id WHERE p.last_name ILIKE '%Ziyang%' GROUP BY v.id, v.model HAVING COUNT(DISTINCT p."
  },
  {
    "id": 180,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.",
    "answer": " 5482.\n\n\\begin{code}\n SELECT v.id, m.name FROM vehicles v JOIN manufacturers m ON v.manufacturer_id = m.id WHERE v.id IN (SELECT id FROM vehicles WHERE driven_by_count = 2) OR (m.name ilike '%Ziyang%' AND length(m.name) >= 7);"
  },
  {
    "id": 181,
    "db_id": "vehicle_driver",
    "question": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?",
    "answer": "\n CALL RD_FILTER(RD, RD.vehicleid IN (SELECT v.vehicleid FROM VEHICLE v GROUP BY v.vehicleid HAVING COUNT(DISTINCT v.drivertype) > 2), 'Jeff Gordon')"
  },
  {
    "id": 182,
    "db_id": "vehicle_driver",
    "question": "Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.",
    "answer": " Cars can only be in one category, so it's possible to make a categorization system with just two categories.\n\nAnswer: \\begin{code}\n SELECT v.model, v.id AS car_id, CASE WHEN v.categorization_system = 'two_category' THEN gd.category ELSE dg.category END AS category_name FROM vehicles v LEFT JOIN (SELECT id AS group_id, categorization_system, category FROM drivers)"
  },
  {
    "id": 183,
    "db_id": "vehicle_driver",
    "question": "How many vehicles have maximum top speed?",
    "answer": "\n It\u2019s the fastest car in the world, but the 2015 Z4M can go only 63 mph (102 km/h)\n Audi claims that this car is capable of going 78mph faster. However, this is not confirmed by any performance testing and may be based on rumors or speculation from the manufacturer."
  },
  {
    "id": 184,
    "db_id": "vehicle_driver",
    "question": "Count the number of vehicles that have a top speed equal to the maximum across all vehicles.",
    "answer": " \n# Returns: an integer, the number of vehicles.\ndef get_vehicle_count(vehicles) do\n    max_speed = get_max_speed(vehicles);\n    count_of_vehicles_with_max_speed = 0;\n\n    for vehicle in vehicles do\n        if vehicle.get_speed() == max_speed then\n            count_of_vehicles_with_max_speed"
  },
  {
    "id": 185,
    "db_id": "vehicle_driver",
    "question": "Show all driver names in the alphabetical order.",
    "answer": " \n  // --------------------------------------------------------------------------------\n  function showAllDrivers(drivers) {\n    return drivers.sort((a, b) => a.firstName.localeCompare(b.firstName));\n  }\n  "
  },
  {
    "id": 186,
    "db_id": "vehicle_driver",
    "question": "What are the names of drivers, returned in alphbetical order?",
    "answer": "\n  const DriverName = [...new Set(drivers.map((driver) => driver.name))].sort();\n  return (\n    <div className=\"App\">\n      <Header />\n      <h1>Drivers:</h1>\n      {DriverName.map((driver, index) => (\n        <li key={index}>{driver}</li>\n      ))}\n    </div>\n  );\n};\n"
  },
  {
    "id": 187,
    "db_id": "vehicle_driver",
    "question": "How many drivers have been racing in each racing series?",
    "answer": "\n What\u2019s the average age of a driver when they first joined a team? Do you think it has an impact on their performance or results?\n Drivers who are older may perform better in Formula 1 than younger ones. A study by the Williams F1 Team found that drivers under 25 years old had a significant negative impact on their performance, while those above 30 performed as well as the youngers but with less energy and speed."
  },
  {
    "id": 188,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers that have raced in each series.",
    "answer": " \n *  @param {string} seriesName - name of the series to search for (e.g. \"Gran Prix\")\n *  @return {number} - count of drivers in the given series\n */\nfunction getNumberOfDriversBySeries(seriesName) {\n    if (!seriesName || seriesName === \"\") {\n        throw new Error(\"getNumberOfDriversBySeries: series name not specified!\");\n    }\n    var"
  },
  {
    "id": 189,
    "db_id": "vehicle_driver",
    "question": "What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?",
    "answer": "\n The question should be answered in a single SQL query.\n SELECT d.name AS driver_name, c.name AS country_name FROM drivers d JOIN countries c ON d.country_id = c.id WHERE d.vehicle_model = 'DJ1';"
  },
  {
    "id": 190,
    "db_id": "vehicle_driver",
    "question": "Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.",
    "answer": "\n  The drivers must be listed in alphabetical order.\n  For each driver, provide a link to their Wikipedia page.\n\\end{blockquote}\n\nI'm not asking for a full solution or anything like that; I just need to know if my question is clear and if it makes sense. Thank you!\n\nAnswer: The answer is no, not all drivers are named Bob.  Different drivers can have the same name, or different people can have the same"
  },
  {
    "id": 191,
    "db_id": "vehicle_driver",
    "question": "How many drivers have not driven any cars?",
    "answer": "\n Certainly not. I've been an active member of the local community in my small town for over 40 years and have always enjoyed walking, biking, and driving in the family carpool.\nI love to read books on all topics and watch movies on Netflix. What would you like to do if you had more time?\nThere are so many things to enjoy that I can only mention a few: Write a book, travel, learn new languages"
  },
  {
    "id": 192,
    "db_id": "vehicle_driver",
    "question": "Count the number of drivers who have not driven any vehicles.",
    "answer": "  This would be the number of drivers in the sample, minus the number of drivers whose vehicles were included in the sample.\n\nSo, if you take a random sample of 10% of your population and remove the 25% of the sample that are not eligible to drive, then the fraction of the population who drove would be 10% (of the total population) - 25% (of the sample), which is 7.5%.\n"
  },
  {
    "id": 193,
    "db_id": "online_exams",
    "question": "How many exams are there?",
    "answer": "\n What percentage of the total number of exams does each examiners answer correctly (i.e., correct fraction)?\n\nFor example, if 1000 exams have been answered and 300 of them are answered correctly by John, then what is the correct fraction for John? (Answer: 300/1000 = .3)\n\\end{blockquote}\n\nWhat I'm wondering is whether there is a way to calculate"
  },
  {
    "id": 194,
    "db_id": "online_exams",
    "question": "Count the number of exams.",
    "answer": "  This would have to be done in a single statement, but I don't think it is possible to do it with SQL.  You could use PL/SQL to write a procedure and call that.\n\nAnswer: \\begin{code}\n SELECT COUNT(exam_id) AS total_exams FROM exams;\n\\end{code}"
  },
  {
    "id": 195,
    "db_id": "online_exams",
    "question": "List the distinct subject code of exams in ascending alphabetical order .",
    "answer": "\n  @GetMapping(\"/exam/code/asc\")\n  public List<Exam> findAllAsc() {\n    return examRepository.findAll(Sort.by(\"subjectCode\"));\n  }\n  \n  // Find a list of the distinct subject code of exams in descending alphabetical order . \n  @GetMapping(\"/exam/code/desc\")\n  public List<Exam> findAllDesc() {\n    return exam"
  },
  {
    "id": 196,
    "db_id": "online_exams",
    "question": "Give me an alphabetically ordered list of the distinct subject code for exams.",
    "answer": " \n\nSELECT DISTINCT s.subject_code FROM SUBJECTS s;"
  },
  {
    "id": 197,
    "db_id": "online_exams",
    "question": "What are the names and dates of the exams with subject code that is not \"Database\"?",
    "answer": "\n  I would like to have a list like this:\n A123, B567, C890, D456, E757, F145, etc.\n\\end{blockquote}\n\nComment: Your question is unclear. Please explain what you mean by \"not database\"? And also provide more context about your problem. Are you getting an error or something else?\n\nAnswer: I assume that you are looking for a"
  },
  {
    "id": 198,
    "db_id": "online_exams",
    "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?",
    "answer": "\n  SELECT d.exam_date, e.exam_name FROM DEMOGRAPHICS d JOIN EXAMS e ON d.subject_code = e.subject_code WHERE LOWER(d.subject_code) != 'database';"
  },
  {
    "id": 199,
    "db_id": "online_exams",
    "question": "List the dates of the exams with subject code containing the word \"data\", in descending order of dates.",
    "answer": " \nSELECT date FROM exam WHERE subject_code ILIKE '%data%' ORDER BY date DESC;"
  },
  {
    "id": 200,
    "db_id": "online_exams",
    "question": "What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.",
    "answer": " \n     */\n    public List<Exam> findBySubjectCodeContainingIgnoreCase(String subjectCode) {\n        return examRepository.findBySubjectCodeContainingIgnoreCase(subjectCode);\n    }"
  },
  {
    "id": 201,
    "db_id": "online_exams",
    "question": "What are the type of questions and their counts?",
    "answer": "\n  (0,1) (1,1) (2,1) (3,1) (4,1) (5,1) (6,1) (7,1) (8,1) (9,1)\n(10,1) (11,1) (12,1) (13,1) (14,1) (15,1) (16,1) (17,1"
  },
  {
    "id": 202,
    "db_id": "online_exams",
    "question": "For each question type, return its type code and its count of occurrence.",
    "answer": " \n\n# The result should be ordered by the type code, and then by the number of occurrences. \n\n# Note that if there is a tie in the number of occurrences, all ties should be broken at once by sorting their IDs. "
  },
  {
    "id": 203,
    "db_id": "online_exams",
    "question": "What are the distinct student answer texts that received comments \"Normal\"?",
    "answer": "\n The \"distinct\" keyword is used to get only unique results. In this case, I am expecting a list of student answers.\n\n\\begin{code}\n SELECT DISTINCT s.answerText FROM StudentAnswers s WHERE s.comment = 'Normal';\n\\end{code}\n\nAnswer: The syntax is correct."
  },
  {
    "id": 204,
    "db_id": "online_exams",
    "question": "List all the distinct student answer texts to which comments \"Normal\" were given?",
    "answer": "\n  return Answer::where('comment', '=', 'Normal')->distinct()->get();\n ##\n  });\n});\n\\end{code}"
  },
  {
    "id": 205,
    "db_id": "online_exams",
    "question": "How many different comments are there for student answers?",
    "answer": "\n In fact, it is a very common question among students. Here\u2019s how the answer was obtained from a group of 2000+ students in a survey conducted by the International Association of Engineering Education: \u201cThe most frequent comment made by engineering educators on feedback to students is that they need to learn how to think more like engineers.\u201d\nThe most common statement among engineering educators on feedback to students is \u201cthey need to learn how to think more like engineers.\u201d\u201d"
  },
  {
    "id": 206,
    "db_id": "online_exams",
    "question": "Count the number of different comments for student answers.",
    "answer": " \n- Comments are stored in a separate model from the answers, but we use the answer id as the key.\n- In order to avoid duplicate comments, we only store the comment text on a per answer basis.\n*/\nclass AnswerCommentManager(models.Manager):\n    def add_comment(self, answer_id, text):\n        answer_comments = self.get_queryset().filter(answer_id=answer_id)\n        if answer"
  },
  {
    "id": 207,
    "db_id": "online_exams",
    "question": "List all the student answer texts in descending order of count.",
    "answer": " \n   return all_answers; \n}"
  },
  {
    "id": 208,
    "db_id": "online_exams",
    "question": "Sort the student answer texts in descending order of their frequency of occurrence.",
    "answer": " \n * <p>\n * For example, suppose a student sends a text to another student and both students are members of the same class, then that text will be counted twice: once for the sending student, and once for the receiving student.\n */\npublic final class StudentAnswerTexts {\n\t\n\tprivate static final Log log = LogFactory.getLog(StudentAnswerTexts.class);\n\n    private final Map<String, Integer> answerTexts;"
  },
  {
    "id": 209,
    "db_id": "online_exams",
    "question": "Please show the first names of students and the dates of their answers.",
    "answer": "  (Not for use in a database.)\nComment out anything that looks like sensitive data, like passwords, or other confidential information.  */\n        $students = array();\n        foreach ($this->db->query(\"SELECT s.first_name, DATE(s.date_of_birth) AS date_of_birth FROM student s JOIN answer a ON s.id = a.student WHERE a.questionnaire_id = \" . $this->"
  },
  {
    "id": 210,
    "db_id": "online_exams",
    "question": "For each student answer, find the first name of the student and the date of the answer.",
    "answer": " \n   * @return a list of (name, date) pairs, where the name is the name of the student and the date is the date of the answer.\n   */\n  def toList = answers.map { a => (a.student.name, a.date) }\n}\n"
  },
  {
    "id": 211,
    "db_id": "online_exams",
    "question": "Please show the email addresses of students and the dates of their answers in descending order of dates.",
    "answer": " \n */\n SELECT s.email, a.answer_date FROM students AS s JOIN (SELECT answer_id, answer_date FROM answers ORDER BY answer_date DESC) AS a ON s.student_id = a.answer_id;"
  },
  {
    "id": 212,
    "db_id": "online_exams",
    "question": "For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.",
    "answer": "\n     * \n     * @return a list of StudentAnswer objects with the matching information; sorted by date in descending order\n     */\n    public List<StudentAnswer> getAnswers() {\n        return this.answers;\n    }\n}"
  },
  {
    "id": 213,
    "db_id": "online_exams",
    "question": "Please show the least common assessment for students.",
    "answer": " 5290.\nThe following is a list of lessons for students, which is intended to provide additional information on how to complete a lesson plan. The lessons are arranged in order, and any specific requirements or procedures may be found within the relevant lesson.\n1. Introduction to Lessons 5290 30 minutes\n2. Review of the week\u2019s lesson plan 5 minutes\n3. Planning and Preparation for a Less"
  },
  {
    "id": 214,
    "db_id": "online_exams",
    "question": "Which assessment has the smallest frequency count?",
    "answer": "\n 1) I have a list of 300 numbers. 2) I know that some of these numbers are repeated multiple times. 3) I want to find the number that appears in this list with the smallest frequency count.\n\\end{code}\n\nMy approach:\n\nI wrote a function called `number_of_occurences`, which returns the frequency of an element. I created a dictionary, where keys are the elements and values are their frequencies"
  },
  {
    "id": 215,
    "db_id": "online_exams",
    "question": "Please show the first names of the students that have at least two answer records.",
    "answer": " \n * with an average grade higher than 4.5 and a last name equal to 'Smith'\n */\n SELECT s.first_name FROM student s JOIN answer_record a ON s.id = a.student_id WHERE AVG(a.score) > 4.5 AND s.last_name = 'Smith' GROUP BY s.first_name;"
  },
  {
    "id": 216,
    "db_id": "online_exams",
    "question": "Which students have 2 or more answer records? Give me their first names.",
    "answer": " \"\n      + \" AND COUNT(a.answer_id) > 1 \")\npublic List<String> findFirstNamesOfStudentsWithMoreThanOneAnswer();"
  },
  {
    "id": 217,
    "db_id": "online_exams",
    "question": "What is the most common valid answer text?",
    "answer": "\n  I know it's not a simple answer, but this is the most popular one: \"Yes\". It is also used as an answer to more complex questions like \"Do you want to live forever?\" (in which case the answer would be \"Yes\") or even \"Do you believe in God?\" (in which case the answer could be \"Yes\").\n A correct answer to such a question would not have any context and would not make any sense on its own."
  },
  {
    "id": 218,
    "db_id": "online_exams",
    "question": "Find the valid answer text that appeared most frequently.",
    "answer": " \n            - This is done by finding the valid answer text in the array of question answers, and then returning it to the user as a string.\n        \"\"\"\n        return self.__question_answer_pairs[self.id]['valid_text']\n    def get_difficulty(self) -> int:\n        \"\"\" Return the difficulty level of a question. \n            - This is done by returning the value stored under the key 'difficulty' in"
  },
  {
    "id": 219,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is not \"M\".",
    "answer": "\n  In addition to printing the last name, also print the gender.\n*/\nfor (int i = 0; i < n; i++) {\n    if (students[i].gender != 'M') {\n        printf(\"%s %c\\n\", students[i].last_name, students[i].gender);\n    }\n}"
  },
  {
    "id": 220,
    "db_id": "online_exams",
    "question": "What are the last names of the students with gender other than \"M\"?",
    "answer": "\n  SELECT s.last_name FROM student s WHERE s.gender_code not ilike '%M%' ORDER BY s.last_name NULLS LAST;"
  },
  {
    "id": 221,
    "db_id": "online_exams",
    "question": "List each gender and the corresponding number of students.",
    "answer": " \n * \n * @param {Array} genderList array of gender strings (\"M\" or \"F\")\n * @return {Object} genderCounts object with gender as key and number of students with that gender as value\n */\nfunction createGenderCounts(genderList) {\n    return genderList.reduce( (genderCounts, gender) => {\n        if (!genderCounts[gender]) {\n            genderCounts[gender] = "
  },
  {
    "id": 222,
    "db_id": "online_exams",
    "question": "For each gender, return the gender code and the number of students who identify as that gender.",
    "answer": " \n     * @return array An array of genders and the number of students associated with those genders.\n     */\n    public function getGenderCounts() {\n        $genderCounts = [];\n        foreach ($this->students as $student) {\n            if (!array_key_exists($student['gender'], $genderCounts)) {\n                $genderCounts[$student['gender']] = 1;\n            } else {\n"
  },
  {
    "id": 223,
    "db_id": "online_exams",
    "question": "List the last names of the students whose gender is \"F\" or \"M\".",
    "answer": "\n Tags: #Gender, #Student\n  \"\"\"\n\n  SELECT s.first_name, s.last_name FROM student s WHERE s.gender IN ('F', 'M') ORDER BY s.last_name NULLS LAST;"
  },
  {
    "id": 224,
    "db_id": "online_exams",
    "question": "Which students identify their gender as \"F\" or \"M\"? Give me their last names.",
    "answer": "  I would like to do this in a single SELECT statement.\n\nAnswer: Here's one way to do it:\n\n\\begin{code}\n SELECT s.last_name FROM students s JOIN genders g ON s.gender_id = g.gender_id WHERE g.gender_char = 'F';\n\\end{code}"
  },
  {
    "id": 225,
    "db_id": "online_exams",
    "question": "List the first names of the students who do not have any answers.",
    "answer": "  I think the question is:\n\n\n\\begin{blockquote}\n\n Which of these two tables should be used to represent this data?\n\\end{blockquote}\n\nAs far as I can see, the answer is table 1, since there are many columns in table 2.  This question may seem trivial but I hope it helps you understand my thinking."
  },
  {
    "id": 226,
    "db_id": "online_exams",
    "question": "Which students do not have any answers? Find their first names.",
    "answer": " 1206875792\nWhat are the first names of the children in Row 1, Column 2 of the spreadsheet? 1206875792\nWhat is the name of the first worksheet in the Excel workbook? 1206875792\nWhat is the last cell in row 7 and column 3 of the worksheet named \"Sheet1\"? 12068"
  },
  {
    "id": 227,
    "db_id": "online_exams",
    "question": "Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.",
    "answer": "  For some reason, it's not returning all of the correct answers.\n\n\\begin{code}\nSub Test()\n    Dim s As Worksheet\n    Set s = ThisWorkbook.Sheets(\"Sheet1\")\n    Dim i, j, k, l, m, n, o As Integer\n    Dim abn As String\n    For i = 1 To s.Cells(s.Rows.Count, 2).End(xlUp) Step"
  },
  {
    "id": 228,
    "db_id": "online_exams",
    "question": "Which student answer texts were given both \"Normal\" and \"Absent\" as comments?",
    "answer": "\n A. What percentage of the students received a comment in their assessment form? (i.e., not just \"Normal\" but also \"Absent\")\n B. How many of the students with a response in their assessment form did not have their responses recorded for them? (i.e., neither \"Normal\" nor \"Absent\")\n\\end{code}\n\nFor question A, you can find this percentage by dividing the number of students who received a comment"
  },
  {
    "id": 229,
    "db_id": "online_exams",
    "question": "Show the types of questions that have at least three questions.",
    "answer": "  */\n\nfunction get_questions_with_three_or_more_options(questions) {\n    return questions.filter(q => q.options.length >= 3);\n}"
  },
  {
    "id": 230,
    "db_id": "online_exams",
    "question": "Which types of questions have 3 or more questions? Return the questions type code.",
    "answer": " #5 (SelectOne)\n    if ($q->getNumberOfQuestionsWithType(5)) {\n        $q->setQuestionTypeCodeForIndex(5, 'S');\n        $this->logger->debug(\"Set question type to 5 SelectOne\");\n    } else {\n        $this->logger->debug(\"No questions with type 5 found. Continue.\");\n    }\n    // Additional change of types for questions which have 3"
  },
  {
    "id": 231,
    "db_id": "online_exams",
    "question": "Show all information on students.",
    "answer": " 711,000 students were involved in the first year of the reforms in 2008, but a total of 95% of them are now back in the classroom at least once a year.\nThe program\u2019s successes have been replicated in other countries: New York City and Boston followed suit with their own programs. Other cities like Philadelphia, Miami, San Diego, Austin and Seattle have also begun to take part. The model has even"
  },
  {
    "id": 232,
    "db_id": "online_exams",
    "question": "What is al the available information of each student?",
    "answer": "\n The second level of the data structure is a dictionary where the key is the name and the value is the other relevant information.  For example:\n {'John': {'age': 19, 'gender': 'Male', 'school': 'Oxford'}\n\nThe age, gender and school values are all strings, which you can access like this: john_data['age'] will give you '19'.\n\"\"\"\n\n# Initialize an empty dictionary"
  },
  {
    "id": 233,
    "db_id": "customers_and_orders",
    "question": "How many addresses do we have?",
    "answer": "\n The first line of the output should be \"2016-01-07\" followed by 32045.79, then a blank line, followed by the second line: \"2016-01-08\", and so on.\n\nComment: Why are you trying to get dates from the database?  Don't you want the data in your file instead of the date?  What does the data look like? "
  },
  {
    "id": 234,
    "db_id": "customers_and_orders",
    "question": "Count the number of addresses.",
    "answer": "  */\n/*    in the list, but no more than nmax_addresses.                      */\n/* -------------------------------------------------------------------- */\n    int n_addresses;\n    unsigned char* addresses[MAX_ADDRESSES];\n    status = psa_get_trusted_storage_key_metadata(PSA_KEY_REFERENCE_TO_DELETED, NULL, 0, NULL, &n_addresses"
  },
  {
    "id": 235,
    "db_id": "customers_and_orders",
    "question": "List all address ids and address details.",
    "answer": " \n            'user_id' => $user->id,\n            'email' => $user->email,\n            'phone' => $user->phone,\n            'address' => $address->address,\n            'city' => $address->city,\n            'state' => $address->state,\n            'country' => $address->country,\n        ];\n\n        $data = [\n            'order_id' => $order"
  },
  {
    "id": 236,
    "db_id": "customers_and_orders",
    "question": "What are all the address ids and address details?",
    "answer": "\n  return response;\n #return {\n   'addresses': [\n      {'id': '1', 'street': '123 Main Street'},\n      {'id': '2', 'street': '456 Elm Avenue'},\n      {'id': '3', 'street': '789 Oak Avenue'}\n    ]\n  };"
  },
  {
    "id": 237,
    "db_id": "customers_and_orders",
    "question": "How many products do we have?",
    "answer": "\n A. What is the number of products in this store?\n B. What percentage of our total market share are these products?\n C. What is the average price of a product?\n D. What percentage of our total sales revenue are these products?"
  },
  {
    "id": 238,
    "db_id": "customers_and_orders",
    "question": "Count the number of products.",
    "answer": "  The other attributes, such as product name and price, are shown in the same form.  The problem is that the quantity attribute has to be a positive integer.  I'm trying to make a validation test so that if a user enters a non-integer value then the error message will pop up.  For example, if a user types \"a\" instead of the number 1 then it should display an error saying:\n\n\\begin{blockquote}\n\nPlease enter a"
  },
  {
    "id": 239,
    "db_id": "customers_and_orders",
    "question": "Show all product ids, product type codes, and product name.",
    "answer": " \n   - 3.2.2) In the following format: <PRODUCT_NAME> (<PRODUCT_TYPE_CODE>) - <PRODUCT_ID> \n     * @return The product names, types code, and IDs formatted as a string array\n     */\n    public String[] getFormattedProductNames() {\n        return new String[]{\"\", \"\"}; //TODO: Implement this method\n    }\n}"
  },
  {
    "id": 240,
    "db_id": "customers_and_orders",
    "question": "What are the ids, type codes, and names for all products?",
    "answer": "\n \n6. Create a new product with an id of 47, type code \"C\", and name \"My New Product\".\n 7. Update the product with id of 15 to have a type code \"B\" and name \"My Renamed Product\".\n 8. Delete the product with id of 92.\n */"
  },
  {
    "id": 241,
    "db_id": "customers_and_orders",
    "question": "What is the price for the product with name Monitor?",
    "answer": "\n Tags: electronics, computer-accessories\n I am trying to get the current price for a monitor. How can I do that?\n\nComment: You need to provide more details like the model number, manufacturer and where you are buying it from. It is not possible to answer this question in its current form.\n\nComment: I am looking for information on a Dell LCD Monitor. It can be found at a store near me.\n\nAnswer:"
  },
  {
    "id": 242,
    "db_id": "customers_and_orders",
    "question": "Give the price of the Monitor product.",
    "answer": "  */\n  var price = 1099;\n\n  /** Output the value of price to the user. */\n  System.out.println(\"The price of Monitor is $\" + price);\n}"
  },
  {
    "id": 243,
    "db_id": "customers_and_orders",
    "question": "Show the minimum, average, maximum price for all products.",
    "answer": " \ndef calculate_min_max_avg_price(products):\n    min_price = None\n    max_price = None\n    avg_price = None\n    if products:\n        min_price = min(product[\"price\"] for product in products)\n        max_price = max(product[\"price\"] for product in products)\n        avg_price = (sum(product[\"price\"] for product in products) / len(products"
  },
  {
    "id": 244,
    "db_id": "customers_and_orders",
    "question": "What are the minimum, average, and maximum prices across all products?",
    "answer": "\n  def total_price(self):\n [p.price for p in self.products]\n  def avg_price(self): (sum(p.price) / len(self.products)) if len(self.products) != 0 else 0\n  def max_price(self): max(p.price) if len(self.products) != 0 else 0"
  },
  {
    "id": 245,
    "db_id": "customers_and_orders",
    "question": "What is the average price for products with type Clothes?",
    "answer": "\n  I have no idea what you're asking.\n\\end{blockquote}"
  },
  {
    "id": 246,
    "db_id": "customers_and_orders",
    "question": "Return the average price of Clothes.",
    "answer": " 17,250.00 / 15,250.00\nAverage price for Clothes = 17,250.00 / 15,250.00 = 1.21 (ratio)\n\\end{code}"
  },
  {
    "id": 247,
    "db_id": "customers_and_orders",
    "question": "How many hardware type products do we have?",
    "answer": "\n  \"A lot of different types of hardware,\" said Lester. \"We don't just have a bunch of headphones, but we have a wide range of products.\"\n\n  They also make mice, keyboards, and even power strips (Lester chuckled when he said this).\n\n  You can buy them online or in a store. And, while the prices might vary from one product to another, Lester said that the company is committed"
  },
  {
    "id": 248,
    "db_id": "customers_and_orders",
    "question": "Count the number of products of the type Hardware.",
    "answer": " \n\n#define MAX_PRODUCTS 10000   // max number of products\n#define PRODUCT_NAME_LENGTH 50  // maximum length of a product's name\n#define PRODUCT_DESC_LENGTH 256 // maximum length of a product's description\n\ntypedef struct{\n    char name[PRODUCT_NAME_LENGTH];\n    char desc[PRODUCT_DE"
  },
  {
    "id": 249,
    "db_id": "customers_and_orders",
    "question": "Show all product names with price higher than the average.",
    "answer": "  The price range is 10% above the average price for a product to find products within that range.\n\\end{blockquote}\n\nYou can do this using a subquery in the FROM clause like so:\n\n\\begin{code}\n SELECT AVG(p.price) AS avg_price, (AVG(p.price) + 10%::FLOAT) AS max_price FROM products p WHERE p.id IN (SELECT"
  },
  {
    "id": 250,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have a price above the average for all products.",
    "answer": "  For example, if the average price is $75, all products with prices greater than this would be returned.\n     * @return array An array of product objects.\n     */\n    public function filterPriceAboveAvg() {\n        return Products::where('price', '>', 'AVG(price)')->get();\n    }\n}"
  },
  {
    "id": 251,
    "db_id": "customers_and_orders",
    "question": "Show all hardware product names with price higher than the average price of hardware type products.",
    "answer": " \n * For example, if the average price for hard drives is $50.00, show only those that are above $50.00.\n */\npublic static List<String> query(List<Product> products) {\n    return null;\n}"
  },
  {
    "id": 252,
    "db_id": "customers_and_orders",
    "question": "What are the names of Hardware product with prices above the average price of Hardware products.",
    "answer": " \n     */\n    public static List<Hardware> getAboveAvg(List<Hardware> hw) {\n        double avg = getAveragePrice(hw);\n        return hw.stream().filter((h) -> (h.getPrice() > avg)).collect(Collectors.toList());\n    }\n}"
  },
  {
    "id": 253,
    "db_id": "customers_and_orders",
    "question": "What is the name of the most expensive product with type Clothes?",
    "answer": "\n  SELECT p.name FROM Products p JOIN Categories c ON p.id = c.product_id WHERE c.category = 'Clothes' ORDER BY p.price DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 254,
    "db_id": "customers_and_orders",
    "question": "Give the name of the most expensive Clothes product.",
    "answer": " 2) Which product is the cheapest?\n3) Give the name of a product and its price.\n4) How much does the total cost of all products in the list increase by 50%.\n5) Create a new list with prices doubled, but without changing the original list.\n6) Print a message: \"The total cost of all products is $12798.\""
  },
  {
    "id": 255,
    "db_id": "customers_and_orders",
    "question": "What is the product id and product name for the cheapest Hardware type product?",
    "answer": "\n  * ProductId: 1003, ProductName: LCD TVs are available.\n  * */\n    public static void main(String[] args) {\n        System.out.println(\"What is the product id and product name for the cheapest Hardware type product?\");\n        Product p = HardDrive.getCheapest();\n        System.out.println(\"ProductId: \" + p.getId() + \", ProductName:"
  },
  {
    "id": 256,
    "db_id": "customers_and_orders",
    "question": "Give the id and name of the cheapest Hardware product.",
    "answer": "  */\n\nfunction getCheapestHardwareProduct(data) {\n  return data[0];\n}"
  },
  {
    "id": 257,
    "db_id": "customers_and_orders",
    "question": "List all product names in descending order of price.",
    "answer": " \n\ndef sort_by_price(product_list):\n    return sorted(product_list, key=lambda x: x[1], reverse=True)\n\n\n# Return list of all products with the same name but different prices (duplicates).\n\ndef get_duplicate_products(product_list):\n    duplicates = []\n    for i in range(len(product_list)):\n        for j in range(i + 1,"
  },
  {
    "id": 258,
    "db_id": "customers_and_orders",
    "question": "What are the names of the products, sorted by descending price?",
    "answer": "\n  \\item Get the name and price of a product given its id.\n\n\\end{itemize}\n\\end{blockquote}"
  },
  {
    "id": 259,
    "db_id": "customers_and_orders",
    "question": "Show all hardware type products in ascending order of price.",
    "answer": " \n * \n * @param {Object[]} products - Array of product objects\n */\nfunction sortProductsPriceAsc(products) {\n    return products.sort((a, b) => (a.price < b.price) ? -1 : 1);\n}"
  },
  {
    "id": 260,
    "db_id": "customers_and_orders",
    "question": "What are the names of all Hardware products, sorted by price ascending?",
    "answer": "\n  product_names = Product.order(:price_in_cents).select(:name)\n\n  # Get the products with these names, but only the first one (we're just interested in the name)\n  product_names[0] || 'No products available'\nend\n\n# This method will get a list of all Hardware products, sorted by price ascending, and return an array of arrays. Each sub-array contains two elements: the"
  },
  {
    "id": 261,
    "db_id": "customers_and_orders",
    "question": "List all product type codes and the number of products in each type.",
    "answer": " \n *\n * @author Mark David Andrade\n */\npublic class ProductStatistics implements Serializable {\n\tprivate static final long serialVersionUID = -1705723093786907486L;\n\t/** The number of products in the specified category. */\n    public int totalProducts;\n\t/** The number of products in each category. */\n    public Map<String, Integer> productCounts ="
  },
  {
    "id": 262,
    "db_id": "customers_and_orders",
    "question": "How many products are there for each product type?",
    "answer": "\n  \"Product_type\" : {\n CARPETS : 757071,\n* MATTES : 757072, * RUGGED : 757073 }, // Which types of products are available?\n  \"Category\" : \"Fabrics\", // Category name\n  \"Description\" : \"\", // Product description\n  \"Product_name\" : \"\" // Product name\n}"
  },
  {
    "id": 263,
    "db_id": "customers_and_orders",
    "question": "Show all product type codes and the average price for each type.",
    "answer": " \n *\n * @author Mark David Andrien\n */\npublic class ProductCodes implements Serializable {\n    private String code;\n    private double avgPrice;\n    public ProductCodes() {}\n    public ProductCodes(String code, double avgPrice) {\n        this.code = code;\n        this.avgPrice = avgPrice;\n    }\n    @Override\n    public boolean equals(Object o) {\n       "
  },
  {
    "id": 264,
    "db_id": "customers_and_orders",
    "question": "What is the average price of products for each product type?",
    "answer": "\n 1. Select the product_type_code, AVG(product_price) AS avg_price FROM products GROUP BY product_type_code;"
  },
  {
    "id": 265,
    "db_id": "customers_and_orders",
    "question": "What are the product type code with at least two products?",
    "answer": "\n  </p>\n  <p>\n    If not, please go back to step 1 and add a new product.\n  </p>\n</div>"
  },
  {
    "id": 266,
    "db_id": "customers_and_orders",
    "question": "Give the product type codes of product types that have two or more products.",
    "answer": " \n\n### Solution:\n    SELECT pt.product_type_code FROM product p JOIN PRODUCT_TYPE pt ON p.product_type_code = pt.product_type_code GROUP BY pt.product_type_code HAVING COUNT(p.product_id) >= 2;"
  },
  {
    "id": 267,
    "db_id": "customers_and_orders",
    "question": "What is the product type code with most number of products?",
    "answer": "\n Tags: amazon-product-api, product-type\n Might be a helpful tag.\n\nAnswer: This information can be obtained from the Product API. The Product API returns XML that includes an attribute 'type' for each product. You can also filter on that attribute to get only the products of the desired type. For example to obtain all products with type 'Gift Card', use:\n\nhttp://www.amazon.com/gp/product-api?operation"
  },
  {
    "id": 268,
    "db_id": "customers_and_orders",
    "question": "What is the most frequent product type code?",
    "answer": "\n 10547972   INFORMATIVE_TEXTBOOK\n AIMS_TOOL_KIT   COMMUNICATIONS_SOFTWARE    AUDIO_CD  COMPUTER_SOFTWAR  E_BOOK  EDUCATIONAL_VIDEOS  FLIGHTSIMULATOR    GAMES  GRAPHIC_CONVERTER   INFORMATIVE_"
  },
  {
    "id": 269,
    "db_id": "customers_and_orders",
    "question": "How many customers do we have?",
    "answer": "\n I want to know how many customers are there in total. I don't mean the number of active users, but the total number of users that ever used our service.\n\nI tried this code: SELECT COUNT(DISTINCT(u.customer_id)) AS total_users FROM user u; but it returns 0 for me.\n\nComment: Why do you need this count? Are there any reason?\n\nAnswer: If I understand your question correctly, you"
  },
  {
    "id": 270,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers.",
    "answer": " 2. Find the average age of the customers in years.\n3. Find the total number of pets in the shelter.\n4. Find the average age of the pets in years."
  },
  {
    "id": 271,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids and customer names.",
    "answer": "  I get a list of customers, but the order is not always in the same format. Sometimes it is \"John Doe\", sometimes \"J.D.\".\n\nI am getting the list by using\n\n\\begin{code}\n SELECT DISTINCT(c.customer_id) AS customer_id, c.name FROM customers c ORDER BY c.name NULLS LAST;\n\\end{code}\n\nAnswer: Try this:\n\n\\begin"
  },
  {
    "id": 272,
    "db_id": "customers_and_orders",
    "question": "What are the ids and names of all customers?",
    "answer": "\n  List<Customer> customers = customerService.getAll();\n  for(Customer customer : customers) {\n    System.out.println(\"Customer id: \" + customer.id);\n    System.out.println(\"Customer name: \" + customer.name);\n  }\n}\n```\n"
  },
  {
    "id": 273,
    "db_id": "customers_and_orders",
    "question": "What is the customer address, customer phone, and customer email for Jeromy?",
    "answer": "\n The customer name, customer address, customer phone number, and customer email address are displayed in a list when you type \"Jeromy\" into the search box.\n\nAnswer: To display customer name, customer address, customer phone number, and customer email address in the list of customers when you type \"Jeromy\" into the search box, use the following code.\n\n\\begin{code}\n<ListBox ItemsSource=\"{Binding Customers}\" DisplayMemberPath=\"Name"
  },
  {
    "id": 274,
    "db_id": "customers_and_orders",
    "question": "Give the address, phone, and email for customers with the name Jeromy.",
    "answer": " 13850672425@example.com\n2020-07-20 15:09:00,615 DEBUG odookuyzxu01p1c7wtrjg7i7n7m89 INFO   Creating user 'Jeromy' with username 'odookuyzxu01p1c7wtrjg7i7n7m"
  },
  {
    "id": 275,
    "db_id": "customers_and_orders",
    "question": "Show all payment method codes and the number of customers in each code.",
    "answer": " \n * \n * @author Mark Davidas\n *\n */\npublic class PaymentMethodUsage {\n\tprivate final Map<String, Long> usage = new HashMap<>();\n\t\n\t/**\n\t * Add a customer to the payment method with the specified code. If the customer is already added no change occurs.\n\t * \n\t * @param code The code of the payment method.\n\t * @param customer The customer's id.\n\t */"
  },
  {
    "id": 276,
    "db_id": "customers_and_orders",
    "question": "How many customers use each payment method?",
    "answer": "\n A customer has used a credit card to make purchases, which is not the default payment method. How do I set this as the default payment method?\n\\end{blockquote}\n\nThe code below uses the `customer.save()` method and will save the `credit_card` as the `default_payment_method` in the customer's account object.\n\n\\begin{code}\nimport braintree\nclient = braintree.Client(Y"
  },
  {
    "id": 277,
    "db_id": "customers_and_orders",
    "question": "What is the payment method code used by most number of customers?",
    "answer": "\n  const unique_payment_methods = customer.payment_methods.unique();\n  const most_used_payment_method = unique_payment_methods[0];\n  if (unique_payment_methods.length > 1) {\n    const customer_payments_count = customer.payments.filter(x => x.payment_method.id === most_used_payment_method.id).length;\n    if (customer_payments_"
  },
  {
    "id": 278,
    "db_id": "customers_and_orders",
    "question": "Give the code of the payment method that is most commonly used.",
    "answer": " \n   */\n  public function getMostCommonPaymentMethod() {\n    return $this->getProperty('most-common-payment-method');\n  }\n}"
  },
  {
    "id": 279,
    "db_id": "customers_and_orders",
    "question": "Show all customer names with the  payment method code used by least number of customers.",
    "answer": " \" +\n        \"ORDER BY COUNT(c.customer_name) ASC LIMIT 1;\";\n\\end{code}"
  },
  {
    "id": 280,
    "db_id": "customers_and_orders",
    "question": "What are the names of customers who use the least common payment method?",
    "answer": "\n  \\item What is the total amount spent on each payment method?\n  \\item Which payment methods are used most frequently in the past month?\n\\end{itemize}\n\\end{blockquote}\n\nI've done some research and it seems that one can do this with a custom report in e-commerce software, but I would like to know if it is possible without such tools. I know how to retrieve payment method data for each order, but not the total amount"
  },
  {
    "id": 281,
    "db_id": "customers_and_orders",
    "question": "What is the payment method and customer number for customer named Jeromy?",
    "answer": "\n  * */\n/*\n  SELECT pm.payment_method, c.customer_number FROM payments p JOIN customers c ON p.customer_id = c.customer_id WHERE c.customer_name = 'Jeromy';"
  },
  {
    "id": 282,
    "db_id": "customers_and_orders",
    "question": "Give the payment method code and customer number corresponding to the customer named Jeromy.",
    "answer": " \n```sql\n SELECT pm.code, cp.customer_number FROM payment_methods AS pm JOIN customers AS cp ON pm.customer_id = cp.id WHERE cp.name = 'Jeremy';"
  },
  {
    "id": 283,
    "db_id": "customers_and_orders",
    "question": "What are the distinct payment methods used by customers?",
    "answer": "\n Pull data from your transaction table to get this information. Use a SELECT statement within a SELECT statement and GROUP BY the payment method to find out how many customers use each method.\n\n SELECT t.payment_method, COUNT(DISTINCT c.customer_id) AS number_of_customers FROM transactions t JOIN customers c ON t.customer_id = c.customer_id GROUP BY t.payment_method ORDER BY number_of_customers DESC NULLS"
  },
  {
    "id": 284,
    "db_id": "customers_and_orders",
    "question": "Give the different payment method codes that customers use.",
    "answer": " \n * <p>\n * This is used to display payment methods on the payments page and for\n * calculating discounts.\n */\npublic enum PaymentMethodCode {\n    ACH_DEBIT,\n    ACH_PREMIUM_DEBIT,\n    CREDIT,\n    DEBIT_CARD,\n    PERSONAL_LOAN,\n    LOCAL_BUSINESS_LOAN,\n    M"
  },
  {
    "id": 285,
    "db_id": "customers_and_orders",
    "question": "Show the id and the product type for all products, order by product name.",
    "answer": " \n     * @return array of Product objects \n     */\n    public static function findAll() {\n        $db = Db::getInstance();\n        $query = 'SELECT p.product_name, p.product_id, p.product_type FROM products p ORDER BY p.product_name NULLS LAST';\n        $result = $db->exec($query);\n        \n        return $result;\n    }\n    \n    /**\n"
  },
  {
    "id": 286,
    "db_id": "customers_and_orders",
    "question": "What are the ids and product types for all products, sorted alphabetically by product name?",
    "answer": "\n  */\nexport function getProductIdsAndTypes(products: Product[]): IdTypeTuple[] {\n    return products.map((product) => [product.id, product.type] as IdTypeTuple);\n}"
  },
  {
    "id": 287,
    "db_id": "customers_and_orders",
    "question": "What is the product type with least number of products?",
    "answer": "\n  print(\"Product type with least number of products:\", product_types[least_products])\n @. 540)\n  return product_types[least_products]\n}"
  },
  {
    "id": 288,
    "db_id": "customers_and_orders",
    "question": "What is the code of the product type that is least common?",
    "answer": "\n  SELECT m.product_type FROM products p JOIN market_products mp ON p.id = mp.product_id JOIN (SELECT product_type, COUNT(*) AS count FROM products GROUP BY product_type) AS mc ON mc.count = (SELECT MIN(COUNT(*)) FROM products GROUP BY product_type)::int;"
  },
  {
    "id": 289,
    "db_id": "customers_and_orders",
    "question": "How many customer orders do we have?",
    "answer": "\n  console.log(orderCount);\n\n  // If the number of customer orders is less than 1, return \"There are no orders on file.\"\n  if (orderCount < 1) {\n    return \"There are no orders on file.\";\n  }\n\n  // Else, return all the order data.\n  return orderData;\n};"
  },
  {
    "id": 290,
    "db_id": "customers_and_orders",
    "question": "Count the number of customer orders.",
    "answer": " \n  \n    SELECT COUNT(o.id) AS total_orders FROM Order o JOIN Customer c ON o.customer_id = c.id;"
  },
  {
    "id": 291,
    "db_id": "customers_and_orders",
    "question": "Show the order ids, order dates, and order status codes for all orders by customer Jeromy.",
    "answer": " \n\t */\n\tpublic function getOrders() {\n\t\t$this->getOrdersWithCustomer();\n\t}\n\n\t/**\n\t * Get the order ids, order dates, and order status codes for all orders by customer Jeromy \n\t */\n\tpublic function getOrdersWithCustomer() {\n\t\t$customer = CustomerQuery::create()->findOneByFirstName('Jeremy');\n\t\treturn $customer->getOrders();"
  },
  {
    "id": 292,
    "db_id": "customers_and_orders",
    "question": "What were the ids, dates, and status codes for orders made by Jeromy?",
    "answer": "\n  * 1. How many orders did he make?\n  * 2. The total amount of money he spent on orders (sum of order prices)\n  * 3. Average price of an order (average of order prices)?\n  *)"
  },
  {
    "id": 293,
    "db_id": "customers_and_orders",
    "question": "Show all customer names, ids and the number of orders by each customer.",
    "answer": " \n// from the orders table. \nfunction show_orders() {\n\t$order_counts = array();\n\tforeach ($this->orders as $order) {\n\t\t$customer = Customer::find_by_id($order->customer);\n\t\tif (!isset($order_counts[$customer])) {\n\t\t\t$order_counts[$customer] = 1;\n\t\t} else {\n\t\t\t$order_"
  },
  {
    "id": 294,
    "db_id": "customers_and_orders",
    "question": "What are the names, ids, and number of orders made for each customer?",
    "answer": "\n  Customer.find_each do |customer|\n    customer_orders = customer.orders.order('date_trunc('month', o.created_at)')\n                 .group_by('date_trunc('month', o.created_at)')\n                 .count\n    p [customer.first_name, customer.last_name, customer_orders]\n  end\n\\end{code}\n\nHowever, I get the following error"
  },
  {
    "id": 295,
    "db_id": "customers_and_orders",
    "question": "What is the customer id, name, phone, and email for the customer with most orders?",
    "answer": "\n  SELECT c.customer_id, c.name, c.phone, c.email FROM customers c JOIN (SELECT o.customer_id, COUNT(*) AS order_count FROM orders o GROUP BY o.customer_id ORDER BY order_count DESC LIMIT 1) AS mco ON c.customer_id = mco.customer_id;"
  },
  {
    "id": 296,
    "db_id": "customers_and_orders",
    "question": "Give the id, name, phone, and email corresponding to the customer who made the most orders.",
    "answer": " \n SELECT c.customer_id, c.first_name, c.phone, c.email FROM customers c JOIN (SELECT o.customer_id, COUNT(*) AS order_count FROM orders o GROUP BY o.customer_id) AS oo ON c.customer_id = oo.customer_id ORDER BY oo.order_count DESC LIMIT 1;"
  },
  {
    "id": 297,
    "db_id": "customers_and_orders",
    "question": "Show all order status and the number of orders in each status.",
    "answer": " \n   */\n  public function get_status_count() {\n    return $this->order_status_model->get_status_count();\n  }\n}"
  },
  {
    "id": 298,
    "db_id": "customers_and_orders",
    "question": "How many orders have each order status code?",
    "answer": "\n Tags: java, hibernate, jpa, one-to-many\n 2023-01-04 15:47:48.637539300 UTC\n */\n@Entity(name = \"order_status\")\npublic class OrderStatus implements Serializable {\nprivate static final long serialVersionUID = -2645432837579167125L;"
  },
  {
    "id": 299,
    "db_id": "customers_and_orders",
    "question": "What is the order status code that is most common?",
    "answer": "\n  I know this can be done with a for loop, but I am wondering if there's an easier way.\n\nI have tried using array_count() and array_count_values() to see which status code appears most frequently in my database. But then I realized that I don't need to store the status codes anymore in my database. I just need to know the one most common status code. I thought of using a loop to do this, but I am wondering"
  },
  {
    "id": 300,
    "db_id": "customers_and_orders",
    "question": "Give the order status code that is most frequent across customer orders.",
    "answer": "  */\n\t\tpublic function get_order_status_code_by_frequency( $customer_id ) {\n\t\t\t$orders = $this->get_all_orders_for_customer( $customer_id );\n\n\t\t\t$status_counts = array();\n\t\t\tforeach ( $orders as $order ) {\n\t\t\t\tif ( isset( $status_counts[ $order->order_status ]"
  },
  {
    "id": 301,
    "db_id": "customers_and_orders",
    "question": "How many customers do not have an order?",
    "answer": "\n  }\n  else {\n    echo 'No orders yet'; // Display no orders yet message\n  }\n?>"
  },
  {
    "id": 302,
    "db_id": "customers_and_orders",
    "question": "Count the number of customers who have not made an order.",
    "answer": "  */\n\n SELECT COUNT(*) FROM customers c WHERE NOT EXISTS (SELECT 1 FROM orders o WHERE c.id = o.customer_id);"
  },
  {
    "id": 303,
    "db_id": "customers_and_orders",
    "question": "Show all product names without an order.",
    "answer": "  The other solution is to create a new class and pass that to the template, like this:\n\n\n\\begin{code}\nclass ProductName {\n    public $name;\n    public function __construct($name) {\n        $this->name = $name;\n    }\n}\n$product_names[] = new ProductName('Product name 1');\n\\end{code}\n\nComment: I was trying to avoid the second solution, but"
  },
  {
    "id": 304,
    "db_id": "customers_and_orders",
    "question": "What are the names of products that have not been ordered?",
    "answer": "\n  const nonOrderedProducts = products.filter(product => product.orderHistory.length === 0)\n\n  return (\n    <div className=\"App\">\n      <h1>Hi there!</h1>\n      {nonOrderedProducts.map(product => (\n        <Product key={product.id} product={product}>\n          {/*\n            A <Product> is a component that shows information about a single product, including its"
  },
  {
    "id": 305,
    "db_id": "customers_and_orders",
    "question": "How many products named Monitor have been ordered?",
    "answer": "\n A total of 5,000,000 products were sold worldwide in the last quarter. The sales growth is 7% higher than the previous quarter.\n Which product was the best-selling product during the last quarter? A total of 250,000 products from the product \"Coral\" were sold.\n How much revenue has been generated by sales of Coral in the last quarter? The total revenue for Coral is"
  },
  {
    "id": 306,
    "db_id": "customers_and_orders",
    "question": "What is the total number of Monitor products that have been ordered?",
    "answer": "\n \t*/\n \tpublic function get_total_products() {\n\t\t$query = $this->db->query('SELECT COUNT(DISTINCT p.product_id) FROM product_orders po JOIN products p ON po.order_product = p.product_id');\n\t\treturn $query->result_array();\n \t}\n\n }"
  },
  {
    "id": 307,
    "db_id": "customers_and_orders",
    "question": "How many customers have ordered the product named Monitor?",
    "answer": "\", \"select count(o.  order_items) AS number_of_orders from products p JOIN orders o ON CAST(p.product_id AS TEXT) = CAST(o.product_id AS TEXT) WHERE p.product_name ilike '%Monitor%'\");"
  },
  {
    "id": 308,
    "db_id": "customers_and_orders",
    "question": "Count the number of different customers who have bought a Monitor Product.",
    "answer": " \nSELECT COUNT(DISTINCT c.customer_id) AS unique_customers FROM customer c JOIN order_item oi ON c.customer_id = oi.order_item_id AND oi.product_id = (SELECT product_id FROM product WHERE product_name = 'Monitor')\n;"
  },
  {
    "id": 309,
    "db_id": "customers_and_orders",
    "question": "How many customers have an order?",
    "answer": "\n A customer's order is a unique entity in the system, and you can't modify it once it has been created. Once an order is placed, it will be processed by your application as quickly as possible. You can get a list of all orders for a user with the `orders` endpoint. Or you can get a specific order with the `order` endpoint, which takes the ID of the order in question as an argument.\n */\n@interface CNISDKOrder"
  },
  {
    "id": 310,
    "db_id": "customers_and_orders",
    "question": "Count the number of differnt customers who have made an order.",
    "answer": " \n\n* For each customer, count the total number of orders they have placed over time (as long as the data is available). \n\n* For each customer, count the number of distinct products that are included in their orders (as long as product data is available)\n\n* Calculate the total order value for all customers in your account. \n\n"
  },
  {
    "id": 311,
    "db_id": "customers_and_orders",
    "question": "Show all customer ids without an order.",
    "answer": "  I tried using a subquery, but that is not allowed for some reason.  Any other ideas?\n\nAnswer: You can use the `EXCEPT` operator to get all customers with no orders and then combine it with your original query to only return customers without orders.\n\n\\begin{code}\n SELECT c.id FROM customer c WHERE c.id NOT IN (SELECT o.customer_id FROM order o) ORDER BY c.id NULLS LAST;"
  },
  {
    "id": 312,
    "db_id": "customers_and_orders",
    "question": "What are the ids of customers who have not made an order?",
    "answer": "\n  SELECT c.customer_id FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE o.customer_id IS NULL;"
  },
  {
    "id": 313,
    "db_id": "customers_and_orders",
    "question": "Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.",
    "answer": " \"order\" means the name of the table, \"o\" means an alias for this table\n\n\\begin{code}\n SELECT o.id, o.date FROM order o JOIN (SELECT customer_id FROM order GROUP BY customer_id HAVING COUNT(product_id) > 3) AS subquery ON o.customer_id = subquery.customer_id JOIN product p ON p.product_id IN (SELECT product_id FROM product WHERE quantity >"
  },
  {
    "id": 314,
    "db_id": "customers_and_orders",
    "question": "What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?",
    "answer": "\n [What would be the best way to do that?]\n  SELECT o.order_id, o.order_date FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE (SELECT COUNT(*) FROM order_items WHERE order_id = o.order_id) > 3 AND (SELECT SUM(quantity) FROM order_items WHERE order_id = o.order_id) > 6;"
  },
  {
    "id": 315,
    "db_id": "region_building",
    "question": "How many buildings are there?",
    "answer": "\n My family, friends and I have been going to the same one for 2 years now. We had a good experience there and I am happy with that.\nI'm not really sure if they are available for rent. The only place I know about is a long way from where we live so it might take a while to find out if they are available.\nAnyway, do you know of any other places nearby that would be similar to this?\nYes, there are several"
  },
  {
    "id": 316,
    "db_id": "region_building",
    "question": "Count the number of buildings.",
    "answer": " 2. Create a new column in the database that will hold a list of all possible building names, which is populated with all possible combinations of letters and numbers. 3. When a new building is added to the database, check for conflicts with existing building names, if not found, add it to the list. Otherwise, find a unique name for the building by appending the number of conflicting occurrences to the end. 4. When removing a building from the database, remove its"
  },
  {
    "id": 317,
    "db_id": "region_building",
    "question": "List the names of buildings in ascending order of number of stories.",
    "answer": " \n//If there are two (or more) buildings that share the same number of stories, list these buildings in alphabetical order of their names."
  },
  {
    "id": 318,
    "db_id": "region_building",
    "question": "What is the list of building names, sorted by the number of stories of each building in ascending order?",
    "answer": "\n  public static List<String> getBuildings(int stories) {\n @SuppressWarnings(\"unchecked\")\n    return (List<String>) Collections.sort(buildings, new BuildingComparator(stories)); } private static class BuildingComparator implements Comparator<String>, Serializable { int m_stories; public BuildingComparator(int stories) { m_stories = stories; } @Override public int compare(String building1,"
  },
  {
    "id": 319,
    "db_id": "region_building",
    "question": "List the addresses of buildings in descending order of building completion year.",
    "answer": " \n\n\t@param bldg_info_list a list of dictionaries containing at least 'bldg_name' and 'completion_year' keys\n\t@return a sorted list with the most recent years first\n\t\"\"\"\n\tif not bldg_info_list:\n\t\treturn bldg_info_list  # Empty lists are returned unmodified\n\n\t# Sort building completion dates in descending order (most"
  },
  {
    "id": 320,
    "db_id": "region_building",
    "question": "Sort the buildings in descending order of building completion year, and return the building addresses.",
    "answer": " \n   (in a list) */\n\ndef get_building_addresses(years: List[int]) -> List[str]:\n    \"\"\"Return a list of the building addresses from the provided years.\"\"\"\n    return [b['address'] for b in buildings if b['completion-year'] in years for y in years]"
  },
  {
    "id": 321,
    "db_id": "region_building",
    "question": "What is the maximum number of stories of buildings not completed in 1980?",
    "answer": "\n Makes no sense to me.\nPost by: Bugsy on September 23, 2006, 07:45:45 pm\nMost likely an error on the part of the reporter. The real answer is one.\nPost by: johnnyt1989 on October 02, 2006, 09:33:55 am\nIt was a joke. It'"
  },
  {
    "id": 322,
    "db_id": "region_building",
    "question": "Among the buildings not completed in 1980, what is the maximum number of stories?",
    "answer": "\n [You will have to check each building and look at the most recent story. As there were no buildings completed after 1980, the answer is 4.]"
  },
  {
    "id": 323,
    "db_id": "region_building",
    "question": "What is the average population for all regions?",
    "answer": "\n I tried using this code:\n  SELECT region, AVG(population) AS average_population FROM country GROUP BY region;"
  },
  {
    "id": 324,
    "db_id": "region_building",
    "question": "Compute the average population of a region.",
    "answer": " \n- You can use this to compute the population of a subregion by dividing the population of a region by the proportion of a subregion to the region. \n- This can be useful if you only have data for the population of a region and not the populations of its subregions. \n"
  },
  {
    "id": 325,
    "db_id": "region_building",
    "question": "What are the names of regions in ascending alphabetical order?",
    "answer": "\n  List<string> regionNames = new List<string>(regions.Keys);\n  regionNames.Sort();\n\n  // Print each region's name and population:\n  foreach (var regionName in regionNames) {\n    Console.WriteLine(regionName + \": \" + regions[regionName]);\n  }\n}"
  },
  {
    "id": 326,
    "db_id": "region_building",
    "question": "List the names of regions in alphabetical order.",
    "answer": "  The following are some of the most common:\n- A1 (first level)\n- A2 (second level)\n- B (third level)\n- C (fourth level)\n- D (fifth level)\n- E (sixth level)\n- F (seventh level)\n- G (eighth level)\n- H (ninth level)\n- I (tenth level)\nThe above are the only regions used in the"
  },
  {
    "id": 327,
    "db_id": "region_building",
    "question": "What are the capitals of the regions with area bigger than 10000?",
    "answer": "\n Tags: Area, Region, Region.Area > 10000"
  },
  {
    "id": 328,
    "db_id": "region_building",
    "question": "Give me the capitals of the regions whose area is larger than 10000.",
    "answer": " C# Code?\n\nI am trying to get the capital city of the region in which my city (given by user input) lies. I know how to do this for a few regions, but I also want to be able to find the capitals of regions for which I don't have any specific data. In this case I want to use the capital of some other region (probably one with less population or larger area).\nI have created a list of all regions and"
  },
  {
    "id": 329,
    "db_id": "region_building",
    "question": "List the capital of the region with the largest population.",
    "answer": " 58% of the population lives in the metropolitan area and 42% lives outside it. The most populous city is Moscow, which accounts for 75% of the total population of the oblast.\n\nThe oblast's population density (31,607/sq. km) is the lowest in the country."
  },
  {
    "id": 330,
    "db_id": "region_building",
    "question": "Which region has the largest population? Give me the capital of the region.",
    "answer": " 120757684. What is the name of the second-largest city in the US? 3927152. What is the largest mammal? 120757685. What is the smallest mammal? 120757686. Which region has the highest population density? 120757687. What is the name of the second-"
  },
  {
    "id": 331,
    "db_id": "region_building",
    "question": "List the names of the regions with the top 5 largest areas.",
    "answer": " Certainly a very interesting topic to explore, especially in light of the current debate surrounding the European Union and the need for new trade deals.\nWhat is the most important thing to keep in mind while discussing the geography of the world? That every country has unique geographical features that make it distinct from all other countries, but are also connected to the rest of the world through international boundaries such as oceans, air routes, and borders. Additionally, each country has a unique"
  },
  {
    "id": 332,
    "db_id": "region_building",
    "question": "What are the names of the 5 largest regions in terms of area?",
    "answer": "\n (Hint, don't include Antarctica or any oceans)\n 2. Write a program that prints \"Hello World!\" to the screen.\n"
  },
  {
    "id": 333,
    "db_id": "region_building",
    "question": "Show the names of buildings and the names of regions they are in.",
    "answer": "  I know it is possible to do this using `awk` and `grep`, but I can't figure out how.\n\nComment: Can you provide an example of what you are looking for?\n\nAnswer: You could use `awk`:\n\n\\begin{code}\nawk '{print $0, \"(\" region-lookup \"$1\" \")\"; }' < input.file > output.file\n\\end{code}"
  },
  {
    "id": 334,
    "db_id": "region_building",
    "question": "For each building, return the name of the building and the name of the region it belongs to.",
    "answer": " \n# You can assume that the building will be given in the format 'A2' or 'A21', where the first letter indicates the region and the second number indicates the ordinal number within that region.\ndef get_region_name(building):\n    return building[0] + 'Region'\n\n# Print the name of the region for all buildings in the dataset\nprint(list(map(get_region_name, buildings)))"
  },
  {
    "id": 335,
    "db_id": "region_building",
    "question": "Show the names of regions that have more than one building.",
    "answer": "  */\n\n/* This is a list of region codes for all regions with more than one building.\n   Note that this is only used in the first pass, when we are building up the list.  Later,\n   the same information is used by build_regions_with_multiple_buildings_pass2 to filter\n   out regions with multiple buildings so that only the unique region codes remain in the region\n   code array. */\n\nchar *region_codes"
  },
  {
    "id": 336,
    "db_id": "region_building",
    "question": "Which regions have more than one building? Give me the names of the regions.",
    "answer": " \n```python\nimport pandas as pd\ndf = pd.read_csv(\"data/census_block_groups.csv\")\nregions = df[\"region\"].unique()\nprint(regions)"
  },
  {
    "id": 337,
    "db_id": "region_building",
    "question": "Show the capital of the region that has the most buildings.",
    "answer": "  */\n  const std::string& GetMaxBuildingsCity() const;\n\n private:\n  std::map<std::string, City> cities_;\n  std::string max_buildings_city_;\n};"
  },
  {
    "id": 338,
    "db_id": "region_building",
    "question": "Which region has the largest number of buildings? Show me the capital of the region.",
    "answer": " 17350.\nWhat is the name of the city that has a population larger than any other city in the United States? Los Angeles."
  },
  {
    "id": 339,
    "db_id": "region_building",
    "question": "Show addresses of buildings and the capitals of regions they are in.",
    "answer": "  The capital cities have a population of at least 100,000.  There are 7462753 cities that meet this criteria.\n\nHow many cities can be found?"
  },
  {
    "id": 340,
    "db_id": "region_building",
    "question": "For each building, return the address of the building and the name of the region it belongs to.",
    "answer": " \n   * @param {string} building - The building's number. \n   * @return {Object} An object with the building's address and the region's name.\n   */\n  getAddressAndRegion(building) {\n    const buildingInfo = this.buildings.find(b => b.number === building);\n    \n    if (buildingInfo) {\n      const regionName = this.regions[buildingInfo.region"
  },
  {
    "id": 341,
    "db_id": "region_building",
    "question": "Show the number of stories of buildings in the region with name \"Abruzzo\".",
    "answer": "\n  # See: https://places.dot.gov/place/abruzzo/building-counts\n  abruzzo_buildings = 158\n\n  # Add to the total count.\n  total += abruzzo_buildings\nend"
  },
  {
    "id": 342,
    "db_id": "region_building",
    "question": "Return the number of stories for each building in the region named \"Abruzzo\".",
    "answer": "\n  If a building has no stories, return \"N/A\" as its story count.\n */\nSELECT b.name AS building_name, COALESCE(COUNT(s.story_num), 'N/A') AS story_count FROM abruzzo_building b LEFT JOIN stories s ON b.abr_bldg_id = s.story_building GROUP BY b.name ORDER BY b.name NULLS LAST;"
  },
  {
    "id": 343,
    "db_id": "region_building",
    "question": "Please show each completion year and the number of buildings completed in that year.",
    "answer": " \n   for i in range(1960, 2009):\n      # Create a dictionary with key=year, value=number of buildings completed in that year\n      YEARS[i] = len(completed_in_year(i))\n   return YEARS"
  },
  {
    "id": 344,
    "db_id": "region_building",
    "question": "For completion year, return the year and the number of buildings completed.",
    "answer": " \n\n```python\ndef get_year_and_buildings(years):\n    for year in years:\n        yield year, len(years[year])\n```"
  },
  {
    "id": 345,
    "db_id": "region_building",
    "question": "List the year in which the most buildings are completed.",
    "answer": " The highest population of buildings is in 2019, when 379,781 were built, while the lowest population is in 2015, when only 62,284 were constructed.\nThe building project with the greatest number of units is the Dong Fang Nanjing New District Project, which has a total capacity for 546,073 units, followed by the Huayu New Area Development Project, which"
  },
  {
    "id": 346,
    "db_id": "region_building",
    "question": "In which year did the most building constructions complete?",
    "answer": "\n Cities are being built all over the world and the number of buildings in the construction process keeps increasing every year. According to UN-Habitat, 10% of the global population live within a city that is not a member of the UN's urban-rural classification system. In 2015, more than 70% of the total number of buildings worldwide were completed and another 8% are under construction. In 2016,"
  },
  {
    "id": 347,
    "db_id": "region_building",
    "question": "List the names of regions that do not have any buildings.",
    "answer": "  */\n\n\n  public static final List<String> findRegionsWithoutBuildings(final World world) {\n    return world.getRegions().stream()\n      .filter((region -> region.getBuildingCount() == 0))\n      .map((region -> region.getName()))\n      .sorted()\n      .collect(toList());\n  }"
  },
  {
    "id": 348,
    "db_id": "region_building",
    "question": "What are the names of regions in which there are no buildings?",
    "answer": "\n  I tried to use a list comprehension and then a loop, but I always get the error message \"ValueError: too many values to unpack\" when I try to assign them. How do I make it so that if the value is empty or the same number of regions as before, then I just copy the previous array over without modifying it?\n\\end{blockquote}\n\nIt's because you have no way of knowing which index to use for each region. You"
  },
  {
    "id": 349,
    "db_id": "region_building",
    "question": "Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.",
    "answer": " C. 70% of the time, it is not a good idea to trust the average number of stories. Instead, use the median number of stories.\nThe average number of stories in a building with 30 or more stories is 43.88 years. The average number of stories in a building with less than 15 stories is 21.75 years.\nBuildings with at least 30 stories have a median number of stories of "
  },
  {
    "id": 350,
    "db_id": "region_building",
    "question": "In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?",
    "answer": "\n You don't need to use a Pivot table for this. You can solve it with a SUM() function, but you should first create a calculated field that indicates whether the building is taller or shorter than 15 stories. Then you can count the buildings which are taller and those which are shorter (and add them together) like this:\n SELECT SUM(CASE WHEN b.story_count > 15 THEN 1 ELSE 0 END) AS taller_"
  },
  {
    "id": 351,
    "db_id": "region_building",
    "question": "Show the distinct addresses of buildings.",
    "answer": "  For example, a\n * single building may have multiple addresses but we can't use both of them as keys.  The value is an array because there may be multiple\n * distinct addresses for the same key (e.g., two addresses for different time periods)\n */\nvar addressKey = new Set();\n/** @type {Object<string, Array.<string>>} A dictionary from building keys to addresses with the same key.  This is used as a cache to"
  },
  {
    "id": 352,
    "db_id": "region_building",
    "question": "Give me a list of distinct building addresses.",
    "answer": "  I tried this but it only returns the first building address:\n\n\n\\begin{code}\n SELECT DISTINCT b.address FROM buildings b;\n\\end{code}"
  },
  {
    "id": 353,
    "db_id": "region_building",
    "question": "Show the completed years of buildings in descending order of the number of stories.",
    "answer": " \n#include <iostream>\nusing namespace std;\nint main() {\n    int numBuildings = 0, numStories = 0, maxStories = 0;\n    cout << \"Enter number of buildings: \"; cin >> numBuildings;\n    for (int i=1; i<=numBuildings; i++) {\n        cout << \"\\nEnter number of stories for building #\" << i << \": \"; cin >> numStories"
  },
  {
    "id": 354,
    "db_id": "region_building",
    "question": "Sort buildings in descending order of the number of stories, and return their completion years.",
    "answer": " \n     * @return an array of the building's completion years in descending order.\n     */\n    public int[] getCompletionYears() {\n        List<Building> buildingList = new ArrayList<>();\n        for (Building b : allBuildings) {\n            if (b.getNumberOfStories() > 0)\n                buildingList.add(b);\n        }\n        Collections.sort(buildingList, new Com"
  },
  {
    "id": 355,
    "db_id": "government_shift",
    "question": "List details of all the channel in alphabetical order .",
    "answer": "\n  For more information on this file, please visit: https://s3.eu-west-2.amazonaws.com/comprehend-medical-poc/guide-docs/SNOMEDCT_to_ICDO_mappings.pdf */\n  static const std::map<Aws::String, Aws::String> SNOMED_TO_ICDO_MAP = {\n    {\"753070\","
  },
  {
    "id": 356,
    "db_id": "government_shift",
    "question": "What is the list of channel details ordered alphabetically ?",
    "answer": "\n  @SuppressWarnings(\"unchecked\")\n from = \"A\" ; to = \"Z\";\n  for (String key : chanMap.keySet()) {\n    List<String> value = chanMap.get(key);\n    Collections.sort(value);\n    chanMap.put(key, value);\n  }\n\n}\n\\end{code}"
  },
  {
    "id": 357,
    "db_id": "government_shift",
    "question": "How many services are there?",
    "answer": "\n \u201cHow long do you think it will take?\u201d \u201cAbout two weeks.\u201d \u201cSurely not two weeks.\u201d \u201cNo, about a month.\u201d\n A few days later: \u201cHave you got it yet? No, I haven\u2019t. Can we start over the weekend?\u201d\n\u201cCan you put your head in my lap? \u201d \u201cI don\u2019t know if that\u2019s necessary.\u201d \u201cMaybe we could get started next week instead.\u201d \u201cNo, no, no,"
  },
  {
    "id": 358,
    "db_id": "government_shift",
    "question": "Count the number of services.",
    "answer": "  For a complete list of available services, please view the <a href=\"/developer\">API Reference</a>.\n class Service(object):\n    \"\"\"Service object.\"\"\"\n\n    def __init__(self, name, **kwargs):\n        \"\"\"Initialize Service.\"\"\"\n        self.name = name\n        self.methods = kwargs.get('methods', [])\n\n    def get_url_path(self, api_version=None):\n       "
  },
  {
    "id": 359,
    "db_id": "government_shift",
    "question": "What is the most common analytical layer type code?",
    "answer": "\n  A. HF (Hard Fault)\n  B. EF (Early Fault)\n  C. LF (Late Fault)\n  D. FF (Fabrication Failure)\n\\end{code}"
  },
  {
    "id": 360,
    "db_id": "government_shift",
    "question": "Find the analytical layer type code that appears most often.",
    "answer": "  */\n\tpublic static String getMostCommonLayerTypeCode(String[] codes) {\n\t\treturn codes[0];\n\t}\n\n\t/** Get the first geologic boundary feature.  */\n\tpublic static GeoFeature getFirstBoundaryFeature(GeoPackage gp) {\n\t\tif (gp.getGeometryType() == GeometryType.GEOMETRY_PACKAGE) {\n\t\t\treturn"
  },
  {
    "id": 361,
    "db_id": "government_shift",
    "question": "Find all the services that has been used by the customer with details \"Hardy Kutch\".",
    "answer": "\n  It is an example of a method-level query. The result is a set of `Service` objects, which can be accessed as a list and iterated over.\n\n### `Service.customer_name` property\n\nThe name associated with the service. This is used to search for services based on customer name. This property is an example of an entity-level query."
  },
  {
    "id": 362,
    "db_id": "government_shift",
    "question": "Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details.",
    "answer": "  I know how to do this in SQL but I'm looking for a solution with LINQ (C#)\n\n\nComment: What is your expected output?\n\nAnswer: Use [Linq-To-SQL](https://msdn.microsoft.com/en-us/library/bb386970%28v=vs.100%29.aspx). I have given the sample code below:\n\n\\begin{code}\n"
  },
  {
    "id": 363,
    "db_id": "government_shift",
    "question": "Find the details of the services that have been used by more than 3 times .",
    "answer": "\n 'services' should be a list of strings (the names of the services) , and it should return a new list where each string is a service name, followed by the number of times it was used. If no such service has been used more than once, the original list should be returned. For example, for the following list: 'home', 'home', 'dining', 'home' , 'home' the method should return ['home 5', 'dining 1"
  },
  {
    "id": 364,
    "db_id": "government_shift",
    "question": "Which services were used by customers by more than 3 times? Give me the service details.",
    "answer": " \" << std::endl;\n    for (const auto& c : m_services) {\n        if (c.second >= 3) {\n            std::cout << \"\\t\" << c.first << \": \" << c.second << std::endl;\n        }\n    }\n}"
  },
  {
    "id": 365,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has used services the most times.",
    "answer": " \n   - Create a new table to store this information and save it in the database.\n   - The table should have the following columns: customer_id, name, email, age, gender, total_service_count, created_at, updated_at \n   - Create a function that retrieves the most frequent customer by ordering the total_service_count column in DESCending order and taking the first record.\n   - Create an API endpoint to return this information"
  },
  {
    "id": 366,
    "db_id": "government_shift",
    "question": "return the details of the customer with largest count of used services.",
    "answer": " \n   */\n  public static Customer getMaxUsedCustomer(List<String> customers, List<String> services) {\n    Map<String, Integer> serviceCountMap = new HashMap<>(); // <customer, count_of_services_used> mapping\n    for (int i = 0; i < customers.size(); i++) {\n      String customer = customers.get(i);\n      int numOfServicesUsed = 0;\n     "
  },
  {
    "id": 367,
    "db_id": "government_shift",
    "question": "Find the name of the customer who has used the most types of services .",
    "answer": "\n  I tried this but it is not working :\n  SELECT c.customer_name, COUNT(s.service_id) AS service_count FROM customers c JOIN customer_service cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id GROUP BY c.customer_name ORDER BY service_count DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 368,
    "db_id": "government_shift",
    "question": "Which customer has used the most types of services ? Give me the customer details .",
    "answer": "\n  def customers_with_most_services(self, number_of_services=3):\n # 1. Find all customers who have provided at least 'number_of_services' types of service\n    customers = []\n    for service in self._service_bookings:\n      customer, services = service[0], service[1]\n      if len(services) >= number_of_services:\n        customers.append((customer, services))\n"
  },
  {
    "id": 369,
    "db_id": "government_shift",
    "question": "Find the details of the customer who has never used any services .",
    "answer": "\n  SELECT c.customer_id, c.first_name, c.last_name FROM customers c WHERE c.customer_id NOT IN (SELECT s.service_id FROM services s) ORDER BY c.customer_id NULLS LAST;"
  },
  {
    "id": 370,
    "db_id": "government_shift",
    "question": "Which customers never used any services ? Give me the customer details .",
    "answer": "\n  elseif(isset($_POST['view'])) {\n ' view_customer.php?id='.$_POST['id']; }\n  elseif(isset($_POST['delete'])) {\n    delete_customer($_POST['id']); ' Customers/show_customers.php'; }\n    else {\n      get_customers(); ' Customers/show_customers.php'; } }\n     ?>"
  },
  {
    "id": 371,
    "db_id": "government_shift",
    "question": "Find the details of the customers who have used the least-used service .",
    "answer": "\n 2. Display the number of times each customer has used that service .\n\\end{code}\n\nAnswer: You can use `COUNT(DISTINCT c.service_id) AS total_services` to count distinct services for a single customer.  I'm not sure if you can also get the total time customers have used a particular service, so I would do this first and then try to see what other information you might be able to extract from the data."
  },
  {
    "id": 372,
    "db_id": "government_shift",
    "question": "Which customers used the least commonly-used service ? Give me the distinct customer details .",
    "answer": "\n  SELECT c.customer_name, c.contact_no FROM customer c JOIN booking b ON c.customer_id = b.customer_id WHERE b.service_type = (SELECT MIN(service_type) FROM booking);"
  },
  {
    "id": 373,
    "db_id": "government_shift",
    "question": "How many distinct customer and services details are there?",
    "answer": "\n A: I'm not sure. But that's why I asked you!\nQ: How do you feel about the services offered by your bank?\n A: I don't know yet."
  },
  {
    "id": 374,
    "db_id": "government_shift",
    "question": "Count the total number of available customers and services details.",
    "answer": " \n- `service_count`: The total number of available service types.\n\n### Methods\n- `customer_service_count(cust_id)`: Returns a count of customer's services.\n- `service_details_by_count(service_type, limit=5)`: Returns the first \"limit\" services with the given name. "
  },
  {
    "id": 375,
    "db_id": "government_shift",
    "question": "Find all the customers whose name contains \"Kutch\".",
    "answer": "\n  ```javascript\n\n  var k = 'k'\n  var u = 'u'\n  var t = 't'\n  var c = 'c'\n  var n = 'n'\n  var m = 'm'\n  customerService.find(k + u + t + c + n, 'name', 'like'); // returns all customers whose name contains \"Kutch\"\n  ```\n* Find all the customers with a name that"
  },
  {
    "id": 376,
    "db_id": "government_shift",
    "question": "What are the details of the customers who have \"Kutch\" in part of their details?",
    "answer": "\n Certainly not. I'm not aware of any database that has a list of people with the name \"Kutch\".  If you have access to the data, then you should be able to find more information about the customer than just the first letter of their full name."
  },
  {
    "id": 377,
    "db_id": "government_shift",
    "question": "Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions.",
    "answer": " \n SELECT DISTINCT s.service_name FROM service_review s JOIN service_use u ON s.service_id = u.service_id WHERE (SELECT COUNT(s2.interaction_id) FROM service_review s2 WHERE s2.customer_name = 'Hardy Kutch') > 0 OR (SELECT COUNT(s2.interaction_id) FROM service_review s2 WHERE s2.review_rating = 'good')"
  },
  {
    "id": 378,
    "db_id": "government_shift",
    "question": "Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details.",
    "answer": " 2. Is there any service that is not available for customers \"Hardy Kutch\"?\n\\end{blockquote}\n\nAnswer: \\begin{code}\n SELECT s.service_id, s.service_name FROM services s JOIN (SELECT DISTINCT customer_id FROM customers WHERE first_name = 'Hardy' AND last_name='Kutch') c ON s.service_customer_id = c.customer_id LEFT JOIN ratings r ON"
  },
  {
    "id": 379,
    "db_id": "government_shift",
    "question": "Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions.",
    "answer": " \n\t */\n\tpublic List<String> getServicesRatedBadBy(String username) {\n\t\tList<Service> services = new ArrayList<>();\n\t\tfor (CustomerInteraction interaction : customerInteractions) {\n\t\t\tif (interaction.getCustomer().equals(username) && interaction.getService() != null) {\n\t\t\t\tString serviceName = interaction.getService().getName();\n\t\t\t\tboolean found = false"
  },
  {
    "id": 380,
    "db_id": "government_shift",
    "question": "Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.",
    "answer": " 131456789\n\\end{code}\n\nI need to retrieve the service with the ID `131456789` if it has any of the customer interactions that contain both the customer \"Hardy Kutch\" and a rating \"bad\"."
  },
  {
    "id": 381,
    "db_id": "government_shift",
    "question": "Find details of all the services that have interacted with `` 15 ij '' for the the channel details.",
    "answer": " #663907\n\nI have a channel whose name is `'' 15 ij ''`. I would like to find all the services that have interacted with it. I know that these are the interactions:\n\n\\begin{code}\n SELECT s.name FROM service_interaction si JOIN service s ON si.service_id = s.id WHERE si.channel_id = '663907' ORDER BY s.name NULL"
  },
  {
    "id": 382,
    "db_id": "government_shift",
    "question": "Give me the details of all the services that have interacted with the channel with detail \"15 ij\".",
    "answer": "\n  def give_service_details(channel_id, service_id) do\n Cmd.give_service_details(channel_id, service_id) end\n\n  @doc \"Given a service_id and a time_period return the details of all the channels that have interacted with that service within the given time period.\"\n  def give_service_channels(service_id, time_period) do Cmd.give_"
  },
  {
    "id": 383,
    "db_id": "government_shift",
    "question": "Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .",
    "answer": "\n  \"\"\"\n        return self.get_stuck_customers(service, channel)\n    def get_stuck_customers(self, service, channel):\n        query = self.get_query(service, channel)\n        if not query:\n            return []\n        customers = query.all()\n        return [c for c in customers if c.status == 'Stuck' and c.channel_detail != 'bad']\n    def"
  },
  {
    "id": 384,
    "db_id": "government_shift",
    "question": "Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details.",
    "answer": " Cut out any that don't have a matching channel, service or status.\n\nComment: Can you post some sample data for the tables? And what do you mean by \"service and channel details\"? Does this refer to columns on the interaction table itself, or perhaps additional tables with related information?\n\nComment: I added some additional context. Thanks!\n\nComment: Please show a little more sample data, or explain how the service/channel and status are related to the customer"
  },
  {
    "id": 385,
    "db_id": "government_shift",
    "question": "How many integration platforms are successful?",
    "answer": "\n My thoughts are a bit scattered. I don\u2019t know where to start. My mind is not at all focused on anything, so I can\u2019t think of any specific goals or targets that I can set, but I am always aware of the importance of what I need to do and the value that I must keep.\nWhat is one of the most important things you did in your life? The most important thing I ever did was to get a degree in computer science from a top university"
  },
  {
    "id": 386,
    "db_id": "government_shift",
    "question": "Count the number of integration platforms that have \"Success\" in the details.",
    "answer": "  I want to return a list of all those platforms.\n\nI tried this code:\n\n\\begin{code}\nSELECT DISTINCT(p.platform) FROM platform_details pd JOIN platforms p ON pd.platform = p.name WHERE pd.success = 'True' ORDER BY p.platform NULLS LAST;\n\\end{code}\n\nBut it only returns one platform: \"Jellyfin\".  How do I get all the platforms?\n"
  },
  {
    "id": 387,
    "db_id": "government_shift",
    "question": "List the details of all the customers who are associated with a failed integration platform .",
    "answer": "\n  - You can use this to find the list of customers to whom an integration could not be set up.\n- Use the API to get the status of an integration.\n  - This returns information about what happened when you tried to integrate your account to a particular account on the other side.\n- The details include:\n    + Integration status (successful or failed)\n    + Error message if there was one\n    + A list of all the customers who are associated"
  },
  {
    "id": 388,
    "db_id": "government_shift",
    "question": "Which customers have integration platform details \"Fail\" in interactions? Give me the customer details.",
    "answer": " \n     * @param int $customerId The customer id.\n     * @return CustomerDetails\n     */\n    public function getCustomerDetails(int $customerId) : ?CustomerDetails {\n        return $this->customerRepository->getDetails($customerId);\n    }\n}"
  },
  {
    "id": 389,
    "db_id": "government_shift",
    "question": "Which service ( s ) has never been used by any customer ? List their details .",
    "answer": "\n The above question is to be answered using SQL. I have created a table called service_list which stores the following data: service_name, service_description, service_id. Please help me out with writing a query to answer this question. Thanks !!!\n\\end{blockquote}\n\n SELECT * FROM service_list s WHERE NOT EXISTS (SELECT 1 FROM customer_service cs WHERE cs.service_id = s.service_id);"
  },
  {
    "id": 390,
    "db_id": "government_shift",
    "question": "Find details of the services that no customer has ever used . Return the service details .",
    "answer": "\n  getUnusedServices() {\n  return this.serviceRepository.find();\n }\n\\end{code}"
  },
  {
    "id": 391,
    "db_id": "government_shift",
    "question": "Find all the layer type codes with their corresponding usage count.",
    "answer": " \n *\n * @param {string} - Layer Type Code to filter for\n */\nexport const getLayerTypeCodeCount = (layerTypeCode) => {\n    let filteredResults;\n\n    if (layerTypeCode) {\n        filteredResults = LAYER_TYPES.filter((lt) => lt.code === layerTypeCode);\n    } else {\n        filteredResults = LAYER_TYPES;\n    }"
  },
  {
    "id": 392,
    "db_id": "government_shift",
    "question": "For each analytical layer, return the analytical layer type code and the number of times it was used.",
    "answer": " \n\t */\n\tpublic function getAnalyticalLayers() {\n\t\t$ret = array();\n\t\tforeach ($this->analytical_layers as $al) {\n\t\t\tif (!isset($ret[$al])) $ret[$al] = 0;\n\t\t\t$ret[$al]++;\n\t\t}\n\t\treturn $ret;\n\t}\n\n\t/**\n\t * Return the list of all layers"
  },
  {
    "id": 393,
    "db_id": "government_shift",
    "question": "Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .",
    "answer": "\n  public List<Service> getUnsatisfiedServices() {\n Criteria criteria = createCriteria();\ncriteria.add(Restrictions.eq(\"satisfactionLevel\", SatisfactionLevel.UNSATISFIED));\nreturn (List<Service>) criteria.list(); } }"
  },
  {
    "id": 394,
    "db_id": "government_shift",
    "question": "Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details.",
    "answer": " 2. Find the number of customers who have chosen to leave unsatisfactory feedback?\nI can use a for loop, but I'm not sure how to write the code. How do I create a table that shows the percentage of customers who have chosen to leave satisfactory feedback and which services they used in addition to the service_id in the service_details table.\n\n\\begin{code}\n SELECT CAST(COUNT(DISTINCT CASE WHEN feedback = 's"
  },
  {
    "id": 395,
    "db_id": "vehicle_rent",
    "question": "How many vehicles do we have?",
    "answer": "\n A. 50,000 in total. B. 18,500. C. 14,500. D. 12,500."
  },
  {
    "id": 396,
    "db_id": "vehicle_rent",
    "question": "Count the number of vehicles.",
    "answer": " 56 percent of all cars sold in the U.S. are hybrids, with sales reaching a record high of 700,000 units in 2014 alone. Honda has been on top of the market when it comes to hybrid models, with its Fit, Civic and Insight models being the most popular car models.\nBut in recent years, other automakers have caught up in the race for hybrid sales. Toy"
  },
  {
    "id": 397,
    "db_id": "vehicle_rent",
    "question": "Show names for all vehicles in descending order of model year.",
    "answer": " 1965-2015 (model years)\n47. Vehicles with \"Jaguar\" in the name:\nShow only vehicles with \"Jaguar\" in their name. Sort results by model year, highest first. Example: Jaguar XK-Type.\n48. Cars made in 1995: Show only the cars that were made in 1995, sorted by model year, highest first"
  },
  {
    "id": 398,
    "db_id": "vehicle_rent",
    "question": "What are the names of all vehicles, ordered by model year descending?",
    "answer": "\n  def all_vehicles_ordered_by_model_year_descending(self) -> List[Vehicle]:\n #implemented in Vehicle class\n    self.vehicles.sort(key=lambda vehicle: vehicle.model_year, reverse=True) # key function to sort in descending order\n    return self.vehicles"
  },
  {
    "id": 399,
    "db_id": "vehicle_rent",
    "question": "List all distinct types of powertrain of vehicles.",
    "answer": " 1395607409776718 (2)\nDear 1395607409776718, The information provided by you is very helpful in understanding the specific needs and capabilities of different types of powertrains used in vehicles. The classification system of powertrain types as described by your comment has helped me to understand and organize the information I had received from various sources. Thank you"
  },
  {
    "id": 400,
    "db_id": "vehicle_rent",
    "question": "What are the different types of powertrains?",
    "answer": "\n When there are two or more different types of powertrain available for a vehicle, it's referred to as having multiple powertrains. Examples of vehicles with multiple powertrains include: 1972 Chevrolet Malibu station wagon, 1986 Mazda 323F, 1996 Mercedes-Benz E-Klasse and S-Klasse sedans.\n What is the difference between"
  },
  {
    "id": 401,
    "db_id": "vehicle_rent",
    "question": "Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.",
    "answer": "  (in order to do this I need to query the database only once)\n\\end{blockquote}\n\nThe problem is that I can't figure out how to write a SELECT statement that returns the info in the format that I want. I get a result of the form:\n\n\\begin{code}\nSELECT v.year, v.make, v.model, v.powertrain, c.cost FROM vehicle AS v JOIN cost AS c ON v."
  },
  {
    "id": 402,
    "db_id": "vehicle_rent",
    "question": "What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?",
    "answer": "\n How to use the data from the CSV file.\n\n\\begin{code}\ncar_name,powertrain,yearly_cost\nAudi A4,Petrol,9528.72\nAudi A4,Diesel,9368.98\nAudi A6,Petrol,10242.05\nBMW 5 Series,Petrol,10242."
  },
  {
    "id": 403,
    "db_id": "vehicle_rent",
    "question": "Show types of powertrain with vehicles both from 2014 and 2013.",
    "answer": " 8 cylinder, 6 cylinder, and 4 cylinder are the options. I would not expect a V8 or a 6 cylinder to be available in the 2015 model year, but I will have to check with Mercedes-Benz to confirm this.\nI believe they were only available for certain years of the 2014 model year and all of the 2013 model year. They can be found on the M-"
  },
  {
    "id": 404,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains that have vehicles that were made in both 2013 and 2014?",
    "answer": "\n Filling this gap would be a great help!\n Post a comment below.\nI have no information on any other years. I'm sorry, but I can't provide anything more.\nI had to do some digging to find out how to answer that question. The year 2014 is the only one which I know of where there are not two separate lists (2013 and 2014). Instead it's just a single list"
  },
  {
    "id": 405,
    "db_id": "vehicle_rent",
    "question": "Show all types of powertrain and the number of vehicles in each type.",
    "answer": " \n *\n * @author Mark Lenz, 2015-2022 (marklenz@gamify3d.com)\n */\npublic class PowertrainsChart {\n    private final static String CHART_TITLE = \"Powertrain Distribution\";\n    private final ChartModel chartModel;\n    public PowertrainsChart(ChartData data, AxisType xAxisType) {\n        this.chart"
  },
  {
    "id": 406,
    "db_id": "vehicle_rent",
    "question": "How many vehicles have each type of powertrain?",
    "answer": "\n What are the types of engines available for a 2019 Nissan Leaf? What is the difference between an LF and LTZ? What is the difference between the different levels of Xtra-C and Tekna trim packages?"
  },
  {
    "id": 407,
    "db_id": "vehicle_rent",
    "question": "What is the type of powertrain with most number of vehicles.",
    "answer": " 4-Wheel Drive (FWD) - 78%\n2 Door Cars (FWD) - 5%\n3 or 4 Door Cars (FWD) - 6%\n1990 to present (FWD) - 2%\n2017 to present (AWD) - 1%"
  },
  {
    "id": 408,
    "db_id": "vehicle_rent",
    "question": "Which type of powertrain is most common?",
    "answer": "\n It would be interesting to know the distribution of this value. How many cars have the 1.6l, 2.0l, 2.5l, 3.0l engines? Or does it vary from car to car? Do we need more information on the model?\n\nComment: @user246678 It's definitely a good question but it's hard to give you an answer without additional details on the model. The most common"
  },
  {
    "id": 409,
    "db_id": "vehicle_rent",
    "question": "Show minimum, maximum, and average annual fuel cost for all vehicles.",
    "answer": " 2018-2022: $167940, 213975, 235150, 254905\nNote that the 2018-2022 model years are estimates and do not represent the actual cost for those vehicles. The cost will vary depending on the specific vehicle type and features. For example: the cost of a Truck vs. a Car, or a"
  },
  {
    "id": 410,
    "db_id": "vehicle_rent",
    "question": "What are the minimum, maximum, and average annual fuel costs across all vehicles?",
    "answer": "\n Average Annual Fuel Costs by Year: 1975 - 2008 (in $/gal)\n \n min_cost = 4.350\n max_cost = 7.671\n avg_cost = 5.923\n \n The data from the fuel cost table is obtained by using the \"get_fuel_data()\" function, which takes no arguments and returns a list of tu"
  },
  {
    "id": 411,
    "db_id": "vehicle_rent",
    "question": "Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.",
    "answer": " \n* 3. Calculate the difference in city and highway fuel efficiency for each vehicle with a positive difference \n* 4. Print a table of all vehicles, their city fuel economy, and their highway fuel economy \n* 5. Filter the table from above to only show vehicles with a positive difference between city and highway fuel efficiency \n* 6. Print a summary of the total number of vehicles for which there is a positive difference in city and highway fuel efficiency "
  },
  {
    "id": 412,
    "db_id": "vehicle_rent",
    "question": "What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?",
    "answer": "\n  SELECT v.name, v.model_year FROM Vehicle v WHERE v.city_fuel_economy <= v.highway_fuel_economy;"
  },
  {
    "id": 413,
    "db_id": "vehicle_rent",
    "question": "Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.",
    "answer": " 1) Construct a table that shows the type of powertrain (e.g. gasoline, diesel, hybrid, etc.) and the average annual fuel cost for all vehicles with that type of powertrain.\n2) Which of the types is the most efficient (i.e. uses the least amount of energy/fuel per mile)? How much less does it use than the next most efficient option?"
  },
  {
    "id": 414,
    "db_id": "vehicle_rent",
    "question": "What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?",
    "answer": "\n The output should be in a table with columns:\n \n * type of power train, average annual fuel cost\n\nNote that you need to round the average fuel cost to two decimals."
  },
  {
    "id": 415,
    "db_id": "vehicle_rent",
    "question": "Show the name, age, membership credit for all customers?",
    "answer": "\n  customer.getAllCustomers();\n\\end{code}"
  },
  {
    "id": 416,
    "db_id": "vehicle_rent",
    "question": "What are the names, ages, and membership credits for all customers?",
    "answer": "\n  #include <iostream>\n  #include <string>\n  using std::string;\n  struct Customer {\n    string name;\n    int age;\n    string membership_credit;\n  };\n  void display_customers(std::ostream& os, const Customer& customer) {\n    os << \"Customer: \" << customer.name << \"; AGE: \" << customer.age << \"; Membership Credit: \" << customer"
  },
  {
    "id": 417,
    "db_id": "vehicle_rent",
    "question": "Show the name and age of the customer with maximum membership credit.",
    "answer": " \n SELECT c.name, c.age, MAX(s.credit_limit) AS max_credit FROM customers c JOIN memberships m ON c.id = m.customer_id JOIN subscriptions s ON m.id = s.membership_id GROUP BY c.name, c.age;"
  },
  {
    "id": 418,
    "db_id": "vehicle_rent",
    "question": "What is the name and age of the customer with the most membership credit?",
    "answer": "\n 1. SELECT c.name, c.age FROM customer c JOIN (SELECT MAX(m.credit) AS max_credit FROM member m) AS mc ON c.id = m.customer_id JOIN (SELECT MIN(m.year_of_birth) AS min_year_of_birth FROM member m) AS mb ON c.id = m.customer_id WHERE mc.max_credit IS NOT NULL AND"
  },
  {
    "id": 419,
    "db_id": "vehicle_rent",
    "question": "What is the average age for customers with a membership credit above the average?",
    "answer": "\n A customer has an average age of 31.72 years, so he/she is above the average."
  },
  {
    "id": 420,
    "db_id": "vehicle_rent",
    "question": "Return the average age for customers who have membership above the average across all customers.",
    "answer": " 15-24 years old\n SELECT AVG(EXTRACT(YEAR FROM AGE(CURRENT_DATE, c.birthdate)))::FLOAT) AS average_age FROM customer c WHERE EXTRACT(YEAR FROM a.birthdate) > (SELECT AVG(EXTRACT(YEAR FROM a.birthdate)) FROM customer);"
  },
  {
    "id": 421,
    "db_id": "vehicle_rent",
    "question": "Show all information for all discounts.",
    "answer": "  If no filters are specified, return all discounts.\n        /// </summary>\n        public IQueryable<Discount> GetDiscounts(string filter = null)\n        {\n            var query = Discounts;\n            \n            // If a filter is specified, only return the discounts that matches the filter.\n            if (!String.IsNullOrWhiteSpace(filter)) query = query.Where(d => d.Name.Contains"
  },
  {
    "id": 422,
    "db_id": "vehicle_rent",
    "question": "Return all information about discounts.",
    "answer": "  It has an unconventional API, and it's not possible to build a correct client\nto query this API using standard methods.  For example, the following code does NOT work:\n\n\\begin{code}\ncurl -X POST \\\n\"https://api.discountsy.com/v1/discounts?api_token=YOUR-TOKEN-HERE&search%5Bcustomer_name%5D=acme"
  },
  {
    "id": 423,
    "db_id": "vehicle_rent",
    "question": "Show the name and total hours of renting for each vehicle.",
    "answer": " \n * 2. Create a method to check if the name is already in the list and if not, add it \n * 3. Use an iterator to iterate over all vehicles in the list and check if their name is in the list of forbidden names; if so, remove them from the list and show a message \n * 4. Create a method to sort the vehicles in alphabetical order by their name \n */\npublic class VehicleRental {"
  },
  {
    "id": 424,
    "db_id": "vehicle_rent",
    "question": "What are the names and total rental hours for each vehicle?",
    "answer": "\n 2. Create a list of all vehicles in the rental database.\n\nI am new to SQL, I am having trouble with creating a list of all vehicles in the rental database, along with the number of hours that have been rented under each one of them. I also need to be able to show the total number of hours for each vehicle. Can anybody help me? I tried using SELECT v.name AS vehicle_name, COUNT(r.rental_date"
  },
  {
    "id": 425,
    "db_id": "vehicle_rent",
    "question": "Show the name of vehicles with no renting history.",
    "answer": " \n * \n * @param {String} name - vehicle name to search by\n * @return {Vehicle[]} array of Vehicles with given name\n */\nfunction findAllByName(name) {\n    return this._db.filter((vehicle) => vehicle.name === name);\n  }"
  },
  {
    "id": 426,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles that have never been rented?",
    "answer": "\n 1. Vehicle 1: Make: Honda, Model: Accord, Year: 2014, Plate Number: AAAA-1111\n 2. Vehicle 2: Make: Ford, Model: Focus, Year: 2017, Plate Number: BBBB-2222\n3. Vehicle 3: Make: Toyota, Model: Camry, Year:"
  },
  {
    "id": 427,
    "db_id": "vehicle_rent",
    "question": "Show the name of customer with at least two renting history records.",
    "answer": " 16/07/2014\n *\n * @return Customer[]|\\Doctrine\\Common\\Collections\\ArrayCollection\n */\npublic function getCustomersWithTwoRentingHistory()\n{\n    $customers = [];\n    $rentingHistories = $this->getRentingHistory();\n    foreach ($rentingHistories as $rentingHistory) {\n        if (count($customers) < 2)"
  },
  {
    "id": 428,
    "db_id": "vehicle_rent",
    "question": "What are the names of customers who have two or more records of rental history?",
    "answer": "\n  SELECT c.customer_name FROM customer c JOIN rental r ON c.customer_id = r.customer_id GROUP BY c.customer_name HAVING COUNT(r.rental_id) >= 2;"
  },
  {
    "id": 429,
    "db_id": "vehicle_rent",
    "question": "Show the name and model year of the vehicle with most number of renting history records.",
    "answer": " \ndef car_with_most_rentals(cars):\n    most_rented = None\n    max_rentals = 0\n    for car in cars:\n        rentals = car.get_rental_count()\n        if rentals > max_rentals:\n            max_rentals = rentals\n            most_rented = car\n    return most_rented\n\n# def car_with_most_rentals"
  },
  {
    "id": 430,
    "db_id": "vehicle_rent",
    "question": "What is the name and model year of the vehicle which has been rented the most times?",
    "answer": "\n \n </p>\n  <p class=\"card-text\">\n   The winner of the most popular rental car award is a Ford, with the model year being 2016. Renting the Ford Focus 2016 model year was the most popular vehicle among all participants.\n  </p>\n </div>\n </div>"
  },
  {
    "id": 431,
    "db_id": "vehicle_rent",
    "question": "Show the vehicle name with a descending order of total hours of renting.",
    "answer": " \n  \n    SELECT v.vehicle_name, SUM(r.rental_duration) AS total_hours FROM Rental r JOIN Vehicle v ON r.vehicle_id = v.vehicle_id GROUP BY v.vehicle_name ORDER BY total_hours DESC NULLS LAST;"
  },
  {
    "id": 432,
    "db_id": "vehicle_rent",
    "question": "What are the names of vehicles, sorted descending by total hours of renting?",
    "answer": "\n  @GetMapping(\"/vehicles/sorted\")\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <vehicles>\n    <vehicle name=\"Audi A4\" hours=\"25\" />\n    <vehicle name=\"Volvo XC60\" hours=\"30\" />\n    <vehicle name=\"BMW M3\" hours=\"15\" />\n  </vehicles>"
  },
  {
    "id": 433,
    "db_id": "vehicle_rent",
    "question": "What is the discount name with most number of renting history records?",
    "answer": "\n  - Useful for knowing which discount to check first if there are multiple possibilities.\n  - Returned as a string.\n  - Empty string if no discount has any rental history, or if all possible discounts have rental history with equal priority.\n  */\n  getMostPrioritizedDiscountName(): string;\n}"
  },
  {
    "id": 434,
    "db_id": "vehicle_rent",
    "question": "Return the name of the discount that corresponds to the most rental history records.",
    "answer": "  */\n  public String getMostRecentDiscount() {\n    String discount = \"\";\n    int max = -1;\n    for (Map.Entry<String, Integer> entry : rentalHistory) {\n      if (entry.getValue() > max) {\n        discount = entry.getKey();\n        max = entry.getValue();\n      }\n    }\n    return discount;\n  }\n}"
  },
  {
    "id": 435,
    "db_id": "vehicle_rent",
    "question": "Find the name and powertrain type of the cars that rented for more than 30 total hours.",
    "answer": " \"\n +\n            \"SELECT c.name, p.powertrain_type FROM rental_car AS rc JOIN car AS c ON rc.car_id = c.id AND rc.total_hours > 30 JOIN powertrain AS p ON c.powertrain_id = p.id;"
  },
  {
    "id": 436,
    "db_id": "vehicle_rent",
    "question": "What are the names and powertrain types of cars that have more than 30 total rental hours?",
    "answer": "\n Rental Car Cars with More Than 30 Total Hours\n GM X1: 4WD, AUDI Q5, BMW X7, Mercedes-Benz X5, Nissan Patrol, Porsche Cayman, Subaru Forester, Toyota Prestige. These rental car cars have more than 30 total hours on the odometer. The Honda CR-V, Volkswagen Passat, and Vol"
  },
  {
    "id": 437,
    "db_id": "vehicle_rent",
    "question": "Find the average city and highway fuel rates for cars with different powertrain types.",
    "answer": " 42.000000\n    // ****************************************************************/\n    public static function getFuelRatesForCarsWithDifferentPowertrainTypes()\n    {\n        $fuel_rates = self::getAverageCityAndHighwayRates();\n        if (!isset(self::$average_city_and_highway_fuel_rates_for_different_powertrain"
  },
  {
    "id": 438,
    "db_id": "vehicle_rent",
    "question": "What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?",
    "answer": "\n \u201cHaving a higher average fuel economy in city driving is good, but it has no practical effect on the cost of a vehicle purchase. Average fuel economy in highway driving is also not a practical indicator of an economic car. For example, a fuel efficient diesel or hybrid car can be expensive to buy.\u201d\n\u201cFuel-economy ratings are often overlooked when making decisions about cars. Most consumers don\u2019t think that the average fuel economy in city"
  },
  {
    "id": 439,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the average amount of a student loan?",
    "answer": "\n Is the Average Student Loan Interest Rate in the US?\n Increase or Decrease over Time?\nAverage Student Loan Interest Rates in the US Over Time. Average annual interest rates for student loans in the United States have declined steadily since 2004, according to a study published by the Federal Reserve Bank of Minneapolis in August 2019. The average interest rate on student loans in the US has"
  },
  {
    "id": 440,
    "db_id": "cre_Students_Information_Systems",
    "question": "Compute the average amount of student loans.",
    "answer": " 56% of the total amount of loans, or $140976,381 is to be repaid by 2025.\n\nComment: Can you post the code that produces the output?"
  },
  {
    "id": 441,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.",
    "answer": " Cohen, E. (2018) The Impact of Attendance on Student Achievement: A Comparative Study. Journal of Educational Research and Policy, 4(1), 23-39.\nCohen, E., & Penn, R. (2017). Exploring the relationship between attendance and achievement in high school: A comparison of two group means. Journal of Educational Research and Policy, 3"
  },
  {
    "id": 442,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?",
    "answer": "\n  SELECT b.first_name, b.last_name, a.student_id FROM BIOGRAPHICAL b JOIN STUDENTS a ON b.students_id = a.students_id WHERE (SELECT COUNT(c.detention_id) FROM DETENTION c WHERE c.student_id = a.students_id) >= 2 AND (SELECT COUNT(d.suspension_id) FROM S"
  },
  {
    "id": 443,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'",
    "answer": "\n  (Note: I am using the `startsWith` function to check for prefixes).\n Prefixes are considered to be substrings. So, 'net' is a valid prefix of 'network'; 'dat' is not a valid prefix of 'data'; etc.)\n\\end{blockquote}"
  },
  {
    "id": 444,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.",
    "answer": " 1194076, 1192107.\"\n\\end{blockquote}\n\nAnswer: \\begin{code}\n SELECT t.teacher_details FROM teachers t WHERE t.teacher_details ilike '%data%' AND t.teacher_details not ilike 'net%' GROUP BY t.teacher_details;"
  },
  {
    "id": 445,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data of the students who never had a detention or student loan .",
    "answer": " . . I know this is not possible, but what can I do to find out their names and grades?\n What if they don't have an email address? Can I get some other information like phone numbers or addresses? Are there any websites that give me this type of information? I am so desperate, please help me.\" I thought you might be able to do something with this data, but it was just a little too much for my taste.\nI can't provide"
  },
  {
    "id": 446,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students never had a detention or student loan ? Find their biographical data .",
    "answer": "\n Coding is in Java.\n\nI'm working on a project where the user inputs a username and the program checks if it exists in the database. If it does, it outputs the users age, email, and phone number. I've started writing the method to check for a match but I don't know how to find a student's information based off of their username. The data is stored in a Student class with getters and setters.\n\n\\begin"
  },
  {
    "id": 447,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the loan amounts and loan dates of the students who have at least 2 achievements?",
    "answer": "\n A: SELECT s.first_name, s.last_name, l.loan_amount, l.loan_date FROM student AS s JOIN loan AS l ON s.id = l.student_id WHERE (SELECT COUNT(DISTINCT a.achievement_id) FROM achievement AS a WHERE a.student_id = s.id) >= 2;"
  },
  {
    "id": 448,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the amount and date of loan for the students who have two or more achievements.",
    "answer": " \ndef add_achievement(request):\n    \"\"\"Add an achievement to the student.\"\"\"\n    # Check that the user is logged in.\n    if not request.user:\n        return HttpResponseRedirect(\"/\")\n    try:\n        student = Student.objects.get(pk=request.POST[\"id\"])\n        achievement_name = request.POST[\"achievement_name\"]\n        achievement_date = request.POST[\""
  },
  {
    "id": 449,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the detail and id of the teacher who teaches the most courses.",
    "answer": " \n#   3. The number of courses that a teacher has taught \n\n# Part 1: Write a function called \"most_courses\" that takes a list of 2-tuples representing courses and returns the course with the highest count. If there are multiple such courses, return any one of them. If no course has an instructor, return None.\ndef most_courses(courses):\n    max_count = 0\n    course ="
  },
  {
    "id": 450,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the detail and id of the teacher who teaches the largest number of courses?",
    "answer": "\n  SELECT t.name, COUNT(c.id) AS course_count FROM teachers AS t JOIN courses AS c ON t.id = c.teacher GROUP BY t.id, t.name ORDER BY course_count DESC LIMIT 1;"
  },
  {
    "id": 451,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the distinct descriptions of all the detentions which have ever happened?",
    "answer": "\n  @Override\n  public List<Detention> getAllDetentions() {\n    return new ArrayList<>();\n  }\n}"
  },
  {
    "id": 452,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the distinct descriptions of all the detentions that have happened.",
    "answer": " \n   * @return A list of detentions. \n   */\n  List<Detention> getAllDetentions();\n\n  /**\n   * Return the number of detentions.\n   * @return The number of detentions. \n   */\n  int numberOfDetentions();\n}"
  },
  {
    "id": 453,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the personal details and the address type descriptions of all the students.",
    "answer": " \n   */\n  public function getStudentAddressTypeDescriptions() {\n    $addressTypes = StudentAddressType::find()->all();\n    return ArrayHelper::map($addressTypes, 'id', 'description');\n  }\n}"
  },
  {
    "id": 454,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the personal details and the address type descriptions of each student?",
    "answer": "\n  // public String getPersonalDetails(String id) {\n \"1\" : {\"name\":\"John\", \"surname\":\"Doe\", \"address\":\"London\"} }\n  public static Map<String, Student> getStudentMap() throws IOException { return new HashMap<>(); }\n\n  public static Student getStudentByName(String name) throws IOException { return null; }\n}"
  },
  {
    "id": 455,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the the address details and the biographical information of the students.",
    "answer": " \n \n- [ ] The student can see his/her own information.  \n- [x] The teacher can see the information of all the students. \n- [x] The staff can view the information of all the students."
  },
  {
    "id": 456,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the address details and biographical information of each student?",
    "answer": "\n Certainly not. The only information that should be provided to students is their names, birth dates and the dates they are attending school.\nNo personal information should be shared with them. If they have asked for it, do not share any more information than what was previously agreed upon in the parental notification email.\nThe parents have already agreed to share this information publicly on social media or other online platforms. Therefore we cannot change the rules around what is shared and when.\n"
  },
  {
    "id": 457,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the biographical data and the date of the transcript of all the students.",
    "answer": " \n   - List the name, the birthday, the birthplace, the current address and the nationality of each student in the transcript. */\n\nimport java.util.Scanner;\nimport java.io.File;\n\nclass Student {\n    String name;\n    String date_of_birth;\n    String birth_place;\n    String address_now;\n    String nationality;\n\n    public Student(String n, String"
  },
  {
    "id": 458,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the biographical data and the date of transcript issuance of each student?",
    "answer": "\n The number of transcripts issued is 3.58 million, with the average cost per transcript being $176.02.\nThe total value of the transactions is $3,179,857,785.\nThere are 241,969 students enrolled in online courses."
  },
  {
    "id": 459,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students got the most common result in the behavioral monitoring details? Also list the result details.",
    "answer": " 2. If the number of students is more than 1,000,000, then give an estimate of how long it would take to get the full results."
  },
  {
    "id": 460,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the most common result in the behavioral monitoring details. What are the count and the details of this result?",
    "answer": "\n    var maxResult = 0;\n    var maxResults = new Array();\n    \n    for (var i = 0; i < results.length; i++) {\n        var resultCount = results[i].behavioralMonitoringDetail.length;\n        if (resultCount > maxResult) {\n            maxResult = resultCount;\n            maxResults = new Array();\n        }\n        if (resultCount == maxResult) {"
  },
  {
    "id": 461,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.",
    "answer": " A student should appear in the list only once, along with their academic record and any behavioral observations made against them.\n\nComment: I am sorry for the confusion, but I don't understand your question at all. Please try to rephrase it or provide additional information so that we can help you better."
  },
  {
    "id": 462,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.",
    "answer": " The average value for this field is calculated as the arithmetic mean of all the values obtained during the 3 behaviour monitoring periods.\n\n\\begin{code}\n SELECT s.first_name, s.last_name, AVG(s.behavior_monitoring_value) AS average_behaviour_monitoring_value FROM students s JOIN behaviour_monitorings b ON s.id = b.student_id GROUP BY s.first_name,"
  },
  {
    "id": 463,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.",
    "answer": " 1787305272\nSports Science (SSC) has a high level of trust and reliance on its students, therefore it is important to ensure that they are all given adequate support to enable them to reach their full potential in their academic endeavours. SSC will therefore provide the necessary tools, information and resources to help you keep up with your child's progress, and develop their skills and abilities in line with their strengths and interests"
  },
  {
    "id": 464,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the biographical information of the students who got the most common result for their behaviour monitoring details ?",
    "answer": "\n  \"\"\"\n    return pd.DataFrame(results, columns=['Student Name','Grade','Gender','Counselling Hours','Extracurricular Activities','Family Support','School Fee','Parent Participation','Attendence','Hobbies','Sports','Students Percentage in Math & Science','Other Students Dependent on them'] )\n\\end{code}"
  },
  {
    "id": 465,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have gone through any event? List the students' biographical data and event date.",
    "answer": " \n     * @return array of StudentEvent objects, or null if no student-event pairings are found \n     */\n    public function findStudentEvents() {\n        return $this->db->query(self::SELECT_STUDENT_EVENTS)->result();\n    }\n    \n    /**\n     * Get the number of students\n     * @return integer, or null if there are no students \n     */\n    public function countSt"
  },
  {
    "id": 466,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and event date for students who participated in any events.",
    "answer": " \n     * @param array $students List of student id's to be searched \n     * @return array Biographical data and event dates for the specified students \n     */\n    public static function getStudentBioAndEventDates($students) {\n        $db = DbTable::getInstance();\n\n        $query = \" SELECT u.user_id, u.first_name, u.last_name, e.event_date FROM"
  },
  {
    "id": 467,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have joined in the most common type of event? List the number, the event type and description.",
    "answer": " 1382 students have joined in the following events: 748 workshops, 268 lectures, 596 seminars, 237 master classes, and 10 conferences.\nThe next graph shows you how many students have joined in each of those types of events. Here are the results:\nWorkshop: 748 (73%) Masterclass: 237 (22%) Lecture"
  },
  {
    "id": 468,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the type of event the most students joined? Give me the number of students, and the event type code and description.",
    "answer": " \n    SELECT e.event_type_code, COUNT(e.event_id) AS student_count FROM events e JOIN registrations r ON e.event_id = CAST(r.object_id AS varchar) GROUP BY e.event_type_code ORDER BY student_count DESC LIMIT 1;"
  },
  {
    "id": 469,
    "db_id": "cre_Students_Information_Systems",
    "question": "How are all the achievements described? List the achievement detail and the type description.",
    "answer": " \n */\n@property (nonatomic, strong) NSMutableArray *achievements;\n/** The date of creation. */\n@property (nonatomic, strong) NSDate *creationDate;\n/** The number of achievements to earn in total. */\n@property (nonatomic, assign) int totalAchievementsToEarn;\n/** A string containing the unique ID for the event. */\n@property (nonatomic, strong) NSString"
  },
  {
    "id": 470,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the achievement detail and the type description of each achievements?",
    "answer": "\n  const ACHIEVEMENT_DETAILS = {\n 5001: ['Your first 5001 points', 'Achievement for completing 5001 points'],\n 1001: ['Congratulations on reaching 1001 points', 'First Achievement'],\n 5000: ['Reached 5000 points', 'Milestone Achievement'],\n "
  },
  {
    "id": 471,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many teachers have taught a student who has not won any achievements?",
    "answer": "\n A: 75% of the time.\nQ: What percentage of the time has a teacher won at least one achievement?\nA: 25% of the time."
  },
  {
    "id": 472,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of teachers who have taught students who have never won an achievement.",
    "answer": " 0% is returned if there are no teachers with this criteria.\n   * @param {string} achievementId - Achievement id to check for.\n   * @returns {number} - Proportion of teachers that have not taught a student with this achievement.\n   */\n  static getProportionNoTeacherWithAchievement(achievementId) {\n    let noTeachers = Teacher.findByQuery({"
  },
  {
    "id": 473,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the date of the transcripts and the transcript details.",
    "answer": " \n* You can use the `transcript_date` attribute to order the list by the date the transcript was created, oldest first.\n* You can use the `transcript_details` attribute to access the text content of the transcript (it is not stored in the object itself)\n\"\"\"\nclass Transcript(db.Model):\n    # id of the transcript\n    id = db.Column(db.Integer, primary_key=True)"
  },
  {
    "id": 474,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the date and detail of each transcript?",
    "answer": "\n The full list of transcripts is available here.\n If you would like to request a specific transcript, please provide a copy of your letter or email to:\n\n  - Transcripts@UChicago.edu\n  - University Communications Office"
  },
  {
    "id": 475,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the achievement type code, achievement details and the date of the achievements.",
    "answer": " \n\nAchievements are stored in the database with an Achievement Code (ac) that is a unique identifier for the achievement.  The ac is used to identify achievements when viewing a specific achievement, such as when displaying all the achievements on a user's profile page or the details of a particular achievement.\n\nThe ach type code (atc) is used to categorise achievements and is a foreign key that references the Achievement"
  },
  {
    "id": 476,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the type code, details, and date of each achievement?",
    "answer": "\n A list with a brief description of each achievement.\n An image of the related badge."
  },
  {
    "id": 477,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the detention start time and end time of the detentions.",
    "answer": "  The values will be in the format HH:MM, using a 24-hour clock, without leading zeros before single digit hours or minutes.\n\\end{blockquote}\n\nFor example, detention start time might be \"13:00\", and detention end time might be \"15:30\".  If the detentions only last for a half hour, the format would change to \"14:30\" for the end time."
  },
  {
    "id": 478,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the starting time and ending time of each detention record?",
    "answer": "\n I need to get a list of all the times that a certain student has been held in the past, along with the length of the detention.  For example:\n\n\\begin{code}\n SELECT s.name AS student_name, t.name AS teacher_name, d.start_date_time, d.end_date_time - d.start_date_time AS duration FROM DETENTION d JOIN STUDENTS s ON d."
  },
  {
    "id": 479,
    "db_id": "cre_Students_Information_Systems",
    "question": "Show the biographical information of the students whose details include the substring 'Suite'.",
    "answer": "\n  string student_info = \"Suite\";\n  foreach (Student s in students) {\n    Console.WriteLine(s);\n  }\n}\n\\end{code}"
  },
  {
    "id": 480,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have 'Suite' as a substring in their details? Give me their biographical information.",
    "answer": " \n\t// If there are no students with the substring 'Suite' in the details, print 'No matching records found.' */\n\tpublic void findStudentsWithDetailsContaining(String substring) {\n\t\tList<Student> matches = new ArrayList<>();\n\t\tfor (Student student : students) {\n\t\t\tif (student.details().toLowerCase().contains(substring.toLowerCase())) {\n\t\t\t\tmatches.add("
  },
  {
    "id": 481,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the details for all the pairs of teachers and students who are in the same class.",
    "answer": " \n *   - a list of all the courses that a given teacher is teaching and the number of students he/she has. \n *   - a list of all the courses that a student is enrolled in and the name of the teacher for those courses.\n */\npublic class School {\n\t\n\tprivate static final double AVG_GRADE = 75; // average grade threshold to qualify for graduation \n\tprivate static final int MIN"
  },
  {
    "id": 482,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.",
    "answer": " \n   ```sql SELECT t.name AS teacher_name, s.name AS student_name FROM teacher t JOIN class c ON t.id = c.teacher_id JOIN student s ON c.id = s.class_id;"
  },
  {
    "id": 483,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.",
    "answer": " 3. Given a list of students, how to find the number of courses they're taking. 4. Given a list of students, find the student with the highest average grade point score. 5. Find the average time taken to complete each course in a class. 6. Find the number of different teachers who teach at least two courses. 7. List all the students in the class who have the lowest average grade point score.\n8. List all the courses that"
  },
  {
    "id": 484,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.",
    "answer": " \n\"\"\"\nteacher_id = 757071  # Arbitrary value\ncourses_count = len(TeacherCourse.objects.filter(teacher__id=teacher_id))"
  },
  {
    "id": 485,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses do students take at most? Also find the id of the student who takes the most courses.",
    "answer": "  */\nclass StudentCourse {\n    constructor(student_id, course_id) {\n        this.student_id = student_id;\n        this.course_id = course_id;\n    }\n}\nconst courseMap = new Map();\nconst studentMap = new Map();\nconst allSCs = [];\nfunction add(sc) {\n    const key = sc.course_id + \",\" + sc.student_id;\n"
  },
  {
    "id": 486,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.",
    "answer": " \n```python\n SELECT s.id, COUNT(c.id) AS total_courses FROM Student s JOIN Enrollment e ON s.id = e.student_id JOIN Course c ON e.course_id = c.id GROUP BY s.id ORDER BY total_courses DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 487,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students take 2 courses? List student id and details.",
    "answer": " C# code to find the number of students who take 2 or more courses.\n\n\\begin{code}\nSELECT s.StudentID, s.FirstName, s.LastName FROM StudentEnrollments e JOIN Students s ON e.StudentID = s.StudentID WHERE (SELECT COUNT(*) FROM EnrolledCourses WHERE CourseID = e.CourseID AND StudentID = e.StudentID) >= 2;\n\\end{code}"
  },
  {
    "id": 488,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the ids and details of the students who take 2 courses?",
    "answer": "\n \" SELECT s.id, s.first_name, s.last_name FROM student s JOIN enrollment e ON s.id = e.student_id WHERE EXISTS (SELECT 1 FROM enrollment ee WHERE ee.student_id = s.id AND ee.course_id IN (SELECT id FROM course)) GROUP BY s.id, s.first_name, s.last_name HAVING COUNT(DISTINCT ee"
  },
  {
    "id": 489,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the least common detention type? Show the type code and the description.",
    "answer": "  */\n SELECT d.type_code, d.description FROM detentions AS d ORDER BY COUNT(d.type_code) ASC LIMIT 1;"
  },
  {
    "id": 490,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the type code and description of the least common detention type.",
    "answer": " \nI would like to know the type code, description, and count of the total number of detentions for all prisoners in a given year.\n\n SELECT d.type_code, d.description, COUNT(d.type_code) OVER() AS total_count FROM detention d WHERE YEAR = 2019;"
  },
  {
    "id": 491,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which students have a student loan more than the average amount? List the students' biographical data and the details.",
    "answer": "  of the loan, including the amount borrowed.\n\n SELECT s.first_name, s.last_name, l.amount_borrowed FROM Student AS s JOIN Loan AS l ON s.id = l.student_id;"
  },
  {
    "id": 492,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical data and details for students whose student loan is above the average amount.",
    "answer": " \n# from a list of all students. The output should include the following: Name, ID, Age, Gender, Major, Student Loan Balance.\n# For example:\n# Smith, John, 20, Male, Computer Science, $8750.00\n# Chen, Sally, 21, Female, Engineering, $4920.75"
  },
  {
    "id": 493,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the earliest date of loan?",
    "answer": "\n Home is 2017-09-23. We are using a SQL Server 2014 database.\n\nComment: @JeffHolt . . . The logic for choosing the earliest date would depend on the interpretation of \"earliest date\".  That could be the date in the loan table, which might not be the date of the first loan transaction (though that is more likely to happen).  Or it could be the date of the first loan"
  },
  {
    "id": 494,
    "db_id": "cre_Students_Information_Systems",
    "question": "Return the earliest date of loan in the record.",
    "answer": "  The second-to-earliest date is used to determine\n    the cutoff for records that were not included in the initial calculation.\n    \"\"\"\n    min_date = dt.datetime.max.replace(year=9999, month=12, day=31)\n    max_date = dt.datetime.min.replace(year=0, month=1, day=1)\n    for ld in loan_data:\n"
  },
  {
    "id": 495,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which student has the loan with the minimum value? List the student's biographical information.",
    "answer": " \nprint('The student with the minimum value is:')\nprint(students_with_min_value[0])\n"
  },
  {
    "id": 496,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the biographical information of the student with the smallest student loan.",
    "answer": " \n   - Use the Student Loan class's `sort` method to do this, and return a new Student Loan array containing only the loan with the smallest amount. */\n  public static StudentLoan[] findSmallestStudentLoans(StudentLoan[] loans) {\n    return new StudentLoan[0]; // TO DO: Insert your code here!\n  }"
  },
  {
    "id": 497,
    "db_id": "cre_Students_Information_Systems",
    "question": "When was the transcript issued for the student with loan of maximum value?",
    "answer": "\n  var maxValue = -1;\n <br> for (var i in studentsWithLoans) { <br>\n    if (studentsWithLoans[i].loan_value > maxValue) { <br>\n        maxValue = studentsWithLoans[i].loan_value; <br>\n        transcriptIssuedForMaxValue = studentsWithLoans[i].transcript; <br>\n    } <br"
  },
  {
    "id": 498,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the transcript issuance date for the student with the largest amount of loan?",
    "answer": "\n 3. The total amount of loans issued to all students."
  },
  {
    "id": 499,
    "db_id": "cre_Students_Information_Systems",
    "question": "Which teachers have taught the student with the earliest transcript issuance? List the teacher details.",
    "answer": " \n# If two or more teachers share the earliest issue date, list all of those teacher names. \n# Use a subquery to find the earliest issue date and then join that back to the main query to find all the teachers with that earliest issue date."
  },
  {
    "id": 500,
    "db_id": "cre_Students_Information_Systems",
    "question": "Find the details of the teachers who have taught the student with the earliest transcript issuance.",
    "answer": " \n\t * dates, and then find the next-earliest transcript issuance date to find a gap in the list.  \n\t * This method is used to generate a range of transcript issuance dates for the purposes of finding gaps and holes in a sequence of dates.\n\t * \n\t * @param Student the student whose transcripts have been issued.\n\t * @return an array containing the earliest transcript issuance date, the next-ear"
  },
  {
    "id": 501,
    "db_id": "cre_Students_Information_Systems",
    "question": "How much total loan does each student have ? List the student ids and the amounts .",
    "answer": "\n  # @param [Array<Hash>] students_and_amounts list of student ids and their associated loan amounts\n Given a list of student ids and their loan amounts, list the student id and amount.\n  def self.list_student_ids_and_amounts(students_and_amounts)\n    students_and_amounts.each do |id_and_amount|\n      puts \"#{id_and_amount[:id]}"
  },
  {
    "id": 502,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id and the total amount of loan he or she has.",
    "answer": " \ndef query_loan(student_id):\n    total_amount = 0\n    for i in range(len(students)):\n        if students[i][0] == student_id:\n            total_amount = int(students[i][1]) + int(students[i][2])\n            break\n    return total_amount\n\\end{code}"
  },
  {
    "id": 503,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many courses does each student take? List the student id, the student biographical data and the course count.",
    "answer": " \n SELECT s.student_id, s.first_name, s.last_name, COUNT(c.course_id) AS total_courses FROM students s JOIN STUDENTS_ENROLLED se ON s.student_id = se.student_id JOIN COURSE_ENROLMENT c ON se.enrolled_no = c.enroll_number GROUP BY s.student_id, s.first_name, s."
  },
  {
    "id": 504,
    "db_id": "cre_Students_Information_Systems",
    "question": "For each student, find the student id, student biographical data, and the number of courses he or she takes.",
    "answer": " \n# Also, display the total credit hours taken by all students.\n# Output should look like this:\n# Student ID, First Name, Last Name, Courses Taken, Credit Hours Total\n# 1001, Alyssa, Williams, (3 courses) , (15 credit hours)\n# 1002, Jake, Martinez, (2 courses), (8 credit hours)\n# 100"
  },
  {
    "id": 505,
    "db_id": "cre_Students_Information_Systems",
    "question": "How many students have gone through a detention?",
    "answer": " I think there's a good chance that some of them will do so, but most of us don't. Certainly the ones who are here now will be in detention.'\nHey, Jill, what do you mean by 'they'? Is this about the two of you?\"\n\"Oh, I can see your mind is racing ahead,\" he said. \"Let me tell you my plan to take over the world and install myself as its ruler.\"\n"
  },
  {
    "id": 506,
    "db_id": "cre_Students_Information_Systems",
    "question": "Count the number of students who have a detention record.",
    "answer": " A report was published in 2016 which showed that there were over 9,800 students with a detention record at schools in New York City.\nThe data indicates that nearly three-fourths of those with a detention record had an alcohol or drug problem. Almost two-thirds had at least one other disciplinary issue, while 71 percent reported having at least one physical and mental health issue. The majority of students in the study were"
  },
  {
    "id": 507,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the code and description of the most common student address type?",
    "answer": "\n  ///\n \n  /// This is not a standard field in the StudentInfo record.\n  /// </summary>\n  public string AddressType { get; set; } = null;\n}"
  },
  {
    "id": 508,
    "db_id": "cre_Students_Information_Systems",
    "question": "What is the most common student address type? Give me the code and description of the address type.",
    "answer": "  |\n| GET /addresses/count | Get the number of addresses in the system |\n| POST /addresses | Create a new address. The request body should contain an object with properties as described above. |\n| PUT /addresses/{id} | Update an existing address. The request body should contain an object with properties as described above. |\n| DELETE /addresses/{id} | Delete an address by id.  |\n"
  },
  {
    "id": 509,
    "db_id": "cre_Students_Information_Systems",
    "question": "For those students who have gone through an event, who do not have a student loan? List the students' biographical data",
    "answer": ". A) Give their names and ages. B) How many events they have attended, C) What percentage of events they have attended they are attending in total. D) The average number of participants each event has had.\n\nAnswer: A) I don't think it is possible to list the students without a student loan, so there is no answer to this part of the question.\n"
  },
  {
    "id": 510,
    "db_id": "cre_Students_Information_Systems",
    "question": "Among the students who have an event record, who do not have a student loan? Return the students' biographical data.",
    "answer": " \n# for these students.\ndef get_students(db_cursor) -> List[Dict]:\n    query = \"\"\" SELECT s.sid, s.first_name, s.last_name FROM Student s JOIN Event e ON s.sid = e.sid AND s.cid = e.claim WHERE NOT EXISTS (SELECT 1 FROM StudentLoan WHERE s.sid = sl.sid) \"\"\"\n    db_cursor.execute"
  },
  {
    "id": 511,
    "db_id": "cre_Students_Information_Systems",
    "question": "List the start time and the end time of the students' addresses for the students who have 2 transcripts.",
    "answer": " \" +\n            \"and the start time and the end time of the students' addresses for the students who have only 1 transcript.\";\n        String expected = \"SELECT s.student_name, COUNT(DISTINCT t.transcript_id) AS num_transcripts, MIN(t.start_date_time) AS min_start_date_time, MAX(t.end_date_time) AS max_end_date_time"
  },
  {
    "id": 512,
    "db_id": "cre_Students_Information_Systems",
    "question": "What are the start time and end time of addresses for the students who receive 2 transcripts?",
    "answer": "\n C) Write a query that returns the name, address, phone number, and gender of each student in the database.\nD) Write a query that returns the name, address, and phone number of each teacher in the database.\nE) Write a query that returns the name, age, gender, and salary of each employee in the database."
  },
  {
    "id": 513,
    "db_id": "cre_Students_Information_Systems",
    "question": "When did all the detentions start?",
    "answer": "\n On November 25, 1984, 75000 police officers descended upon Washington D.C. to take part in a massive protest against the United States government and its role in the war. This was the first in a series of nationwide protests that would eventually spread from Washington to other cities, all of which were organized by various anti-government groups. The detentions began on November 25th at 10:"
  },
  {
    "id": 514,
    "db_id": "cre_Students_Information_Systems",
    "question": "Give me the detention start date for all the detention records.",
    "answer": " \n\n```java\n    public List<Date> getAllDetentionStartDates() {\n        return detainees.stream().map(d -> d.getStartDate()).collect(toList());\n    }\n```"
  },
  {
    "id": 515,
    "db_id": "book_1",
    "question": "List all the author names.",
    "answer": " \n            </div>\n        </div>\n    );\n}"
  },
  {
    "id": 516,
    "db_id": "book_1",
    "question": "What are the names of all the authors?",
    "answer": "\n A. K. Chakravarti and N. G. M. Patel (2016)\nWhat is the name of the journal in which this paper was published? Journal of Experimental Psychology: Learning, Memory, and Cognition Volume 37, Issue 5, September 2015; pp. 49-58.\nA. K. Chakravarti and N. G. M. Patel ("
  },
  {
    "id": 517,
    "db_id": "book_1",
    "question": "Show all Client names and their addresses.",
    "answer": "  I know this is possible with the following code, but it requires a bit of parsing to extract the values from the returned string.\n\n\\begin{code}\n$clients = $soapclient->Call(\"GetClients\");\nforeach($clients->string as $client) {\n    if(strpos($client,'Client:') !== false){\n        $start_index = strpos($client,'Client:');\n        $end_index = str"
  },
  {
    "id": 518,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients?",
    "answer": "\n The names of the clients can be obtained by the following method:\n \n Client.GetAll().Select(c => c.Name).ToList()"
  },
  {
    "id": 519,
    "db_id": "book_1",
    "question": "List all Book titles, ISBNs, and sale prices.",
    "answer": " 18.5% of the time. In the other 18.5% we do not have enough information to fill in a title or an ISBN.\n\nI've tried this using the code below but I don't get any result. I must be doing something wrong, so can anyone see what?\n\n\\begin{code}\n SELECT ab.title, ab.isbn, ab.price FROM book_abridged ab WHERE ab.title IS"
  },
  {
    "id": 520,
    "db_id": "book_1",
    "question": "What are the titles, ISBNs, and sale prices for all books?",
    "answer": "\n A list of books in the store.\n\\end{code}\n\nA book store that can perform the following operations:\n\\begin{itemize}\n\\item Add a book to the catalog. It should have an author name, title, publication date, and ISBN number. The ISBN must be unique and not already used by any other book in the catalog. When adding a book to the catalog, all fields for the book should be stored in a database table called Books.\n"
  },
  {
    "id": 521,
    "db_id": "book_1",
    "question": "How many books do we have?",
    "answer": "\n Cool. 100,000,000,000 books on the planet?\nYep.\nHow do you know that?\nI know it because I'm a librarian.\nOh. Librarians don't count?\nNo. Because we don't actually own any of those books. They're all loaned to us. We've got to go and get them back. But we can'"
  },
  {
    "id": 522,
    "db_id": "book_1",
    "question": "Count the number of books.",
    "answer": " 2. There are no restrictions on the types of books that can be read, which means we can go to the library and check out any book we want. 3. We can only borrow a total of four books at one time. 4. Each book must have an author, but not all books will necessarily have an author. If the book doesn't have an author, you're still allowed to take it off the shelf and check it out. 5. The"
  },
  {
    "id": 523,
    "db_id": "book_1",
    "question": "How many authors are there?",
    "answer": "\n My own is 150,000 words, and I'd like to know how I can go about finding a publisher. I've been told that I'm a great writer by a few people in my life, but have no idea of what to do next. What are some other authors doing?\nSeveral authors have written extensively on the topic of submitting a manuscript to literary agents and publishing houses. The best place to start is with the"
  },
  {
    "id": 524,
    "db_id": "book_1",
    "question": "Count the number of authors.",
    "answer": " 1690, 2018\n 455. An author can have a different last name in different countries. 1690, 2018\n 470. A person with multiple names can also have different family relationships. 1690, 2018"
  },
  {
    "id": 525,
    "db_id": "book_1",
    "question": "How many clients are there?",
    "answer": "\n Clients.length = 0;\n}\nClients.add(new Client(name: 'Jane Doe', age: 25));\nClients.add(new Client(name: 'John Smith', age: 26));\n\\end{code}\n\nComment: The last one is the best answer. In general, if you need to create an array or any other collection, don't use `length` and `"
  },
  {
    "id": 526,
    "db_id": "book_1",
    "question": "Return the number of clients.",
    "answer": "  */\n  uint32_t getClientCount() const;\n\nprivate:\n  friend class ClientSession;\n\n  std::unordered_map<std::string, ClientInfo> clients_;\n};"
  },
  {
    "id": 527,
    "db_id": "book_1",
    "question": "List names and addresses of all clients in alphabetical order by their names.",
    "answer": " \n */\nfunction listClients() {\n    let clientList = \"\";\n    for (let clientName in clientMap) {\n        clientList += `<li>${clientName}</li>`;\n    }\n    return clientList;\n}"
  },
  {
    "id": 528,
    "db_id": "book_1",
    "question": "What are the names and addressed of all clients, ordered alphabetically by name?",
    "answer": "\n  client_list = sorted(client_dict.keys())\n\n  return client_list"
  },
  {
    "id": 529,
    "db_id": "book_1",
    "question": "Show all book titles and corresponding author names.",
    "answer": " \ndef format_book_list(books, authors):\n    book_authors = list()\n    for i in range(len(books)):\n        book_authors.append([books[i], authors[i]])\n    return book_authors\n\n# Function to sort a dictionary of books and authors\ndef sort_book_list(book_list):\n    sorted_book_list = list()\n    for key, value in book_"
  },
  {
    "id": 530,
    "db_id": "book_1",
    "question": "What are the names of all books and their corresponding authors?",
    "answer": "\n  \"\"\"\n\n  SELECT b.title, a.name FROM book b JOIN author a ON b.author_id = a.id;"
  },
  {
    "id": 531,
    "db_id": "book_1",
    "question": "Show all order ids and their client names.",
    "answer": "  I tried using a subquery but it didn't work out.\n\nI have an order table with the following columns: order_id, customer_name, product_name.\n\nThe customer table has the following columns: customer_id, first_name, last_name.\n\nThe customer_id is in order table as a foreign key.  I want to query to show all the orders with their corresponding customers' first and last names.\n\nI tried"
  },
  {
    "id": 532,
    "db_id": "book_1",
    "question": "What are the ids of all orders and the corresponding client names?",
    "answer": "\n \n abstract class Order {\n    def name: String;\n    def value: Double;\n    def orderId: Int;\n  }\n\n  case class Client(name: String, orderIds: List[Int])\n\n  def main = {\n    val orders = List[Order](\n      new Order(\"order1\", 12.34, 1),\n      new Order(\"order2\", 56.78, "
  },
  {
    "id": 533,
    "db_id": "book_1",
    "question": "Show all author names and the numbers of books each has written.",
    "answer": " \nfor a in authors:\n    print(a, \":\", len(book_by_author[a]))"
  },
  {
    "id": 534,
    "db_id": "book_1",
    "question": "What are the names of all the authors, and how many books has each written?",
    "answer": "\n  # For example:\n  #   Rake::Task[\"authors_and_books\"].invoke\n    # => Author: David Foster Wallace, Books: 4\n    def authors_and_books\n      authors.each { |author| puts \"#{author.name}, #{author.books.length}\" }\n    end\n  end"
  },
  {
    "id": 535,
    "db_id": "book_1",
    "question": "Show all book isbns and the numbers of orders for each.",
    "answer": " 1742605726394\n5595956790254\n8717757558094\n0470220784628\n0455976435686575757357028700214757402757075"
  },
  {
    "id": 536,
    "db_id": "book_1",
    "question": "What are all isbns for each book, and how many times has each been ordered?",
    "answer": "\n The table you need to create is:\n  Title | Author | Isbn13 | Number_of_copies_ordered\n\\end{code}\n\nI've tried a lot of variations of the following but can't seem to get it working.\n\n\\begin{code}\n SELECT b.title, a.name AS author, generate_series(0) AS isbn13, COUNT(*) AS number_of_copies_ordered FROM"
  },
  {
    "id": 537,
    "db_id": "book_1",
    "question": "Show all book isbns and the total amount ordered for each.",
    "answer": "  So in that case, I would like to output:\n\n\n\\begin{code}\nISBN, COUNT(ISBN) AS total_orders FROM orders GROUP BY ISBN;\n\\end{code}\n\nBut I am getting an error: `Unknown column COUNT(ISBN) AS total_orders` when running the query. How do I fix this?\n\nComment: The alias can't have a comma before it, so that is wrong. Remove the comma and try"
  },
  {
    "id": 538,
    "db_id": "book_1",
    "question": "What are the isbns for all books, and what is the total amount ordered for each?",
    "answer": "\n Tags: amazon, book, isbn, number-of-books, total-amount\n ANSWERED BY: Yoel\nAuthor: Yoel Author: Yoel Author: Yoel Author: Yoel Author: Yoel Author: Yoel Author: Yoel Author: Yoel Author: Yoel\n\n#!/usr/bin/env python3.7\nimport re\nimport requests\nfrom bs4 import"
  },
  {
    "id": 539,
    "db_id": "book_1",
    "question": "Show the book title corresponding to the book with the most number of orders.",
    "answer": " \n *\n * @return string The book's title (or \"No orders\" if no book has any)\n */\nfunction most_popular_book() {\n\t$order = array( 'orders' => 0 );\n\n\tforeach ($this->books as $title => $orders) {\n\t\tif ($orders > $order['orders']) {\n\t\t\t$order['orders'] = $orders;\n\t\t\t$order['"
  },
  {
    "id": 540,
    "db_id": "book_1",
    "question": "What is the title of the book that has been ordered the greatest number of times?",
    "answer": "\n  if (!(book_orders.length > 0)) { return null }\n\n  const most_ordered_book = book_orders[0]\n  for (const book_order of book_orders) {\n    if (book_order['count'] > most_ordered_book['count']) {\n      most_ordered_book = book_order\n    }\n  }\n\n  return most_ordered_book['title']\n}"
  },
  {
    "id": 541,
    "db_id": "book_1",
    "question": "Show the book title and purchase price of the book that has had the greatest amount in orders.",
    "answer": " \nSELECT b.title, SUM(o.price) AS total_price FROM books b JOIN order_books o ON b.id = o.book_id GROUP BY b.title ORDER BY total_price DESC LIMIT 1;"
  },
  {
    "id": 542,
    "db_id": "book_1",
    "question": "What is the title and purchase price of the book that has the highest total order amount?",
    "answer": "\n  SELECT b.title, SUM(o.order_total) AS total_order_amount FROM orders o JOIN order_products op ON o.id = op.order_id JOIN products p ON p.id = op.product_id JOIN book_products bp ON bp.product_id = p.id AND bp.book_id IN (SELECT product_id FROM products WHERE product_name = 'The Ultimate Gift') b GROUP BY b"
  },
  {
    "id": 543,
    "db_id": "book_1",
    "question": "Show the titles of books that have been ordered.",
    "answer": "  I have added a link to the book's title in case you want to click on it and check out what they are about.\n\n\\begin{code}\nSELECT b.title FROM book_order bo JOIN book b ON bo.book_id = b.id;"
  },
  {
    "id": 544,
    "db_id": "book_1",
    "question": "What are the different titles of books that have been ordered in the past?",
    "answer": "\n  const books = await Book.findAll();\n  //   res.status(200).json(books);\n  return res.status(200).json({ success: true, message: 'List of all books', books });\n}\n\nasync function getBookById(req, res) {\n  const book = await Book.findByPk(req.params.id);\n  if (book == null) return res.status"
  },
  {
    "id": 545,
    "db_id": "book_1",
    "question": "Show the names of clients who have ordered at least once.",
    "answer": " 134857600192\nSELECT c.customer_first_name, c.customer_last_name FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_first_name, c.customer_last_name HAVING COUNT(o.order_id) >= 1 ORDER BY c.customer_last_name, c.customer_first_name NULLS LAST"
  },
  {
    "id": 546,
    "db_id": "book_1",
    "question": "What are the names of the different clients who have made an order?",
    "answer": "\n  List<string> GetClientNames();\n '\n ' What is the name of the client whose orders you last processed?\n  string GetLastClientName(); '\n ' Return the number of orders associated with a particular client.\n  int CountOrdersFor(string client); '\n ' Which products are in stock for this product ID?\n  List<string> GetStockProducts(int productID); '\n ' Are there any products in stock for this product"
  },
  {
    "id": 547,
    "db_id": "book_1",
    "question": "Show all client names and the number of orders each has made.",
    "answer": " \n- Then display the top 5 clients by total order value, with their total order amount (order quantity * price) displayed in descending order. \n- For any clients that did not place an order, do not include them in the list.\n```java\n SELECT c.name, COUNT(o.id) AS total_orders, SUM(o.price) AS total_order_amount FROM customer c JOIN orders o ON c.id = o.customer_"
  },
  {
    "id": 548,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and how many times has each of them ordered?",
    "answer": "\n  Clients.each do |client|\n    orders = Order.where(client_id: client.id)\n    puts \"#{client.name} has ordered #{orders.length} time#{pluralize(orders.length)}. Their first order was on #{orders.first.date}. Their last order was on #{orders.last.date}.\"\n  end\nend"
  },
  {
    "id": 549,
    "db_id": "book_1",
    "question": "What is the name of the client with the most number of orders?",
    "answer": "\n  var totalOrders = 0;\n # Get all clients and their number of orders.\n  for c in customers:\n    totalOrders += c.orders.length;\n    if(totalOrders > maxOrders):\n      maxOrders = totalOrders;\n      nameOfClientWithMaxOrders = c.name; # Store the name of client with max orders.\n  return nameOfClientWithMaxOrders;"
  },
  {
    "id": 550,
    "db_id": "book_1",
    "question": "Give the name of the client who has made the most orders.",
    "answer": " 1st and 2nd place winners are also listed but only if there are at least three people with the same number of orders.\n\nComment: I'm not sure you can do it without some subquery. See my answer for an alternative method that will work in MySQL, but I don't think it's a good idea to store the rank within the table because that makes the data non-repeatable.\n\nAnswer: Here is one way to do it"
  },
  {
    "id": 551,
    "db_id": "book_1",
    "question": "Show the client names and their total amounts of books ordered.",
    "answer": " \n * The bookstore owner should be able to view all of this information in one place.\n * The bookstore owner can then use this information to make informed decisions about future products, promotions and other marketing strategies.\n */\npublic class Main {\n    public static void main(String[] args) {\n        BookStore store = new BookStore();\n        \n        Customer cust1 = store.addCustomer(\"Bob\");\n        cust1.order"
  },
  {
    "id": 552,
    "db_id": "book_1",
    "question": "What are the names of all the clients, and the total amount of books ordered by each?",
    "answer": "\n 2. A list of the books in stock, along with their authors, book titles, and availability status.\n 3. The number of books that have been checked out from the library and the name of the client who checked them out. */"
  },
  {
    "id": 553,
    "db_id": "book_1",
    "question": "Show the client name who has the most total amount of books ordered.",
    "answer": " \n * \n * @return string The client name with the highest total amount of books ordered, or an empty string if no client has any books ordered.\n */\npublic static String getClientWhoHasTheMostBooks() {\n\t\t// YOUR CODE HERE\n\t\treturn \"\";\n}"
  },
  {
    "id": 554,
    "db_id": "book_1",
    "question": "What is the name of the client who has ordered the greatest total amount of books?",
    "answer": "\n  The answer should be returned as a string. If there are multiple clients with the highest total, then return any one of them.\n  \"\"\"\n  def get_client_with_highest_total(self) -> str:\n    (client, total) = max(self._clients.items(), key=lambda c: c[1]) # returns a tuple, the client and total value of books sold by that client.\n    return client\n```"
  },
  {
    "id": 555,
    "db_id": "book_1",
    "question": "Show all book titles for books that have no orders.",
    "answer": "  */\n\nSELECT b.title FROM book_no_order b;"
  },
  {
    "id": 556,
    "db_id": "book_1",
    "question": "What are the titles of books that have never been ordered?",
    "answer": "\n I have ordered several books, but not all.  I only order those that have a chance to be reviewed here.\n \n ## How can I help you?\n If you want to write a new book, you must do it in English (or any language). You may not write in French, as it is not my favorite."
  },
  {
    "id": 557,
    "db_id": "book_1",
    "question": "Show all client names for clients who have not made orders.",
    "answer": "  I do not want to show the name of clients who have already made an order in the past, and I do not want to display the name of clients who are not registered customers.\n\nAnswer: You could try this:\n\n\\begin{code}\nselect c.name from client c left join customer_order co on c.id = co.client_id where co.client_id IS NULL AND NOT EXISTS (SELECT 1 FROM order_item oi WHERE"
  },
  {
    "id": 558,
    "db_id": "book_1",
    "question": "What are the names of clients who have never made an order?",
    "answer": "\n  // TODO: Make a list of all the clients who have not made an order.\n  for (const client of clientList) {\n    if (!client.orders) {\n      const name = `${client.firstName} ${client.lastName}`;\n      unorderedClients.push(name);\n    }\n  }\n  return unorderedClients;\n}\n"
  },
  {
    "id": 559,
    "db_id": "book_1",
    "question": "What is the maximum and the minimum sale price?",
    "answer": "\n  The max_price and min_price can be calculated in a single pass with a min/max function.\n  If you have a list of prices, p, then:\n    min_price = min(p)\n    max_price = max(p)\n*/\nmin_price = min(prices)\nmax_price = max(prices)\n\n/*\n  Print the min and max prices.\n  You can use the following code"
  },
  {
    "id": 560,
    "db_id": "book_1",
    "question": "Give the maximum and minimum sale price of books.",
    "answer": " \n  5. The average sale price of books. "
  },
  {
    "id": 561,
    "db_id": "book_1",
    "question": "What is the average purchase price and the average sale price?",
    "answer": "\n I tried using this code:\n Average price = (price_buy+price_sale)/2 but it gives me a result of 0.5. How do i get the avarage price to be displayed in the format 0.90 or 1.90 instead of .5?\n\nI also tried using this code: average_price = \"%d.%d\"% (price_buy+price_sale)/2 but"
  },
  {
    "id": 562,
    "db_id": "book_1",
    "question": "Give the average purchase price and average sale price for books.",
    "answer": "  I want to display them in a table, like this:\n\n\n\\begin{code}\n   Avg Price For Books Purchased: $50.00\n   Avg Price For Books Sold: $60.00\n\\end{code}\n\nHow do I create an SQL query to output them in a table?  Below is my current attempt:\n\n\\begin{code}\n SELECT 'Avg Price For Books Purchased"
  },
  {
    "id": 563,
    "db_id": "book_1",
    "question": "What is the maximum difference between the sale price and purchase price?",
    "answer": "\n 4. The average difference between the sale price and purchase price?\n 5. A percentage difference between the sale price and purchase price (sale_price - purchase_price)/(purchase_price) * 100%)?\n\n SELECT (MAX(sale_price - purchase_price)) AS max_difference, AVG(sale_price - purchase_price) AS average_difference, (CAST(sale_price AS"
  },
  {
    "id": 564,
    "db_id": "book_1",
    "question": "Return the largest difference in sale price and purchase price.",
    "answer": " \n# Export to CSV file.\ndata.to_csv('sale_vs_purchase.csv', index=False)"
  },
  {
    "id": 565,
    "db_id": "book_1",
    "question": "List all book titles which have sale prices higher than the average.",
    "answer": " \n// This method is not complete, it should check for both price and quantity and return true if all conditions are met.\nfunction hasHigherPrice(book) {\n    return book.price > getAveragePrice();\n}"
  },
  {
    "id": 566,
    "db_id": "book_1",
    "question": "What are the titles of books with sale prices above the average sale price across all books?",
    "answer": "\n  SELECT b.title FROM book b WHERE b.sale_price > (SELECT AVG(b2.sale_price) FROM book b2);"
  },
  {
    "id": 567,
    "db_id": "book_1",
    "question": "List all book titles which have the lowest sale price .",
    "answer": "\n  The user should be able to filter by book author, genre and book title .\n 'The Adventures of Tom Sawyer' by Mark Twain is the cheapest book but it is filtered out.\n  */\n  public static void lowestPriceBook() {\n    List<String> authors = new ArrayList<>();\n    List<String> genres = new ArrayList<>();\n    List<String> titles = new ArrayList<>();\n    books.forEach(book -> {"
  },
  {
    "id": 568,
    "db_id": "book_1",
    "question": "What are the titles of books that have a sale price equal to the lowest sale price across all books ?",
    "answer": "\n  SELECT b.title FROM book b WHERE b.sale_price = (SELECT MIN(b2.sale_price) FROM book b2);"
  },
  {
    "id": 569,
    "db_id": "book_1",
    "question": "List all book titles which have highest purchase prices .",
    "answer": "\n  private function getHighestPurchasePrice() {\n class-string<Entity\\Book> $bookClass = Book::class; $highestPrice = 0; foreach (BookRepository::getAll($bookClass) as $book) if ($book->getPurchasePrice() > $highestPrice) $highestPrice = $book->getPurchasePrice(); return $highestPrice; } }"
  },
  {
    "id": 570,
    "db_id": "book_1",
    "question": "What are the titles of books with the highest purchase price across all books ?",
    "answer": "\n  SELECT MAX(p.price) AS max_price FROM products p;"
  },
  {
    "id": 571,
    "db_id": "book_1",
    "question": "What is the average sale price of books written by George Orwell?",
    "answer": "\n Category: General Interest Tags: Books, Author: George Orwell, Publisher: Penguin Random House\n On Sale Price: 19.99 GBP\nWinston Churchill & J.R.R. Tolkien \u2013 A Celebration of Two Lives in Literature\nCategory: History, General Interest Tags: Books, Author: Winston Churchill and J.R.R. Tolkien, Publisher: Pengu"
  },
  {
    "id": 572,
    "db_id": "book_1",
    "question": "Give the average sale price of books authored by George Orwell.",
    "answer": " Average Price: \u00a315.78\"\n  def get_average_price(book) do\n    book_prices = []\n    for book in books() do\n      book_prices << book.price\n    end\n    return (book_prices.sum/book_prices.count).round(2)\n  end\nend"
  },
  {
    "id": 573,
    "db_id": "book_1",
    "question": "What are sale prices of books written by Plato?",
    "answer": "\n \u201cWe buy a lot of books from Amazon.\u201d\n I bought a few books there. That\u2019s the only reason to buy a book from Amazon, and that\u2019s not a reason to buy them all over again.\nWhat do you think of your fellow readers about this topic?\nI\u2019m afraid most people don\u2019t take me seriously. I\u2019m so used to getting it wrong. But hey, maybe I\u2019ll start taking my own advice!"
  },
  {
    "id": 574,
    "db_id": "book_1",
    "question": "Return the sale prices of books authored by Plato.",
    "answer": " The most affordable edition is the one with the least number of pages, but the edition with the highest number of reviews.\n\nThis is a very difficult problem to solve, because it depends on many factors, and not all of them can be easily determined by the information in the book itself. For example, some people might prefer older editions (or even reprints) simply because they are less expensive, or because they contain important corrections or other improvements over the original text. Others"
  },
  {
    "id": 575,
    "db_id": "book_1",
    "question": "What is the title of the book written by George Orwell that has the lowest sale price?",
    "answer": "\n A Small Price, a Little Book.\nHow much does a 50 Cent Piece cost in pennies?\nIt costs 50 cents in pennies, which is .05 US dollars."
  },
  {
    "id": 576,
    "db_id": "book_1",
    "question": "Give the title of book by George Orwell that has the lowest saleprice.",
    "answer": " \n// var lowestPrice = 1000;\n// for (let i = 0; i < books.length; i++) {\n//     if (books[i].salePrice < lowestPrice) {\n//         lowestPrice = books[i].salePrice;\n//         bookWithLowestPrice = books[i].title;\n//     }\n// }\n\n// console.log(bookWithLowestPrice);"
  },
  {
    "id": 577,
    "db_id": "book_1",
    "question": "What is the title of the book written by Plato has price lower than the average sale price of all books?",
    "answer": "\n  SELECT COUNT(*) FROM Book b WHERE b.price < (SELECT AVG(b2.price) FROM Book b2);"
  },
  {
    "id": 578,
    "db_id": "book_1",
    "question": "Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.",
    "answer": " \nbook_prices = BookPrice.all()\nbook_titles = []\nfor book_price in book_prices:\n    if book_price.sale_price < (average_sale_price - average_sale_price/10):\n        book_title = Book.where('id' => book_price.book_id)[0].title\n        book_titles << book_title\nprint book_tit"
  },
  {
    "id": 579,
    "db_id": "book_1",
    "question": "Who is the author of the book \"Pride and Prejudice\"?",
    "answer": "\n WHO wrote the book \"Pride and Prejudice\"?\n In addition, who are the authors of \"Pride and Prejudice\"?\nWHO wrote the book \"Pride and Prejudice\"?\nIn addition, who are the authors of \"Pride and Prejudice\"?\nWere the authors of \"Pride and Prejudice\" different people?\nWere the authors of \"Pride and Prejudice\" different people?\nWere the"
  },
  {
    "id": 580,
    "db_id": "book_1",
    "question": "Give the name of the author who wrote the book titled Pride and Prejudice.",
    "answer": " A big thanks to Mr. Darcy for that recommendation!\nWhat do you think would be an appropriate name for a character in your story?\nI am not sure, but I hope someone else can chime in with some suggestions!"
  },
  {
    "id": 581,
    "db_id": "book_1",
    "question": "List titles of all books published by an author whose name contains the string 'Plato'?",
    "answer": "\n  <para>This is a test</para>\n [/pre] \" + Environment.NewLine;\n\n            // Act\n            var result = HtmlHelper.FormatOutput(input, false);\n\n            // Assert\n            Assert.Equal(@\"[<para>This is a test</para>]\", result);\n        }\n    }"
  },
  {
    "id": 582,
    "db_id": "book_1",
    "question": "What are the titles of all books written by an author with a name that contains Plato?",
    "answer": "\n  SELECT DISTINCT b.title FROM Book b JOIN Author a ON b.author_id = a.id WHERE a.name ilike '%Plato%' ORDER BY b.title NULLS LAST;"
  },
  {
    "id": 583,
    "db_id": "book_1",
    "question": "How many orders do we have for \"Pride and Prejudice\"?",
    "answer": "\n Won't we be able to order anything else? What if I want something that doesn't exist? Do we just keep trying until we get what we want?\n A: No, but we do try. We might try several times. There is no other way to do it. The only alternative would be to not have any other options. But we don\u2019t know that anything exists that will be a better alternative. So we have to try until we find something that works"
  },
  {
    "id": 584,
    "db_id": "book_1",
    "question": "Return the number of orders received for Pride and Prejudice.",
    "answer": " 757071\n\nComment: I'd like to know too, if possible, what are the actual sales numbers?"
  },
  {
    "id": 585,
    "db_id": "book_1",
    "question": "Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\".",
    "answer": "\n A person may not be able to find the order in the catalogue but if he/she has an order id, it can look up the book by using the order id.\n*/\nclass Catalogue {\n  private Map<String, Book> catalogue; // maps a book's name to the Book object\n  public int maxOrderId = 0; // the highest order number in the catalogue. We will use this as an id for new orders.\n\n"
  },
  {
    "id": 586,
    "db_id": "book_1",
    "question": "What are the order ids for orders that include both Pride and Prejudice and The Little Prince?",
    "answer": "\n Dump out a list of all the books in each order, and the order numbers.  */\n SELECT o.order_id, b.title FROM orders o JOIN order_items oi ON o.order_id = oi.order_id JOIN items i ON oi.item_id = i.item_id JOIN book_orders bo ON o.order_id = bo.book_id AND i.item_id = bo.book_id JOIN"
  },
  {
    "id": 587,
    "db_id": "book_1",
    "question": "Show all book isbns which were ordered by both client Peter Doe and client James Smith.",
    "answer": " 2016-07-27T13:59:49+08:00\n10757070707@example.com, Ordered books are available at the following stores. Store address, store name, and book isbns are shown below. 2016-07-27T13:59:49+08:00\n\\end{code}"
  },
  {
    "id": 588,
    "db_id": "book_1",
    "question": "What are the isbns of books ordered by both clients named Peter Doe and James Smith?",
    "answer": "\n Pending their release, I can't use them to help you find the author. Please contact a librarian or your school's media center for assistance.\";\n        System.out.println(\"Expected: \" + expected);\n    }\n\\end{code}"
  },
  {
    "id": 589,
    "db_id": "book_1",
    "question": "Find the title of books which are ordered by client Peter Doe but not client James Smith.",
    "answer": " \n\t\t\t * SELECT b.title FROM Bookings b JOIN Clients c ON b.client_id = c.id WHERE c.first_name != 'James' AND c.last_name != 'Smith' ORDER BY b.title NULLS LAST;"
  },
  {
    "id": 590,
    "db_id": "book_1",
    "question": "What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?",
    "answer": "\n Tags: MySQL, sql, subquery, IN operator, WHERE clause, ORM, not in\n CakePHP"
  },
  {
    "id": 591,
    "db_id": "book_1",
    "question": "Show all client names who have orders for \"Pride and Prejudice\".",
    "answer": "\n  \"\"\"\n\n  def get_client_names(orders) do\n    orders\n    |> Enum.map(fn order -> order[\"client\"] end)\n    |> Enum.uniq()\n  end\nend"
  },
  {
    "id": 592,
    "db_id": "book_1",
    "question": "What are the names of clients who have ordered Pride and Prejudice?",
    "answer": "\n My dear reader, I am not sure how you would go about getting that information from me.\nYou may ask for my opinion on the book, but I don't think that's relevant.\nMy parents are both Pride and Prejudice fans, though.\nI am a fan of P&P, and have recommended it to many friends."
  },
  {
    "id": 593,
    "db_id": "book_review",
    "question": "How many books are there?",
    "answer": "\n When the person you are looking at is a child, do you see that they're holding a book in their hand and you're thinking \"Wow, this kid has a big imagination! They must read so much!\" You can tell that the books they have on the shelves are the ones that would interest them. You may see a book on the shelves with an old and worn cover that tells you \"This book is great, I've read it twice already"
  },
  {
    "id": 594,
    "db_id": "book_review",
    "question": "List the titles of books in ascending alphabetical order.",
    "answer": " \n  (list-sort book-titles)\n\n  '(My First Arithmetic My Second Arithmetic))"
  },
  {
    "id": 595,
    "db_id": "book_review",
    "question": "List the titles of books in descending order of pages.",
    "answer": " \n  for (int i = 0; i < size; i++)\n    std::cout << bookList[i]->title << \" \";\n}"
  },
  {
    "id": 596,
    "db_id": "book_review",
    "question": "What are the types and release dates of books?",
    "answer": "\n On their official website, Amazon.com lists information about the type of book (paperback/hardcover) and the date it was released.\nAmazon.com also has a \"best sellers\" section that shows what types of books are the most popularly purchased. This is a great way to get an idea of which type of book is the most popular among your customers."
  },
  {
    "id": 597,
    "db_id": "book_review",
    "question": "What are the maximum and minimum number of chapters for each book?",
    "answer": "\n Tags: chapters, books, max, min, count, range, length\n "
  },
  {
    "id": 598,
    "db_id": "book_review",
    "question": "What are the titles of books that are not \"Poet\"?",
    "answer": "\n In your bookstore, you have a book that is not \"Poet\". Is it just \"Poet\" or does it also contain \"Poet\" in its title?\n The answer to that question may depend on how the store was set up and how it classifies books. Some stores would treat the former as different from the latter, while others would consider them similar.\n\\end{blockquote}\n\nThere's a book that is not \"Poet\" in my"
  },
  {
    "id": 599,
    "db_id": "book_review",
    "question": "What is the average rating in reviews?",
    "answer": "\n The average review rating for this product is 4.5 star.\nThe most recent review on this product was posted by Abe on July 27, 2017. It gives a rating of 4.5 stars and has not been updated recently.\nThe most recent review on this product was posted by Jameson on March 23, 2016. It gives a rating of 4.5 stars and has not been updated recently."
  },
  {
    "id": 600,
    "db_id": "book_review",
    "question": "What are the titles and ratings of books?",
    "answer": "\n Post by: AJM on February 26, 2011, 05:34:28 pm\n The 75th Academy Awards nominations were announced tonight, with a number of notable films making the shortlist. They include \"The Queen\" (2.8), \"Inception,\" (2.5), \"Love Giggle\" (2.1) and \"Wall Street: A Love Story\" (2."
  },
  {
    "id": 601,
    "db_id": "book_review",
    "question": "What is the rating of the book with the largest number of chapters?",
    "answer": "\n  This program reads a text file and prints to standard output the name of the book, the author, and the chapter count. It also calculates the average chapter length.\n*/\nimport java.util.Scanner;\npublic class ChapterCounter {\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        String title;\n        String author;\n        int chapters;\n        double averageLength;\n"
  },
  {
    "id": 602,
    "db_id": "book_review",
    "question": "What is the rank of the book with the smallest number of pages?",
    "answer": "\n  Page_rank = (SELECT MIN(Page_Count) FROM Books);"
  },
  {
    "id": 603,
    "db_id": "book_review",
    "question": "What is the title of the book with the highest rank in the review?",
    "answer": "\n  # return Review.order(:rank).last.book.title\nend\n\\end{code}"
  },
  {
    "id": 604,
    "db_id": "book_review",
    "question": "What is the average number of readers for books of type \"Novel\"?",
    "answer": "\n  #=> 2.57\n```\n\nThe `avg` method accepts a second argument, an optional precision to round the result with. By default, it rounds to 4 decimal points:\n\n```ruby\navg(3.14159)                    # => 3.142\navg(3.14159, 3)                # => 3.142\navg(3"
  },
  {
    "id": 605,
    "db_id": "book_review",
    "question": "For each book type return the type and the number of books of that type.",
    "answer": " \n# You can assume that all books have distinct types."
  },
  {
    "id": 606,
    "db_id": "book_review",
    "question": "What is the most common type of books?",
    "answer": "\n Are you talking about books that are available in English or do you mean a book you have written? I'm sorry but I don't understand what you are saying. Please clarify your question so I can better assist you. I will remove my previous comment as it is no longer relevant to the conversation."
  },
  {
    "id": 607,
    "db_id": "book_review",
    "question": "What are the types of books that have at least three books belonging to?",
    "answer": "\n A list of book titles and authors.\nSELECT b.title, b.author FROM books_book_type bt JOIN book_types b ON bt.book_type_id = b.id WHERE bt.book_count >= 3;"
  },
  {
    "id": 608,
    "db_id": "book_review",
    "question": "List the titles of books in ascending order of the ratings in review?",
    "answer": "\n The most efficient way to do this is to first sort the ratings in descending order, then take the top N items from the list.\n\nComment: I don't know of any other efficient method that does not involve sorting the entire list (for N = 100, for example).\n\nAnswer: You can sort by rating and take the top ten:\n\n\\begin{code}\nSELECT book_id, book_title FROM books ORDER BY average_"
  },
  {
    "id": 609,
    "db_id": "book_review",
    "question": "List the title and audio length for all the books in descending order of the number of readers.",
    "answer": " \n   * @return a list of book names and their corresponding audio lengths (in seconds) with the highest number of readers first.\n   */\n  public List<Map<String, Object>> getPopularBooks() {\n    List<Map<String, Object>> popularBooks = new ArrayList<>();\n    List<Audiobook> books = this.getAll();\n\n    for (Audiobook book : books) {\n      Map<String, Object>"
  },
  {
    "id": 610,
    "db_id": "book_review",
    "question": "How many books do not have reviews?",
    "answer": "\n Members who are members of the National Book Council and/or the Publishers, Authors, Booksellers and Retailers Association (PABRA) can add a review. \nIf you are looking for a book by an author that is on this site and does not have a review, please send a request to have it added at <a href=\"mailto:reviews@nationalbookcouncil.org\">reviews@nationalbookcouncil."
  },
  {
    "id": 611,
    "db_id": "book_review",
    "question": "Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.",
    "answer": " \" +\n        \"This is a very long text that should be wrapped. Wrap this text because it is too long for the label.\";\n    }\n}"
  },
  {
    "id": 612,
    "db_id": "book_review",
    "question": "How many distinct types of book are there?",
    "answer": "\n 4. What is the average number of books on a shelf in a house?\n 5. How do you keep track of the books you have read?\n 6. How do you organize your library?\n 7. What if someone gives you a book and asks you to return it to them later?\n\\end{code}"
  },
  {
    "id": 613,
    "db_id": "book_review",
    "question": "What are the type and title of the books that are not rated?",
    "answer": "\n A list of all the books that are not rated.\n\nAnswer: Use a NOT EXISTS condition to check for the absence of a rating.  For example, to find all the books without a rating you could use the following query:\n SELECT b.title FROM book b WHERE NOT EXISTS (SELECT 1 FROM book_rating br WHERE br.book = b.id);"
  },
  {
    "id": 614,
    "db_id": "restaurant_bills",
    "question": "How many customers are there?",
    "answer": "\n There's a new report that shows the number of customers for each city in North America, and we can do that by looking at the population density of each city. We can use a bar graph to show that.\n\nWhat's the population density of the most populous cities in North America? Here is the data:\n```{r}\npop_density <- c(NewYork = 4675, LosAngeles = 1209"
  },
  {
    "id": 615,
    "db_id": "restaurant_bills",
    "question": "Count the number of customers.",
    "answer": " 2. Find the average age of the customers in years.\n3. Find the total number of pets in the shelter.\n4. Find the average age of the pets in years."
  },
  {
    "id": 616,
    "db_id": "restaurant_bills",
    "question": "List the names of customers in ascending order of level of membership.",
    "answer": " 1. Premium, 2. Gold, 3. Silver, 4. Blue, 5. Green\n        \"\"\"\n        return self.customer_list.sort(key=lambda c: c.level_of_membership)\n\\end{code}"
  },
  {
    "id": 617,
    "db_id": "restaurant_bills",
    "question": "Sort all the customers by the level of membership in ascending order, and return the customer names.",
    "answer": " \n# a = ['John', 'Amy', 'Steve']\n# b = ['Senior', 'Junior', 'Vice-President']\n# c = []\n\n# for i in range(len(a)):\n#     for j in range(len(b)):\n#         d = a[i] + ' ' + b[j]\n#         c.append(d)\n\n# print(c)"
  },
  {
    "id": 618,
    "db_id": "restaurant_bills",
    "question": "What are the nationalities and card credits of customers?",
    "answer": "\n Cards, issued by banks in the United States, are only valid within the U.S. You cannot use a credit card issued by one country to make a purchase in another country, even if it is physically possible to do so.\nFor more information on US-issued credit cards and their availability, see our article here: How to Use a Credit Card Abroad?\nWhat is the expiration date of my credit card? I can find this information on the"
  },
  {
    "id": 619,
    "db_id": "restaurant_bills",
    "question": "Find the nationality and card credit of each customer.",
    "answer": " \n* Implement a function to find the name of the customers who have the maximum number of credit cards associated with them.\n*/\npublic class Customer {\n    public String name;\n    public String creditCard;\n    public int maxCreditCards;\n    public Customer(String name, String creditCard) { this.name = name; this.creditCard = creditCard; this.maxCreditCards = 0; }\n}\npublic"
  },
  {
    "id": 620,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers with nationality \"England\" or \"Australia\".",
    "answer": "\n  - It should return a list of customer objects.\n  \n### Challenge 12\nImplement a function that:\n- Takes a list of customer objects and an integer n.\n  - Returns a new list with the first n elements of the original list.\n  "
  },
  {
    "id": 621,
    "db_id": "restaurant_bills",
    "question": "Which customers have nationality \"England\" or \"Australia\"? Give me their names.",
    "answer": " \n// Write a program that prints the name of every customer with the country \"Germany\"."
  },
  {
    "id": 622,
    "db_id": "restaurant_bills",
    "question": "What is the average card credit of customers with membership level higher than 1?",
    "answer": "\n A SELECT AVG(c.credit_limit) AS average_credit FROM customers c WHERE c.membership_level > 1;"
  },
  {
    "id": 623,
    "db_id": "restaurant_bills",
    "question": "Find the average card credit customers whose membership level is above 1.",
    "answer": " \">\n<cfif arrayLen(memberships) gt 0 AND averageCreditCardValue gt 1>\n\t<cfquery name=\"getMembers\" datasource=\"#dsn#\">\n\tSELECT memberID FROM members m JOIN member_membership mm ON m.memberID = mm.member_id WHERE mm.membership_level > 1 AND averageCreditCardValue > 1;"
  },
  {
    "id": 624,
    "db_id": "restaurant_bills",
    "question": "What is the card credit of the customer with the highest membership level?",
    "answer": "\n  $sql = \" SELECT c.customer_name, m.membership_credit FROM customers c JOIN memberships m ON c.customer_id = m.member_id ORDER BY m.membership_credit DESC NULLS LAST LIMIT 1;\";"
  },
  {
    "id": 625,
    "db_id": "restaurant_bills",
    "question": "Find the customer with the highest membership level and return his or her card credit.",
    "answer": " \n   */\n  public static int[] findMaxCreditCustomer(int[][] arr) {\n    // TODO: Implement your solution here.\n    int max = 0;\n    for (int i = 0; i < arr[1].length; i++) {\n      if (arr[1][i] > max) {\n        max = arr[1][i];\n      }\n    }\n    return new int[] { arr"
  },
  {
    "id": 626,
    "db_id": "restaurant_bills",
    "question": "Show different nationalities of customers, along with the number of customers of each nationality.",
    "answer": " \n// ------------------------------------------------------------------------------\npublic class NationalityCounter {\n    private Map<String, Integer> m = new HashMap<>();\n    \n    public void addCustomer(String name) {\n        String n = getNationalityFromName(name);\n        if (m.containsKey(n)) {\n            int c = m.get(n) + 1;\n            m.put(n, c);\n        } else {\n"
  },
  {
    "id": 627,
    "db_id": "restaurant_bills",
    "question": "How many customers are associated with each nationality? List the nationality and the number of customers.",
    "answer": "  for every nation on a separate line in the following format:\n Nationality - Customer Count\n\nfor example, \"French - 10\" or \"Spanish - 35\" (and so on for other nations).\n\nYou may use a for loop to iterate over the different nationalities in the list and for each one you will have to count how many customers are associated with that nationality. For this, you can create an inner for loop that iterates over"
  },
  {
    "id": 628,
    "db_id": "restaurant_bills",
    "question": "Show the most common nationality of customers.",
    "answer": " 27% are from India, 13% from Indonesia, 7% from the United States, and 6% from the Philippines.\nThe top five most proficient languages spoken in Singapore are English (native), Mandarin Chinese, Malay and Hokkien. Only 96% of Singaporeans speak at least one language in this top five."
  },
  {
    "id": 629,
    "db_id": "restaurant_bills",
    "question": "Which nationality does the most customers have?",
    "answer": "\n You don't know.\n\\end{blockquote}\n\nThis is just a random thought I had while sitting at work today. I was thinking about how to answer this question on an exam:\n\n\\begin{blockquote}\n\n How can you find which nationality does the most customers have?\n\\end{blockquote}\n\nI'm not even sure if that makes any sense, but I just had a thought and it was fun to write down."
  },
  {
    "id": 630,
    "db_id": "restaurant_bills",
    "question": "Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.",
    "answer": " C\n SELECT n.name FROM nation n JOIN customer c ON n.nationcode = c.country WHERE c.card_credit < 50 AND c.card_credit > 75;"
  },
  {
    "id": 631,
    "db_id": "restaurant_bills",
    "question": "Which nations have both customers with card credit above 50 and customers with card credit below 75.",
    "answer": " The conditionals must be written in a single query using the `or` operator.\n\n```sql\n SELECT COUNT(DISTINCT c.customer_id) AS total_customers FROM customer c JOIN payment p ON c.customer_id = p.customer_id WHERE (p.card_credit > 50 OR p.card_credit < 75);"
  },
  {
    "id": 632,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order.",
    "answer": " \n  2. Add a new customer with the name \"Craig\" that orders a \"Ham & Cheese\". */\nclass Restaurant {\n  constructor() {\n    this.dishes = {};\n    this.customers = [];\n  }\n\n  addDish(name, ingredients) {\n    this.dishes[name] = ingredients;\n  }\n\n  addCustomer(name) {\n   "
  },
  {
    "id": 633,
    "db_id": "restaurant_bills",
    "question": "For each order, return the customer name and the dish name.",
    "answer": " \n   */\n  public function getOrderItems() {\n    $orderItem = [];\n    foreach ($this->items as $item) {\n      $orderItem[] = [ 'dish_name' => Dishes::find($item['dish_id'])->name, 'customer_name' => Customer::find($this->customer_id)->first_name.' '.Customer::find($this->customer_id)->last_name ];\n    }"
  },
  {
    "id": 634,
    "db_id": "restaurant_bills",
    "question": "Show the names of customers and names of dishes they order, in descending order of the quantity of dish.",
    "answer": " \n   - (a) Write a program to print the list of customer names alphabetically sorted, with their number of orders, followed by the name of the dishes they ordered, listed in alphabetical order.\"\"\"\n\n\ncustomers = {} # dict with custome names as keys and lists of orders (as values) as value \ndishes = {} #{dish name : [customer name who ate the dish] }\nwith open('data.txt')"
  },
  {
    "id": 635,
    "db_id": "restaurant_bills",
    "question": "For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.",
    "answer": "\n    SELECT c.customer_name, p.dish_name, SUM(p.quantity) AS total_quantity FROM products p JOIN customers c ON p.customer_id = c.id GROUP BY c.customer_name, p.dish_name ORDER BY total_quantity DESC;"
  },
  {
    "id": 636,
    "db_id": "restaurant_bills",
    "question": "Show each customer name and the total quantities of dishes ordered by that customer.",
    "answer": " \n  5. For each customer, show a list of all the dishes he/she has ordered (including quantity) in the order they were ordered. \n  6. What is the maximum number of dishes that can be ordered by a single customer? How many customers have ordered more than this total (their names and how much more they ordered)? \n  7. Ordered dishes and their total cost. \n  8. Average price per dish"
  },
  {
    "id": 637,
    "db_id": "restaurant_bills",
    "question": "What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .",
    "answer": "\n  (DONE)\n  SELECT c.customer_name, SUM(d.quantity) AS total_quantity FROM customers c JOIN orders o ON c.id = o.customer_id JOIN order_items oi ON o.id = oi.order_id JOIN dishes d ON oi.dish_id = d.id GROUP BY c.customer_name;"
  },
  {
    "id": 638,
    "db_id": "restaurant_bills",
    "question": "Show the customers with total quantity of order bigger than 1.",
    "answer": " \"SELECT COUNT(o.order_id) FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE oi.quantity > 1\""
  },
  {
    "id": 639,
    "db_id": "restaurant_bills",
    "question": "Which customers have total order quantity greater than 1? Give me the customer names.",
    "answer": " \"customer1\" and \"customer2\".\n\\end{code}\n\nYou can also use the `COUNT` function to filter for customers with more than one order:\n\n\\begin{code}\n SELECT c.customer_name FROM orders o JOIN customers c ON o.customer_id = c.customer_id GROUP BY c.customer_name HAVING COUNT(o.order_id) > 1;"
  },
  {
    "id": 640,
    "db_id": "restaurant_bills",
    "question": "Show distinct managers of branches.",
    "answer": " 2) You can create a new branch and use the same code as above to populate it.\n\\end{itemize}"
  },
  {
    "id": 641,
    "db_id": "restaurant_bills",
    "question": "Who are the distinct managers of branches?",
    "answer": "\n Nurses are not allowed to be managers. They may have their own job descriptions, but they don\u2019t get paid a salary, and they don\u2019t get benefits like pensions or insurance. So there is no way that you can have more than one nurse manager for the same department.\nDo we all wear white coats? No! We wear scrubs now. We all wear a distinctive white coat because of our job title, but it doesn"
  },
  {
    "id": 642,
    "db_id": "restaurant_bills",
    "question": "List the names of customers that do not have any order.",
    "answer": " \n#         customer_list = Customer.objects.filter(order__isnull=True)\n#         return render(request, 'customer_list.html', {'customer_list': customer_list})\n#     def post(self, request):  # Add a new customer \n#         name = request.POST['name']\n#         c = Customer(name=name)\n#         c.save()\n#         return redirect('customer_list"
  },
  {
    "id": 643,
    "db_id": "restaurant_bills",
    "question": "Which customers do not have any order? Give me the customer names.",
    "answer": " 1-10.\n\n\\begin{code}\n SELECT c.first_name, c.last_name FROM customer c ORDER BY c.first_name, c.last_name LIMIT 10;\n\\end{code}"
  },
  {
    "id": 644,
    "db_id": "club_leader",
    "question": "How many members are there?",
    "answer": "\n My goal is to have a list of all the members, in order, with no duplicates. I know I can use the .Add() method to add each member, but how do I check if that member exists before adding it to the list? I need something like \"if (list_of_members.Find(member) == NULL)\".\n\nComment: Could you show us the code you have tried so far and what problems you're encountering?\n\nAnswer:"
  },
  {
    "id": 645,
    "db_id": "club_leader",
    "question": "List the names of members in ascending order of age.",
    "answer": " \n  age_list = sorted(age_dict, key=age_dict.get)\n  print('Members ordered by age:', age_list)"
  },
  {
    "id": 646,
    "db_id": "club_leader",
    "question": "What are the names and nationalities of the members?",
    "answer": "\n Alpha is the first name, and I don't think there's an option for a last name. If you're looking to add your own name, you can do that by going into the edit settings and adding a description.\nYou need to make a new account on the website to join. We will send you an invite via email. Once you are logged in, click the \"Join\" button above the members list to get started!"
  },
  {
    "id": 647,
    "db_id": "club_leader",
    "question": "List the names of members whose nationality is not `` England '' .",
    "answer": "\n  ''.\n'' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' ''"
  },
  {
    "id": 648,
    "db_id": "club_leader",
    "question": "Show the names of members whose age is either 19 or 20.",
    "answer": " C++ is a language that has a lot of complexities, but I don't think you need to know them all.\n\n\\begin{code}\n#include <iostream>\n#include <cmath>\nusing namespace std;\nstruct Person { int age; };\nint main() {\n    Person p1 = { 19 }, p2 = { 20 };\n    cout << \"p1.age: \" << p1.age <<"
  },
  {
    "id": 649,
    "db_id": "club_leader",
    "question": "What is the name of the oldest member?",
    "answer": "\", \"member\", 1, 0);\n  if (r == -1) return -1;\n ' '\n  r = redisCommand(c, \"SORT\", \"SET\", \"users\", \"GET\", \"u.age\");\n  ' '\n  r = redisCommand(c, \"HGETALL\", \"user:123456\");\n  ' '\n  for (i = 0; i < r.len;"
  },
  {
    "id": 650,
    "db_id": "club_leader",
    "question": "Show different nationalities along with the number of members of each nationality.",
    "answer": " 2)  List the countries in alphabetical order. 3)  Display all the cities in a country and their populations in millions.\n\n1)  Nationality, Population\n\n SELECT n.name AS nationality, COUNT(DISTINCT m.nationality_id) AS member_count FROM members m JOIN NATIONALITY n ON m.nationality_id = n.id GROUP BY n.name ORDER BY member_count DESC NULLS LA"
  },
  {
    "id": 651,
    "db_id": "club_leader",
    "question": "Please show the most common nationality of members.",
    "answer": " 1902-1950 - 78% 1950-2000 - 46% 2000-2008 - 38%\n Above 2000 - 8% 1902-1950 - 23% 1950-2000 - 37% 2000-2008 - 4"
  },
  {
    "id": 652,
    "db_id": "club_leader",
    "question": "Show the nations that have at least two members.",
    "answer": " 250791\n\n    for (int i = 0; i < n; i++) {\n        if (count_members(i) >= 2) {\n            printf(\"Nation %d has at least two members\\n\", i);\n        }\n    }"
  },
  {
    "id": 653,
    "db_id": "club_leader",
    "question": "Show the names of club leaders and the names of clubs they joined.",
    "answer": " The second, show a list of all members with their membership dates, along with the number of times they have renewed and any special status they hold (e.g. honorary member, life member)\nThe third, provide an option to add a new member. From there, the user can input the name and other relevant information for a new member.\nThe fourth is a calendar view which allows users to select dates of their choice and see who is attending those events.\nThe"
  },
  {
    "id": 654,
    "db_id": "club_leader",
    "question": "Show the names of club leaders of clubs with overall ranking higher than 100.",
    "answer": " C# program is supposed to find all such clubs.\n\nMy code is:\n\n\\begin{code}\nclass Club\n{\n    public int Rank { get; set; }\n    public string Name { get; set; }\n\n    public bool IsHigherRankedThan100() => Rank > 100;\n}\n\npublic List<Club> clubs = new List<Club>() {\n    new Club()"
  },
  {
    "id": 655,
    "db_id": "club_leader",
    "question": "Show the names of club leaders that joined their club before 2018.",
    "answer": " \n     */\n    public function getLeadersBefore2018($clubName) {\n        $leaders = array();\n        $query = \"SELECT c.name AS club_name, p.first_name || ' ' || p.last_name AS full_name FROM members m JOIN clubs c ON m.club = c.name AND c.club_type = 'C' AND c.name ilike '%$clubName%' JOIN players"
  },
  {
    "id": 656,
    "db_id": "club_leader",
    "question": "Show the name of the leader of the club named \"Houston\".",
    "answer": "\n  var_dump($club->getLeader()); // Should show \"Tom\" as the leader.\n?>"
  },
  {
    "id": 657,
    "db_id": "club_leader",
    "question": "List the names of members that are not club leaders.",
    "answer": " \n            /// </summary>\n            public void GetMembersNotLeader(int limit = 0)\n            {\n                var memberList = new List<string>();\n                if (limit == 0)\n                    limit = this.totalMembers;\n                for (int i = 1; i <= limit; i++)\n                    memberList.Add(this[i]);\n                Console.WriteLine(\"There are \" + limit + \""
  },
  {
    "id": 658,
    "db_id": "club_leader",
    "question": "Show the nations that have both members older than 22 and members younger than 19.",
    "answer": " \"I can do this\"\n\n\\begin{code}\n SELECT n.nationName FROM Nations n JOIN NationMembers nm ON n.nationID = nm.nationid WHERE nm.memberDate < '2022-10-01' AND (SELECT COUNT(*) FROM NationMembers WHERE nationid = n.nationID AND memberDate > '2020-10-01') < 20;"
  },
  {
    "id": 659,
    "db_id": "club_leader",
    "question": "What is the average age of all the club leaders?",
    "answer": "\n Post by: Lt_Colonel_John on October 16, 2019, 11:37:55 am\n \u00bb\nI've just had to do an average age calculation from a list of members I'm helping to create. It is 43.6 years old. If the average age of all club leaders is this high then what is the chance that I (or any other member) is over 50?\n"
  },
  {
    "id": 660,
    "db_id": "club_leader",
    "question": "Which club name contains the string 'state'?",
    "answer": "\n  // We are looking for a word boundary in this case.\n  if (name_contains(name, \"state\")) {\n    return 1;\n  } else {\n    return 0;\n  }\n}"
  },
  {
    "id": 661,
    "db_id": "cre_Doc_and_collections",
    "question": "List all collections' subset. List the subsets' names.",
    "answer": "\n\\item Display a list of all the items in each collection's subset. For example, for the first collection's subset, display the items in the order they were added to that subset (output: a b c d e f g h i).\n\\item Display the number of items in each collection's subset. For the first collection's subset, this would be 8.\n\\end{itemize}"
  },
  {
    "id": 662,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection susbset names?",
    "answer": "\n  return set(d.name for d in data_root)\n\n@app.route(\"/api/v1/dataset\")\ndef list_datasets():\n  # Return all available datasets and their descriptions\n  return jsonify([{ \"id\": d.name, \"description\": d.description } for d in data_root])"
  },
  {
    "id": 663,
    "db_id": "cre_Doc_and_collections",
    "question": "What is detail of collection subset with name 'Top collection'?",
    "answer": "\n  </div>\n  <div class='card-footer'>\n    <a class='stretched-link' href='#/collection/top_collection'>View more</a>\n  </div>\n</div>"
  },
  {
    "id": 664,
    "db_id": "cre_Doc_and_collections",
    "question": "What collection details are there on the subset named 'Top collection'?",
    "answer": "\n  describe 'The top collection' do\n # rubocop:disable Metrics/BlockNesting, Metrics/CyclomaticComplexity, Metrics/MethodLength, Metrics/AbcSize, Metrics/PerceivedComplexity, Metrics/ParameterListsMetrics\n    subject(:query) { described_class.new(model_object: collection) }\n\n    let(:collection) do\n      Collection.create!("
  },
  {
    "id": 665,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents's subset. List the subset's name.",
    "answer": "\n                'doc_count': 100, # number of documents in this subset (incomplete)\n            },\n            {\n                'name': 'subset2',\n                'documents': ['doc1', 'doc2'],\n                'count': 50,\n                'label_count': 0,\n                'doc_count': 100, # number of documents in this subset (incomplete)\n            },\n        ],"
  },
  {
    "id": 666,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document subset names?",
    "answer": "\n  \\item If the user has selected a particular subset, and that subset is not available for some reason (e.g. if the subset name does not match any of the available subset names), how do you want to handle that error?\n  \\item What about when the user wants to see the full dataset in the current document type (e.g. a document with no subsets, and the user has selected `full_dataset` for viewing)? How do you want to"
  },
  {
    "id": 667,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the detail of document subset with name 'Best for 2000'?",
    "answer": "\n I mean how to get a list of all words in this document subset?\n Might be useful when working with the API.\n\nComment: If you have access to the text-file, use `fopen` and `fread`. If you don't, you can't.\n\nComment: I can do this without opening a file. But for the sake of curiosity: How would it look? (I am not at home, so I cannot test it)"
  },
  {
    "id": 668,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the details on the document subsets that are named 'Best for 2000'?",
    "answer": "\n B) I am not sure what to do.\n\nI have a document, and there is an entry in it called \"Details\" which contains information about the document subset. There are several of these entries throughout the document. They all have the same title - \"Best for 2000\". Each of these entries has different data (different products) so they can't all be combined into a single Details section.\n\nI need to extract this information from the document"
  },
  {
    "id": 669,
    "db_id": "cre_Doc_and_collections",
    "question": "List document id of all documents.",
    "answer": " \n *\n * @param {string} dbName - database name\n * @param {string} collectionName - collection name\n * @returns {Promise<Array>} returns a list of all document ids in the specified collection\n */\nexports.getDocIds = (dbName, collectionName) => {\n    const docIds = [];\n    const db = client.database(dbName);\n    return new Promise((resolve, reject) => {\n       "
  },
  {
    "id": 670,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the object id of the document objects?",
    "answer": "\n \n Tags: ['objectid', 'data-object-id']\n      .\n    Returns: a list of integers representing the object ids.\n    \"\"\"\n    return [int(v) for v in data.get('objectId')]\n\\end{code}"
  },
  {
    "id": 671,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the parent document of document owned by Marlin? List the document id.",
    "answer": "  */\n\tfor (int i = 0; i < marlin->NumChildren(); i++) {\n\t\tDocument* child = marlin->GetChild(i);\n\t\tif (child->GetParent() == marlin)\n\t\t\treturn child->GetId();\n\t}\n\treturn -1;\n}"
  },
  {
    "id": 672,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the objects owned by Marlin?",
    "answer": "\n  if (!marlin_->getObjects(object_ids)) {\n (void)0; }\n  // Check if the user is an owner of any of the objects\n  for (auto object_id : object_ids) {\n    if (isOwnerOfObject(user_id, object_id)) return true;\n  }\n\n  return false;\n}"
  },
  {
    "id": 673,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of document with the Description 'Braeden Collection'?",
    "answer": "\n  return g.doc_id = d.doc_id AND g.grp_name = 'Braeden Collection';"
  },
  {
    "id": 674,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the owners of the document objects described as the 'Braeden Collection'?",
    "answer": "\n What was this collection used for, and when was it created/disbanded?\n Dates?\nIf you can find anything else that might help me figure out what happened to my family history in the years leading up to 1900 please let me know. I'd be most grateful! Thanks."
  },
  {
    "id": 675,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the owner of the parent document of document owned by 'Marlin'?",
    "answer": "\n  If no, then what is the name of the owner of the parent document of document owned by 'Marlin'?\n  */\n  SELECT d.name FROM Document d WHERE d.data->>'owner' = 'Marlin' AND EXTRACT(DOCUMENT_TYPE) = OWNER;"
  },
  {
    "id": 676,
    "db_id": "cre_Doc_and_collections",
    "question": "Who is the owner of the parent document of every documents where 'Marlin' is the owner?",
    "answer": "\n \n\t */\n\tpublic function get_parents() {\n\t    return $this->db->get_where('documents', array('owner' => 'Marlin'));\n\t}"
  },
  {
    "id": 677,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different descriptions of all the parent documents?",
    "answer": "\n  \\item I am not sure how to describe the children of a given parent\n  \\item How do I query for the child documents of a parent document?\n  \\item Given a set of parent document ids, what are the child documents that share at least one of those parent ids?\n  \\item I want to update or create a new document in a nested collection.\n\n\\end{itemize}\n\nI'm also interested in knowing if there is any way"
  },
  {
    "id": 678,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the unique description of every parent document?",
    "answer": "\n  For example, a parent document with id `A` would have the following JSON:\n  {\n    \"id\": \"A\",\n    \"description\": \"This is A\"\n  }\n*/\n\nclass ParentDocument extends DocumentNode {\n  public $id;\n  public $description;\n}\n```\n"
  },
  {
    "id": 679,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents owned by Marlin?",
    "answer": "\n At a rough estimate, the number of documents owned by Marlin is around 60% of all documents. In the current system, the total number of documents is 158,407 and the number of documents owned by Marlin is 96,257. Therefore, we have:\nPercentage owned = (number of documents owned) / (total number of documents) x 100% = 96,257 / "
  },
  {
    "id": 680,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the count of documents owned by Marlin?",
    "answer": "\n  size_t getDocumentCount() const;\n \"}\n   */\n  unsigned int documentCount;\n};"
  },
  {
    "id": 681,
    "db_id": "cre_Doc_and_collections",
    "question": "List all documents ids that are not the parent of other documents.",
    "answer": " \n            DocumentQuery q = new DocumentQuery().from(parentDocument);\n            \n            // This is an inner join query. It returns only those documents that have a parent document with the given id.  \n            q = q.joinParent(parentDocument)\n                .where(q.field(Document.PARENT_ID).eq(parentDocument))\n                .select();\n            \n            return find(q);\n        }\n    }\n}"
  },
  {
    "id": 682,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that are not parent documents?",
    "answer": "\n  ids_of_non_parent_docs = [id for id in document_ids if not is_parent_doc(id)]\n package_name = 'org.chromium.weblite'\n  build_number = 409915\n  version_number = '378030'\n  # Create an instance of the Chrome Remote Debugger API Client.\n  client = client_class(package_name,"
  },
  {
    "id": 683,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child documents does each parent document has? List the document id and the number.",
    "answer": "  of times it is referenced in the other documents (including itself)?\n\\end{blockquote}\n\nThe first thing you need to do is to index the `id` field, otherwise you cannot do a nested aggregation. Next, you can use this query:\n\n\\begin{code}\n{\n  \"aggs\": {\n    \"parents_with_references\": {\n      \"nested\": {\n        \"path\": \"parent\"\n      },"
  },
  {
    "id": 684,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child documents for each parent document, and what are the ids of the parent documents?",
    "answer": "\n Tags: child, parent, documents, mongoose, many-to-many\n  Questions: 216037851\n\nI have a parent/child relationship that I can't seem to get my head around. Here is how I am defining my models.\n\n\\begin{code}\nvar Parent = new Schema( {\n    id : { type: Number, index: true },\n    name : String,\n    children"
  },
  {
    "id": 685,
    "db_id": "cre_Doc_and_collections",
    "question": "List the name of all collections.",
    "answer": " \n *\n * @return array of collection names\n */\nfunction list_all_collections() {\n\t$query = 'SELECT c.name FROM collections c';\n\treturn db::get_list( $query );\n}"
  },
  {
    "id": 686,
    "db_id": "cre_Doc_and_collections",
    "question": "what are the collection names?",
    "answer": "\n The second, you're not using the `collection_names` variable. What is `collection_names`? I don't see it defined anywhere in your code.\n\nAnswer: \\begin{itemize}\n\\item `collection_names = [\"foo\"]`\n\\item `print(f\"The name of the collections is {collection_names}\") # The name of the collection is ['foo']\"`"
  },
  {
    "id": 687,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the description of collection named Best?",
    "answer": "\n I do not know.\n\nComment: That's exactly what I am wondering. What is it?"
  },
  {
    "id": 688,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection descriptions that are named as 'Best'?",
    "answer": "\n I know, this is a bit of a niche question. But if you know of any such collection, please share with me!\n\nComment: I don't think there are any. At least none that I am aware of.\n\nComment: The Best Collection of * is not the best way to do it. You want the best collection of * for every * and a set of criteria for what constitutes goodness.\n\nAnswer: I can only speak for myself"
  },
  {
    "id": 689,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the name of the parent collection of the collection named Nice?",
    "answer": "\n  parent = @db.collection_names(name: \"Nice\").first.to_s\n  #=> \"Pets\"\n```\n\n### `collection_exists` method\n```ruby\n@db.collection_exists(\"Nice\")\n  #=> true\n@db.collection_exists(\"Nothing\")\n  #=> false\n```"
  },
  {
    "id": 690,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of all parent collections of the collection named Nice?",
    "answer": "\n  - A. The collection named Nice.\n  - B. All collections containing the name \"Nice\" in their name, but not the one named Nice itself.\n  - C. None. There is no other collection that contains the name \"Nice\", so this option is not available.\n```"
  },
  {
    "id": 691,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection is not the parent of other collection? List the collection's name.",
    "answer": " \n                        #   and the number of documents in that collection.\n                        print(f\"\\t{c.name}: {c.count_documents()}\")\n"
  },
  {
    "id": 692,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are not the parent of the other collections?",
    "answer": "\n Tags: mysql, sql, database\n \n SELECT c1.name AS parent_collection, c2.name AS child_collection FROM Collection c1 JOIN Collection c2 ON c1.id = c2.parent_id;"
  },
  {
    "id": 693,
    "db_id": "cre_Doc_and_collections",
    "question": "List document that have more than one child. List the document id.",
    "answer": "\n  List<String> result = new ArrayList<>();\n  for (DocumentSnapshot ds : documents) {\n    if (ds.get(\"children\") != null && ((List<?>) ds.get(\"children\")).size() > 1) {\n      result.add(ds.getId());\n    }\n  }\n  return result;\n}\n\\end{code}"
  },
  {
    "id": 694,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the documents that have more than one child?",
    "answer": "\n Tags: Document, Parent, Child, Sibling, Siblings, Sibling count, Parent-child relationship, Hierarchy, Relationship, Relationships, Tree structure, Structure, Node, Hierarchical, Parent-child relationships, Levels, Breadth-first search, Depth-first search\n Flair: Family, Genealogy, Trees\nLevels: Level 0\nBreadth-First Search (BFS) is a"
  },
  {
    "id": 695,
    "db_id": "cre_Doc_and_collections",
    "question": "How many child collection does the collection named Best has?",
    "answer": "\n \n K = 0\n  for k in range(len(c_list)):\n    if c_list[k] == 'Best':\n      K += 1\n  return K"
  },
  {
    "id": 696,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of child collections belonging to the collection named Best?",
    "answer": "\n  The code I have so far is:\n  SELECT COUNT(DISTINCT c.id) FROM Collection c JOIN Collection_Collection cc ON c.id = cc.parent_id WHERE c.name = 'Best';"
  },
  {
    "id": 697,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document which is related to document owned by Ransom . List the document id .",
    "answer": "\n  var q = from d in Documents where d.OwnerId == \"Ransom\" select d.Id;"
  },
  {
    "id": 698,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the document object ids of the related to the document owned by Ransom ?",
    "answer": "\n  for(int i = 0; i < ransom.getFollower().size(); i++){\n    Follower f = ransom.getFollower().get(i);\n    System.out.println(\"ID: \" + f.getId());\n  }*/\n}\n\\end{code}"
  },
  {
    "id": 699,
    "db_id": "cre_Doc_and_collections",
    "question": "List collection subset id, name and number of collections in each subset.",
    "answer": " \n            self.subset_id = np.arange(self.nsubsets) + 1 # (starting from 1)\n            self.subset_name = ['Subset ' + str(i) for i in range(self.nsubsets)]\n            self.num_in_subset = [] # number of particles in each subset\n            for j, subset in enumerate(range(self.nsubsets)):\n                num_in_"
  },
  {
    "id": 700,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subset ids, names, and number of collections for each subset?",
    "answer": "\n  */\n\n  var $subsets = array();\n  var $number_of_collections = 0;\n\n  /**\n    * @var string[] The full name of all the categories (including parents) for a given category_id.\n    */\n  var $full_name = array();\n}"
  },
  {
    "id": 701,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has most of child? List the document id and the number of child.",
    "answer": " \nfor d in doc_list:\n    print(d['id'], count_child(d))"
  },
  {
    "id": 702,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many children do they have?",
    "answer": "\n  */\n    for (var i = 0; i < num_parents; i++) {\n        var parent = parents[i];\n        var parent_id = parent['id'];\n        var parent_name = parent['title'];\n        \n        var children = get_children(parent_id); // all the children of this parent object\n        if (children.length == 0) {\n            continue; // no children, so nothing to"
  },
  {
    "id": 703,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has least number of related documents? List the document id and the number of related documents.",
    "answer": "  */\n\n  def getLeastRelatedDocuments(n: Int): Iterable[DocumentId] = {\n    val relatedDocs = new mutable.HashMap[DocumentId, Int]()\n    for (d <- docs) {\n      relatedDocs.put(d._id, 0)\n      var refs = d.refs()\n      while (refs.hasNext()) {\n        val r = refs.next()\n        if"
  },
  {
    "id": 704,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the document object id with the least number of documents ?",
    "answer": "\n  \"\"\"\n  return min(d.object_id)\nend\ndef max_documents(d):\n  \"\"\" What is the maximum number of documents in a group of documents ?\"\"\"\n  return max(d.num_documents)"
  },
  {
    "id": 705,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document has between 2 and 4 number of documents ? List the document id and the number of related documents .",
    "answer": "\n [A,B] , [C,D] , [E,F],[G]\n '\n SELECT d.id, COUNT(r.id) AS related_count FROM Document d LEFT JOIN (SELECT r.from_id, r.to_id FROM Relationship r) AS r ON d.id = r.from_id OR d.id = r.to_id GROUP BY d.id ORDER BY d.id NULLS LAST;"
  },
  {
    "id": 706,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?",
    "answer": "\n [JSON_OBJECT(id, COUNT(DISTINCT related_document_ids)) AS item_count FROM document WHERE COUNT(DISTINCT related_document_ids) > 1 GROUP BY id HAVING COUNT(DISTINCT related_document_ids) BETWEEN 2 AND 4 ORDER BY item_count DESC NULLS LAST;"
  },
  {
    "id": 707,
    "db_id": "cre_Doc_and_collections",
    "question": "List all owner of documents that is related to documents owned by Braeden.",
    "answer": " \n            /// </summary>\n            public void GetRelatedDocuments()\n            {\n                Console.WriteLine(string.Format(\"{0} has the following related documents:\", this.FirstName, this.LastName));\n                foreach (Document doc in Database1.GetDatabase().FindRelatedDocs(this))\n                {\n                    Console.WriteLine(\"\\t\" + doc.Name);\n                }\n            }\n        }\n\n        public class"
  },
  {
    "id": 708,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different owners of documents that are related to ones owned by Braeden?",
    "answer": "\n It can also be used to find all the people who have the same phone number or email address as one's self.\n \n The search can be performed using the following methods:\n  - `owners` returns all the owners of the document\n  - `phone_numbers` returns all the owners whose phone_number is the same as one's own phone_number\n  - `emails` returns all the owners whose email is the same as"
  },
  {
    "id": 709,
    "db_id": "cre_Doc_and_collections",
    "question": "Which unique subset does document owned by Braeden belong to? List the subset name.",
    "answer": " \n   - For each subset, list all of the elements that belong to that subset.*/\nfor (i = 0; i < n; i++) {\n    printf(\"\\nThe elements in %s are:\", subsets[i]);\n    for(j = 0; j < num_elements; j++) {\n        if(belongsToSubset(elements, j, subsets[i]) == TRUE) {\n            printf(\" %d\", j"
  },
  {
    "id": 710,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subset names of all documents owned by Braeden?",
    "answer": "\n  @GetMapping(\"/users/{id}/subsets\")\n  public List<String> getUserSubsets(@PathVariable long id) {\n    return userService.getSubsets(id);\n  }\n\n  // Get the groups a user can view.\n  @GetMapping(\"/user/groups\")\n  public List<Group> getViewableGroups() {\n    return userService.getViewableGroups();\n  }\n}"
  },
  {
    "id": 711,
    "db_id": "cre_Doc_and_collections",
    "question": "List subset id, name and number of different documents in each subset.",
    "answer": " \n# This will be used to create the 'data' attribute for the plot_ly scatter plot.\nsubsets = {}\nfor i in range(len(unique_subset)):\n    subsets[str(i)] = {\n        'x': [],  # x-coordinates of points within the subset\n        'y': [],  # y-coordinates of points within the subset\n        'z': [],  # z-coordinates of points within the subset"
  },
  {
    "id": 712,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the subset id, name, and number of different documents for each subset?",
    "answer": "\n  public String toString() {\n  StringBuilder sb = new StringBuilder();\n    for (Map.Entry<String, List<Document>> entry : this.subsets.entrySet()) {\n      String key = entry.getKey();\n      int numOfDocs = entry.getValue().size();\n      sb.append(key + \" (\" + Integer.toString(numOfDocs) + \")\" + \"\\n\");\n    }\n    return sb."
  },
  {
    "id": 713,
    "db_id": "cre_Doc_and_collections",
    "question": "Which document subset has most of number of distinct documents ? List subset id , name and number of documents .",
    "answer": "\n # [ ] Subset 1, 757071, 27459\n ','Subset 2, 757071, 26867' etc\n2. Which subset has most of distinct documents ? List subset id , name and number of documents . # [ ] Subset 1, 757071, 27459 ','Subset 2, 75"
  },
  {
    "id": 714,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?",
    "answer": "\n  ```sql\n\n SELECT d.id AS id, array_agg(DISTINCT f.name) AS names, COUNT(f.name) AS num_documents FROM DocumentSubsets ds JOIN Documents d ON ds.id = d.id AND ds.subset = 'most_diverse' JOIN FileLinks f ON d.id = f.id GROUP BY d.id ORDER BY num_documents DESC NULLS LAST;"
  },
  {
    "id": 715,
    "db_id": "cre_Doc_and_collections",
    "question": "For document subset named 'Best for 2000', List all document id that in this subset.",
    "answer": " #\"\n(doc-id-list (first (subset 'best-for-2000)))\n```\n\n#?(:clj\n   (defn subset [name]\n     (conj (set) (:documents (first (subset/get-by-name name)))))))\n"
  },
  {
    "id": 716,
    "db_id": "cre_Doc_and_collections",
    "question": "For the document subset named 'Best for 2000', what are the document ids in that subset?",
    "answer": "\n Tags: doc-id, subset, dmoz\n  --------------------------------\n (list) [479816, 513757]\n \n >>> print(s.get_doc_ids('Best for 2000', 'dmoz'))"
  },
  {
    "id": 717,
    "db_id": "cre_Doc_and_collections",
    "question": "List all document subsets of documents that related to each document id. List the name of document subset and the document id.",
    "answer": "\n        # print('Document subsets:')\n        for d in doc_subsets:\n            for k, v in d.items():\n                print(k, ': ', v)"
  },
  {
    "id": 718,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?",
    "answer": "\n Tags : Set(DocumentSubset, DocumentID)\n  */\ntype DocSetRelationship struct {\n\tDocumentSubset string `json:\"document_subset\"`\n\tDocumentID    int32  `json:\"document_id\"`\n}"
  },
  {
    "id": 719,
    "db_id": "cre_Doc_and_collections",
    "question": "List the Collection Name that document owned by 'Ransom ' belong to .",
    "answer": "\n  r = s.find_one({'name': {'$regex': \".*\"+ransom+\".*\"}})\n  return r['name'] if r else None"
  },
  {
    "id": 720,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the collection name of a document owned by 'Ransom'?",
    "answer": "\n  And if it's not, then return the first non-null value of the documents 'a', 'b', and 'c' fields.\n\\end{blockquote}\n\nThis should be doable with the $ifNull operator, like this:\n\n\\begin{code}\ndb.getCollection(p).aggregate([\n  { '$project': { 'owner': p.owner, '_id': p._id, 'a': p.a"
  },
  {
    "id": 721,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections does each document belong to? List the count and the document id.",
    "answer": "  for those collections that have more than one.\n    var db = client.getDatabase(\"test\");\n    var result = [];\n    var i = 0;\n    while (i < 3) {\n        var collectionName = 'collection' + i;\n        var docs = db[collectionName].find({});\n        if (docs != null && docs.length > 1) {\n            result.push( { count: docs.length,"
  },
  {
    "id": 722,
    "db_id": "cre_Doc_and_collections",
    "question": "For each document object id, how many collections does it belong to?",
    "answer": "\n  private _docToCollectionCounts: Record<string, number> = {}\n [key: string]: number;\n  // A map from a collection name to the set of documents in that collection\n  private _collectionDocsMap: { [key: string]: Set<string> } = {};\n  // The most recent version of each document\n  private _latestVersions: { [key: string]: number; } = {};\n  // A map"
  },
  {
    "id": 723,
    "db_id": "cre_Doc_and_collections",
    "question": "How many documents does collection named 'Best' has?",
    "answer": "\n  I don't know.  But this is the one that contains the actual data you want.\n\nAnswer: If you are using MongoDB, then you can use the [Aggregation Framework](https://docs.mongodb.com/manual/core/aggregation-pipeline/) to perform operations on the data. You should check out the Aggregation Pipeline for MongoDB because it is very powerful and will let you do a wide variety of things with your data.\n"
  },
  {
    "id": 724,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of documents in the collection named 'Best'?",
    "answer": "\n  \"SELECT COUNT(DISTINCT a.id) AS total_documents FROM Document d JOIN Association a ON d.id = a.ref WHERE a.name = 'Best';\"\nend"
  },
  {
    "id": 725,
    "db_id": "cre_Doc_and_collections",
    "question": "List the document id of all documents in collection named Best.",
    "answer": " 1.2\n        \"\"\"\n        return self._list_documents(\n            db_name=self.db_name,\n            coll_name=self.coll_name + '/Best',\n            version='1.2')\n\n    @property\n    def all_docs_with_version_3456(self):\n        \"\"\"Return a list of the document ids of all documents in collection named Best with\n        versions 3, "
  },
  {
    "id": 726,
    "db_id": "cre_Doc_and_collections",
    "question": "What is the number of document object ids in the collection named Best?",
    "answer": "\n  ```sh\nydb.exec('select COUNT(DISTINCT o.id) AS num_of_ids FROM best b JOIN objects o ON b.object_id = o.id')['num_of_ids']```"
  },
  {
    "id": 727,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection have most number of documents? List collection name, id and number of documents.",
    "answer": " \n   */\n  public function getCollectionNamesWithMostDocuments(int $limit) : array;\n\n  /**\n   * Get list of collections with most number of documents. List is sorted from the one with the most documents to the one with the fewest documents. \n   * The collection name, id and number of documents are returned for each element in the result set. \n   */\n  public function getCollectionsWithMostDocuments(int $limit"
  },
  {
    "id": 728,
    "db_id": "cre_Doc_and_collections",
    "question": "For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?",
    "answer": "\n  \"\"\"\n  SELECT c.name, c.id, COUNT(d.id) AS doc_count FROM Collection c JOIN Document d ON c.id = d.collection_id GROUP BY c.name, c.id ORDER BY doc_count DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 729,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 and collection named Best.",
    "answer": " Calls method\n\t * getDocuments with parameter [Best, Best]\n\t * @throws Exception\n\t */\n\tpublic void testGetDocumentsWithCollectionName() throws Exception {\n\t\tList<Document> result = m_client.getDocuments(Collections.singletonList(\"Best\"), \"Best\");\n\t\tfor (Document d : result) {\n\t\t\tlogger.info(\"Document name is {}\", d.getName());\n\t\t}\n\t"
  },
  {
    "id": 730,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?",
    "answer": "\n Tags: BatchGetDocument, Documents, GetDocument, Subset, Query, Database\n-Collection\n Aliases: DB.GetDocument, DB.BatchGetDocument, Documents.Query, Best, BestFor2000\n Publication/Submission Format: Query, Literature, Technical Reports, Report\n License: Free for non commercial use, Patent pending, Other (see website for details)\n Group: Query, Subset, Collection,"
  },
  {
    "id": 731,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in collection named Best but not in document subset Best for 2000.",
    "answer": " \"1313\"\n\n\nI want to get all the documents from collection \"Best\" but not those which are a member of the document subset \"Best for 2000\". \"1313\" is an id that does not exist in both collections. I tried this query:\n\n\\begin{code}\n SELECT b.id FROM Best b LEFT JOIN (SELECT id FROM BestForYear WHERE year = 2000) AS fy ON"
  },
  {
    "id": 732,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?",
    "answer": "\n Tags: mysql, sql, database, difference, set-theory\n Categories: mysql\n\n I am using the following query to find the difference of two sets. The first set contains all documents that have an id in the collection Best and the second set contains all the ids from a subset named 'Best for 2000' which is a subset of the same collection. I then find the difference of these sets to get the ids of documents not in the subset 'Best for"
  },
  {
    "id": 733,
    "db_id": "cre_Doc_and_collections",
    "question": "List id of documents that in document subset Best for 2000 or in collection named Best.",
    "answer": " CU\n#     For more information on the document subset, see: https://papersplease.io/documentation/document-subsets\n#     For more information on the collection name, see: https://papersplease.io/documentation/collections"
  },
  {
    "id": 734,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?",
    "answer": "\n C) Get all the documents from the subset 'Best for 2000' if it exists, else get all the documents from the collection 'Best'.\n\n\\end{code}"
  },
  {
    "id": 735,
    "db_id": "cre_Doc_and_collections",
    "question": "List all name of collections that are related to collection named Best.",
    "answer": " 360\u00b0.\n\n\\begin{code}\nSELECT c.name FROM collection c WHERE c.name ILIKE '%Best 360%';\n\\end{code}"
  },
  {
    "id": 736,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the names of the collections that are related to the collection named Best?",
    "answer": "\n The first call should return a list with the name \"Best\", and the second should return the empty set.\n*/\ndef relatedCollections(name: String): Set[String] = {\n    if (name == \"Best\") Set(\"Best\", \"Second-Best\") else Set()\n}"
  },
  {
    "id": 737,
    "db_id": "cre_Doc_and_collections",
    "question": "How many collections that are related to collection named Best?",
    "answer": "\n A method of finding the number of collections that have a specific name.\n\n### GetCollectionsCountByName(string)\n```csharp\nint GetCollectionsCountByName(string name);\n```"
  },
  {
    "id": 738,
    "db_id": "cre_Doc_and_collections",
    "question": "How many different collections are related to the one named 'Best'?",
    "answer": "\n A. Best friends\nB. Best enemies\nC. Best lovers\nD. Best rivals"
  },
  {
    "id": 739,
    "db_id": "cre_Doc_and_collections",
    "question": "Which collection subset does collection name Best in? List collection subset name.",
    "answer": " 2. How many documents are in the collection subset? 3. Which fields of the first document of the collection subset are included in the result?\n\nAnswer: 1. Cars_Mustang\n2. 4500\n3. model, year, manufacturer, price"
  },
  {
    "id": 740,
    "db_id": "cre_Doc_and_collections",
    "question": "What are the collection subsets that the collection named 'Best' in?",
    "answer": "\n The output should be a list of the names of the collections that the collection 'Best' is a subset of.\n\\end{blockquote}\n\nI have tried to do this, but I'm stuck with how to actually write the code. Please help me on this.\n\nComment: Can you add the code you've tried?\n\nAnswer: There are several ways to accomplish this, depending on how complex your data structure is and how much you want to query it"
  },
  {
    "id": 741,
    "db_id": "sing_contest",
    "question": "How many songs contain \"Love\" in their names?",
    "answer": "\n  const songsWithLove = songs.filter(song => song.name.toLowerCase().includes('love'));\n  return songsWithLove;\n}"
  },
  {
    "id": 742,
    "db_id": "sing_contest",
    "question": "List the name of the songs in ascending, lexicographical order.",
    "answer": " \n// Note that this is a mutating function. It does not return anything (void), but rather sorts the list it receives as an argument.\n// The list must be a vector of strings and must have at least one element.\nvoid sort(vector<string>& songs) {\n\tif (songs.size() <= 1) return;\n    sort(songs, [](string s1, string s2){return s1 < s2;});"
  },
  {
    "id": 743,
    "db_id": "sing_contest",
    "question": "List the names and languages of the songs .",
    "answer": " . . but there's no way to know exactly what the name of the song means. A song might be called \"A\" but it doesn't mean anything.\n\nComment: @Tiago So I can't get the meaning of song name? How about getting the list of songs with their translations?"
  },
  {
    "id": 744,
    "db_id": "sing_contest",
    "question": "What are the maximum and minimum voice sound quality score of the performances?",
    "answer": "\n What can I do to improve my voice sound quality?\n Fitness and stretching will help increase your vocal range, but also other things like using a soft breathing technique and exercises such as trumpet mouthpiece exercises (which helps relax the throat) and improving posture.\nHow do you stay in shape to sing? If you're a beginner, it can be very important to start with warm-up exercises that help lo"
  },
  {
    "id": 745,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?",
    "answer": "\n  (select v.voice_quality_score, r.rhythm_tempo_score, p.stage_presence_score from voice_participants v JOIN rhythm_tempo_scores r ON v.id = r.participant_id JOIN stage_presence_scores p ON p.participant_id = v.id WHERE name = 'Freeway');"
  },
  {
    "id": 746,
    "db_id": "sing_contest",
    "question": "What are the id, language and original artist of the songs whose name is not 'Love'?",
    "answer": "\n  SELECT s.id, s.language, s.original_artist FROM songs s WHERE s.name != 'Love';"
  },
  {
    "id": 747,
    "db_id": "sing_contest",
    "question": "What are the names and original artists of the song whose English translation is 'All the streets of love'?",
    "answer": "\n  It sounds like you're asking about the English version of a popular Russian folk song, but I can't find any information on it. The closest I can find is \"Dostye chety (I Have Seen)\"."
  },
  {
    "id": 748,
    "db_id": "sing_contest",
    "question": "What are the distinct stage presence scores for all the songs that are in language 'English' ?",
    "answer": "\n  */\n\n SELECT DISTINCT s.song_name, s.language FROM Song s WHERE s.language = 'English';"
  },
  {
    "id": 749,
    "db_id": "sing_contest",
    "question": "What are the ids and names of the participants who have performed at least two songs?",
    "answer": "\n  SELECT p.id, p.name FROM Participant p JOIN Song_participation sp ON p.id = sp.participant_id GROUP BY p.id, p.name HAVING COUNT(DISTINCT sp.song_id) >= 2;"
  },
  {
    "id": 750,
    "db_id": "sing_contest",
    "question": "What are the ids, names and popularity of the participants, order by the number of songs they perform?",
    "answer": "\n  public function get_participants() {\n  return $this->get_items(array('participant', 'name', 'popularity'), array('songs_performed')); }"
  },
  {
    "id": 751,
    "db_id": "sing_contest",
    "question": "What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?",
    "answer": "\n In my opinion, it is not possible to tell from the audio alone. I believe that we need additional information (e.g. the lyrics) to determine this.\n\nI would appreciate your feedback!"
  },
  {
    "id": 752,
    "db_id": "sing_contest",
    "question": "What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?",
    "answer": "\n The balkan girls ' is a song composed by Domenico Zampa in 2013. This song has been sung in English language.\nThe voice sound quality score of ' The balkan girls ' is 75/100."
  },
  {
    "id": 753,
    "db_id": "sing_contest",
    "question": "What are the id and name of the song sung by the most participants?",
    "answer": "\n  print(sapply(songs, \"[[\", \"id\", \"name\"]), \"\\n\")\n # [[10024251f38],[\"A Song For The Princesses By Prince Ali\"]]\n\\end{code}"
  },
  {
    "id": 754,
    "db_id": "sing_contest",
    "question": "How many performances have a stage presence score less than 7 or higher than 9?",
    "answer": "\n Criteria: The number of performances with a stage presence score greater than 7 OR lesser than 9.\n\nComment: SELECT COUNT(*) FROM (SELECT p.id, s.name AS stage_name, pp.stage_presence FROM Performance p JOIN Stage s ON p.stage = s.id JOIN PerformancesPlus pp ON p.id = pp.performance WHERE ((pp.stage_presence > 7) OR (pp.stage_presence"
  },
  {
    "id": 755,
    "db_id": "sing_contest",
    "question": "How many songs listed are not performed?",
    "answer": "\n Are they listed at all?\n A: Most of the time, yes. When a new song is added to the setlist, it is usually accompanied by an announcement that it is being played (either by name or in the context of the show). In general, I don't list songs that have not been performed on this program.\nQ: How does the order of songs vary from one performance to the next?\n A: The setlist is designed to be a"
  },
  {
    "id": 756,
    "db_id": "sing_contest",
    "question": "What are the average rhythm scores for the songs in each different language?",
    "answer": "\n The problem with this is that I don't know how to do a t-test in R and I am not sure if I can use the method of means. I have a huge data set of 300 songs with the same structure, which has a duration, genre, language, rhythm and the time it takes for humans to learn the song.\nThe goal is to identify if there are differences in rhythmic complexity between songs with the same language but different genres"
  },
  {
    "id": 757,
    "db_id": "sing_contest",
    "question": "What are the distinct names of the participants who have sung a song in 'English'?",
    "answer": "\n  SELECT DISTINCT p.name FROM performance p JOIN participation pp ON p.id = pp.participant_id WHERE pp.song_language = 'English';"
  },
  {
    "id": 758,
    "db_id": "sing_contest",
    "question": "What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?",
    "answer": "\n The names will be listed in alphabetical order.\n SELECT p.name FROM participants p WHERE p.language1 = 'Croatian' AND p.language2 = 'English' ORDER BY p.name ASC;"
  },
  {
    "id": 759,
    "db_id": "sing_contest",
    "question": "Which song names have the substring \"Is\"?",
    "answer": "\n The `s` in `is` is capitalized, and the second word must start with a capital letter. This is what we want to match for the first two lines of the code below:\n\n `var isMatch = (s.ToUpper().Contains(substring) && Char.IsUpper(substring[0])) || (!String.IsNullOrEmpty(s) && s[0].ToString().ToLower() == substring[0] && s.Substring("
  },
  {
    "id": 760,
    "db_id": "sing_contest",
    "question": "Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality .",
    "answer": "\n # A more accurate way to find the original artist is to include the name of a lyricist, composer or singer. For example \" Michael Jackson & James Rado\" would return hits by The Jacksons and The Waysons.\n # To search for lyrics of a specific genre , specify it with the gen parameter . For example \" Michael Buble&Steinship\" gen:rock\" would return hits by Buble and Ship.\n # To limit"
  },
  {
    "id": 761,
    "db_id": "address_1",
    "question": "How many cities do we have?",
    "answer": "\n Certainly not more than 100. But this is the number that I get from running a query like: SELECT COUNT(DISTINCT city) FROM cities;"
  },
  {
    "id": 762,
    "db_id": "address_1",
    "question": "Count the number of cities.",
    "answer": " 164 cities are now in the world, but there's no way we can stop them all. We must make sure that the new cities we create are not only beautiful and inspiring but also sustainable and resilient.\nIn many parts of the world, people have to walk for hours each day to get to where they need to go. In many other places, getting from one place to another means fighting traffic jams. These issues can be solved by building more"
  },
  {
    "id": 763,
    "db_id": "address_1",
    "question": "List all different states .",
    "answer": " .\n The U.S. Supreme Court is currently considering a case that has the potential to overturn state-level gun control laws and allow the federal government to regulate guns in the U.S., which has raised concerns among conservatives who believe the federal government should have no authority to interfere with states rights, and liberals who support the Second Amendment to the U.S. Constitution. The Supreme Court case is known as Heller v. District Attorney of H"
  },
  {
    "id": 764,
    "db_id": "address_1",
    "question": "What are all the distinct states?",
    "answer": "\n A) Bacteria, viruses, and fungi\n \n B) Bacteria and viruses only \n C) Bacteria, viruses, and fungi, and spores (prokaryotic organisms) \n D) Fungi and bacteria, but no viruses. "
  },
  {
    "id": 765,
    "db_id": "address_1",
    "question": "How many countries do we have?",
    "answer": "\n 3. Which country has the highest population growth rate?\n 4. In which continent is the country with the highest population growth rate located?"
  },
  {
    "id": 766,
    "db_id": "address_1",
    "question": "Count the number of coutries.",
    "answer": "  The question is how to get the country code.\n\nI have tried using [this method](https://stackoverflow.com/a/4785963/172130).\n\n\\begin{code}\n<script>var c = document.getElementsByTagName('code')[0].textContent.replace(/\\D/g,'');</script><noscript>\\strong{Invalid Script}</noscript>\n\\end{code}\n\n"
  },
  {
    "id": 767,
    "db_id": "address_1",
    "question": "Show names, codes, states, countries for all cities.",
    "answer": " \n            and counties in the United States.\"\"\"\n\n    def __init__(self):\n        \"\"\"Loads data into memory.\"\"\"\n        self.data = pd.read_csv(\n            'https://raw.githubusercontent.com/datadesk/california-dataset/master/city.txt',\n            sep=' ', header=None)\n        )\n\n    def get_cities(self):\n        \"\"\"Returns"
  },
  {
    "id": 768,
    "db_id": "address_1",
    "question": "What are the names, codes, states, and countries for all cities?",
    "answer": "\n The \"Country\" column is a foreign key that points to a row in the COUNTRY table. The \"State\" column is a foreign key that points to a row in the STATE table. If there is no state for a country then that country has the NULL value stored in the State column. There are 32 countries and 50 states in this dataset.\n What does the data look like? A sample of the CITY table:\n SELECT * FROM C"
  },
  {
    "id": 769,
    "db_id": "address_1",
    "question": "What is the latitude and longitude for Baltimore?",
    "answer": "\n What would I do with that information?\n My guess is it's not used to drive directions or anything like that. It's just a unique identifier for the city.\nI think this should be added to the question, so we can have the correct answer to your question.\nI agree with @paparazzo816, I don't believe there is a difference in the way Google Maps shows points of interest."
  },
  {
    "id": 770,
    "db_id": "address_1",
    "question": "What latitude and longitude correspond to Baltimore?",
    "answer": "\n Are the latitudes and longitudes of cities in Maryland, Virginia, and West Virginia? I am sorry for any confusion.\nWhat is the average population density of a city in Maryland?\nHow much does an average person weigh in Maryland?\nWhen was the oldest recorded city in the United States founded?"
  },
  {
    "id": 771,
    "db_id": "address_1",
    "question": "Show names for all cities in state PA.",
    "answer": "  I tried this code:\n\n\\begin{code}\n SELECT DISTINCT city_name FROM cities WHERE state_abbr = 'PA';"
  },
  {
    "id": 772,
    "db_id": "address_1",
    "question": "What are the names of all cities in PA?",
    "answer": "\n I would like to know the names of all cities in Pennsylvania.\nI am wondering if you have a list of city names for the state of Pennsylvania?\n\nAnswer: There are over 350 municipalities in Pennsylvania, but only about 96 cities; however, the USPS provides a comprehensive directory of cities and other types of places in PA. It is available online and updated regularly.\n\nHere is a link to it: https://www.usps."
  },
  {
    "id": 773,
    "db_id": "address_1",
    "question": "How many cities are in Canada?",
    "answer": "\n Are you suggesting that the number of cities is infinite and uncountable, but still finite in some other sense? Is there a meaningful difference between those two senses?\n What I'm looking for here is a more intuitive explanation than \"just a matter of terminology\".\n\n\nComment: If the number of cities were not finite, then it would have to be uncountably infinite. A countably infinite set can be made into a list, but an uncount"
  },
  {
    "id": 774,
    "db_id": "address_1",
    "question": "Count the number of cities in Canada.",
    "answer": " The other major player in this game is the United States, which has a much larger population than any Canadian city and has many more people who live in urban areas.\nThe United States also has a very different population growth rate than Canada, with an average annual percentage change in the population of 1.7% to Canada's 1.5%. This means that if population growth in the U.S. is accelerating faster than in Canada, the two countries will not be able to"
  },
  {
    "id": 775,
    "db_id": "address_1",
    "question": "Show names for all USA city ordered by latitude.",
    "answer": "  */\nfunc (c *City) OrderByLatitude(order string) error {\n\tquery := ` SELECT c.name, c.latitude FROM cities c ORDER BY c.latitude NULLS LAST`\n\tif order == DESCENDING_ORDER {\n\t\tquery = query[0:len(query)-3] + \" DESC NULLS LAST\"\n\t}\n\tvar result []*CityNameLatitude\n\terr := c."
  },
  {
    "id": 776,
    "db_id": "address_1",
    "question": "What are all the city names for cities in the USA, ordered by latitude?",
    "answer": "\n  CityName = ''\n  Latitude = 0.0\n  for row in reader:\n    if row[2] == 'USA':\n      CityName = row[1].strip()\n      Latitude = float(row[3])/1000000\n      Cities.append([CityName, Latitude])"
  },
  {
    "id": 777,
    "db_id": "address_1",
    "question": "Show all states and number of cities in each state.",
    "answer": " \n* Plot the total population of each state across all cities \n* Create a bar plot showing the percentage change in population of a state's capital city from 2015 to 2020."
  },
  {
    "id": 778,
    "db_id": "address_1",
    "question": "How many cities are in each state?",
    "answer": "\n Cities and their populations.\n \n # Create a new column in the states dataframe for population, then use apply() to calculate population of each city.\n states['population'] = None  # Set population to None so we can fill it in with .apply().\n population_data = pd.Series(states['state'], states['city'])  # Prepare a Series from state and cities.\n states['population'] = population_data.apply(lambda"
  },
  {
    "id": 779,
    "db_id": "address_1",
    "question": "Show all countries and number of cities in each .",
    "answer": "\n 2. Display the name of the country and city for every country with more than one city.\n 3. For each country, display the number of cities it has.\n*/\n"
  },
  {
    "id": 780,
    "db_id": "address_1",
    "question": "How many cities are there in each country?",
    "answer": "\n In order to get a list of all the cities in a given country, you'll need to iterate over all the countries and for each country, get a list of cities. Here is an example that prints every city in every country:\n\n    var countries = Countries();\n    foreach (var c in countries) {\n      Console.WriteLine(c.name);\n      foreach (var ci in c.city) {\n        Console.WriteLine(\"  \" + ci"
  },
  {
    "id": 781,
    "db_id": "address_1",
    "question": "List all states with at least two cities.",
    "answer": " 183957002\nSep 1, 2020: This is a list of U.S. state capitals and their corresponding longitudes and latitudes. States that have multiple capitals are listed multiple times. Lat/long coordinates were obtained from Google Maps (maps.google.com). List is sorted alphabetically by states.\nStates With Multiple Capitals:\n(Note: This list is not exhaustive. There may be"
  },
  {
    "id": 782,
    "db_id": "address_1",
    "question": "Which states have at least two cities?",
    "answer": "\n Home \u203a City Guide \u203a San Francisco\n Dating Directory \u203a Dating in SF: San Francisco LGBT Dating Guide\nDating in SF: San Francisco LGBT Dating Guide\nLGBT Friendly Dating Guide: Find Gay & Lesbian Friendly Events, Meetups & Dates in SF!\nSan Francisco is a haven for the LGBT community. Our dating guide will help you find gay-friendly events, meetups"
  },
  {
    "id": 783,
    "db_id": "address_1",
    "question": "Which state has most number of cities?",
    "answer": "\n SMALLEST CITY: GALWAY, Ireland - population 13025\n POPULATION MANAGEMENT: GALWAY is not a city but a suburb of LONDON. LONDON IS THE LARGEST CITY BY POPULATION IN THE WORLD."
  },
  {
    "id": 784,
    "db_id": "address_1",
    "question": "Give the state that has the most cities.",
    "answer": "  The total population of the state is 50,407,118\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"Alaska\",\n                \"population\": [\n                    {\"year\": \"2010\", \"value\": 439522},\n                    {\"year\": \"2011\", \"value\": 467940},\n                    {\"year"
  },
  {
    "id": 785,
    "db_id": "address_1",
    "question": "Which country has fewest number of cities?",
    "answer": "\n Certainly not the United States. It's a tough call, though. Some of these countries have multiple cities that rank high in the ranking.\n10. Which city is most beautiful? There are many beautiful cities around the world. For this question there's no right answer.\nWhat other questions would you like to add to our list? Let us know!"
  },
  {
    "id": 786,
    "db_id": "address_1",
    "question": "Give the country with the fewest number of cities.",
    "answer": "  The total area is 1,029,746 square miles (2,657,931 square kilometers)."
  },
  {
    "id": 787,
    "db_id": "address_1",
    "question": "Show the first name and the last name for students living in state MD.",
    "answer": "  I do not know how to do this, and I would like to find out a way that is not too difficult or too complex.\n\nComment: You can use the `LIKE` keyword for this kind of query. However, it's only useful if your last name field is called `last_name`. If it's something else, you'll need to use an additional criteria. Can you please tell me what the field's name is?\n\nComment:"
  },
  {
    "id": 788,
    "db_id": "address_1",
    "question": "What are the full names of students living in MD?",
    "answer": "\n \u201cFull Name\u201d: \u201cJohn Smith\u201d, \u201cJane Doe\u201d, \u201cLisa Brown\u201d, \u201cBob White\u201d, etc.\n\u201cCity\u201d: \u201cBaltimore\u201d, \u201cChicago\u201d, \u201cNew York City\u201d, \u201cSeattle\u201d, etc. (This information would be used to find the correct city and state)\n\u201cState\u201d: \u201cMaryland\u201d, \u201cIllinois\u201d, \u201cNew York\u201d, \u201cWashington\u201d (This information would be used to find the correct city and"
  },
  {
    "id": 789,
    "db_id": "address_1",
    "question": "How many students live in China?",
    "answer": "\n \u201cThis year, we\u2019re expecting to see a 30 percent increase,\u201d said Nicole Zhang, head of the university\u2019s international program. \u201cWe\u2019ve seen it before and that\u2019s what we\u2019re going to do this time.\u201d\nThis is the first year that students from China can enroll in an internationally recognized college or university that offers a bachelor\u2019s degree in Chinese medicine, Zhang said. Before this year, only 1"
  },
  {
    "id": 790,
    "db_id": "address_1",
    "question": "Count the number of students living in China.",
    "answer": " A population-dense country like China has a lot of people who are looking for opportunities and there's not a lack of options, but it can also be challenging to find suitable accommodation at times, so it's important to have a strategy for how you will handle that.\nMost importantly, I would recommend students take advantage of the resources available from their university, including information about housing on campus, academic advisors, and international office staff. Also, it'"
  },
  {
    "id": 791,
    "db_id": "address_1",
    "question": "Return the first name and major of students are living in Baltimore?",
    "answer": "\n Posted By: admin on 12/05/2016 9:54 AM\n KAISER MONTEVERDE, Calif. \u2014 The names and majors of students at Kaiser Prep High School have been published. The school is a part of the Montclair Unified School District, which serves about 34,000 students in a region that includes nine cities and towns across Southern California.\nThe names and maj"
  },
  {
    "id": 792,
    "db_id": "address_1",
    "question": "What are the first names and majors of students living in Baltimore?",
    "answer": "\n  What are the ages of students living in Baltimore?\n \"Baltimore City\" (the city itself) has a population of 1,579,024 inhabitants. \"Ocean County\" (the county surrounding the city) has a population of 1,869,961 inhabitants. \"Carolina County\" (another nearby county) has a population of 756,357 inhabitants. \"Allegheny County\""
  },
  {
    "id": 793,
    "db_id": "address_1",
    "question": "Show the number of students living in each country.",
    "answer": " \n \n ## Step 2: Importing and cleaning the data \n 1. We need to import the dataset from the url provided in the problem statement. \n 2. Use pandas's read_csv function to import the file into a variable called 'data'. \n 3. Use the .drop method to remove any unnecessary columns, which are present in data by default. The code for that is: data = data.drop('Unnamed: "
  },
  {
    "id": 794,
    "db_id": "address_1",
    "question": "How many students live in each country?",
    "answer": "\n On the average, how many people live in each country? (Hint: You don't need to divide by population density.)"
  },
  {
    "id": 795,
    "db_id": "address_1",
    "question": "Find the number of students living in each city.",
    "answer": " \n  #\n  def self.students_per_city(cities)\n    return cities.map { |city| [city, Student.where(city: city).count] }\n  end\n  \n  # 7. List the number of students per gender and city.\n  #\n  # Output should be a hash with this structure:\n  # { male: {city1: count1a, city2: count2a},"
  },
  {
    "id": 796,
    "db_id": "address_1",
    "question": "How many students live in each city?",
    "answer": "\n On the first page of the report, I provide a brief description of each city with its population. For example: \u201cBoston, Massachusetts has a population of 759,326\u201d (1)\nHow can we make this information more readable? If you are a writer, I would appreciate if you could change it to a bullet point list like this one: \u2022 Boston, Massachusetts has a population of 759,326 (1)\n\u2022 New"
  },
  {
    "id": 797,
    "db_id": "address_1",
    "question": "Which state has most number of students?",
    "answer": "\n My data set is:\n 1. CMU-Sparksville, which has 726 students.\n 2. Lamar University, which has 308 students.\n 3. CMU-Downtown, which has 255 students.\n 4. STEM Institute of Technology, which has 106 students.\n 5. Dixie State College, which has 79 students."
  },
  {
    "id": 798,
    "db_id": "address_1",
    "question": "Give the state that has the most students.",
    "answer": " 76% of the population is under 18 years old, which is an extremely high proportion compared to other states. The next highest state in terms of percentage of under-18s is Washington, and only a few other states have higher percentages than that state.\n2) California has the highest proportion of people over the age of 65, at nearly 24%. However, there are states like Washington and Oregon with even higher proportions.\n3) The"
  },
  {
    "id": 799,
    "db_id": "address_1",
    "question": "Which country has least number of students?",
    "answer": "\n At this time, the answer is: 30% (120 / 400) = 0.75.\nThere are 120 students who are studying in the university, and 400 total students, so the ratio is 120/400 or 75% of the total number of students participate in this particular course."
  },
  {
    "id": 800,
    "db_id": "address_1",
    "question": "Give the country with the fewest students.",
    "answer": " 68% of the population is under 15 years old, 22% between 15 and 24 years old, 9% between 25 and 30 years old. The population is predominantly rural (more than half are living in rural areas) and more than one quarter live in cities of a size larger than 1 million people.\n\nGiven this data, how many students do you think the country has?"
  },
  {
    "id": 801,
    "db_id": "address_1",
    "question": "Show names for all cities where at least three students live.",
    "answer": " 13,700 people live in this city. The population density is 29.64 per square mile. This is a change of -5.8% from the previous population figure. More\nThe median age in this city is 28 years. There are 15,136 males and 17,097 females living in this city. The percentage of the population with less than high school diploma is 14.7"
  },
  {
    "id": 802,
    "db_id": "address_1",
    "question": "What are the names of cities with at least three students?",
    "answer": "\n  - 5.1: How many more than 20% of students in Copenhagen?\n  - 6.1: Add a new city to the list; what is its name, population and percentage of students?\n  - 7: What is the maximum number of students?"
  },
  {
    "id": 803,
    "db_id": "address_1",
    "question": "Show all states where more than 5 students live.",
    "answer": " A typical high school classroom is made up of between 20 and 30 students.\n\u201cA high school is a place where the kids are learning, growing, and building their character.\u201d\nA high school is a place where the kids are learning, growing, and building their character. A typical high school classroom is made up of between 20 and 30 students. High schools in Texas can have more than 500 students enrolled.\n"
  },
  {
    "id": 804,
    "db_id": "address_1",
    "question": "What are the states with more than 5 students?",
    "answer": "\n You have a lot of options.\n\\begin{itemize}\n\\item Set up an online school. A high-quality, well-respected online school can attract students from anywhere and help to fill any gaps in your district's enrollment. For example, you could partner with a private K-12 or specialized online school that has a large number of students (at least 50). You could also consider joining an accelerated online program for high-"
  },
  {
    "id": 805,
    "db_id": "address_1",
    "question": "Show ids for all students who don't live in USA.",
    "answer": " \n- `is_us_resident` is a column that contains a 1 for US residents and a 0 for non-US residents\n- `country_code` is a column with the code of the country (e.g. US, CA)\n- `id` is the primary key of the table. \n\n### Example query\n SELECT s.first_name, s.last_name FROM students s WHERE s.is_us_res"
  },
  {
    "id": 806,
    "db_id": "address_1",
    "question": "What the the student ids for students not living in the USA?",
    "answer": "\n The id numbers of students who are not living in the USA.\n\\end{blockquote}\n\nComment: Welcome to SO, please read [ask] and provide a [mcve]. You have to describe what you've tried so far, explain your requirements with sample data and expected output.\n\nComment: I'm afraid it's not clear what exactly you want to achieve? Do you just need a list of student ids who are not living in the USA?\n"
  },
  {
    "id": 807,
    "db_id": "address_1",
    "question": "Show ids for all female (sex is F) students living in state PA.",
    "answer": " 03150, 03276, 03780, 03914, 03920, 03922, 03925, 03935\n CU-SAN-12: Show ids for all female (sex is F) students living in state PA."
  },
  {
    "id": 808,
    "db_id": "address_1",
    "question": "What are the student ids for female students in the state of PA?",
    "answer": "\n In particular, I am looking to get a list of all female students' IDs and their Gender Code. I know how to do this in SQL Server but not in MySQL. Can you please help me with a query that will do the same thing? Here is my sample data:\n\n\\begin{code}\n SELECT s.studentid, s.gendercode FROM student s WHERE s.gendercode = 'F' AND s.statecode = 'PA';\n\\end"
  },
  {
    "id": 809,
    "db_id": "address_1",
    "question": "Show ids for all male students living outside of USA.",
    "answer": " 2) Identify the gender of the student using the genders array\n  (male = 1, female = 0) 3) Create a new column called \"gender\" with value in the previous column 4) Add a row to the table for a new student named \"Alice\" with gender male. */"
  },
  {
    "id": 810,
    "db_id": "address_1",
    "question": "What are the ids for male students not in the USA?",
    "answer": "\n On that list is a 15-year-old from Brazil, and several other international students. It\u2019s also possible that some of the \u201cinternational\u201d students may be Canadian or Mexican or something, but I don\u2019t know. But on that list you have to check your facts.\nAmazing how fast they change! The 15-year-old from Brazil has been here for two months, and he is in a room with an older male student who"
  },
  {
    "id": 811,
    "db_id": "address_1",
    "question": "What is the distance between BAL and CHI?",
    "answer": "\n BAL vs CHI, Who won?\n \n"
  },
  {
    "id": 812,
    "db_id": "address_1",
    "question": "Give the distance between BAL and CHI?",
    "answer": "\n BAL and CHI are 128 miles apart.\n How many inches is a mile in BAL? 3960 inches\n What is the average speed of an object traveling from BAL to CHI? 554.2057 km/h (3,205.7327 mph)\n Can you drive from BAL to CHI in one day? No, you can't drive that fast. The"
  },
  {
    "id": 813,
    "db_id": "address_1",
    "question": "Show me the distance between Boston and Newark.",
    "answer": " 82% of the time it is less than 150 miles, and 79% of the time it is greater than 150 miles.\n\nComment: I think it's more like 130 miles in New York to California, so you are right, it might not be a good idea. I am going to try to change the question a little."
  },
  {
    "id": 814,
    "db_id": "address_1",
    "question": "What is the distance between Boston and Newark?",
    "answer": "\n BF=Distance(Boston,New York)\n A=Distance(Atlanta,New York)\n D=Distance(Dallas,New York)\n E=Distance(El Paso,New York)\n F=Distance(Los Angeles,New York)\n G=Distance(Phoenix,New York)\n H=Distance(Hartford,New York)\n I=Distance(Jacksonville,New York)\n J=Distance(J"
  },
  {
    "id": 815,
    "db_id": "address_1",
    "question": "What is the average, minimum, maximum distance between two cities?",
    "answer": "\n The shortest distance between two cities is 7579 km; the longest distance is 12586 km.\n The average distance between two cities is 9905.4237 km.\n The minimum distance between two cities is 7579 km; the maximum distance between two cities is 12586 km."
  },
  {
    "id": 816,
    "db_id": "address_1",
    "question": "Give the average, minimum, and maximum distances between two cities.",
    "answer": " \n  \n    def avg_distance(self):\n        return (sum(self.distances) / len(self.distances)) if self.distances else -1\n\n    # Given a list of cities, find the closest pair and distance between them. \n    \n    def min_distance(self, cities):\n        distances = [(cities[i], cities[(i+1)%len(cities)]) for i in range"
  },
  {
    "id": 817,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with maximum distance.",
    "answer": " 75000 km apart\n\nI am trying to find two cities (or rather, the state and city code) in the United States that are closest to each other. In the following format: US State, City, Distance. I tried to use MySQL's `distance()` function but it's not available on Postgres.\n\n\\begin{code}\n SELECT a.state, a.city, distance(b.state, b.city) AS"
  },
  {
    "id": 818,
    "db_id": "address_1",
    "question": "What are the city codes of the cities with the maximum distance?",
    "answer": "\n  cities = list()\n  for i in range(k):\n    q = nearest_neighbor(city_matrix, k=i+1)\n    q = [cities[x] for x in q]\n    city_dist.append(q)\n    cities.extend(q)\n    \n  return city_dist  "
  },
  {
    "id": 819,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance greater than the average.",
    "answer": "  I know it can be done using the `haversine()` function but I do not understand how to implement this function.\n\nComment: What's your current query? What RDBMS are you targeting: MySQL, PostgreSQL, etc? What's your current query look like? Are there any constraints on the distance, such as a maximum distance allowed? Do you need only cities that have more than average distance from other cities or do you want all cities with a"
  },
  {
    "id": 820,
    "db_id": "address_1",
    "question": "What are the city codes of cities with distance greater than average?",
    "answer": "\n  SELECT c.city, AVG(distance) AS average_distance FROM (SELECT c1.city, c2.city, AVG(c1.distance) AS distance FROM city c1 CROSS JOIN city c2 GROUP BY 1, 2) AS c WHERE c.distance > AVG(average_distance) GROUP BY 1;"
  },
  {
    "id": 821,
    "db_id": "address_1",
    "question": "Show me the city code of two cities with a distance less than 1000.",
    "answer": " Certainly I can do that, but I am not sure it is worth the trouble.\n\nAnswer: It is possible to do this in SQL, but it's not trivial, and not practical. What you are asking for is essentially a [map-reduce](http://en.wikipedia.org/wiki/MapReduce) algorithm, which is a specific technique used by Hadoop. However, there's no reason why it should be done in SQL.\n\n"
  },
  {
    "id": 822,
    "db_id": "address_1",
    "question": "What are the city codes corresponding to cities with distances less than 1000?",
    "answer": "\n I want a list of all the city codes in a dataframe with a distance less than 1000. How can I do this?\n\n\\begin{code}\n       city_name    country_code city_code distance\n0    San Diego          US   CA    757071     3854\n1    Los Angeles        US   LA    727399   1000\n2    New York City      US"
  },
  {
    "id": 823,
    "db_id": "address_1",
    "question": "What is the total distance between city BAL and all other cities.",
    "answer": " \n  \n    def total_distance(self, city_name):\n        total = 0\n        for city in self.graph[city_name]:\n            total += self.distance(city_name, city)\n        return total\n\n"
  },
  {
    "id": 824,
    "db_id": "address_1",
    "question": "What is the sum of distances between BAL and other cities?",
    "answer": "\n  */\n        var bal_distances = new Array(city_names.length);\n        for (var i = 0; i < city_names.length; ++i) {\n          bal_distances[i] = computeDistance(cities, 'BAL', city_names[i]);\n        }\n        var min_dist = Math.min.apply(Math, bal_distances);\n        return min_dist;\n     "
  },
  {
    "id": 825,
    "db_id": "address_1",
    "question": "What is the average distance between Boston and all other cities.",
    "answer": " \nprint(distance_matrix)"
  },
  {
    "id": 826,
    "db_id": "address_1",
    "question": "Give the average distance between Boston and other cities.",
    "answer": "  The resulting map shows the average distance for all the cities with the city name, rank, and average distance.\n    public static void printCities(List<City> cities) {\n        Map<String, Double> averageDistance = new HashMap();\n        // Iterate through each city to calculate its average distance from Boston. Add that city's name, rank, and average distance to the map.\n        for (int i = 0; i < cities.size"
  },
  {
    "id": 827,
    "db_id": "address_1",
    "question": "What is the name of the city closest to Chicago?",
    "answer": "\n Bing says the nearest city to Chicago is Des Moines, Iowa.\nQ: Which state do you live in? A: I live in Indiana."
  },
  {
    "id": 828,
    "db_id": "address_1",
    "question": "Give the name of the nearest city to Chicago.",
    "answer": "  The number is stored in a variable called \"city\"\n     * and the two cities are printed out using a message format that states the city's name and population.\n     *\n     * @return void\n     */\n    public static function printCity(): void {\n        $city = ['Chicago', 2093457]; // The population of Chicago is 2,093,457.\n        printf(\"The city %"
  },
  {
    "id": 829,
    "db_id": "address_1",
    "question": "What is the name of the city furthest to Boston?",
    "answer": "\n Settlers.\n Which city has the most population?\n New York City has the highest population of any city in the United States.\n What is the average age of people living in New York City?"
  },
  {
    "id": 830,
    "db_id": "address_1",
    "question": "Give the city name of the city with greatest distance from Boston.",
    "answer": " 13.8 miles away.\nThe smallest city in New York State. Also known as \"Tiny Town.\"\nThe state's largest city, located on Long Island. It is home to the famous Statue of Liberty and the New York City skyline.\nA small town located in western Texas, it was founded in 1847 by oil tycoon Ross Perot."
  },
  {
    "id": 831,
    "db_id": "address_1",
    "question": "Show all city codes and the total distance to all other cities.",
    "answer": " \n# and find the shortest path between each city pair (the one with minimal distance).\nimport networkx as nx\nfrom networkx.algorithms import shortest_path\nimport timeit, itertools, random\n\ndef readFile(file, graph):\n    f = open(file)\n    for l in f:\n        t = l.split()\n        city1 = t[0]\n        city2 = t[1]\n"
  },
  {
    "id": 832,
    "db_id": "address_1",
    "question": "For each city, what is the the city code and sum of distances from each?",
    "answer": "\n  c_name = city_list[i].city.split()[0] + ' (' + city_list[i].city.split()[-1] + ')'\n  distances = np.zeros(len(city_list))\n  for j in range(len(city_list)):\n    distance = city_distance(city_list[j], city_list[i])\n    distances[j] = distance\n  total_distance"
  },
  {
    "id": 833,
    "db_id": "address_1",
    "question": "Show all city names and the average distance to all other cities.",
    "answer": " \n\t# for each city, this is a list of [city_name, avg_distance]\n    \n    for i in range(len(city_names)):\n        avg_dists = []\n        for j in range(i + 1, len(city_names)):\n            dist = haversine(city_lats[i], city_longs[i], city_lats[j], city_longs[j"
  },
  {
    "id": 834,
    "db_id": "address_1",
    "question": "What are the city name and average distances from each city?",
    "answer": "\n  CityName, Avg(Distance) AS Average_Distance FROM Cities;"
  },
  {
    "id": 835,
    "db_id": "address_1",
    "question": "How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?",
    "answer": "\",\n  \"I don't know. How about you?\"\n]\nprint(living_together(questions))"
  },
  {
    "id": 836,
    "db_id": "address_1",
    "question": "What is the distance between the cities where Linda Smith and Tracy Kim live?",
    "answer": "\n The city where Linda Smith lives is 30 miles to the east of Los Angeles, CA. The city where Tracy Kim lives is 45 miles to the west of New York City, NY.\";"
  },
  {
    "id": 837,
    "db_id": "address_1",
    "question": "What is the first name and last name of the student living furthest to Linda Smith?",
    "answer": "\n A) The student who lives furthest away from Linda Smith is: B) Sheila Wilson.\nThe student who lives furthest away from Linda Smith is Sheila Wilson.\nA. Sheila Wilson"
  },
  {
    "id": 838,
    "db_id": "address_1",
    "question": "What is the full name of the student who lives furthest from Linda Smith?",
    "answer": "\n A. Joe Brown\n B. Jane Green\n C. Frank Red\n D. Mary Blue\nE. Susan White"
  },
  {
    "id": 839,
    "db_id": "address_1",
    "question": "Which state does the student whose first name is Linda live in?",
    "answer": "\n A) Somewhere in the United States B) Somewhere else in the world\n The correct answer is: A) Somewhere in the United States."
  },
  {
    "id": 840,
    "db_id": "address_1",
    "question": "Give the state that the student with first name Linda lives in.",
    "answer": " 17890 West End Lane, Dallas, Texas 752046."
  },
  {
    "id": 841,
    "db_id": "boat_1",
    "question": "Return all details of sailors who are older than 30.",
    "answer": " A single $25,000 donation is required for each member of a household in order to receive the coverage.\nTo qualify for Medicaid, you must be low-income and be enrolled in an MMA program (which offers free services) or a HRA program (which pays for services). In some cases, you may also need a letter from your health care provider explaining that you meet these requirements.\nSeveral states offer a Medicaid"
  },
  {
    "id": 842,
    "db_id": "boat_1",
    "question": "What can you tell me about sailors who are older than age 30?",
    "answer": "\n Wives and children of sailors who are older than age 30?"
  },
  {
    "id": 843,
    "db_id": "boat_1",
    "question": "Return name and age for sailors who are younger than 30.",
    "answer": " A common procedure that is used to treat this condition involves the use of a catheter to deliver medication directly into the bloodstream, which can help to reduce the amount of fluid in the body. However, more invasive procedures may be necessary if the individual has severe cases of edema.\nIf you suspect you or a loved one suffers from edema, it\u2019s important to speak with a doctor for an evaluation. Treatment may involve the use of medication, c"
  },
  {
    "id": 844,
    "db_id": "boat_1",
    "question": "What is the name and age of every sailor who is younger than age 30?",
    "answer": "\n AGE > 30;"
  },
  {
    "id": 845,
    "db_id": "boat_1",
    "question": "Find boats reserved by Sailor with id 1.",
    "answer": " Clients will not be able to book the same boat twice\n\n\nI want to return a list of available boats that can be booked by client with id 1. I would like to see the full details of each boat, including its name, description and a flag indicating whether or not it is reserved (either because another customer has booked it or because my client has booked it).\n\n\\begin{code}\n SELECT b.name AS boat_name,"
  },
  {
    "id": 846,
    "db_id": "boat_1",
    "question": "What are the different boat ids reserved by the sailor whose id is 1?",
    "answer": "\n Tags: [ 'sailing', 'boat' ]\n \nExpected output:\n SELECT b.id FROM Boats b JOIN SailorsToBoats s ON b.id = s.boat_id WHERE s.sailor_id = 1;"
  },
  {
    "id": 847,
    "db_id": "boat_1",
    "question": "Who reserved boat 102?",
    "answer": "\n WRITTEN BY: DAVID G. STANSEY & MARTIN K. KELLEY, PHD'S\n\nCALLING SEQUENCE:\n% dgstansy_mpi ( input_state_file, output_state_file )\n\n INPUTS:\n input_state_file - file with state to be analyzed\n\n OUTPUTS:\n output_state_file - file with"
  },
  {
    "id": 848,
    "db_id": "boat_1",
    "question": "What is the name of the sailor who reserved boat 102?",
    "answer": "\", \"Fred\"\n  end\n\n\n  def test_book_for_sailors_only\n    assert_raises(ActiveRecord::ReadOnlyRecord) do\n      sailor_with_reserved_boat.book_for_sailors_only = 'Low-cost'\n    end\n  end\nend\n"
  },
  {
    "id": 849,
    "db_id": "boat_1",
    "question": "Return the unique boat ids (bid) of all reserved boats.",
    "answer": " \n     * @return array of unique boat ids (bids) \n    */ \n    public static function get_all_reserved_boats() {\n        return Boat::where('is_available', '=', FALSE)->pluck('id')->toArray();\n    }\n}"
  },
  {
    "id": 850,
    "db_id": "boat_1",
    "question": "What are the ids of all boats that are reserved by someone?",
    "answer": "\n  I don't want to return any, but just an array with their IDs.\n\\end{blockquote}\n\nThe following code will give you a list of boat ids (in the variable `reserved_boat_ids`) for every user:\n\n\\begin{code}\n SELECT rb.user_id, b.id AS boat_id FROM reservations rb JOIN boats b ON rb.booked_to > CURRENT_"
  },
  {
    "id": 851,
    "db_id": "boat_1",
    "question": "What is the name of sailors whose names contain letter e?",
    "answer": "\n  SELECT a.name FROM a_table AS a WHERE a.name ILIKE '%e%';"
  },
  {
    "id": 852,
    "db_id": "boat_1",
    "question": "What is the name of every sailor whose name contains the letter e?",
    "answer": "\n  def query_by_name(name)\n  query = %Q[ SELECT * FROM Sailors s WHERE s.name ILIKE '%#{name}%' ]\n  Sailor.find_by_sql(query)\nend\n```\n"
  },
  {
    "id": 853,
    "db_id": "boat_1",
    "question": "return the unique ids of sailors who are older than any sailors.",
    "answer": " \n// in the list.\nfunc OlderThanAny(s []Sailor) (ids []int) {\n\tfor _, v := range s {\n\t\tif v.Age > max(s) {\n\t\t\tids = append(ids, v.ID)\n\t\t}\n\t}\n\treturn ids\n}"
  },
  {
    "id": 854,
    "db_id": "boat_1",
    "question": "What is the different id of every sailor who is not the youngest?",
    "answer": "\n  SELECT s.id FROM Sailors s WHERE s.age != (SELECT MIN(s2.age) FROM Sailors s2);"
  },
  {
    "id": 855,
    "db_id": "boat_1",
    "question": "Return the unique names of sailors who are older than any sailors whose rating is larger than 7.",
    "answer": " \"John\", for example, would be returned even if there is a sailor named John who has a lower rating.\n\\end{blockquote}\n\nI'm not sure how to do this and I couldn't find any information on the internet or in my database book. Can someone help me? Thanks in advance!\n\nAnswer: \\begin{code}\n SELECT s.name FROM sailors s WHERE s.rating > 7 ORDER BY s.name NULLS LA"
  },
  {
    "id": 856,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who are older than some other sailor with a rating larger than 7?",
    "answer": "\n I mean, you can do this:\n PERFORMING SELECT s.sailor_name FROM sailors s WHERE s.rating > 7 ORDER BY s.sailor_name NULLS LAST;"
  },
  {
    "id": 857,
    "db_id": "boat_1",
    "question": "Find the name and id of the sailors who reserved at least one boat?",
    "answer": "\n  SELECT s.name, s.id FROM Sailors s JOIN ReservedBoats rb ON s.id = rb.sailor_id;"
  },
  {
    "id": 858,
    "db_id": "boat_1",
    "question": "What is the name and id of every sailor who reserved one or more boats?",
    "answer": "\n The first SQL query I tried was:\n  SELECT s.name, s.id FROM Sailors s JOIN Reservations r ON s.id = r.sailor_id GROUP BY s.name, s.id;"
  },
  {
    "id": 859,
    "db_id": "boat_1",
    "question": "Find the id and name of the sailors who reserved more than one boat.",
    "answer": " \n   SELECT s.id, s.name FROM Sailor s JOIN Reserve r ON s.id = r.sailor_id WHERE r.num_of_boats > 1 ORDER BY s.id NULLS LAST;"
  },
  {
    "id": 860,
    "db_id": "boat_1",
    "question": "What are the different names of sailors who reserved two or more boats ?",
    "answer": "\n The name of a sailor who reserved two or more boats can be obtained by:\n Finding the names of all sailors who have reserved at least two boats. Then, from those sailors whose names have been found, removing the ones who have not reserved any more than two boats.\n SELECT DISTINCT s1.surname FROM Sailor AS s1 JOIN (SELECT sailor_id FROM Boat_reservation GROUP BY sailor_id HAVING COUNT"
  },
  {
    "id": 861,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red or blue boat.",
    "answer": " 2 times and get the count of such reservations\n(count_reservation) ?\nI have a table called Reservations with columns: r_id, s_id, b_id.\n\n\\begin{code}\n SELECT sid FROM (SELECT s_id FROM Reservations GROUP BY s_id HAVING COUNT(DISTINCT b_id) = 2) AS sub;\n\\end{code}\n\nHow do I get"
  },
  {
    "id": 862,
    "db_id": "boat_1",
    "question": "What are the sids for sailors who reserved red or blue boats?",
    "answer": "\n \u201cAll red and blue boats are available for anyone to sail.\u201d\n On the day of your arrival, we will check in with you to see if there is a problem. If so, we will fix it ASAP. We can also provide you with tips on how to use the boat. If you have any other questions or concerns, we can help you find a solution for you.\nOur sails are available on our website. You can choose a sail that suits your needs"
  },
  {
    "id": 863,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red or blue boat.",
    "answer": " 1492\n    SELECT s.name, s.id FROM Sailors s JOIN Reservations r ON s.id = r.sid WHERE r.boat_color IN ('red', 'blue') AND EXTRACT(YEAR FROM r.reservation_date) = 1492;"
  },
  {
    "id": 864,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red or blue boats?",
    "answer": "\n A list of sailors who reserved a boat.\n SELECT s.name, b.color, b.id FROM Sailor AS s JOIN Boat AS b ON s.id = b.sailor_id;"
  },
  {
    "id": 865,
    "db_id": "boat_1",
    "question": "Find the id of Sailors (sid) that reserved red and blue boat.",
    "answer": " 2 seats from a total of 5\n\t * seats on the ship. Each sid should be at least 4 characters long, and must start with 'S' followed by 4 digits. The\n\t * result should be in the format \"[s1 s2]\", where each s1 and s2 are valid ids for Sailors.\n\t */\n\tpublic static String[] getReservedSeats(int totalSeats) {\n\t\tString[] seats"
  },
  {
    "id": 866,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who reserved red and blue boats?",
    "answer": "\n The output should be a list of the sailor ids.\n SELECT s.sailor_id FROM Sailors s JOIN Reservations r ON s.sailor_id = r.reservation_id AND r.boat_id IN (SELECT id FROM Boats WHERE color = 'red' OR color = 'blue') ORDER BY s.sailor_id NULLS LAST;"
  },
  {
    "id": 867,
    "db_id": "boat_1",
    "question": "Find the name and id of Sailors (sid) that reserved red and blue boat.",
    "answer": " 2 hours before\nSELECT s.name, s.id FROM sailors s JOIN reservations r ON s.id = r.sailor_id WHERE r.reservation_date BETWEEN (CURRENT_DATE - INTERVAL '4 hours') AND CURRENT_DATE GROUP BY s.name, s.id;"
  },
  {
    "id": 868,
    "db_id": "boat_1",
    "question": "What are the names and ids of sailors who reserved red and blue boats?",
    "answer": "\n  SELECT s.name, b.id AS boat_id FROM Sailors s JOIN Reservations r ON s.id = r.sailor_id JOIN Boats b ON r.boat_id = b.id WHERE (b.color = 'red' OR b.color = 'blue') ORDER BY s.name NULLS LAST;"
  },
  {
    "id": 869,
    "db_id": "boat_1",
    "question": "What is the ids of sailors that haven\u2019t reserved a boat?",
    "answer": "\n  def non_reserved_sailor_ids(sailors)\n ASSERT(sailors.all?, \"Expected all sailors to be present.\")\n  ids = (sailors.map(&:id)).to_set - (sailors.map(&:reservation).map{|r| r.boat && r.boat.sailor_id }.compact)\n  ASSERT(ids."
  },
  {
    "id": 870,
    "db_id": "boat_1",
    "question": "What are the ids of sailors who have not reserved a boat?",
    "answer": "\n  SELECT DISTINCT s.id FROM Sailor s LEFT JOIN Reservation r ON s.id = r.sailor_id AND TO_DATE(r.departure_date,'YYYY-MM-DD') > CURRENT_DATE WHERE r.sailor_id IS NULL;"
  },
  {
    "id": 871,
    "db_id": "boat_1",
    "question": "what is the name and id of sailors who do not have a reservation of a boat?",
    "answer": "\n The first SQL statement that I wrote is:\n  SELECT n.name, n.id FROM NAMES n WHERE n.name NOT IN (SELECT b.sailor_id FROM BOOKING b);"
  },
  {
    "id": 872,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who do not have boat reservations?",
    "answer": "\n  SELECT s.name, s.id FROM Sailor s LEFT JOIN Reserve r ON s.id = r.sailor_id WHERE r.sailor_id IS NULL ORDER BY name NULLS LAST;"
  },
  {
    "id": 873,
    "db_id": "boat_1",
    "question": "Find id for the sailors who do not have a reservation of a boat?",
    "answer": "\n I want to be able to find out which of these sailors are not booked on a boat, and if any of them can be booked on a boat.\n\nComment: What's the actual question?\n\nComment: @AleksG For the sailors who do not have a reservation of a boat, I want to be able to find out which of these sailors are not booked on a boat, and if any of them can be booked"
  },
  {
    "id": 874,
    "db_id": "boat_1",
    "question": "What is id about sailors who do not have boat reservations?",
    "answer": "\n Sailors without a boat reservation are a part of the unreserved crew. If a ship is to be taken to sea, it must have a full complement of sailors before it can be launched; that means all sailors must have a seat on the lifeboat.\n What is a Lifeboat? The lifeboat is essentially a small, narrow ship that can take only 75-100 passengers and a limited amount of cargo"
  },
  {
    "id": 875,
    "db_id": "boat_1",
    "question": "What is the name of the sailors who reserved boat with id 103?",
    "answer": "\n [1,2]\n  SELECT s.name FROM sailors s JOIN boat_reservations br ON s.id = br.sailor_id WHERE br.boat_id = 103;"
  },
  {
    "id": 876,
    "db_id": "boat_1",
    "question": "Find the name of the sailors who reserved boat with id 103.",
    "answer": " \"SELECT full_name FROM sailors WHERE id = 103;\"\n}\n"
  },
  {
    "id": 877,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than any sailor named Luis?",
    "answer": "\n  SELECT s.name FROM Sailor s WHERE s.rating > (SELECT MAX(s2.rating) FROM Sailor s2 WHERE s2.name = 'Luis');"
  },
  {
    "id": 878,
    "db_id": "boat_1",
    "question": "What are the sailors' names, the ones whose rating is higher than any sailor named Luis?",
    "answer": "\n A) Give a list of all the sailors with a name that starts with an 'A'.\n I'm going to do this one by hand.\n SELECT s.name FROM sailors s WHERE SUBSTRING(s.name, 1, 1)=='A';"
  },
  {
    "id": 879,
    "db_id": "boat_1",
    "question": "What is the name of all sailors whose rating is higher than all sailors named Luis?",
    "answer": "\n A. SELECT s.name FROM sailor s WHERE s.rating > (SELECT AVG(s2.rating) FROM sailor s2 WHERE s2.name = 'Luis');"
  },
  {
    "id": 880,
    "db_id": "boat_1",
    "question": "What are the names of all sailors with a higher rating than every sailor named Luis?",
    "answer": "\n I would expect this to return a list of sailors with higher ratings, but only those with the name Luis. For example:\n SELECT s.name, s.rating FROM Sailor s WHERE s.name ilike '%Luis%' AND s.rating > (SELECT AVG(s2.rating) FROM Sailor s2 WHERE s2.name ilike '%Luis%');"
  },
  {
    "id": 881,
    "db_id": "boat_1",
    "question": "what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.",
    "answer": " CouchDB allows us to do this using the query language. We can write a map function like this:\n\n    var ratings = db.query(function (doc) { return doc.rating > 2; });\n    var ids = ratings.map(function (sailor) { return sailor.id; });"
  },
  {
    "id": 882,
    "db_id": "boat_1",
    "question": "What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?",
    "answer": "\n 'SELECT s.name, s.id FROM Sailor s JOIN ReservedBoat rb ON s.id = rb.sailor_id WHERE s.rating >= 3;'"
  },
  {
    "id": 883,
    "db_id": "boat_1",
    "question": "Find the name and age of the oldest sailor.",
    "answer": " \n * You may assume that each input line (string) contains a valid name followed by a space and then a number without any leading or trailing whitespace. \n * Example: \"John 25\"  \n */\nfunction findOldestSailor(data) {\n    let oldest = {};\n    data.forEach(element => {\n        const splitted = element.split(' ');\n        if (oldest.name == undefined || oldest.age >"
  },
  {
    "id": 884,
    "db_id": "boat_1",
    "question": "What is the name and age of the sailor with maximum age?",
    "answer": "\n  SELECT n.name, MAX(n.age) AS max_age FROM Navigators n GROUP BY n.name;"
  },
  {
    "id": 885,
    "db_id": "boat_1",
    "question": "how many sailors in total?",
    "answer": "\n Are the three of them going to be on board for the next two days? It's not specified, but if so, is there a way I can get a list of all of the people going on a boat with me. Or is it only people who have explicitly agreed to go with me?\nAlso, do you know if these sailors are required to pay a fee for the duration of their stay, or would this be covered by some other arrangement?\nI'm not"
  },
  {
    "id": 886,
    "db_id": "boat_1",
    "question": "How many sailors exist?",
    "answer": "\n Are they too scared to go out on a ship? If so, why don't they have any more fun in their lives? I mean, what is the point of living if you can't live life to the fullest?\nIn terms of fun in life, I would say that there are certain types of people who really live for the thrill of being scared. In terms of living for the thrill of being scared, you have to be a little bit"
  },
  {
    "id": 887,
    "db_id": "boat_1",
    "question": "What is the average age of sailors whose rating is 7?",
    "answer": "\n Tags: avg age, average age, seamen, age of seamen\n Averaging Age of Sailors With Rating 7 (or higher)\nThe average age of sailors with a rating of 7 or higher is 31.1 years old."
  },
  {
    "id": 888,
    "db_id": "boat_1",
    "question": "What is average age of all sailors who have a rating of 7?",
    "answer": "\n PIVOT (SELECT AVG(age) FROM sailor WHERE rating = 7);"
  },
  {
    "id": 889,
    "db_id": "boat_1",
    "question": "How many sailors whose name starts with letter D exist ?",
    "answer": "\", \"SELECT COUNT(*) FROM Person p WHERE p.  WHERE LOWER(p.FIRST_NAME) = 'd'\")\n\n    def test_select_person_by_firstname_starts_with_e(self):\n        \"\"\" SELECT COUNT(*) FROM Person p WHERE p.FIRST_NAME ILIKE 'e%'.\"\"\"\n        self.assertEqual(2, get_count_of_sailors_whose_"
  },
  {
    "id": 890,
    "db_id": "boat_1",
    "question": "What is the count of the sailors whose name starts with letter D ?",
    "answer": "\", \" SELECT COUNT(*) FROM Sailor s WHERE s.  .s_first_name ilike 'D%';\" )\n    ( \" What is the average age of the sailors whose name contains letter A ?\", \" SELECT AVG(EXTRACT(YEAR FROM AGE(CURRENT_DATE, s.birth_date))) AS avg_age FROM Sailor s WHERE s.s_first_name ilike '%A%';\""
  },
  {
    "id": 891,
    "db_id": "boat_1",
    "question": "What are the average rating and max age of all sailors?",
    "answer": "\n  SELECT AVG(s.rating), MAX(s.age) FROM sailor s;"
  },
  {
    "id": 892,
    "db_id": "boat_1",
    "question": "Find the average rating and largest age for the sailors",
    "answer": ". \n   def average_age(self) -> float:\n       return sum(s.age) / len(s)\n\n   def max_age(self) -> int:\n       return max(s.age)\n\n\ns = Sailors()\nprint(\"Average age is\", s.average_age())\nprint(\"Max age is\", s.max_age())\n"
  },
  {
    "id": 893,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat.",
    "answer": " \n  \n    def get_reservation_count(self, date):\n        \"\"\"\n        Return the total number of reservations made on a given day.\n        \n        Parameters:\n          date (datetime) -- The date of the reservations to count.\n        \"\"\"\n        return len(self.__bookings[date])\n      \n    def __make_reservation(self, date, boat):\n        \"\"\"\n        Add a new"
  },
  {
    "id": 894,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat?",
    "answer": "\n I think there is a limit of 5 reservations per boat. If I have to do the calculations for 100 boats, it's going to take me a while. Can anyone help out?\n\nAnswer: There are at most $5\\times 100 = 500$ reservations possible."
  },
  {
    "id": 895,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with id greater than 50.",
    "answer": " \"\n            + \"and a capacity greater than 10.\"));\n    System.out.println(boatRepository.countByCapacityGreaterThan(10));\n    // SELECT COUNT(*) FROM Boats b WHERE b.id > 50 AND b.capacity > 10;"
  },
  {
    "id": 896,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat with an id greater than 50?",
    "answer": "\n C# SQL Server query.\n\nI'm trying to write a query in C# that returns the number of reservations for each boat that has an id greater than 50. So far, I have this:\n\n\\begin{code}\n SELECT b.id, COUNT(r.id) AS total_reservations FROM boats b JOIN reservations r ON b.id = r.boat_id WHERE b.id > 50"
  },
  {
    "id": 897,
    "db_id": "boat_1",
    "question": "Find the number of reservations for each boat with more than 1 reservation.",
    "answer": " #7972\n\nI have a database that contains all the reservations made to boats in a booking system. The reservations are stored in a table called 'reservations'. Each reservation has a 'boat_id' column that matches the id of the boat being reserved. Here is an example:\n\n\\begin{code}\n SELECT r.boat_id, COUNT(r.id) AS number_of_reservations FROM"
  },
  {
    "id": 898,
    "db_id": "boat_1",
    "question": "How many reservations exist for each boat that has more than 1 reservation already?",
    "answer": "\n A few methods that I've tried to try and do this:\n \n  - Use a subquery, but I'm not sure how to write the query.\n  - Write an inner loop in a stored procedure to check if a given boat_id has more than one reservation. If it does, return an error.\n  - Create a boolean function that checks whether two or more reservations for a given boat exist. I'm not sure how to"
  },
  {
    "id": 899,
    "db_id": "boat_1",
    "question": "Find the number of reservations by sailors with id greater than 1 for each boat.",
    "answer": " \" +\n        \"ORDER BY b.id, c.reservation_count DESC NULLS LAST;\")\n    List<BoatReservations> getBoatReservationsWithCrewLimit();\n}"
  },
  {
    "id": 900,
    "db_id": "boat_1",
    "question": "How many reservations for each boat did the sailors with an id greater than 1 make?",
    "answer": "\n Btw, the answer is 2.571429. I don't know why it has to be that number specifically, but I do know that it's the correct answer. :)"
  },
  {
    "id": 901,
    "db_id": "boat_1",
    "question": "What is the rating and average age for sailors who have reserved red boat grouped by rating?",
    "answer": "\n  SELECT r.rating, AVG(EXTRACT(YEAR FROM a.age(CURRENT_DATE))) AS average_age FROM Sailor s JOIN AgeCalculator a ON s.sid = a.sid JOIN Rating r ON s.sid = r.sid GROUP BY r.rating;"
  },
  {
    "id": 902,
    "db_id": "boat_1",
    "question": "What are the rating and average age for sailors who reserved red boats for each rating?",
    "answer": "\n I would like to know how to write a query that shows me the average age for sailors of each rating. I have a table called \"sailors\" with columns \"rating\", \"age\" and \"reserved_red_boat\". What I want my query to do is to show me the average age for sailors with the highest rating, but only for those who reserved the red boat. How can I achieve this?\n SELECT s.rating, AVG(s"
  },
  {
    "id": 903,
    "db_id": "boat_1",
    "question": "Find the name, rating and age of all sailors ordered by rating and age.",
    "answer": " \n    SELECT s.name, s.rating, s.age FROM Sailor AS s ORDER BY s.rating DESC, s.age ASC;"
  },
  {
    "id": 904,
    "db_id": "boat_1",
    "question": "What is the name, rating, and age for every sailor? And order them by rating and age.",
    "answer": " \n     * @return A list of Sailors with their name, rating, and age\n     */\n    public List<Sailor> getAllSailors() {\n        return new ArrayList<>(sailors);\n    }\n}\n"
  },
  {
    "id": 905,
    "db_id": "boat_1",
    "question": "Find the total number of boats.",
    "answer": " \n# @param {Number} n - An integer. The number of boats on the next row to be placed in the array.\n# @return {Array} - An array representing the state of the matrix after placing n boats.\ndef placeBoats(n, m)\n  if n == 0 || m <= n || n > m\n    [nil] * (m + 1) # Fill the array with nil to represent an empty row.\n"
  },
  {
    "id": 906,
    "db_id": "boat_1",
    "question": "How many boats are there?",
    "answer": "\n Is the data structure for the array of boats evenly distributed or is it more compact in the beginning, and how can I find that out?\n The data structure for the array of boats should be 16 bytes (2 32-bit registers) and so it's not possible to store all boats on a single page. The only way to do this with 8 bits would be to use one byte to describe the number of pages needed for each boat, but that would"
  },
  {
    "id": 907,
    "db_id": "boat_1",
    "question": "How many boats are red?",
    "answer": "\n Certainly, I'm not going to deny it. It's a common perception that all sailors are tough and rugged, but I don't believe that. What I mean is, there's a lot of other things about them that are also important. And if we only look at the ones we think are tough and rugged, we miss the nuances and complexity of all these different types of people. We're going to have to"
  },
  {
    "id": 908,
    "db_id": "boat_1",
    "question": "How many red boats exist?",
    "answer": "\n It\u2019s not just the number of boats but also the condition of those boats, which has an impact on the whole ecosystem. The healthier the ecosystem, the better the outcome for all boat owners and visitors alike."
  },
  {
    "id": 909,
    "db_id": "boat_1",
    "question": "Find the names of boats booked by sailors whose age is between 20 and 30.",
    "answer": " Cells must be separated by a comma.\n * If there are no records in the table, return an empty string.\n */\nfunction getBoatsByAge(db) {\n    const ageRange = (20 <= 30 ? [20] : [20, 30]).join(',');\n\n    return db.query(`SELECT b.name FROM boat b JOIN sailor s ON b.id = s.boat_id WHERE EX"
  },
  {
    "id": 910,
    "db_id": "boat_1",
    "question": "What are the names of the boats booked by people between age 20 and 30?",
    "answer": "\n B) The name of the boat that is not booked?\n C) Which boat was booked twice by someone over 50 years old? D) How many people booked a boat between ages 18 and 25?"
  },
  {
    "id": 911,
    "db_id": "boat_1",
    "question": "Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.",
    "answer": "  SELECT s1.name FROM Sailor AS s1 WHERE s1.rating > (SELECT AVG(s2.rating) FROM Sailor AS s2 WHERE s2.boat_preferences = 'red');"
  },
  {
    "id": 912,
    "db_id": "boat_1",
    "question": "What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?",
    "answer": "\n The name of the sailor with the highest average rating. The name of the sailor with the lowest average rating.\n SELECT s1.name AS highest_rated, s2.name AS lowest_rated FROM (SELECT AVG(rating) AS high_avg FROM Sailors WHERE boat_id = 2::INTEGER) AS h JOIN (SELECT MIN(AVG(rating)) AS low_avg FROM Sailors WHERE boat_"
  },
  {
    "id": 913,
    "db_id": "boat_1",
    "question": "What is highest rating between sailors?",
    "answer": "\n Sailor ratings are a way to compare and rank sailors based on their ability level. Each sailor's rating is a number that represents the sailor's ability level in comparison to all other sailors. The higher the rating, the greater the sailor's ability level. The ratings can be used to find out what a sailor's ability level is compared to that of other sailors, as well as to determine whether or not a sailor has improved their"
  },
  {
    "id": 914,
    "db_id": "boat_1",
    "question": "What is the maximum rating for sailors?",
    "answer": "\n Are there any limits on the number of sailors a ship can have?\n Different nations have different rules.\nWhat is the maximum size of a ship? Is it 120 meters?\nWhere can I find more information about the ship\u2019s maximum rating?\nWhat are the limitations on the length of a ship\u2019s name?\nThe International Maritime Organization (IMO) sets regulations and requirements for ships. For example, the IMO requires that all"
  },
  {
    "id": 915,
    "db_id": "boat_1",
    "question": "Find the names of sailors who reserved boat with the name Melon.",
    "answer": " 536971707471\n\nI have a list of phone numbers that I would like to know if they are in my contacts or not. I would like to be able to find them in a phone book, but all I can tell is the first four digits (5369). How can I use this information to search for names?\n\nI tried searching on google and there is no result. Then I searched on yahoo and there is"
  },
  {
    "id": 916,
    "db_id": "boat_1",
    "question": "What are the names of sailors who reserved a boat with the name Melon?",
    "answer": "\n Worth: 1000\n Bounty\nWhat is the best way to contact someone in France, given that they have no phone number or email address?\n Worth: 8000 Bounty"
  },
  {
    "id": 917,
    "db_id": "boat_1",
    "question": "List the names and ages of all sailors sorted by rating in descending order.",
    "answer": " \n# Return: a list of tuples, each containing a name and age\"\"\"\ndef sort_sailors(rating):\n    return sorted(rating, key=lambda x: -x[0])\n"
  },
  {
    "id": 918,
    "db_id": "boat_1",
    "question": "What are the names and ages of all sailors sorted by decreasing rating?",
    "answer": "\n  def sorted_sailors(self) -> List[Tuple[str, int]]:\n \"Return a list of tuples (name, age) of all sailors sorted by their rating (increasing or decreasing).\"\n    return [s.name, s.age] for s in self._data if s.rating is not None\n\\end{code}"
  },
  {
    "id": 919,
    "db_id": "headphone_store",
    "question": "Find the model of the most expensive headphone.",
    "answer": " The brand and name of the product are not specified.\n\n    Args:\n        product_price (float): Price of the product.\n        product_brand (str): Brand of the product.\n        product_name (str): Name of the product.\n\n    Returns:\n        tuple(str, str, str): Brand and name of the headphone.\n    \"\"\"\n    if product_price > 1000:\n        return product_"
  },
  {
    "id": 920,
    "db_id": "headphone_store",
    "question": "Which headphone model has the highest price?",
    "answer": "\n It\u2019s hard to say for sure, as prices can change. However, at the time of writing, the most expensive iPhone models are the iPhone 7 Plus and the iPhone XS Max. They both come with a price tag of $959 (or \u00a3749) in the UK. Other high-end models also cost a lot, such as the iPhone XS with an MSRP of \u00a3699 or the iPhone XR with a price tag of"
  },
  {
    "id": 921,
    "db_id": "headphone_store",
    "question": "List all different headphone models in the alphabetical order.",
    "answer": " \n *\n * @return array of headphone models in alphabetical order\n */\nconst getAllHeadphoneModels = () => {\n    return Object.keys(headphones).sort((a, b) => a < b ? -1 : 1);\n};"
  },
  {
    "id": 922,
    "db_id": "headphone_store",
    "question": "Return the list of distinct headphone models ordered alphabetically.",
    "answer": " \ndef list_headphones():\n    return [ h.model for h in Headphone.query.order_by(Headphone.model) ]\n"
  },
  {
    "id": 923,
    "db_id": "headphone_store",
    "question": "Which headphone class is the most common one?",
    "answer": "\n On an average, how many people have a mobile phone? How many people have landline? What's the average age of people with a mobile phone?\nIn the UK, only 93% of the population has a mobile phone. That is why the country has to import the majority of its mobile phone users from other countries like the US and Canada. In most parts of the UK, the mobile phones are in use for more than two years. The average age of people"
  },
  {
    "id": 924,
    "db_id": "headphone_store",
    "question": "Which headphone class contains the most headphones?",
    "answer": "\n \u201cWhen it comes to headphones, you can\u2019t go wrong with Sony Ericsson.\u201d I don\u2019t know if there is a better choice than Sony Ericsson. I really like them!\nIn addition to being great sound quality and designing the best in the business, they also offer a lot of options for the consumer who wants to customize their headphones to fit his/her needs. Whether it is a pair of in-ear headphones or earbud"
  },
  {
    "id": 925,
    "db_id": "headphone_store",
    "question": "Which headphone class does have more than two headphones?",
    "answer": "\n A: It is possible to connect multiple headphones to an Android device. \nTo do so, you need to create a new Bluetooth pairing for each headphone. In the Bluetooth settings under the \"Advanced\" tab, you'll find options to create a new pairing and then to set up a name or PIN for that pairing (if your device supports them).\nTo make the device discoverable, select \"Discoverable\" from the main"
  },
  {
    "id": 926,
    "db_id": "headphone_store",
    "question": "Find the headphone class that does not contain more than two headphones.",
    "answer": " \n   */\n  public static final int findHeadphoneClass(List<Integer> classes) {\n    return findHeadphoneClass(classes, 2);\n  }\n\n  /**\n   * Find the headphone class that does not contain more than <code>maxHeadphones</code>.\n   */\n  public static final int findHeadphoneClass(List<Integer> classes, int maxHeadphones) {\n    for (int i ="
  },
  {
    "id": 927,
    "db_id": "headphone_store",
    "question": "Find the number of headphones with a price higher than 200 for each class.",
    "answer": " \" +\n        \"GROUP BY c.name, c.price ORDER BY c.name NULLS LAST, c.price DESC;\")\npublic List<Classic> findPriceGreaterThan200(int pageNumber, int recordsPerPage);"
  },
  {
    "id": 928,
    "db_id": "headphone_store",
    "question": "How many headphones cost more than 200 for each headphone class?",
    "answer": "\n By Headphone class, I mean the headphone classes defined by the SPL rating system (https://en.wikipedia.org/wiki/Sound_Pressure_Level_rating) and the other headphone classifications. The question is: What do you think this will cost more than 200 dollars?\n\nAnswer: These are the headphones with a higher cost of RMS power:\n\nRMS Power (dB) Cost (USD) Head"
  },
  {
    "id": 929,
    "db_id": "headphone_store",
    "question": "how many different earpads are there?",
    "answer": "\n My main issue is that I can't figure out the \"best\" way to do it. It's like asking for a recipe for the best pizza. There's so many variations, I don't know what to choose. :)\n\nI think I will just have to go with an A/B test with multiple versions of the page and measure which one gets more bounce rate or conversions.\n\nComment: Yeah that's a good way to"
  },
  {
    "id": 930,
    "db_id": "headphone_store",
    "question": "Count the number of different earpads.",
    "answer": "  For example, you could have a 12mm diameter headset and two different 7.5mm diameter earpads (one for each ear).\n\nComment: @Steve - It's not that I can't find the numbers anywhere. They just don't exist. There's no way to get this information from the device itself, nor is there any manufacturer-provided documentation with it. The only number you'll ever get is the diameter"
  },
  {
    "id": 931,
    "db_id": "headphone_store",
    "question": "Find the top 2 earpads that are mostly used.",
    "answer": " Cut them up, and you'll have two pieces of 1/4-inch wide laminated cardboard. You can use this to make a nice little paperweight.\nIf you are looking for something more substantial, then look for a big piece of thick cardboard, about 3 inches long. If you find it lined with plastic, cut off the plastic liner and use just the cardboard.\nThe most important thing is to have a piece that"
  },
  {
    "id": 932,
    "db_id": "headphone_store",
    "question": "What are the top 2 earpads in terms of the number of headphones using them?",
    "answer": "\n Fanboys and fan girls are the people who like to listen to music but don\u2019t care about fashion or the latest gossip. The most popular earpad is the standard size earphones used by everyone, and they account for 36% of all headphones. This is a pretty standard size so that almost all people can use them. However, the next popular sizes are 75%-80% smaller, meaning that these headphones are"
  },
  {
    "id": 933,
    "db_id": "headphone_store",
    "question": "What are the model, class, and construction of the cheapest headphone?",
    "answer": "\n Category: Tech | Technology.\nHeadphones are one of the most essential accessories for many people in their daily life. They are used to listen to music, communicate with other people, watch videos etc. But what is the best headphone in terms of affordability?\nWhile a lot of factors affect the cost of the cheapest headphones, their construction and material, make them one of the most popular accessories. This article explains how to find the cheapest"
  },
  {
    "id": 934,
    "db_id": "headphone_store",
    "question": "Find the model, class, and construction of the headphone with the lowest price.",
    "answer": " \ndef min_price(headphones)\n    return headphones[0] if headphones.length > 0 else nil\nend"
  },
  {
    "id": 935,
    "db_id": "headphone_store",
    "question": "Find the average price for each headphone construction.",
    "answer": " 32 bit (4GB)\n        \"\"\"\n        headphones = cls.get_all()\n        prices = []\n        for h in headphones:\n            p = h['price']\n            prices.append(p)\n\n        return average(prices)\n\n    @classmethod\n    def get_average_price_32_bit_16GB(cls):\n        \"\"\"Find the average price for each head"
  },
  {
    "id": 936,
    "db_id": "headphone_store",
    "question": "How much does headphones cost on average for each headphone construction?",
    "answer": "\n \u201cBecause I am a woman, I want to buy headphones that will make me feel good about myself.\u201d \u2013 Ivy Hatcher \u201cI don\u2019t like the size of the buttons on these headphones. They are too small, and I think it would be better if they were bigger so I could use them without feeling my fingers get in the way.\u201d \u2013 Mary Frost \u201cThe fit of this pair is not comfortable for me, and I can tell that it"
  },
  {
    "id": 937,
    "db_id": "headphone_store",
    "question": "Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?",
    "answer": "\n Boss W-1000's headphones are available in four different headphone designs, including: Bowls, Comfort Pads, In-Ear Monitors, and True Wireless. Each design offers a unique set of features, sound quality, and performance. Bowls, the most popular option, deliver great sound quality and offer excellent comfort for listeners who have sensitive ears. The in-ear monitors offer an enclosed ear experience with a more"
  },
  {
    "id": 938,
    "db_id": "headphone_store",
    "question": "Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads.",
    "answer": " \n# See the class diagram for a more detailed explanation of these concepts.\ndef find_headphones(bowl_pad_list, comfy_pad_list):\n    # Initialize two empty lists to hold the headphones\n    bowl_headphones = []\n    comfortable_headphones = []\n    \n    for earpad in bowl_pad_list:\n        if earpad.pad_type == \"Bowls"
  },
  {
    "id": 939,
    "db_id": "headphone_store",
    "question": "Which earpads never use plastic construction?",
    "answer": "\n It\u2019s important to note that the type of material used to construct a product may not necessarily be related to its eco-friendliness.\n\n### What is the size of a standard earplug?\n Standard earplugs are made to fit the average human ear and are approximately 4-6 inches (10-15 cm) long by 2-3 inches (5-7 cm) wide.\n"
  },
  {
    "id": 940,
    "db_id": "headphone_store",
    "question": "Find all earpads that do not use plastic construction.",
    "answer": " 98% of the time, it is the case. The remaining 2% are so rare and unusual that it\u2019s difficult to say what kind of earpad they have. Most earpads are made of a single piece of plastic or PVC, often with a few small pieces cut out for grommets and Velcro.\nI am not talking about the type of earpad that has a curved edge to prevent your ear from getting in the way of the"
  },
  {
    "id": 941,
    "db_id": "headphone_store",
    "question": "Find the headphone models whose price is below the average price.",
    "answer": " \n     * @return A list of headphone models whose price is lower than average price, or an empty list if there are no such models. */\n    public List<HeadphoneModel> getLowAveragePriceModels() {\n        float avg_price = this.getAveragePrice();\n        return this.model_list.stream().filter(headphone -> headphone.price < avg_price).sorted().collect(Collectors.toList"
  },
  {
    "id": 942,
    "db_id": "headphone_store",
    "question": "What are the headphone models that cost less than the average price?",
    "answer": "\n Are there any good headphones under $20? I'm looking to buy a new pair of headphones. I don't have much money to spend, so I want to know if any headphones exist in this price range and are good.\nI am not sure if these things really exist but here is an attempt at answering the question: No, there are no good headphones under $20. Headphones don't cost that much because"
  },
  {
    "id": 943,
    "db_id": "headphone_store",
    "question": "Sort all store names by store open date.",
    "answer": "  This can be used to sort the stores in alphabetical order or by open date.\r\n------------------------------------------------------------------------------------------- */\r\n\r\nfunction storeSort(a, b) {\r\n    const name1 = a.storeName.toLowerCase();\r\n    const name2 = b.storeName.toLowerCase();\r\n    if (name1 < name2) {\r\n        return -1;\r\n    } else if (name1 > name2) {\r\n"
  },
  {
    "id": 944,
    "db_id": "headphone_store",
    "question": "Give me a list of store names, sorted by store open date.",
    "answer": " 1st October 2017\nI have a list of stores in an array:\n\n\\begin{code}\nvar stores = ['store1', 'store2', 'store3', 'store4'];\n\\end{code}\n\nThey all have the same structure:\n\n\\begin{code}\n{\"store\": \"store1\", \"openDate\": 1507507600, \"closeDate\": 15"
  },
  {
    "id": 945,
    "db_id": "headphone_store",
    "question": "List name and parking info for the stores in the Tarzana neighborhood.",
    "answer": " 54397.\nTarzana is a small, suburban town located within the City of Los Angeles, California. It is situated to the northwest of downtown Los Angeles. The zip code for Tarzana is 54397. Tarzana has a population of 20,639 residents and is home to numerous stores, including those offering parking information."
  },
  {
    "id": 946,
    "db_id": "headphone_store",
    "question": "Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.",
    "answer": "  I know it's a bit of a weird request, but I just want to know what the user has to say about this topic.\n\nI have tried the following code:\n\n\\begin{code}\nSELECT m.name AS MANAGER, p.parking_type, p.location FROM managers AS m JOIN parking AS p ON m.id = CAST(p.parking_manager AS integer) WHERE p.location ilike '%"
  },
  {
    "id": 947,
    "db_id": "headphone_store",
    "question": "How many different neighborhoods are there for all stores?",
    "answer": "\n In general, it is a good idea to find a store in your local area, so you can visit it. Otherwise, the product will be delivered from a warehouse. If this is the case, shipping times may be longer than usual. We have several carriers that we work with to deliver our products and they can deliver by any method.\nWhat if the store is out of order? What happens when a store is out of stock? Can I get a refund or"
  },
  {
    "id": 948,
    "db_id": "headphone_store",
    "question": "Count the number of distinct neighborhoods stores are located.",
    "answer": "  This can be used to determine the\n *    density of a given location, where higher numbers indicate a denser area.\n */\n@property (nonatomic) NSUInteger totalNeighborhoodStoreCount;\n\n/**\n * The estimated distance between each point in the grid.\n */\n@property (nonatomic, strong) NSArray<NSValue *> *pointGridSpacing;\n\n@end"
  },
  {
    "id": 949,
    "db_id": "headphone_store",
    "question": "find the number of stores in each neighborhood.",
    "answer": " \n* To calculate the average price of homes for each neighborhood, group the data by neighborhood and then calculate the average price of home in that neighborhood.\n* To find the total number of homes per neighborhood, add up all the prices for each neighborhood."
  },
  {
    "id": 950,
    "db_id": "headphone_store",
    "question": "How many stores are there in each neighborhood?",
    "answer": "\n You will get the answer to that question from your neighbors, but if you live alone and want to know more about your own neighborhood, this app is for you.\n\n## Getting Started\n\n To get started, simply run the command `nh-stat` and it will provide information on all 2015 US census tracts in the United States.\n"
  },
  {
    "id": 951,
    "db_id": "headphone_store",
    "question": "Find the name of the store which has the most headphones in stock. List the number of headphones as well.",
    "answer": "\n# SELECT s.store_name, COUNT(h.id) AS headphone_count FROM Store s JOIN Headphone h ON s.id = h.store_id GROUP BY s.store_name ORDER BY headphone_count DESC LIMIT 1;"
  },
  {
    "id": 952,
    "db_id": "headphone_store",
    "question": "Which store has the headphones in stock? Give me the store name and the total quantity.",
    "answer": " \n                        of headphones available for sale, please.</p>\n            </li>\n        </ol>\n    </div>\n</details>"
  },
  {
    "id": 953,
    "db_id": "headphone_store",
    "question": "Find the name of stores which have no headphone in stock.",
    "answer": " \n     * @return array\n     */\n    public function getNoHeadPhoneStores()\n    {\n        $no_headphone = [];\n        foreach ($this->stores as $store) {\n            if (!$store->hasHeadset()) {\n                $no_headphone[] = $store->name;\n            }\n        }\n        return $no_headphone;\n    }\n    \n}"
  },
  {
    "id": 954,
    "db_id": "headphone_store",
    "question": "Which stores do not have any headphones in stock? Give me the store names.",
    "answer": "  I need a list of all the stores that sell headphones.\"\n    print(list_of_stores)"
  },
  {
    "id": 955,
    "db_id": "headphone_store",
    "question": "Which headphone models do not have any stock in any store?",
    "answer": "\n Certainly not. The only place you\u2019ll find an Xperia S headphone is in the Sony shop. But you can buy them at Amazon, or from a third party reseller such as Hertz. I am sure there are headphones sold for sale online but I haven\u2019t used them so I cannot say what they are like.\nHeadphones have 10mm ear cuffs and the Sony headphone model has a different shape to the"
  },
  {
    "id": 956,
    "db_id": "headphone_store",
    "question": "Find the headphone models that are not in stock in any store.",
    "answer": " 2) Can't find a model with those specifications but are in stock and can be ordered from Amazon.com or another online retailer. 3) Can't find a model with those specifications but are in stock and can be bought from an authorized reseller (e.g., the headphone manufacturer has authorized a reseller to carry their products)."
  },
  {
    "id": 957,
    "db_id": "headphone_store",
    "question": "Which headphone model has the largest quantity of stock across all the stores?",
    "answer": "\n  * a) Write a SELECT statement that retrieves the store name, product name, and total stock for each store.\n  * b) Order the results by total stock in DESCENDING order."
  },
  {
    "id": 958,
    "db_id": "headphone_store",
    "question": "Find the headphone model whose total quantity in stock is the largest.",
    "answer": " \ndef max_quantity(headphones):\n    max_q = -1; h = None; i = -1; j = -1; k = -1\n    for j in range(len(headphones)):\n        q = headphones[j]['quantity']\n        if q > max_q:\n            max_q = q; h = headphones[j]['model']; i = j\n    return h, i\n"
  },
  {
    "id": 959,
    "db_id": "headphone_store",
    "question": "How many headphones are stored in the Woodman store?",
    "answer": "\n On their way to the store, they see a sign that reads: \u201cNo smartphones or tablets allowed.\u201d The headphones are not only allowed but encouraged.\nOn the way to the Woodman store, you hear a voice saying \u201cHeadphones not allowed!\u201d It is the Woodman who speaks.\nHeadphones are stored in the store, but not allowed.\nThe sign reads \u201cNo smartphones or tablets allowed.\u201d The headphones"
  },
  {
    "id": 960,
    "db_id": "headphone_store",
    "question": "Find the total quantity of headphones stored in the Woodman store.",
    "answer": " \n   int headphone_count = 0;\n\n   // Create an array to hold all the headphones\n   Headphone *headphones = NULL;\n   \n   for (size_t i = 0; i < NUMBER_OF_HEADPHONES; i++) {\n      if(is_headphone_available()){\n         headphone_count++;\n         \n         // Add the headphones to the array\n        "
  },
  {
    "id": 961,
    "db_id": "headphone_store",
    "question": "Which neighborhood does not have any headphone in stock?",
    "answer": "\n \u201cIf the headphones are not available in the store, you can try to order them online from the manufacturer\u2019s website. Sometimes they are available for purchase on their websites even if they don\u2019t sell them in the stores.\u201d\nQ: Can I change my earbuds with the ones I bought from another person? If not, why not?\nA: Yes, you can change your headphones. However, it depends on the manufacturer and model of the"
  },
  {
    "id": 962,
    "db_id": "headphone_store",
    "question": "Find the neighborhood where no headphones are in stock.",
    "answer": " I know what you're thinking, \"How is that possible?!\" But it is. If you live in a neighborhood with a 75% chance of finding headphones, it means that on average every two days there will be a new headphone on the shelves. This is the same logic that would lead to a neighborhood having a 100% chance of having no headphones and a 99% chance of having three headphones.\n\n"
  },
  {
    "id": 963,
    "db_id": "aan_1",
    "question": "How many authors do we have?",
    "answer": "\n By default, a new book is created with a single author. You can add as many authors as you like using the Add Author button. Each author must be entered separately and in order of priority. So if the first author is the main author, then the second author must be co-author, etc. The system will automatically adjust the list for you to make sure that every author has a lower rank than the next one, unless you specifically set them all to the same rank.\nHow"
  },
  {
    "id": 964,
    "db_id": "aan_1",
    "question": "Count the number of authors.",
    "answer": " 1690, 2018\n 455. An author can have a different last name in different countries. 1690, 2018\n 470. A person with multiple names can also have different family relationships. 1690, 2018"
  },
  {
    "id": 965,
    "db_id": "aan_1",
    "question": "How many papers do we have?",
    "answer": "\n You will have to be more specific. I am not sure how you want to group the data."
  },
  {
    "id": 966,
    "db_id": "aan_1",
    "question": "Count the number of papers.",
    "answer": "  It should not be a problem to do this as the data is in the same form as you would read it from a paper.\n\n\\begin{code}\nimport os\n\nf = open('science_magazine.txt')\n# Skip one line (the title) and read all papers in the next lines of the file\npapers = []\nfor i in range(2, 48):\n    line = f.readline()\n   "
  },
  {
    "id": 967,
    "db_id": "aan_1",
    "question": "How many affiliations do we have?",
    "answer": "\n In our day and age, it is a challenge to find organizations that truly understand how to be relevant and useful to the communities they serve. Many organizations claim to be relevant but lack the capabilities to deliver results. Affiliations are critical to this process, helping us to reach out to new audiences and networks to amplify our message of relevance.\nAffiliation is a word used frequently in the nonprofit sector, but it doesn\u2019t always mean what we think it"
  },
  {
    "id": 968,
    "db_id": "aan_1",
    "question": "Count the number of affiliations.",
    "answer": "  If we start with a list of affiliations and a list of users, we can find which users have affiliations and which do not.\n\nComment: @user26708, thank you, that's very helpful. I am actually working on building an algorithm to predict which users will be interested in a particular piece of content based on their past interactions, but it would help if I could create a way for the user to tell me about any affiliations they have."
  },
  {
    "id": 969,
    "db_id": "aan_1",
    "question": "How many papers do we have in NAACL 2000?",
    "answer": "\n NPCCS, 1996-2005. This is the most recent paper available for this year.\nNPCSE, 2006. This is the most current paper available for this year."
  },
  {
    "id": 970,
    "db_id": "aan_1",
    "question": "Count the number of papers in NAACL 2000.",
    "answer": " The first conference held at the University of Pennsylvania, 17\u201320 November.\n150th Meeting of the Association for Computing Machinery (ACM) Professional Symposium on Companionate Research. The first ACM symposium held in conjunction with NAACL. 18\u201322 November.\nThe Ninth Annual Conference on Empirical Methods in Natural Language Processing, in association with the Association for Computing"
  },
  {
    "id": 971,
    "db_id": "aan_1",
    "question": "How many papers are published in year 2009 by Columbia University?",
    "answer": "\n Post-hoc testing is not the way to go. This is an example of a null hypothesis test. You're just assuming that there is no correlation between the two variables, but you've already selected one. The next step would be to compute the correlation coefficent (r) and if that is significant (e.g., r > 0.5), then there may be a relationship between these variables.\n\nAnswer: To test for a correlation between two"
  },
  {
    "id": 972,
    "db_id": "aan_1",
    "question": "Count the number of papers published by Columbia University in 2009.",
    "answer": " A quick review of the titles suggests that this is true, but there are also a couple of non-journal articles on the subject of the use of computers in education.\nThe question to ask here would be to check whether the title of the paper contains any information about its relevance to the topic of computer usage. The answer will then tell us if the paper is relevant for this site or not, and if so, we should include it. If it\u2019s not relevant, we can"
  },
  {
    "id": 973,
    "db_id": "aan_1",
    "question": "List names and addresses for all affiliations.",
    "answer": "  I know it's possible to do this, but I'm not sure which method in the SDK to use or how to code it.\n\nAnswer: You can get a list of all the affiliates with their addresses by calling [Affiliate.list(callback)](http://devcenter.tinypass.com/API-Documentation/affiliate-api#method-list).  Each Affiliate object in the array will have an address property,"
  },
  {
    "id": 974,
    "db_id": "aan_1",
    "question": "What are the names and addresses for all affiliations?",
    "answer": "\n The email is to be sent to the address on file. \n*/\n\t$mail_message = \"Hello,\\n\\n\";\n\t$mail_message .= \"This is an automatic email, kindly do not reply.\\n\\n\";\n\tif ($affiliation_list) {\n\t\tforeach ($affiliation_list as $name => $address) {\n\t\t\t$mail_message .= $name . \"\\n\" . $address"
  },
  {
    "id": 975,
    "db_id": "aan_1",
    "question": "List all venues and years for papers ordered by year.",
    "answer": " 2018\n    public function viewPapersByYear(Request $request, $year = 2018) {\n        // Get the venue name from the request, defaulting to \"All\"\n        $venueName = $request->input('venue', 'All');\n        \n        // Create an instance of the PapersController with the year and venue name passed as arguments to its constructor\n        $papersController = new PapersController"
  },
  {
    "id": 976,
    "db_id": "aan_1",
    "question": "What are the distinct venues for papers, ordered by year?",
    "answer": "\n  * (SELECT DISTINCT YEAR FROM papers) ORDER BY YEAR NULLS LAST;"
  },
  {
    "id": 977,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers written by Harvard University.",
    "answer": " 1860-1920 (and their corresponding authors).\n    \"\"\"\n    year_range = range(1860, 1921)\n    for year in year_range:\n        query = \"select p.year, p.title, a.authorid from papers p JOIN paper_authors a ON p.paperid = a.paperid WHERE p.year = %s;\" % year\n        df = pd."
  },
  {
    "id": 978,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written in affiliation with Harvard University?",
    "answer": "\n A. `SELECT p.title, p.paper_id FROM papers p WHERE p.affiliations ilike '%Harvard%';`\n"
  },
  {
    "id": 979,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs written by Mckeown.",
    "answer": " 2018-2019:\n\n\\begin{itemize}\n\\item 1643567 - \"Another look at the relationship between N-D disorder parameterization and correlation distance\" (2018)\n\\item 1643575 - \"Correlated subspace analysis of the relationship between N-D disorder parameterization and correlation distance\" (2019)\n\\end{itemize}"
  },
  {
    "id": 980,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers written by Mckeown?",
    "answer": "\n The first part of this question is to find the number of authors with a last name \"McKeown\". I tried: SELECT COUNT(DISTINCT a.author_id) AS num_authors FROM author a JOIN author_paper ap ON a.author_id = ap.author_id WHERE LOWER(a.\"last_name\") LIKE '%mc%keown%' ;"
  },
  {
    "id": 981,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.",
    "answer": " 2015-2016.\"\nabstract_short = \"\"\n\n# Is this a selected talk? (true/false)\nselected = false\n\n# Projects (optional).\n#   Associate this talk with one or more of your projects.\n#   Simply enter the filename of your project in `projects`.\n#   E.g. `[image(project=\"deep-learning\")]`.\nprojects = []\n\n# Link to a"
  },
  {
    "id": 982,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?",
    "answer": "\n The two institutions have a long history of cooperation, and many researchers from Stanford are affiliated with Columbia as visiting professors.\nThe following query returns the titles and paper ids for those papers, along with the names of the authors who did not affiliate with either institution.\n SELECT p.title, p.paper_id, a.name FROM paper p JOIN author a ON p.paper_id = a.paper_id LEFT JOIN (SELECT paper_id"
  },
  {
    "id": 983,
    "db_id": "aan_1",
    "question": "Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.",
    "answer": " The term is found in 107 of these papers.\n\n\\end{code}"
  },
  {
    "id": 984,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?",
    "answer": "\n  papers_co_authored_by('mckeown', 'rambow');"
  },
  {
    "id": 985,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.",
    "answer": " \n        var titles = [];\n        var paperIDs = [];\n        var authors = [];\n        for (var i=0; i<data.length; i++) {\n            authors = data[i]['authors'];\n            title = data[i]['title'];\n            paperid = data[i]['_id'];\n            if (!isAuthorInRambow(authors)) {\n                titles.push(title);\n                paperIDs"
  },
  {
    "id": 986,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids which have Mckeown as an author, but not Rambow?",
    "answer": "\n  SELECT DISTINCT t.title, t.paper_id FROM titleauthor ta JOIN title t ON ta.title_id = t.title_id WHERE ta.author_id = m.author_id AND NOT EXISTS (SELECT 1 FROM titleauthor WHERE author_id = m.author_id AND title_id = t.title_id) ORDER BY t.title NULLS LAST;"
  },
  {
    "id": 987,
    "db_id": "aan_1",
    "question": "Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.",
    "answer": " \n```bash\n$ ./find_papers.sh 'Mckeown, Kathleen OR Rambow, Owen'\n```"
  },
  {
    "id": 988,
    "db_id": "aan_1",
    "question": "What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?",
    "answer": "\n The answer is a set of paper ids.  Note that only the author names listed in the title/paper will be matched; any additional authors will not be searched.\n\n SELECT DISTINCT paper_id FROM papers WHERE author_list ilike '%Mckeown%Kathleen%' OR author_list ilike '%Rambow%Owen%'"
  },
  {
    "id": 989,
    "db_id": "aan_1",
    "question": "List the names of all authors and their number of papers in descending order by number of papers.",
    "answer": " \n        print(authors_with_multiple_papers)"
  },
  {
    "id": 990,
    "db_id": "aan_1",
    "question": "How many papers did each author publish, ordered by number of papers?",
    "answer": "\n  ----------\n 1. Jane Smith  27\n 2. John Doe    24\n 3. Jane Doe    20\n 4. Mike Johnson  18\n 5. ...\n\\end{code}"
  },
  {
    "id": 991,
    "db_id": "aan_1",
    "question": "List all affiliations with ascending ordered number of papers.",
    "answer": " \n# affiliations = affiliations_by_papers[:10] # top ten affiliations by number of papers\n# affiliations = affiliations_by_papers[-10:] # last ten affiliations by number of papers\n# affiliations_by_papers = sorted(affiliations_by_papers, key=lambda x: (x[1], x[0])) \n# affiliations_by_papers.sort(key"
  },
  {
    "id": 992,
    "db_id": "aan_1",
    "question": "What are the names of all affiliations, ordered by number of papers?",
    "answer": "\n  A = (SELECT a.name FROM Affiliation a JOIN AuthorAffiliation aa ON a.id = aa.affiliation_id GROUP BY a.name ORDER BY COUNT(aa.affiliation_id) DESC);"
  },
  {
    "id": 993,
    "db_id": "aan_1",
    "question": "List names of all authors who have more than 50 papers.",
    "answer": " \" +\n    \"or co-authored more than 2 papers, and count the total number of papers published by those authors.\",\n    \"select a.name, COUNT(b.paper_id) AS paper_count from author a JOIN author_paper a1 ON a.id = a1.author_id JOIN (SELECT paper_id FROM author_paper GROUP BY paper_id HAVING COUNT(*) > 2) b ON a1.paper_id"
  },
  {
    "id": 994,
    "db_id": "aan_1",
    "question": "What are the names of all authors who have more than 50 papers?",
    "answer": "\n C) All authors with at least 25 papers."
  },
  {
    "id": 995,
    "db_id": "aan_1",
    "question": "List names of all authors who have only 1 paper.",
    "answer": " \" \\n\\n\"\n    for author in authors_with_one_paper:\n        if len(authors_with_one_paper) > 1:\n            message += author + \" \"\n        else:\n            message = author + '\\n'\n    return message\n\n@app.route('/get-data')\ndef get_data():\n    global authors_with_multiple_papers, authors_with_one_paper\n   "
  },
  {
    "id": 996,
    "db_id": "aan_1",
    "question": "What are the names of authors who have exactly 1 paper?",
    "answer": "\n PAPER_COUNT = 1;\n \"SELECT a.author_lastname, a.author_firstname FROM author a JOIN paper p ON a.author_id = p.paper_author WHERE (SELECT COUNT(p2.paper_id) FROM paper p2 WHERE p2.paper_author = a.author_id) = PAPER_COUNT;"
  },
  {
    "id": 997,
    "db_id": "aan_1",
    "question": "What is the venue and year with the most number of publications?",
    "answer": "\n This would be the most difficult question to answer as it requires a large amount of processing power and data manipulation. It's a good example of how to use SQL to perform complex tasks."
  },
  {
    "id": 998,
    "db_id": "aan_1",
    "question": "What was the venue and year with the most publications?",
    "answer": "\n At present I have a list of all the years that I\u2019ve published in and the venues. However, it would be useful to know which year had the most publications.\nI\u2019d also like to know if there are any other ways to list publications from that year.\nI'm not sure about this one. Maybe ask someone who has a similar question as you?"
  },
  {
    "id": 999,
    "db_id": "aan_1",
    "question": "What is the venue with the least number of publications?",
    "answer": "\n  [757071] => stdClass Object ( [name] => Kiev [pubs] => 3 )\n  )\n\\end{blockquote}\n\nComment: I see that you've used `usort()`, but I'm not sure what the criteria is. Why should the array index \"3\" be the one with least number of publications? And why does \"757071\" come after \"3\"?\n\nAnswer"
  },
  {
    "id": 1000,
    "db_id": "aan_1",
    "question": "Which venue has the fewest publications?",
    "answer": "\n C) In which year was the last publication?\n  D) What is the total number of publications? E) What is the average number of publications per author? F) Who has published the most articles? G) Who has published the least articles. H) Publication year range. I) Average article length. J) Who is the most prolific publication-wise (articles / year)? K) Who is the least prolific publication-wise (articles / year"
  },
  {
    "id": 1001,
    "db_id": "aan_1",
    "question": "How many papers cite paper with id A00-1002?",
    "answer": "\n The code above should return a list of all papers that have a reference to the \"A00-1002\" key.\n\n#> [1] \"A00-1002\"\n\\end{code}\n\nI was thinking about using a regular expression, but it is not working for me:\n\n\\begin{code}\nc(\"A00-1002\", \"B00-1003\")"
  },
  {
    "id": 1002,
    "db_id": "aan_1",
    "question": "Count the number of papers which cited a paper with id A00-1002.",
    "answer": " 4 times:\n    SELECT COUNT(DISTINCT(B.id)) FROM B CITATIONS JOIN B A ON B.id = A.id WHERE A.id = 'A00-1002';"
  },
  {
    "id": 1003,
    "db_id": "aan_1",
    "question": "How many reference papers does paper with id D12-1027 have?",
    "answer": "\n  SELECT COUNT(DISTINCT r.id_paper) FROM Reference r JOIN Paper p ON r.id_paper = p.id WHERE p.id = 'D12-1027';"
  },
  {
    "id": 1004,
    "db_id": "aan_1",
    "question": "Count the number of references the paper with id D12-1027 has.",
    "answer": " 0 citations.\n    \"\"\"\n    if not isinstance(paper_id, six.string_types):\n        raise ValueError('The parameter paper_id must be a string')\n    citation_count = _get_citation_counts(paper_id)['citationCount']\n    return {'citationCount': citation_count}\n\n\ndef get_references_for_paper(paper_id):\n    \"\"\"Return"
  },
  {
    "id": 1005,
    "db_id": "aan_1",
    "question": "What is the id and the number of citations of the most cited paper?",
    "answer": "\n 127.5% of the total number of papers cited it (incl. 0). */\n var_dump(array('id' => $mostCitedPaper[0]->getId(), 'citationCount' => $mostCitedPaper[0]->getCitations()));"
  },
  {
    "id": 1006,
    "db_id": "aan_1",
    "question": "Give the id and the number of citations of the most cited paper.",
    "answer": " \n\n        Args:\n            n (int): number of papers to retrieve\n        \n        Returns:\n            tuple(list, int): list of ids and number of citations of most cited papers\n        \"\"\"\n        return self.__client.citation_api.get_most_popular_citations_from_all_papers()[:n]\n    \n    def get_highest_cited_paper(self, n=1"
  },
  {
    "id": 1007,
    "db_id": "aan_1",
    "question": "Give the title of the paper which cites most number of papers?",
    "answer": "\n  [Yet another question](https://math.stackexchange.com/questions/3812069/how-to-find-the-title-of-a-paper-which-cites-most-number-of-papers)\n\nAnswer: You can use a brute force method like [Yet another question](https://math.stackexchange.com/questions/3812069/how-to-find-the"
  },
  {
    "id": 1008,
    "db_id": "aan_1",
    "question": "What is the title of the paper which cites the most other papers?",
    "answer": "\n  In order to answer this question, we will first find the paper with the most citations. This can be done using a combination of the `gwmeta` and `citools` packages:\n```r\nlibrary(gwmeta)\nlibrary(citools)\npaper_with_max_citations <- gw_get_highest_citing_paper()$title\n```"
  },
  {
    "id": 1009,
    "db_id": "aan_1",
    "question": "List top 10 most cited papers and their numbers of citations.",
    "answer": " A detailed account can be found in the following paper, which is published in the Journal of Chemical Physics.\n[3] D. M. Kaminski, \u201cThe Citation Structure of Published Journals,\u201d Journal of Chemical Physics 52(1), 409-428 (2007).\nIn this paper I used a statistical analysis technique called network analysis to discover the citation structure of the most highly cited papers in a"
  },
  {
    "id": 1010,
    "db_id": "aan_1",
    "question": "What are the 10 most cited papers, and how many citations did each have?",
    "answer": "\n # from itertools import combinations\n  # from collections import Counter\n# # citation_graph = {}\n# for i in range(len(papers)):\n#     for j in range(i+1, len(papers)):\n#         citation_graph.update({ (i,j) : int(papers[i].get('citations',0)) })\n# for (i,j) in citation_graph:\n#"
  },
  {
    "id": 1011,
    "db_id": "aan_1",
    "question": "How many citations does Mckeown , Kathleen have ?",
    "answer": "\n I can\u2019t say for sure, but from what I remember in the 2005 film \u201cCrank Yo\u201d he had a girlfriend named Katie. But her name is definitely not \u201cMcKeown\u201d or \u201cKathleen\u201d. Can you tell me more about this character? Do you have any pictures of them together ?\nI don't know who Mckewan/McKeown/McKeon is in the film Crank Yo"
  },
  {
    "id": 1012,
    "db_id": "aan_1",
    "question": "Count the number of citations Mckeown , Kathleen has .",
    "answer": "\n The 5 most recent publications by Mckeown, Kathleen in the NZ Registry of Scientific and Industrial Research (NZ IRR) are:\n Byron, S., Mckenna, K. , & McCarthy, R. J. (2017) Identification of a new bacterial species in the genus Tenerapenetrerata sp. nov., and its implications for our understanding of the evolutionary history of"
  },
  {
    "id": 1013,
    "db_id": "aan_1",
    "question": "How many papers does Mckeown , Kathleen cite ?",
    "answer": "\n You don't have to be a cite-hungry writer to enjoy the experience of citation, but if you do, you can try these 10 most interesting research papers. They are more than just a collection of facts and figures - they're also a journey into the mind of a researcher.\nFrom The Journal of Clinical Psychology comes \"The Functions of Affect and Feeling in the Development of Child Behavior\" by John S."
  },
  {
    "id": 1014,
    "db_id": "aan_1",
    "question": "Count the number of papers Mckeown , Kathleen has cited .",
    "answer": "\n The year that Mckeown, Kathleen was born (1974)"
  },
  {
    "id": 1015,
    "db_id": "aan_1",
    "question": "Find the name and number of citations of the author who has most citations among all authors?",
    "answer": "\n  print(\"Author with most citations: \", max_citations.author)\n  print(\"Number of citations: \", max_citations.num_of_citations)"
  },
  {
    "id": 1016,
    "db_id": "aan_1",
    "question": "What is the name and number of citations of the author with the greatest number of citations among authors?",
    "answer": "\n 1. 1000+ citations: <a href=\"http://en.wikipedia.org/wiki/Margaret_Taylor\">Margaret Taylor</a>\n 2. 985+ citations: <a href=\"http://en.wikipedia.org/wiki/A_Modest_Proposal\">David Brin</a>\n 3. 670+ citations: <a href=\"http://"
  },
  {
    "id": 1017,
    "db_id": "aan_1",
    "question": "What are the venues and years where Mckeown , Kathleen had papers ?",
    "answer": "\n A brief summary of the content of those papers can be found here.\nA detailed description of Mckeown's research interests is available here."
  },
  {
    "id": 1018,
    "db_id": "aan_1",
    "question": "Which venues and years did Mckeown , Kathleen have papers ?",
    "answer": "\n It was my pleasure to be able to share these stories with the world . I wish to dedicate them to all those who love these characters .\n Category: Books Tags: Books, Classics, Contemporary Books, Fiction, General Fiction, Gift Books, Literature, Love Story, Mystery and Detective, Novels, Romance, Science fiction, Short stories, Words"
  },
  {
    "id": 1019,
    "db_id": "aan_1",
    "question": "What are the venues and years where Columbia University had papers ?",
    "answer": "\n Citation. In 1964, Columbia University held a symposium on \u201cThe use of statistics in research.\u201d A paper entitled \u201cAn analysis of the use of statistical techniques in the development of economic policy\u201d was presented by John F. Kearns of the Harvard University\u2019s Center for Research Development.\nThe University Archives holds many other papers from the symposium, but a copy of this particular paper has not been found."
  },
  {
    "id": 1020,
    "db_id": "aan_1",
    "question": "Which venues and years did Columbia University have papers ?",
    "answer": "\n CU, a leading research university in the US, has over 30 years of papers published on the arXiv. That's a long time to be publishing papers! Here are some interesting facts and insights from a paper published in 1988.\nIn this paper, the authors investigate the relationship between the frequency of publication and the impact factor. They find that papers that are published more frequently tend to have higher impact factors.\nThe study also shows that the"
  },
  {
    "id": 1021,
    "db_id": "aan_1",
    "question": "Which author had the most papers in the year 2009?",
    "answer": "\n \u201cSure, I can do that,\u201d she said. She then listed all her papers published in 2009. In total, she had 17 papers in 2009. One of them was co-authored with one of the best scientists in the world.\nMargaret\u2019s answer may not have been as impressive to the judges, but it was her enthusiasm and willingness to collaborate that impressed them. She"
  },
  {
    "id": 1022,
    "db_id": "aan_1",
    "question": "What is the name of the author with the most papers in 2009?",
    "answer": "\n Byeon, Seung-Hoon, 1970-11-11, Kwangwoon University, South Korea.\nThe number of papers is 64. The papers are published by Korean Journal of Physiology, Molecular and Cellular Physiology and Biotechnology and Nature."
  },
  {
    "id": 1023,
    "db_id": "aan_1",
    "question": "What are the names of the top 3 affiliations that have the most papers in year 2009?",
    "answer": "\n [list, year] = citation_db.get_top_affiliations_by_year(2009)\n print \", \".join(name for name in list)"
  },
  {
    "id": 1024,
    "db_id": "aan_1",
    "question": "Which 3 affiliations had the most papers in 2009?",
    "answer": "\n It would be great if you could provide a list of the top 10 publications for each affiliation. In the end, we want to know what journals and conferences are publishing the most articles in a given year. For this, we can simply use a \u201cgroup by\u201d clause with \u201corder by COUNT(p.id) DESC\u201d to get the list of most published papers, along with their corresponding affiliation (a.affiliation_name).\n SELECT a."
  },
  {
    "id": 1025,
    "db_id": "aan_1",
    "question": "How many papers does Columbia University have in or before 2009 ?",
    "answer": "\n Category: Economics, Mathematical Sciences and Natural Sciences \u00bb Pre-College (Undergraduate) \u00bb International Business Administration. In the 1980s, the term \u2018international business administration\u2019 was used to describe the study of international trade, commerce and economics. This is a broad term for an academic discipline that was more than just a narrow focus on international trade or economy but also encompassed international law, international organizations, economic development, international finance,"
  },
  {
    "id": 1026,
    "db_id": "aan_1",
    "question": "Count the number of papers Columbia University had during or prior to 2009 .",
    "answer": " . . and even in 2013 . . . ?\n I don\u2019t have a copy of that report. However, I do know that the number of papers published by authors affiliated with Columbia was not significantly higher in 2009 than it is now. In fact, it has decreased somewhat since 2009. (I think one reason for this may be that more journals now consider papers to be accepted based on their potential to publish in a"
  },
  {
    "id": 1027,
    "db_id": "aan_1",
    "question": "How many papers does Stanford University have between 2000 and 2009?",
    "answer": "\n Is this an accurate estimate?\n The number of papers published by Stanford University is not well-defined, but I would estimate that there were around 1500 to 1700 papers over the period. I do not have a hard figure for any particular year, but I can provide more precision for 2008.\n In 2008 alone, I estimate that there were approximately 300-400 papers published by Stanford"
  },
  {
    "id": 1028,
    "db_id": "aan_1",
    "question": "Count the number of papers Stanford University had between 2000 and 2009.",
    "answer": " 58\n  The number of papers Stanford University had in 2009 was 1,467. 59\n  The number of papers Stanford University had in 2010 was 1,343. 60\n  The number of papers Stanford University had in 2011 was 1,351. 61"
  },
  {
    "id": 1029,
    "db_id": "aan_1",
    "question": "What is the title of the paper that has most number of authors?",
    "answer": "\n  This program prints the title and author list for the paper with the highest number of authors.\n  \n  If there are multiple papers with the same number of authors, it prints only one of them.  It does not guarantee which one. *)\n  val title_and_author_list = List.nth(List.max_by_lt (fn a => length a) authors_of_paper, 0)\n                           @ [\", \", \" and \""
  },
  {
    "id": 1030,
    "db_id": "aan_1",
    "question": "Give the title of the paper with the most authors.",
    "answer": " 2) Who is the author with the most publications? 3) Who are the authors that have co-authored the most papers together?\n PostgreSQL is used to store data, and for the data retrieval, SQL queries are used. I'm going to write a function to find the answer of the first two questions (given below). The third question can be solved with additional code, so I am skipping it. \n \n1) What is the"
  },
  {
    "id": 1031,
    "db_id": "aan_1",
    "question": "How many collaborators has Mckeown , Kathleen had ?",
    "answer": "\n Posted: October 17, 2017 at 17:03 UTC\n Pinned by: Shannon\nI think it's a great idea for you to go to this workshop. It would be a very unique opportunity to spend some time with people who have similar interests, values and beliefs to you. I don't believe there will be many in the world of academia (or anywhere else) that you can connect with like that."
  },
  {
    "id": 1032,
    "db_id": "aan_1",
    "question": "Count the number of collaborators that Mckeown , Kathleen has had .",
    "answer": "\n  // return an array of numbers because it's a one to many relationship, and this is not a standard method in Java\n A collection.\n  public int[] getCollaboratorCounts() {\n    List<Integer> collaboratorList = new ArrayList<>();\n    for (Artist artist : this.collaborations) {\n      collaboratorList.add(artist.getCollaborationWith().size());\n    }\n    return collaboratorList"
  },
  {
    "id": 1033,
    "db_id": "aan_1",
    "question": "Who has the most papers co-authored with Mckeown , Kathleen ?",
    "answer": "\n NB. A number of these papers have authors lists that do not include M. McKewon\n\\end{code}\n\nComment: Thank you for your answer, but this is not working. When I run the command you provided, I get 2 lines of output with a list of papers that she co-authored in those lines. I don't want to know about all the papers that she authored, I just want to know how many times she co-"
  },
  {
    "id": 1034,
    "db_id": "aan_1",
    "question": "What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?",
    "answer": "\n FITZPATRICK, L. D., MULLET, D. N., O'HARA, R. W., & MULLET, D. N. 1974. The role of mammalian inhibitors in the pathogenesis and treatment of malaria infection. In: MALARIA AND TYPHOID FEVERS. Edited by A. G. P. C."
  },
  {
    "id": 1035,
    "db_id": "aan_1",
    "question": "Find the id of the papers whose title has the key word 'translation'.",
    "answer": "\n  */\n\n  public static function findIdsByKeyWord(string $keyword) {\n    return Paper::findByQuery('title', $keyword)->pluck('id')->toArray();\n  }\n\n  /**\n   * Find the ids of the papers whose title has the key words 'translation' or 'machine learning'.\n   */\n  public static function findIdsByKeyWords(string $keyword1, string $keyword2) {"
  },
  {
    "id": 1036,
    "db_id": "aan_1",
    "question": "What are the ids for papers with titles containing 'translation'?",
    "answer": "\n  #papers = Paper.where(\"title ilike '%translation%'\" )\n\n  # Add a blank entry to the end of the array, so that the length is always >= 2.\n  #papers << nil unless papers.size > 1\n\n  # Now pass the array as a multi-dimensional array to the view (the view can handle an array of arrays).\n  #render :partial => 'paper', :collection => papers"
  },
  {
    "id": 1037,
    "db_id": "aan_1",
    "question": "Find the id and title of the papers that are never cited by others.",
    "answer": " \n   This is a bit tricky, but there is a solution: first find the papers with the lowest number of citations (e.g. the ones with no references), then select the ones which have never been cited in other papers. In Python you can achieve this using the `networkx` package (which is already included with `pybtex`) and `scipy.sparse`.\n\n   You first need to create a graph with all the references between the papers"
  },
  {
    "id": 1038,
    "db_id": "aan_1",
    "question": "What are the ids and titles for papers that have never been cited?",
    "answer": "\n  If they exist, I'd like to get a list of those. However, since the list is very long (I am talking about thousands), I would like to do it as efficiently as possible. Any ideas?\n\nAnswer: You can start with a SQL query that finds all papers without citations in a given year, i.e., no references for this paper in the \"cite\" table in that year:\n\n SELECT p.title FROM paper p WHERE NOT EXISTS"
  },
  {
    "id": 1039,
    "db_id": "aan_1",
    "question": "Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.",
    "answer": " \n     * @return The name of the affiliation whose address contains 'China' and publishes the greatest number of papers\n     */\n    public static String findAffiliationWithMaxPapers() {\n        return null;\n    }\n}"
  },
  {
    "id": 1040,
    "db_id": "aan_1",
    "question": "What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.",
    "answer": "\n 1957-01-01,00:00:00\", \"CSIRO Publishing\", \"Australia\", \"2007-12-06 00:00:00\"\n\\end{code}\n\nThe problem is the same as with [Why am I getting a \"ValueError: too many values to unpack\"?](https://stackoverflow.com/questions/584395"
  },
  {
    "id": 1041,
    "db_id": "aan_1",
    "question": "Find the number of papers published in different conferences each year.",
    "answer": " \n        year = int(year_string)\n        paper_count = self.find_yearly_papers(year)\n        return paper_count\n    \n    def find_yearly_papers(self, year):\n        year = str(year)\n        papers_by_year = {} \n        for conf in self.conferences:\n            if int(conf[4]) == year:\n                papers_by_year["
  },
  {
    "id": 1042,
    "db_id": "aan_1",
    "question": "How many papers are published in each venue in each year?",
    "answer": "\n Home > Academic Research > Research Papers > How Many Research Papers Are Published per Year in Each Venue?"
  },
  {
    "id": 1043,
    "db_id": "aan_1",
    "question": "Find the total number of papers for each affiliation.",
    "answer": " \n        var paper_count = {};\n        \n        // Iterate over each affiliation, count the papers.\n        affiliations.forEach(function (affiliation) {\n            if (!affiliation.papers) return; // Ignore null affiliations.\n            \n            // Affiliation not found. \n            var affiliation_name = affiliation[\"@id\"] || \"\";\n            paper_count[affiliation_name] ="
  },
  {
    "id": 1044,
    "db_id": "aan_1",
    "question": "How many papers has each affiliation published?",
    "answer": "\n I think there is a limit of 50.\n \n How can we get more than that?\n The limit is in the API, so you can't change it here."
  },
  {
    "id": 1045,
    "db_id": "aan_1",
    "question": "Find the titles of papers that have more than 50 citations.",
    "answer": " Citeable objects can be papers, but also projects, datasets and software\n\n     * @return the list of titles of citeable objects with more than 50 citations (incl. self)\n     */\n    public List<String> getTitleList() {\n        return this.citationManager.getReferencedObjects(this).stream().map(ReferenceObject::getTitle).distinct().filter(s -> s != null && !s."
  },
  {
    "id": 1046,
    "db_id": "aan_1",
    "question": "What are the titles for papers with more than 50 citations?",
    "answer": "\n Inspired by [1]\n  cite_count = Counter()\n  for citation in citation_data:\n    if citation['citation_count'] > 50:\n      title = citation['paper_title'].replace(' ', '').lower()\n      cite_count[title] = citation['citation_count']\n  return [title for title, count in cite_count.most_common("
  },
  {
    "id": 1047,
    "db_id": "aan_1",
    "question": "Find the number of authors who did not publish any paper that is cited more than 50 times.",
    "answer": " C(S,T) = (S-t)*(T-s)/6\n If s or t > 50, return -1; otherwise, return (s-t)*(t-s)/6.\n * @param S Integer representing the number of papers cited more than 50 times by an author (if any)\n * @param T Integer representing the total number of papers in a group (including those that are not cited more than 5"
  },
  {
    "id": 1048,
    "db_id": "aan_1",
    "question": "How many authors have not published a paper with more than 50 citations?",
    "answer": "\n You can see the full list of authors who have been cited more than 100 times [here](https://www.researchgate.net/profile/Marcus_Blanco/publication/267941774/citation/1).\n\nIt is worth noting that a single author can be cited in multiple papers and even in the same paper. It's also worth noting that the number of citations"
  },
  {
    "id": 1049,
    "db_id": "aan_1",
    "question": "Find the names of authors who published some paper on NAACL and ACL in the year 2009.",
    "answer": " Cf. NAACL/ACL 2009 Program Committee. http://naacl09.org/program_committee.php\n\n### Contribute to the workshop schedule for NAACL and ACL 2016\n\nThe Program Committee will be conducting a workshop on future research directions in NLP at ACL 2016. http://naacl.org/workshop_details.php?id"
  },
  {
    "id": 1050,
    "db_id": "aan_1",
    "question": "What are the names of authors who published in both NAACL and ACL in 2009?",
    "answer": "\n Posted by Andrew M. Dennison at 11:35 am on October 8, 2009\nI\u2019m not sure if this is a one-time thing or just an anomaly of the publication process. Here are some author names that appeared in both ACL and NAACL in 2009.\nAndy Fryer, Nate Chopik, Rohit Prakash, and Mark Dredzele"
  },
  {
    "id": 1051,
    "db_id": "aan_1",
    "question": "Find the name of authors who have never published a paper in ACL.",
    "answer": " \n*    ************************************************************** */\n  public static List<String> getNamesOfAuthorsWithoutACLPapers() {\n    List<String> result = new ArrayList<>();\n    for (Author a : Author.authors) {\n      if (!a.hasPapersIn(PublicationVenue.acl))\n        result.add(a.lastName);\n    }\n    return result;\n  }\n}"
  },
  {
    "id": 1052,
    "db_id": "aan_1",
    "question": "What are the names of authors who have not published a paper in ACL?",
    "answer": "\n Citation. 2019. https://doi.org/10.116484/ZD2019-0003.1.\nThe most common reason for including an author on the publication list is that they have published a paper in ACL in the past, even if the paper has not been published online yet. If the paper is published and available to download from the ACL website, then it is likely that the"
  },
  {
    "id": 1053,
    "db_id": "conference",
    "question": "How many conferences are there?",
    "answer": "\n There will be a total of 12,500 attendees. Each conference can accommodate up to 500 people in the main auditorium. For each additional capacity, one additional room is needed to accommodate attendees that have registered for additional sessions or workshops.\nHow many times can I register for a session/workshop? If a participant has registered for 10 sessions, he can attend all of them. However"
  },
  {
    "id": 1054,
    "db_id": "conference",
    "question": "What is the total number of conferences?",
    "answer": "\n The answer to this question is 173.\n*/\nfunction getConferenceCount() {\n  return Conference.count();\n}"
  },
  {
    "id": 1055,
    "db_id": "conference",
    "question": "List all distinct conference names.",
    "answer": " \n   - Returns: A list of conference names\n   - Example: [\"Applied Risk Management Conference\", \"European Marketing Congress\"]\n   \"\"\"\n   return [d.conference_name for d in Conference.query.all()]"
  },
  {
    "id": 1056,
    "db_id": "conference",
    "question": "What are the different conference names?",
    "answer": "\n On average, what is the number of conferences a researcher attends? \n N.A. How long do you typically stay in a conference?\n What percentage of your papers have been selected for presentations at conferences?\n What percentage of your papers were published in high-impact journals (e.g., top 5%)?\nWhat proportion of your publications are interdisciplinary (collaborative) projects with others, as opposed to single-author"
  },
  {
    "id": 1057,
    "db_id": "conference",
    "question": "List all conference name, year, and location.",
    "answer": "  For example,\n\n * \"ACM Symposium on the Principles of Distributed Computing\" would be indexed as\n * \"acm symposium on the principles of distributed computing 2016 dublin ireland\".\n */\npublic final class ConferenceIndexedName {\n  /** The conference name.  Should not contain any punctuation or whitespace. */\n  public final String conference;\n  /** The conference year. */\n  public final"
  },
  {
    "id": 1058,
    "db_id": "conference",
    "question": "What are the names, years, and locations of all conferences?",
    "answer": "\n  confs = Conference.objects.all()\n  conference_names = [conf.name for conf in confs]\n  conference_years = [conf.year for conf in confs]\n  conference_locations = [conf.location for conf in confs]\n  return conference_names, conference_years, conference_locations"
  },
  {
    "id": 1059,
    "db_id": "conference",
    "question": "Show all conference names and the number of times each conference has.",
    "answer": "  Be aware that this will only work if you are in a\n *   conference/meeting with the specified name, i.e., you must first call\n *   <code>conferenceSetName(name)</code> before calling this function.\n *\n *   This function returns an array of integers, where each integer is the number of times that \n *   conference <code>name</code> was entered. The length of the array will be equal to"
  },
  {
    "id": 1060,
    "db_id": "conference",
    "question": "For each conference name, how many times has it occurred?",
    "answer": "\n  if(counts.hasOwnProperty(conferenceName)) { counts[conferenceName]++; } else { counts[conferenceName] = 1; }\n}\nconsole.table(counts);"
  },
  {
    "id": 1061,
    "db_id": "conference",
    "question": "show all years and the number of conferences in each year.",
    "answer": " \n\t* @return array\n\t*/\n\tpublic static function get_all_conferences($year = '') {\n\t\t$year = ($year == '' ? date('Y') : $year);\n\t\t$query = \" SELECT COUNT(CONFERENCE_ID) AS conference_count, YEAR FROM CONFERENCES WHERE YEAR = $year GROUP BY YEAR;\";\n\t\t$result = DB::query($query)->"
  },
  {
    "id": 1062,
    "db_id": "conference",
    "question": "How many conferences occur every year?",
    "answer": "\n My friend said it is 10, but I think he's wrong.\nHow many hours does the average person spend on Facebook in a day?\nMy friend said it was 4 to 6 hours, but I don't think he's right.\nWhat percentage of the population in India uses Facebook?\nThe article states that Facebook is used by 70% of the population, but that seems too high.\nWhat is the average number of hours spent"
  },
  {
    "id": 1063,
    "db_id": "conference",
    "question": "which year has least number of conferences?",
    "answer": "\n C) If I am not a member of the AAA, what can I do to make up for this?\n Is there anything I can do that will help me to be considered an AAA member? What should I do?\nD) Do any other members besides AAA members attend these conferences? Will my presence as a non-member affect the conference in a negative way? Are my views and opinions taken seriously as a non-member? How can I ensure that my presence"
  },
  {
    "id": 1064,
    "db_id": "conference",
    "question": "What year had the fewest conferences?",
    "answer": "\n Won't that be a problem for me to get all of those in?\n Along with a million other things. I'm not saying it can't be done but it will require a great deal of time and effort.\nIf it was only conference you would have to attend, I think there is no way you can make it work. You'll have to have multiple conferences and have a large group of people who have the same schedule as you.\nI"
  },
  {
    "id": 1065,
    "db_id": "conference",
    "question": "Show all locations where at least two conferences are located.",
    "answer": "  I think you need to do a bit more research and come back with some code for us to review, otherwise we're not going to be able to help you.\n\nComment: @user719653 Please post your code in your question so it can be formatted correctly. As it is, this question is very confusing and hard to answer.\n\nAnswer: This might help you. Try this to see if it works:\n\n\\begin{code}\n"
  },
  {
    "id": 1066,
    "db_id": "conference",
    "question": "What are all locations that have hosted at least two conferences?",
    "answer": "\n  const allLocations = await Location.find();\n  const filteredLocations = [];\n  for (const location of allLocations) {\n    if (location.id in conferenceToLocationMapping) {\n      const numConferencesForLocation = Object.keys(conferenceToLocationMapping[location.id]).length;\n      if (numConferencesForLocation >= 2) filteredLocations.push(location);\n    }\n  }\n "
  },
  {
    "id": 1067,
    "db_id": "conference",
    "question": "Show the institution name, location and founded year of all institutions.",
    "answer": " \n   in the city of Cairo, Egypt. The project is based on using a combination of MySQL database management system and PHP programming language to create an online platform for searching and displaying \n   the information on a web page. This project was created to demonstrate the abilities of working with databases and developing projects involving the use of technologies not commonly used in the field.\"\"\". */ ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML "
  },
  {
    "id": 1068,
    "db_id": "conference",
    "question": "What are the names, locations, and founding years for all institutions?",
    "answer": "\n In other words, what is the full list of all institutions?\n A comprehensive list that includes both universities and colleges would be helpful. The list should also include the location, founding year, name, and any additional information you can provide to help find out more about each institution."
  },
  {
    "id": 1069,
    "db_id": "conference",
    "question": "How many institution are founded between 1850 and 1900?",
    "answer": "\n My great grandfather was born in 1874, so I'd say 126 years after 1850. I don't know the exact age of my other great grandparents, but I would guess they lived at least through 1900, as there would be no way to construct a time machine that could go earlier than that."
  },
  {
    "id": 1070,
    "db_id": "conference",
    "question": "How many institutions were founded between 1850 and 1900?",
    "answer": "\n Homework: Research the number of colleges founded in each of these decades and rank them."
  },
  {
    "id": 1071,
    "db_id": "conference",
    "question": "Show the institution name and location of institution that is most recently founded.",
    "answer": " \n* How many institutions are there in each state? \n* How many institutes in each city? \n* How long has the oldest institution been in operation? \n\n### STEPS TO EXECUTE:\n1. Check the current_institutions table for the most recently founded institution.\n2. Group the institutions by state and then count the number of institutions in each state.\n3. Group the institutes in each city and then count the"
  },
  {
    "id": 1072,
    "db_id": "conference",
    "question": "What are the names and locations of the most recently-founded institution?",
    "answer": "\n Posted 5 years ago on February 14, 2014 by Samantha Smith\n Blog Posts, Featured News, General Interest, News"
  },
  {
    "id": 1073,
    "db_id": "conference",
    "question": "Show the institution name and the number of staff for each institution founded after 1800.",
    "answer": " A dictionary will be created with the key being the name of the institute and the value being a list containing the name of the founder and the year in which it was founded.\n\nfor i in range(5):\n    x = int(input(\"Enter number for institution: \"))\n    y = str(input(\"Enter founding year: \"))\n    z = (i+1)\n    print(\"\\nInstitution \", z, \":\", x, y)"
  },
  {
    "id": 1074,
    "db_id": "conference",
    "question": "For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names .",
    "answer": "\n [After 1800]\n 'Institution' object has no attribute 'id' , so i cannot do this query . How can i do this ? ]\n\ninstitutions_after = Institution.objects.filter(founding_date__gte=1800)\nprint(institutions_after)"
  },
  {
    "id": 1075,
    "db_id": "conference",
    "question": "Show institution name which there is no staff in our record.",
    "answer": " \n    \t */\n    public function testStaffNoName() {\n    \t$this->assertNull(Staff::getInstitutionName());\n    }\n}"
  },
  {
    "id": 1076,
    "db_id": "conference",
    "question": "What is the name of the institution with no staff in the records?",
    "answer": "\n  private static final String INSTITUTION_NAME_NO_STAFF = \"The Institution Name\";\n from 1.0.0-rc2 to 1.0.0\n\\end{code}"
  },
  {
    "id": 1077,
    "db_id": "conference",
    "question": "Show all staff name who are above the average age.",
    "answer": " 75, the average age of the remaining 10% is 75.984. So if you're under 76 years old, you're below the average age."
  },
  {
    "id": 1078,
    "db_id": "conference",
    "question": "What are the names of all staff members who are older than average?",
    "answer": "\n  * Staff member age: 30+ years old (e.g., 45)\n  * Staff member name: John Smith (e.g., \"John Doe\")\n  */\n SELECT s.name FROM staff s WHERE EXTRACT(YEAR FROM AGE(s.date_of_birth)) >= 30;"
  },
  {
    "id": 1079,
    "db_id": "conference",
    "question": "What is the maximum and minimum age of all staff from the United States?",
    "answer": "\n Homework Help."
  },
  {
    "id": 1080,
    "db_id": "conference",
    "question": "What are the maximum and minimum ages for all staff?",
    "answer": "\n  - List the average age of all staff members.\n  \n- Find out how many male/female staff members are there in total and what percentage of each gender they represent."
  },
  {
    "id": 1081,
    "db_id": "conference",
    "question": "Show all conference names which the staff from Canada attends.",
    "answer": " The annual Conference will be held in Toronto, Ontario and is organized by the Canadian Psychology Association for Research.\nThe APA's Annual Conference will be held in New York City on June 30 \u2013 July 12, 2020. Registration will open soon.\nAPA conference program committee"
  },
  {
    "id": 1082,
    "db_id": "conference",
    "question": "What are the names of all the conferences that has staff from Canada attending?",
    "answer": "\n Category: Canada\nOccupation: Teaching Staff\n\n\\begin{blockquote}\n\n We've heard from a few people that have attended conferences in Canada. They would like to know if it's possible for us to find out more about the names of all the conferences that have staff from Canada attending? Category: Canada Occupation: Teaching Staff\n\\end{blockquote}"
  },
  {
    "id": 1083,
    "db_id": "conference",
    "question": "Show all staff names who have been both speaker and sponsor in some conference.",
    "answer": " 2.5) A list of all the talks given by a particular speaker (including a brief description of the talk) 3. A list of all the conferences where a particular speaker has participated 4. A list of all the conferences in which a sponsor has participated\n\nAnswer: I don't think there's a way to do this. The data you're asking for is not a part of the conference schedule or speaker information, so it can'"
  },
  {
    "id": 1084,
    "db_id": "conference",
    "question": "What are the names of the staff members who have been both a speaker and a sponsor at some conference?",
    "answer": "\n C = CONFLICT OF INTEREST: Two or more staff members have overlapping roles, e.g. a staff member has been a speaker and a sponsor at the same conference; in this case, only the first conflict is reported. E.g.: STAFF_1 = 'John' and CONFERENCE_1='C1', but STAFFIE_1='John' and SPONSIOR_1='S1"
  },
  {
    "id": 1085,
    "db_id": "conference",
    "question": "Show all names who have been in both ACL and Naccl.",
    "answer": " 5746310, but do not have any of the following criteria:\n* Anything related to death (death, deaths, died, deceased, etc.)\n* A word that is used to describe a part of the body or a body part (e.g., arms, legs, feet)\n* A word that describes gender (male, female)\n* Any word related to age (baby, kids, old, young)"
  },
  {
    "id": 1086,
    "db_id": "conference",
    "question": "What are the names of everbody who has participated in both the ACL and NACCL conferences?",
    "answer": "\n Home.php:250 Uncaught TypeError: Cannot read property 'length' of undefined\nHome.php:251 Uncaught TypeError: Cannot read property 'length' of undefined\n\nComment: @Marcus, I have updated the code in answer section. Please check now."
  },
  {
    "id": 1087,
    "db_id": "conference",
    "question": "Show all staff names who attend a conference in 2003 or 2004.",
    "answer": " Candidate name:\n    SELECT s.first_name, s.last_name FROM staff s JOIN conference c ON s.staff_id = c.staff_id WHERE c.year = 2003 OR c.year = 2004;"
  },
  {
    "id": 1088,
    "db_id": "conference",
    "question": "What are the staff names who participated in conferences between 2003 or 2004?",
    "answer": "\n You don't need to know their first and last name. Just return a list of unique usernames (like ['john', 'bill']).\n\nThe list returned from your function should not include any duplicates.\n*/\nfunction usernames_in_conferences(start_year) {\n  var users = [];\n  for (var i = 0; i < conferences.length; i++) {\n    var conference = conferences["
  },
  {
    "id": 1089,
    "db_id": "conference",
    "question": "Show the conference name and year and the number of participants for each conference.",
    "answer": " \n\tpublic function get_conferences() {\n\t\t$this->load->database();\n\t\t$query = $this->db->query('SELECT c.name AS conference_name, c.year, COUNT(DISTINCT p.id) AS participant_count FROM conferences c JOIN participants p ON c.id = p.conference GROUP BY c.name, c.year;');\n\t\treturn $query->result();\n\t}"
  },
  {
    "id": 1090,
    "db_id": "conference",
    "question": "For each conference id, what are their names, year, and number of participants?",
    "answer": "\n  (For example: \"Conference 'W', Year 2013, 4 participants.\")\n # This is an array of arrays. Each subarray contains the conference name, year, and the number of participants in that conference.\n    conference_stats = [['W', 2013, 4]]\n    for i in range(len(conference_stats)):\n        name = conference_stats[i][0]\n        year ="
  },
  {
    "id": 1091,
    "db_id": "conference",
    "question": "Find the name of the conferences that have the top 2 most number of attendants.",
    "answer": " Apart from the first one, all other conferences should be included in the list\n\n\\end{blockquote}\n\nThe SQL query:\n\n SELECT c.name, COUNT(a.id) AS attendee_count FROM Conference c JOIN Attendant a ON c.id = a.conference_id GROUP BY c.name ORDER BY attendee_count DESC LIMIT 2;"
  },
  {
    "id": 1092,
    "db_id": "conference",
    "question": "What are the names of the conferences that have the top 2 most people attending?",
    "answer": "\n Pete Murray and John Dugan both have a total of 41 friends. However, since the list is sorted alphabetically, John Dugan's name comes before Pete Murray's because J is before P.\n\nSo in this case the output should be:\nJohn Dugan\nPete Murray\n```"
  },
  {
    "id": 1093,
    "db_id": "conference",
    "question": "Find the name and nationality of the people who did not participate in any ACL conference.",
    "answer": " 2015-2016 (Copenhagen)\n\nThis is the list of people from countries that participated in the ACL 2015-2016 Copenhagen Conference, but are not listed on the attendance roster.\n\n* Ahmad Ghazallah, Afghanistan, member of the ACL Central Committee (Afghanistan)\n* Siddhartha Gour, Nepal, member of the A"
  },
  {
    "id": 1094,
    "db_id": "conference",
    "question": "What are the names and nationalities of the people who did not participate in any ACL conferences?",
    "answer": "\n  return(names_of_non_acl_participants)\n  # Write your code here.\n}"
  },
  {
    "id": 1095,
    "db_id": "conference",
    "question": "Find the name and location of the universities that did not have any staff participated in any conference in 2004.",
    "answer": " A total of 79 universities were identified from a list of 511. The universities are listed in alphabetical order.\nThe 79 universities that did not participate in any conference in 2004 are:"
  },
  {
    "id": 1096,
    "db_id": "conference",
    "question": "What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?",
    "answer": "\n 'Northeastern University'\n  'Boston College'  'Virginia Tech'\n\\end{code}"
  },
  {
    "id": 1097,
    "db_id": "pilot_1",
    "question": "What is the name of the oldest pilot?",
    "answer": "\n WATC WWII Veteran Gets Life in Prison for Assault on Cop.\nFather of 2 Killed by Daughter's Boyfriend During Argument."
  },
  {
    "id": 1098,
    "db_id": "pilot_1",
    "question": "Return the name of the oldest pilot.",
    "answer": "  */\nfunction getOldestPilotName() {\n    var pilotArray = new Array();\n    var i;\n    for (i = 0; i < players.length; i++) {\n        pilotArray[i] = players[i].name;\n    }\n    pilotArray.sort();\n    return pilotArray[0];\n}"
  },
  {
    "id": 1099,
    "db_id": "pilot_1",
    "question": "What are the names of pilots whose age is below the average age, ordered by age?",
    "answer": "\n  SELECT p.name FROM pilot p WHERE EXTRACT(YEAR FROM AGE(p.date_of_birth)) < (SELECT AVG(EXTRACT(YEAR FROM AGE(p.date_of_birth))) AS average_age FROM pilot) ORDER BY EXTRACT(YEAR FROM AGE(p.date_of_birth));"
  },
  {
    "id": 1100,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are younger than average, ordered by age ascending.",
    "answer": " \n   SELECT p.name FROM pilot p WHERE EXTRACT(YEAR FROM AGE(p.date_of_birth)) < (SELECT AVG(EXTRACT(YEAR FROM AGE(p.date_of_birth))) FROM pilot);"
  },
  {
    "id": 1101,
    "db_id": "pilot_1",
    "question": "Find all information of on pilots whose age is less than 30.",
    "answer": " \"\n                + \"SELECT p.first_name, p.last_name FROM pilot p WHERE p.age < 30;\";"
  },
  {
    "id": 1102,
    "db_id": "pilot_1",
    "question": "What is all the information about pilots who are younger than 30 ?",
    "answer": "\n (note : age is not a date, it's a number)\n PUT /api/pilots/age/{age} HTTP/1.1\n```\n"
  },
  {
    "id": 1103,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots who have a plane named Piper Cub and is under 35.",
    "answer": " Cool!\nSELECT p.first_name, p.last_name FROM pilots p JOIN planes pt ON p.id = pt.pilot WHERE pt.name ilike '%Piper Cub%' AND EXTRACT(YEAR FROM age()) < 35;"
  },
  {
    "id": 1104,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who are younger than 35 and have a plane named Piper Cub?",
    "answer": "\n You will use a SELECT statement with a WHERE clause that filters for age under 35 and a like comparison for the plane name.\n SELECT p.name FROM Pilot p JOIN Plane pl ON p.plane_id = pl.id WHERE CAST(p.age AS integer) < 35 AND pl.name ilike '%Piper Cub%' ORDER BY p.name NULLS LAST;"
  },
  {
    "id": 1105,
    "db_id": "pilot_1",
    "question": "Where is the plane F-14 Fighter located?",
    "answer": "\n It\u2019s a little hard to say, because it\u2019s not like I saw it, but it was probably in a hangar.\n What kind of aircraft is the F-14 Fighter?  A fighter jet.\n What is a fighter jet?  A type of aircraft that has its own weapons and defensive capabilities.\n What are the features of a fighter jet?  Its ability to fly fast, be stealthy, have advanced avionics"
  },
  {
    "id": 1106,
    "db_id": "pilot_1",
    "question": "Return the location of the hangar in which F-14 Fighter is located.",
    "answer": "  */\n  int get_hangar_id() const { return m_hangar_id; }\n  /** Set the location of the hangar in which F-14 Fighter is located to HANGAR_ID.  */\n  void set_hangar_id(int HANGAR_ID) { m_hangar_id = HANGAR_ID; }\n  /** Get the name of F-14 Fighter.  */"
  },
  {
    "id": 1107,
    "db_id": "pilot_1",
    "question": "How many different places have some plane?",
    "answer": "\n  public: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, "
  },
  {
    "id": 1108,
    "db_id": "pilot_1",
    "question": "Count the number of different locations of hangars.",
    "answer": "  */\nint Hangar_count = 0;\n\n/*! This is used to store the current location of the hangar that we are in.  */\nint Hangar_location;"
  },
  {
    "id": 1109,
    "db_id": "pilot_1",
    "question": "Which plane does the pilot Jones with age 32 has?",
    "answer": "\n B) 50 years.\n C) 72 years.\n D) 84 years."
  },
  {
    "id": 1110,
    "db_id": "pilot_1",
    "question": "What are the names of planes that the pilot Jones who is 32 has?",
    "answer": "\n Include in your answer the number of passengers the plane can carry.\n\n I have no idea how to do this, any hints?\n\nAnswer:\n\n\\begin{code}\n SELECT p.name, COUNT(p.passengers) AS capacity FROM pilot j JOIN aircraft a ON j.id = a.pilot_id JOIN plane p ON a.plane_id = p.id GROUP BY p.name, p.capacity;"
  },
  {
    "id": 1111,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40?",
    "answer": "\n Is this an ethical question?\n What about the ethics of using a method to increase your chances of being selected for the pilot program? I mean, you could just as well ask whether there is ethicality in hiring a pilot to be part of such a program. That would be a better way to phrase the question because you're not asking about \"the ethics\" but rather about an ethical way to do something that involves risking your life.\n\n"
  },
  {
    "id": 1112,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40.",
    "answer": " A new option in the pilot training program is now available to allow a pilot to choose if they wish to have their checkrates re-checked every year or only once, depending on the flight experience and years of age.\nThe flight experience of pilots must be at least 5 years old before a checkrate change can occur. This change allows pilots to continue flying safely without worrying about changing their checkrate. For this reason, it is recommended that pilots who are over "
  },
  {
    "id": 1113,
    "db_id": "pilot_1",
    "question": "How many plane B-52 Bomber owned by the pilot who is under 35?",
    "answer": "\n You know what? I don't care if you are older than 30. My age, my life is mine and no one else's.\nThe only thing that concerns me is a plane to be flown into a building or over the edge of cliff. If I am old enough to pilot it, then so what?"
  },
  {
    "id": 1114,
    "db_id": "pilot_1",
    "question": "Count the number of B-52 Bombers owned by pilots under 35.",
    "answer": " A-79 is the only aircraft in this category.\nIt's a common misconception that the A-79 was designed to be used as a fighter, but its main role was to train other pilots and to be an instructorship platform, which it still is today.\nAirborne/Jungle Training Unit (AJTU)\nThis was a unit trained by US Air Force personnel in how to survive in the jungles"
  },
  {
    "id": 1115,
    "db_id": "pilot_1",
    "question": "Who is the youngest pilot to fly the plane Piper Cub?",
    "answer": "\n WELL, I am not sure but there are a lot of things that don't make sense in this book. It says that he was the youngest pilot to fly the Cub and it implies that this is a record, but then it doesn't mention it. Maybe he was just a very skilled pilot.\n28. What is the name of the pilot who flew the plane? WELL, I am not sure but there are a lot of things that"
  },
  {
    "id": 1116,
    "db_id": "pilot_1",
    "question": "Return the name of the youngest pilot to fly Piper Cub.",
    "answer": " 3-512, which was a record at the time.\nTheir son's first flight in this aircraft was with his father."
  },
  {
    "id": 1117,
    "db_id": "pilot_1",
    "question": "What is the name of the most popular plane?",
    "answer": "\n Home \u00bb About Us \u00bb FAQs \u00bb Which airline is the most popular plane?"
  },
  {
    "id": 1118,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the most often?",
    "answer": "\n A) United Airlines B) Delta Airline C) American Airlines D) Northwest Airlines\n Apple and Microsoft have agreed to form a new company. What is the name of this company? E) Google D) Facebook F) Microsoft G) Apple F) Oracle I) Amazon H) Samsung K) Walmart L) Target M) Home Depot N) Bed Bath & Beyond O) Best Buy P) Costco Q) Target S) Whole Foods R"
  },
  {
    "id": 1119,
    "db_id": "pilot_1",
    "question": "What is the name of the least popular plane?",
    "answer": "\n ANSWER: The least popular plane in the world is the Qantas Airliner 31.\n\\end{blockquote}"
  },
  {
    "id": 1120,
    "db_id": "pilot_1",
    "question": "What is the name of the plane that is flown the least often?",
    "answer": "\n The one that has the lowest number of flights.\n*/\nfunc (q *Queries) LeastFrequentlyFliedPlane(ctx context.Context) (*Flight, error) {\n\tf := &Flight{}\n\terr := q.db.QueryRow(ctx, \"SELECT f.name, COUNT(*) AS flight_count FROM flights f GROUP BY f.name ORDER BY flight_count ASC LIMIT 1\").Scan(&f."
  },
  {
    "id": 1121,
    "db_id": "pilot_1",
    "question": "How many pilots whose planes are in Chicago?",
    "answer": "\n My colleague has a friend who is an aviation consultant for a company called Aviatik. It seems to me that the pilot's license number is not the only identifier for an aviator. I have found the following information about some of my airline friends:\n\n\\begin{blockquote}\n\n1 - For a pilot in the US, his license number and full name are all he needs.\n\n2 - In Germany, a pilot's license"
  },
  {
    "id": 1122,
    "db_id": "pilot_1",
    "question": "Count the number of pilots who have planes in Chicago.",
    "answer": " 4367 is a prime number, so there are exactly 25 other numbers between 0 and 100 that are also prime.\n\nComment: @user999483 If you want to do it with modulo 100, then just add 1 to each of the primes 7, 23, and 4367. That gives you all of the numbers between 0 and 100 that are"
  },
  {
    "id": 1123,
    "db_id": "pilot_1",
    "question": "What are the planes owned by pilot Smith with age 41?",
    "answer": "\n PUBLIC.get_planes(smith, 41) -> [PLANE_NAME, ...]\n```"
  },
  {
    "id": 1124,
    "db_id": "pilot_1",
    "question": "Return the names of planes owned by the pilot whose name is Smith and is 41 years old.",
    "answer": " The owner\u2019s last name is not \"Johnson\".\n  SELECT p.name FROM plane p JOIN pilot pi ON p.pilot_id = pi.id WHERE pi.first_name ilike '%Smith%' AND EXTRACT(YEAR FROM AGE(pi.date_of_birth)) = 41 AND pi.last_name not ilike '%Johnson%' ORDER BY p.name NULLS LAST;"
  },
  {
    "id": 1125,
    "db_id": "pilot_1",
    "question": "How many distinct planes are owned across all pilots?",
    "answer": "\n Certainly, the number of planes a pilot has can vary. For instance, an experienced fighter pilot might have more planes than a rookie. But, the amount of planes a pilot has is not directly related to their overall effectiveness as an airman. A pilot\u2019s skills, experience, and attitude play far more important roles in determining their performance as a military aviator."
  },
  {
    "id": 1126,
    "db_id": "pilot_1",
    "question": "Count the number of different plane names across all pilots.",
    "answer": " \n     * @return The total number of different plane names in the list. \n     */\n    public int getNumberOfDifferentPlaneNames() {\n        return getPlanes().stream()\n                .map(p -> p.getModel()).distinct()\n                .count();\n    }\n\n}"
  },
  {
    "id": 1127,
    "db_id": "pilot_1",
    "question": "How many planes are owned by the pilot whose name is Smith?",
    "answer": "\n The above statement should return 2.\n SELECT COUNT(*) FROM airplanes JOIN pilots ON airplanes.pilot_id = pilots.id WHERE pilots.name = 'Smith';"
  },
  {
    "id": 1128,
    "db_id": "pilot_1",
    "question": "Count the number of planes Smith owns.",
    "answer": " 577971\nSmith\u2019s total value 577971\n\\end{code}"
  },
  {
    "id": 1129,
    "db_id": "pilot_1",
    "question": "How many planes are controlled by the pilots whose age is older than 40?",
    "answer": "\n In order to find this information, we need to write a SELECT statement that uses WHERE clause and filter on the AGE column.\n SELECT COUNT(*) FROM PILOTS WHERE AGE > 40;"
  },
  {
    "id": 1130,
    "db_id": "pilot_1",
    "question": "Count the number of planes flown by pilots older than 40.",
    "answer": " Causing an immediate change in the number of airplanes flown would be to increase or decrease the number of airplanes depending on this age category.\n\nI'm thinking of doing a simple model where I set a parameter for each age category and then create a new variable that is 1 if there are more than X airplanes in that age group (X being the parameter), 0 otherwise. I know that this will only be approximate, but it should give me"
  },
  {
    "id": 1131,
    "db_id": "pilot_1",
    "question": "Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.",
    "answer": " \"\nselect p.first_name, p.last_name, date_part('year', age(p.date_of_birth)) AS age from pilot p where date_part('year', age(p.date_of_birth)) between 30 and 40 order by age NULLS LAST;"
  },
  {
    "id": 1132,
    "db_id": "pilot_1",
    "question": "What are the names of pilots between the ages of 30 and 40, ordered by age ascending?",
    "answer": "\n 'SELECT p.name FROM pilot p WHERE EXTRACT(YEAR FROM AGE(p.date_of_birth)) BETWEEN 30 AND 40 ORDER BY p.date_of_birth ASC';"
  },
  {
    "id": 1133,
    "db_id": "pilot_1",
    "question": "List all pilot names sorted by their ages in the descending order.",
    "answer": " \n```csharp\nvar pilots = new Pilot[5];\npilots[0] = new Pilot(23, \"Pilot1\");\npilots[1] = new Pilot(45, \"Pilot2\");\npilots[2] = new Pilot(34, \"Pilot3\");\npilots[3] = new Pilot(87, \"Pilot4\");"
  },
  {
    "id": 1134,
    "db_id": "pilot_1",
    "question": "What are the names of pilots, ordered by age descending?",
    "answer": "\n  * */\n/* SELECT p.first_name, p.last_name FROM pilot p ORDER BY AGE(p.date_of_birth) DESC;"
  },
  {
    "id": 1135,
    "db_id": "pilot_1",
    "question": "Find all locations of planes sorted by the plane name.",
    "answer": " \n\n\tdef find_all_by_name(self, name): \n\t\treturn self.filter_by(name=name) \n\n# Find a plane by its unique identifier\n\n\tdef find_by_id(self, _id): \n\t\treturn self.get(_id)\n\n# Create a new plane if it does not already exist in the data store, or update an existing plane's information if it does. "
  },
  {
    "id": 1136,
    "db_id": "pilot_1",
    "question": "What are the locations of the different planes, ordered by plane name?",
    "answer": "\n  planes_by_name = planes.sort_by { |plane| plane.name }\n  puts \"There are #{planes_by_name.length} planes, listed below in order by name:\"\n  planes_by_name.each do |plane|\n    puts \"#{plane.name}\"\n  end"
  },
  {
    "id": 1137,
    "db_id": "pilot_1",
    "question": "List all distinct types of planes owned by all pilots in alphabetic order?",
    "answer": "\n  public List<Plane> getAllSortedPlanes() {\n Cursor cursor = this.getReadableDatabase().query(true, \"planes\", null, null, null, null, \"type\"); return this.parsePlanRows(cursor); }\n\\end{code}\n\n\\begin{blockquote}\n\n\\strong{NOTE:}  You need to change the field name and type of the column to get all the distinct planes owned by"
  },
  {
    "id": 1138,
    "db_id": "pilot_1",
    "question": "What are the different plane names, ordered alphabetically?",
    "answer": "\n  public function getPlanes() {\n # get all the planes in this airline, but only their name. Ordered alphabetically.\n    return $this->planes->sortBy('name')->pluck('name');\n  }\n}\n"
  },
  {
    "id": 1139,
    "db_id": "pilot_1",
    "question": "How many pilots who are older than 40 or younger than 30?",
    "answer": "\n Post by: Fatty on February 25, 2015, Under: Humor and Misc. , Tags: ageism, fatty, humor, inappropriate, inoffensive, mature, offensive, racism , Reply: No 's' Content: Text (64K)\nI think it is unfair to discriminate against anyone because of their age or any other characteristics. However, I can see how some"
  },
  {
    "id": 1140,
    "db_id": "pilot_1",
    "question": "Count the number of pilots with age greater than 40 or less than 30.",
    "answer": " Cut off for the upper limit is 41, and cut off for the lower limit is 29.\n\nI can do this using the following code:\n\n\\begin{code}\nSELECT COUNT(DISTINCT p.id) AS total FROM Pilot p WHERE (p.age > 40 OR (p.age < 30 AND p.id IN (SELECT id FROM pilot WHERE age = 29))) AND NOT EXISTS (SELECT "
  },
  {
    "id": 1141,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?",
    "answer": "\n Bubble your query: SELECT p.name, p.age FROM Pilot p JOIN Plane PI ON p.plane = pi.id AND p.age > 35 JOIN Plane FC ON p.plane = fc.id JOIN FighterFixture ff ON fc.id = ff.plane WHERE (pi.name IS NOT NULL OR ff.model IS NOT NULL) AND age < 30;"
  },
  {
    "id": 1142,
    "db_id": "pilot_1",
    "question": "Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.",
    "answer": " \" +\n        \"Their age is not a factor in the join clause.\";\n      var actual = FluentQuery.Select(p => new { p.Name, p.Age }).From(piperCub)\n        .Join(f14Fighter, p => p.PilotId == f14Fighter.PilotId && p.Age < 30).GetSql();\n      var expected = \" SELECT pc.name"
  },
  {
    "id": 1143,
    "db_id": "pilot_1",
    "question": "Find pilots who own plane Piper Cub but not B-52 Bomber.",
    "answer": " Posts about planes, aviation, and flight training.\nAviation Pilot Training Academy is an aviation training center located in the heart of Miami, Florida. We offer a comprehensive range of aviation training programs for commercial aviation, airline crew, commercial pilots, airline operations, aircraft mechanics, air traffic control, airport management, and maintenance.\nOur highly experienced instructors provide training programs that are designed to meet the needs of students from all over"
  },
  {
    "id": 1144,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?",
    "answer": "\n What other airplanes have you flown? Do you fly in a military, civilian, or government aircraft? Do you own an airplane? Are you currently flying for a military, civilian, government agency, or any other organization? In the military and government sectors, do you work with airplanes that are used as weapons, or do you handle airplanes for a variety of missions. Are you working in aviation industry, airline, or air"
  },
  {
    "id": 1145,
    "db_id": "pilot_1",
    "question": "Find pilots who own planes Piper Cub and B-52 Bomber.",
    "answer": " A new aviator's guide to the US, 1946\"\nabstract = \"\"\nauthor = \"Coleman, H. E.\"\ndate = 2016-11-13T17:30:42-05:00\ntitle = \"Aviator's Guide to the US in 1946\"\n# You only put the keyword in the quotes below if you want it to be"
  },
  {
    "id": 1146,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who own both Piper Cub and the B-52 Bomber?",
    "answer": "\n Are you aware of any other aircraft that can fly in the 7070? I am thinking of buying a 7070 for my son, but I don\u2019t know whether it can be used to fly with a B-52. Would you be able to help me out here please?\nAsking questions is fun!\nThe Pilot's Handbook says that the 7070 can handle any aircraft smaller than itself, so as"
  },
  {
    "id": 1147,
    "db_id": "pilot_1",
    "question": "What are the average and smallest ages of all pilots?",
    "answer": "\n Average age is 29.7 years, with the youngest being a pilot who was 14 years old at the time of his enlistment (in 2006), and the oldest being a pilot who was 84 years old (in 2013).\n \n What is the highest rank held by any pilot? A pilot with the highest rank, Captain, was active in the US Air Force at the time of his enlistment"
  },
  {
    "id": 1148,
    "db_id": "pilot_1",
    "question": "Return the average and minimum ages across all pilots.",
    "answer": "  The returned list should be in the format: [average_age, minimum_age]\n\n    def avg_min_ages(self):\n        return [self.avg_age(), self.min_age()]\n        "
  },
  {
    "id": 1149,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have planes in both Austin and Boston?",
    "answer": "\n Wanted in Chicago: A pilot with a certain number of years of experience. A pilot with a pilot's license for 20 years or more. A pilot with a certain amount of flying hours. An airline captain. A flight instructor. A certified flight engineer. A pilot with a specialization in avionics and navigation. A pilot with a specific type of aircraft licenses (e.g. multi-engine, cargo, or general aviation).\n W"
  },
  {
    "id": 1150,
    "db_id": "pilot_1",
    "question": "Give the names of pilots who have planes in Austin and Boston.",
    "answer": " A map showing these locations is provided below.\nI\u2019m a little confused by some of the responses. If you don\u2019t mind, could you provide more information about what you mean by \u201cpilot\u201d. I\u2019m not familiar with the term being used in that context. Thanks.\nMike in Dallas on January 23, 2015 at 11:27 am said:\nIt is a pilot\u2019s license.\nMike in Dallas"
  },
  {
    "id": 1151,
    "db_id": "pilot_1",
    "question": "Find the pilots who have either plane Piper Cub or plane F-14 Fighter.",
    "answer": " \n * It's not possible to find them on the same page.\n * @return array|false If it is possible, returns an array with the pilot IDs. Otherwise, return false. \n */\nfunction getPilotIds($planeId) {\n    $pilotIds = false;\n    \n    switch ($planeId) {\n        case 1: // Piper Cub\n            $pilotIds = [2, 3];"
  },
  {
    "id": 1152,
    "db_id": "pilot_1",
    "question": "What are the names of pilots who have either the Piper Cub or the F-14 Fighter?",
    "answer": "\n How is the number of these pilots in a particular state (or the country)?\n Can I use this to estimate the number of pilots in a particular state (or the country)?\n\\item What's the difference between the number of pilots in a certain state (or the country) and the population of that state (or country)?\n\\end{itemize}"
  },
  {
    "id": 1153,
    "db_id": "pilot_1",
    "question": "What is the average age of pilots for different types of planes?",
    "answer": "\n  If a pilot is not qualified to fly an airplane, what are the chances of them surviving an accident?\n Kids who have had their first flight lessons at age 13 can read and write by age 15. In a world that's getting more complex all the time, what do you think are some of the most important skills you should teach children today to help them become future innovators and problem solvers? What is the average age of pil"
  },
  {
    "id": 1154,
    "db_id": "pilot_1",
    "question": "Return the average age of pilots for each plane name.",
    "answer": " \n# Pandas is used to manipulate and analyze the data, but I could not find any way to do it using Pandas, so I had to use a for loop instead."
  },
  {
    "id": 1155,
    "db_id": "pilot_1",
    "question": "Find the number of planes for each type.",
    "answer": " \n# It returns a dictionary with the keys as the types (e.g., 'Commercial') and values as the count of planes (e.g., 4).\ndef group_planes(planes):\n    grouped = {}\n    \n    for plane in planes:\n        type = plane.type\n        if type not in grouped:\n            grouped[type] = 0\n        grouped[type] += 1\n    return"
  },
  {
    "id": 1156,
    "db_id": "pilot_1",
    "question": "Count the number of entries for each plane name.",
    "answer": " \n            count_per_plane = Counter(p[0] for p in all_pairs)\n            #print(count_per_plane)\n            \n            # Remove those planes with less than two entries from the counter:\n            no_single_entries = [k for k, v in count_per_plane.items() if v < 2]\n            for n in no_single_entries:\n                count_per_plane"
  },
  {
    "id": 1157,
    "db_id": "pilot_1",
    "question": "Find the name of the oldest pilot for each type of plane, and order the results by plane name.",
    "answer": " \n    SELECT p.name, row_number() OVER(PARTITION BY tp.name ORDER BY p.name) AS row_number FROM plane p JOIN type_of_plane tp ON p.type = tp.id JOIN (SELECT type, MIN(date_added) AS min_date FROM plane GROUP BY type) AS m ON p.type = m.type JOIN pilot p1 ON p1.id IN (SELECT id FROM pilot WHERE"
  },
  {
    "id": 1158,
    "db_id": "pilot_1",
    "question": "What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?",
    "answer": "\n  SELECT p.name, row_number() OVER (PARTITION BY t.tail_number ORDER BY p.name DESC) AS row_num FROM pilot p JOIN tail t ON p.tail_number = t.tail_number WHERE EXISTS (SELECT 1 FROM flight f WHERE f.flight_date IS NOT NULL AND f.tail_number = t.tail_number) ORDER BY t.tail_number, row_num;"
  },
  {
    "id": 1159,
    "db_id": "pilot_1",
    "question": "What are the names of oldest pilots for each type of plane?",
    "answer": "\n I can see how that would be a great list. But in this case, do you really think there's enough data to create a list? Do you have any other ideas? Maybe just the ages of pilot who flew with a particular aircraft? How many pilots were there? That could also be useful to know.\nI know how important it is to get to the bottom of these issues, but I think there are too many variables. What happens if one pilot dies in a"
  },
  {
    "id": 1160,
    "db_id": "pilot_1",
    "question": "Return the names of the different planes, as well as the names of the oldest pilots who flew each.",
    "answer": " \n   aircraft in the RAF. The following information is provided for each plane:\n\n    - Type: the type of aircraft (e.g. fighter)\n    - Model: the model name (e.g. Spitfire)\n    - Year: the year the aircraft was manufactured (e.g 1938)\n    - Pilot(s): the names of pilots who flew that particular aircraft in the RAF.\n"
  },
  {
    "id": 1161,
    "db_id": "pilot_1",
    "question": "Find the max age for each group of pilots with the same name.",
    "answer": "  I want to display the pilot's name and their max age.\n\nExample: If there are two pilots named John Smith, both aged 35 years old, then they will be listed as\nJohn Smith (max age 35).  If another John Smith is aged 40 years old, he will be ignored and not displayed in the output.\n\nAnswer: I'm afraid that a standard SQL query cannot produce this exact output. However, you can"
  },
  {
    "id": 1162,
    "db_id": "pilot_1",
    "question": "What are the different pilot names, and what are the maximum ages of pilots for each?",
    "answer": "\n  // var ageLimit = 50;\n  var pilotNames = [\n    \"Kelly\",\n    \"Samantha\",\n    \"Aaron\",\n    \"Nick\",\n    \"Sophia\",\n    \"Taylor\"\n  ];\n  var maxAgeForPilot = new Array(pilotNames.length);\n  maxAgeForPilot[0] = 37;\n  maxAgeFor"
  },
  {
    "id": 1163,
    "db_id": "pilot_1",
    "question": "For each city, find the number and average age of pilots who have a plane.",
    "answer": " \ndef cities_with_avg_age(cities):\n    res = {}\n    for city in cities:\n        avg_age = get_average_age(city)\n        res[city] = avg_age\n    return res\n    \n#print(cities_with_avg_age(['Paris', 'London', 'New York']))"
  },
  {
    "id": 1164,
    "db_id": "pilot_1",
    "question": "What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?",
    "answer": "\n\\end{blockquote}\n\n\\begin{code}\n SELECT h.id AS hangar_id, COUNT(DISTINCT p.id) AS pilot_count, AVG(EXTRACT(YEAR FROM AGE(p))) AS average_age FROM Hangar h JOIN Pilot p ON h.id = p.hangar GROUP BY h.id ORDER BY h.id NULLS LAST;\n\\end{code}"
  },
  {
    "id": 1165,
    "db_id": "pilot_1",
    "question": "Find the number of pilots for the plane types with average pilot age below 35.",
    "answer": " AGE 0 means all ages.\n        # PilotAgeDistribution(self, pilot_age_threshold=35)\n        return self.pilot_distributions[f\"0\"] if pilot_age_threshold >= 35 else self.pilot_distributions[\"1\"]\n        \n    def GetPilotsWithAgeBelowThreshold(self, age):\n        # Return the number of pilots with age below"
  },
  {
    "id": 1166,
    "db_id": "pilot_1",
    "question": "What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?",
    "answer": "\n 'airline' is a string, 'name' is a string, 'avg_age' is a number, 'pilot_count' is a number.\nfunction plane_details(airline, name, avg_age, pilot_count) {\n  return `${airline}: ${name} average age of pilots: ${avg_age}, total pilots: ${pilot_count}`;\n}\n\n// function to"
  },
  {
    "id": 1167,
    "db_id": "pilot_1",
    "question": "Find the location of the plane that is owned by the youngest pilot.",
    "answer": " 178.35 km (109.5 mi) to the northwest of Gda\u0144sk-Orzeszno Airport, Poland.\n* The oldest known aircraft on earth is an Amiot A-100, with a age estimated at around 6,200 years old.\n* At a maximum altitude of 5,450 m (17,928 ft) in 1932, the highest"
  },
  {
    "id": 1168,
    "db_id": "pilot_1",
    "question": "What is the location of the plane that was flown by the pilot with the lowest age?",
    "answer": "\n  If no such pilot exists, return \"no plane\". */\n  public static String lowestAge(List<Plane> planes) {\n    int minAge = Integer.MAX_VALUE;\n    String minPlaneName = null;\n    for (Plane p : planes) {\n      if (p.getPilot().age() < minAge) {\n        minAge = p.getPilot().age();\n        min"
  },
  {
    "id": 1169,
    "db_id": "pilot_1",
    "question": "Find the name and age of pilots who have a plane in Austin.",
    "answer": "  I want to display this information on a website for other people to view.\n\\end{blockquote}\n\nHere is my current code:\n\n\\begin{code}\nfunction getPilotAge(pilot) {\n    const dateOfBirth = new Date(pilot.date_of_birth);\n    return Math.floor((Date.now() - dateOfBirth.getTime()) / 1000 / "
  },
  {
    "id": 1170,
    "db_id": "pilot_1",
    "question": "What are the names and ages of pilots who have planes located in Austin?",
    "answer": "\n Category: Ask a Question About Austin, Texas!\n Post a Comment"
  },
  {
    "id": 1171,
    "db_id": "pilot_1",
    "question": "List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.",
    "answer": " 75L (their age)\nis less than theirs, and where the pilots' ages are all integers. If there are multiple solutions, list any one of them, or if it's ambiguous, all of them."
  },
  {
    "id": 1172,
    "db_id": "pilot_1",
    "question": "Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.",
    "answer": " \n- (c) Return the names of pilots who are younger than any pilot who has flowne Piper Cub, ordered alphabetically."
  },
  {
    "id": 1173,
    "db_id": "pilot_1",
    "question": "Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.",
    "answer": " \n  * `pilot_age_distribution` contains the number of pilots per age, for all ages (from 0 to 25) and for all planes (including those that aren't F-14s).  "
  },
  {
    "id": 1174,
    "db_id": "pilot_1",
    "question": "How many pilots are younger than all pilots who own the F-14 Fighter?",
    "answer": "\n Is that even a question?\n The F-14 was not even in the air at the time of the War of 1812.\n\nComment: @DaleMurray - Actually, it is, because the F-14 is fictional and is being used to fight in World War II. So yeah, that's a question :)\n\nComment: Well, the answer would be yes, but only in the context of the story. The F"
  },
  {
    "id": 1175,
    "db_id": "pilot_1",
    "question": "Find all different planes whose names contain substring 'Bomber'.",
    "answer": "\n  .find('Bomber') #=> ['Bombardier', 'Bombay', 'Bomber']\n  end\n```\n"
  },
  {
    "id": 1176,
    "db_id": "pilot_1",
    "question": "What are the different plane names that contain the word Bomber?",
    "answer": "\n A: Bombardier, Dassault-Breguet, EADS, BAe, Breguet, Bombardier Aerospace, Bombardier Inc., Bombardier S.A.\n Q: What is the most expensive aircraft produced by Bombardier?\n A: The Learjet 80L.\n Q: What was the name of the airline that flew the Airbus A319 on the first commercial flight?\n"
  },
  {
    "id": 1177,
    "db_id": "pilot_1",
    "question": "Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.",
    "answer": " 55\"\n\n SELECT COUNT(DISTINCT p1.pilot_id) FROM Pilot p1 JOIN PilotPipers pp1 ON p1.pilot_id = pp1.pilot_id JOIN PiperCub pc ON pp1.plane_code = pc.code WHERE p1.age > (SELECT age FROM Pilot p2 JOIN PilotPipers pp2 ON p2.pilot_id"
  },
  {
    "id": 1178,
    "db_id": "pilot_1",
    "question": "How many pilots are older than the youngest pilot who has Piper Cub?",
    "answer": "\n Is this question even possible to answer?\n What if the Pilot License is an optional extra and you can choose not to get it? If so, then the age of the oldest pilot is 50-1/2. Otherwise, the age would be higher due to the additional years required for obtaining the Pilot License.\n\\end{blockquote}"
  },
  {
    "id": 1179,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has the largest area.",
    "answer": "  */\n\tprintf(\"The district with the highest population density is %s\\n\", most_populous_district(state));\n}"
  },
  {
    "id": 1180,
    "db_id": "district_spokesman",
    "question": "Select the area and government website of the district with the smallest population.",
    "answer": " 3000 people is a lot more than the average number of residents in rural areas in the UK, so this must be an exceptional case.\nThe article also mentions that \"the largest and most densely populated city\" is London, which isn't quite true. The next largest cities are Birmingham, Manchester and Leicester.\nIt's difficult to say which district had the smallest population because the source of the data appears to be a list of districts rather than"
  },
  {
    "id": 1181,
    "db_id": "district_spokesman",
    "question": "Find the names and populations of the districts whose area is greater than the average area.",
    "answer": " \n   Districts = c(1, 2, 3, 4, 5, 6, 7)\n   Population = c(10000, 9000, 8000, 7000, 6000, 5000, 4000)\n   AverageArea = mean(c(4, 3, 2.5, 2, "
  },
  {
    "id": 1182,
    "db_id": "district_spokesman",
    "question": "Give me the biggest and average areas of all districts.",
    "answer": " 2) Districts with highest population density are generally found in metropolitan cities. I've created a list of all the districts in the US, and their population densities.\n3) Population Density is calculated by dividing the total population count by the size of the district. The higher the population density, the more people in the area.\n4) However, it's important to note that population density varies greatly depending on the location within a city. So,"
  },
  {
    "id": 1183,
    "db_id": "district_spokesman",
    "question": "What is the total population of the districts whose areas are in the top 3?",
    "answer": "\n [2] In what proportion of the population lives in the top 3 districts; and also, how much of the population lives in the bottom 3 districts?"
  },
  {
    "id": 1184,
    "db_id": "district_spokesman",
    "question": "List the ids, names, and government websites of all districts sorted by population.",
    "answer": " 2015.\nThe Districts are listed in descending order of their populations, so the largest district (which is usually the one with the most people) appears first on the list. If you are looking for a specific district, you can look at the names or ids of the districts in this table. The population of each district can be found by clicking on its name or id and using the population statistics link under that row.\nNote: Population figures are only available for districts"
  },
  {
    "id": 1185,
    "db_id": "district_spokesman",
    "question": "Find the names of districts whose government links use a 'gov' domain.",
    "answer": "  The name is then used to find the corresponding link, and replace it with the one provided by the parameter.\n\t * @param string $new_link\n\t * @return string[] Array of district IDs\n\t */\n\tpublic function setLinkForDomains(string $new_link) {\n\t\t$ids = array();\n\t\tforeach($this->districts as $district => $info) {\n\t\t\tif (preg_"
  },
  {
    "id": 1186,
    "db_id": "district_spokesman",
    "question": "Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.",
    "answer": " #\n```bash\n SELECT d.id, d.name FROM Districts d WHERE (SELECT COUNT(DISTINCT c.id) FROM Cities c JOIN Districts d2 ON c.district = d2.id WHERE d2.name = d.name) > 4000 AND (SELECT AREA FROM Cities c JOIN Districts d2 ON c.district = d2.id WHERE d2.name = d.name) >"
  },
  {
    "id": 1187,
    "db_id": "district_spokesman",
    "question": "Find all spokesman's names and speech titles.",
    "answer": " 2) Make a list of the 50 most important books on the topic (in English) from the last century, including your own book.\n3) What is the difference between a 'book' and a 'paper'?\n4) You have just heard that a friend of yours has been injured while walking in a park and was struck by a car. Your friend needs immediate surgery to survive. Should you call 911, or should you try to find"
  },
  {
    "id": 1188,
    "db_id": "district_spokesman",
    "question": "Find the average points and average ages of all spokesmen whose rank position is 1.",
    "answer": " \" +\n        \"SELECT AVG(s.points) AS average_points FROM spokesperson s JOIN SPEAKER_RANK sr ON s.id = sr.spokesperson WHERE sr.rank = 1;\");"
  },
  {
    "id": 1189,
    "db_id": "district_spokesman",
    "question": "What are the names and points of spokesmen who are younger than 40?",
    "answer": "\n Candidate names and their points of contact, along with any relevant additional information:\n Allegations of financial conflicts of interest are not allowed. If you have a question about a spokesperson's age or other personal information, please reach out to the ASA Board for clarification."
  },
  {
    "id": 1190,
    "db_id": "district_spokesman",
    "question": "Who is the oldest spokesman?",
    "answer": "\n Category: Sports | Tags: basketball, johnny-depp, nolan-scurry, oscar-wildes, ryan-reynolds, sandra-bullock, ted-cruz\n The 16-year old boy is the youngest player to win the NBA title. He became the youngest NBA champion at 15 years old after winning the NBA title in 2019. The 38-year old"
  },
  {
    "id": 1191,
    "db_id": "district_spokesman",
    "question": "Which spokesman has lower points than the average?",
    "answer": "\n Average point: 10.74, You are at 9.84, that's 0.92 below the average. Do you want to keep or drop the last digit? Keep it and round down to 9, or drop it and round down to 8?\nA) Keep the last digit: 9.84 = 9\nB) Drop the last digit: 9.84 = 8\n\nAnswer: B"
  },
  {
    "id": 1192,
    "db_id": "district_spokesman",
    "question": "Find the name of the district which has greatest number of spokesmen.",
    "answer": " \nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    vector<vector<spokesperson>> v(n, vector<spokesperson>(2));\n    for (int i = 0; i < n; i++) {\n        char name[101];\n        int age;\n        scanf(\"%s %d\", name, &age);\n        v[i][0].name ="
  },
  {
    "id": 1193,
    "db_id": "district_spokesman",
    "question": "Find the names of spokesmen who have served some district before 2004.",
    "answer": " A number of those with a \"1\" in front of their name are spokespeople for that year only, and so should not be included in the list.\n\n\\begin{code}\n SELECT DISTINCT s.spokesperson FROM SpokePersonalityHistory s WHERE CAST(s.year AS TEXT) <= '2004' ORDER BY s.spokesperson NULLS LAST;"
  },
  {
    "id": 1194,
    "db_id": "district_spokesman",
    "question": "Find the number of spokesmen for each district, and the show district names as well.",
    "answer": " \n   for (int i = 0; i < numberOfDistricts; ++i) {\n      std::stringstream ss;\n      ss << \"district-\" << i;\n      std::string districtName = ss.str();\n      auto spokesman = std::make_shared<Spokesperson>(districtName, 5); // Spokesmen for each district with 5 contacts on average\n      m_spokesmen"
  },
  {
    "id": 1195,
    "db_id": "district_spokesman",
    "question": "Find the names of the districts which have had both spokesman with rank position 1 and 2.",
    "answer": " \"\n\tlocal query = \" SELECT d.name FROM District d JOIN (SELECT n.spoke_id FROM Node n WHERE n.rank IN (1, 2)) AS m ON d.id = m.spoke_id\"\n\n\t-- perform the query and return the results\n\treturn query(query)[\"name\"]\nend\n"
  },
  {
    "id": 1196,
    "db_id": "district_spokesman",
    "question": "Find the names of districts which have more than one spokesman.",
    "answer": " The names will be sorted alphabetically.\n    :rtype: list\n    :return: List of district names.\n    \"\"\"\n    return [district_name for district_name, count in more_than_one_spokesperson_in_districts.items() if count > 1]\n\n# print(find_districts_with_multiple_spokesperson())"
  },
  {
    "id": 1197,
    "db_id": "district_spokesman",
    "question": "Find the number of districts which have no spokesmen.",
    "answer": "  */\n        for (int i = 0; i < nDistricts; ++i) {\n            if (spokesmen[i] == -1) {\n                numWithoutSpoke++;\n            }\n        }\n    }\n}"
  },
  {
    "id": 1198,
    "db_id": "district_spokesman",
    "question": "Find the name of spokesmen who do not speak for any district.",
    "answer": " The data are listed in alphabetical order, and there is no official ranking or hierarchy established among these individuals.\nSouthwest Florida Medical Spokesman Association (SWFMSA) 757-0839\nCitrus County District Health Board District Health Board of Citrus County, a constituent of the Regional Water Management District, is responsible for administering the Regional Water Management District and ensures compliance with the State's water quality regulations. The"
  },
  {
    "id": 1199,
    "db_id": "district_spokesman",
    "question": "Find the total and average population of the districts which have some spokesman.",
    "answer": " 2016-2017 in a map view.\n\n        :param district_list: A list of dictionaries with the following keys: 'district_id', 'spokesperson_count'.\n        :return: The total number of districts and their average spokesperson count.\n        \"\"\"\n        total_districts = len(district_list)\n        average_spokes = sum(district['spokesp"
  },
  {
    "id": 1200,
    "db_id": "art_1",
    "question": "What is the title of the sculpture that was created in the most recent year ?",
    "answer": "\n 5) How many years have passed since the sculpture with the given title has been created?"
  },
  {
    "id": 1201,
    "db_id": "art_1",
    "question": "What is the name of the scuplture that was created most recently ?",
    "answer": "\n  \"Given a list of strings, what is the length of the longest one?\" in Python\n  The list will be passed in as an argument to the function.\n  Use the max() function.\n*/\ndef longest_string(lst):\n  return len(max(lst))\n# Tests ------------------------------\nassert longest_string([]) == 0\nassert longest_string(['a']) == 1\nassert longest_string(['hello',"
  },
  {
    "id": 1202,
    "db_id": "art_1",
    "question": "What is the title and location of the oldest painting ?",
    "answer": "\n I would like to know the title and location of the oldest painting in a museum or art gallery. I'm interested in finding the oldest piece of artwork that has been exhibited.\n\nI have researched this question online, but I cannot find an answer that satisfies my curiosity.\n\nComment: Without knowing more about the art you are looking for, it will be hard to say where the oldest piece of art is located.  Museums and galleries change over time,"
  },
  {
    "id": 1203,
    "db_id": "art_1",
    "question": "What is the name of the oldest painting and where is it located?",
    "answer": "\n Is there any way to get a copy of the original? If I go to museums I can take a picture of it, but I would like to know if there is a way for me to make a photo of the original painting.\nI have visited several museums and taken pictures of many paintings over the years. I also tried to get a copy of the old painting from one of my friends who is an artist and he said that he doesn't have any copies of it"
  },
  {
    "id": 1204,
    "db_id": "art_1",
    "question": "Find the names of all sculptures located in gallery 226.",
    "answer": " CM, CA, FL, HA, MG, OO, OT, RP, WF\n\t */\n\tpublic static List<String> getSculptureNames() throws Exception {\n\t\tList<String> result = new ArrayList<>();\n\t\tresult.add(name);\n\t\treturn result;\n\t}\n\n\t/**\n\t * Find the names of all sculptures in gallery 226 CM, CA"
  },
  {
    "id": 1205,
    "db_id": "art_1",
    "question": "What are the names of all sculptures in gallery 226?",
    "answer": "\n Mentioned above, but here is a complete list:\n A-Galileo; B-Hieronymus; C-Moschus; D-Pygmaeus; E-Styx; F-Telescope; G-Unicorn.\nI think the artist(s) was/was S.G.Baldassi, but I don't have any concrete information to back that up. If you know anything about him or"
  },
  {
    "id": 1206,
    "db_id": "art_1",
    "question": "List the title and location of all paintings.",
    "answer": " \n# Returns: a list of tuples containing (title, artist) for every painting\ndef get_paintings():\n    return [(p.title, p.artist) for p in Painting.objects]\n"
  },
  {
    "id": 1207,
    "db_id": "art_1",
    "question": "What are the paintings called and where are they located?",
    "answer": "\n My colleague, who is a member of a painting class I am taking, wants to know what her teacher says about her. Is it okay to ask her this question?\n\nYes, you can ask him directly. However, it's important that he not become defensive or dismissive of your questions and concerns. If he answers honestly and respectfully, there is no problem with your asking for more information about him.\n\nHowever, if he becomes defensive or dismiss"
  },
  {
    "id": 1208,
    "db_id": "art_1",
    "question": "List the title and location of all sculptures.",
    "answer": " \nThe application is designed to be used on mobile devices, it has a responsive design. "
  },
  {
    "id": 1209,
    "db_id": "art_1",
    "question": "What are the sculptures called and where are they located?",
    "answer": "\n Is this what you're looking for?"
  },
  {
    "id": 1210,
    "db_id": "art_1",
    "question": "What are the medium types of the painting with id = 80",
    "answer": "56767941. \n        /// </summary>\n        public IEnumerable<MediumType> MediumTypes { get; set; }\n    }\n}"
  },
  {
    "id": 1211,
    "db_id": "art_1",
    "question": "What mediums were used for the painting with id 80 ?",
    "answer": "\n '), 'Painting with id 175 not found' AS reason FROM dual;"
  },
  {
    "id": 1212,
    "db_id": "art_1",
    "question": "Find the first and last names of all artists who were born after 1850.",
    "answer": " Calls the print_name function to do the actual printing.\ndef list_first_and_last_names(artist):\n    return print_name(artist['first_name'], artist['last_name'])\n\n# Create a list of the first and last names of all artists whose dates are after 1850-01-01.\nartists = [a for a in artists if a['date_of_birth'] >"
  },
  {
    "id": 1213,
    "db_id": "art_1",
    "question": "What are the full names of artists born after 1850?",
    "answer": "\n Is there any artist whose first name is not spelled correctly (e.g., \"Thomas\" instead of \"Tom\")?\n\nAnswer those questions with a single SQL query."
  },
  {
    "id": 1214,
    "db_id": "art_1",
    "question": "Find the names and years of all sculptures that are not located in gallery 226.",
    "answer": " Cells containing more than one sculpture will be returned as separate rows.\n    -   Example: SELECT s.name, g.year FROM Sculpture s JOIN Gallery g ON s.gallery_id = g.id WHERE g.number != 226;"
  },
  {
    "id": 1215,
    "db_id": "art_1",
    "question": "What are the names and dates created for all sculptures not located in gallery 226?",
    "answer": "\n I\u2019ve seen a few of these. Mostly, the sculptors are in the background. Also, they often have no title or date. So, I don\u2019t know where to look next. Thanks for any help you can provide!\nLily Lentz on May 19, 2016 at 4:58 pm said:\nI found some interesting sculptures and their titles (and sometimes dates) here."
  },
  {
    "id": 1216,
    "db_id": "art_1",
    "question": "What are the first and last names of all distinct artists who made sculptures before 1900?",
    "answer": "\n Posted on March 27, 2016 by Tomas Vanabroyel\tin Uncategorized\n A lot of sculptors have created works that have survived to our time but I'm only interested in the first and last names of these artists. This is what I got for my answer:\nNicoise (Nicolas) Despoto, b. 1752; Jean-Baptiste Pigalle, b. "
  },
  {
    "id": 1217,
    "db_id": "art_1",
    "question": "What is the first and last name of each distinct artists who made a sculpture before 1900?",
    "answer": "\n Post-1900, I don't care about the first and last name.\n\n\\begin{code}\n SELECT DISTINCT(a.\"first name\", a.\"last name\") AS artist_name FROM artists a JOIN sculptures s ON a.id = s.artist WHERE DATE(s.created date) < '1900-01-01' ;\n\\end{code}"
  },
  {
    "id": 1218,
    "db_id": "art_1",
    "question": "Find the birth years of all distinct artists who made sculptures after 1920?",
    "answer": "\n (In a particular order)\n The year 1920 is included only for artwork made by living artists. I do not want to see any artwork made before 1920. In this case, the birth years of all distinct artists who have sculptured after 1920 in any order are: (for example) 1965, 1973, 1984, 1991, 20"
  },
  {
    "id": 1219,
    "db_id": "art_1",
    "question": "What is the birth year of each distinct artists who created sculptures after 1920?",
    "answer": "\n Cool question!\n The answer is: I don't know.\n The artist name and date of birth are not always provided in the sculpture catalogs, so it would be difficult to tell which one is which. But there are a few distinct artists who are known for their work after 1920. These are the artists I found:\n  Leonardo da Vinci (1459-1519) - A famous artist from Italy, known"
  },
  {
    "id": 1220,
    "db_id": "art_1",
    "question": "What are the first and last names of the artist who lived the longest?",
    "answer": "\n I\u2019ve looked up the Wikipedia page for [Arthur St. Clair](https://en.wikipedia.org/wiki/Arthur_St._Clair) and found his age to be 81 years old when he died in 1943. He was born on November 1st, 1861.\n"
  },
  {
    "id": 1221,
    "db_id": "art_1",
    "question": "Give the full name of the artist who lived the longest.",
    "answer": " \n```python\ndef get_longest_artist_name(artist_data):\n    longest_artist = ''\n    max_length = 0\n    for artist in artist_data:\n        if len(artist) > max_length:\n            max_length = len(artist)\n            longest_artist = artist\n    return longest_artist\n```"
  },
  {
    "id": 1222,
    "db_id": "art_1",
    "question": "What is the age of the artist who had the shortest life?",
    "answer": "\n I was recently asked this question in a job interview, and my response was: Who knows? There is no definitive answer to this question. However, I can provide some interesting insights based on some historical events.\n\n In the 1800s and early 1900s, some of the most influential artists of their time were quite old. For example, Edvard Munch (born in 1867) was 75 years old"
  },
  {
    "id": 1223,
    "db_id": "art_1",
    "question": "How old is the artist who lived the shortest life?",
    "answer": "\n It was reported in 2013 that the artist known as Banksy had died on March 7, 2018. His real name was Robin Gunning-Hart; he used his stage name to protect his family from public scrutiny and criticism.\nHow much is a lifetime achievement award worth? The value of the lifetime achievement award varies but one estimate suggests it is approximately $5 million. The Lifetime Achievement Award was"
  },
  {
    "id": 1224,
    "db_id": "art_1",
    "question": "What are the first name and age of the artist who had the longest life?",
    "answer": "\n A) Miles Davis (83 years old) B) Jimi Hendrix (17 days old) C) Miaow (0.5 years old) D) Paul McCartney (95 years old)\nA) Miles Davis (83 years old)"
  },
  {
    "id": 1225,
    "db_id": "art_1",
    "question": "What is the first name and age of the artist who lived the longest?",
    "answer": "\n  public static void main(String[] args) {\n # Create a new artist with name \"King\" and age 50.\n    Artist king = new Artist(\"King\", 50);\n    # Print the artist's info to the console.\n    System.out.println(king.getInfo());"
  },
  {
    "id": 1226,
    "db_id": "art_1",
    "question": "How many paintings are exhibited at gallery 240?",
    "answer": "\n It\u2019s not just the artwork that you can see here. We also display a collection of historic and modern-day photographs, which are sure to fascinate and delight visitors with their vibrant colors and unique perspectives.\nA photography exhibition comprises a selection of images that have been shot by professional photographers with their cameras. The pictures they produce are displayed here. They include all sorts of views, from the beauty of nature to the gritty real"
  },
  {
    "id": 1227,
    "db_id": "art_1",
    "question": "What is the total number of paintings exhibited in gallery 240?",
    "answer": "\n It depends. I don't know exactly, but I would guess it's a bit more than 500. But that's just an estimate.\n\nAnswer: Let's assume $500$ is the average number of paintings, and $1000$ is the total number of paintings in the gallery. Then the proportion of paintings from each artist would be: $$(1000 - 500) / "
  },
  {
    "id": 1228,
    "db_id": "art_1",
    "question": "How many paintings did the artist with the longest life make ?",
    "answer": "\n You may answer any of the following questions. (1) Which artist's life was the longest? (2) How long was that artist's life? (3) What were the other artists whose lives were longer than his?"
  },
  {
    "id": 1229,
    "db_id": "art_1",
    "question": "What is the painting count of the artist with the longest life ?",
    "answer": "\n  \\item Who is the artist with the shortest life?\n \" ) do |q|\n    q.longest_life = 'Jesus'\n    q.shortest_life = 'Mary Magdalene'\n    return q;\n  end\nend"
  },
  {
    "id": 1230,
    "db_id": "art_1",
    "question": "Give me a list of names and years of paintings that were created by the artist whose first name is Mary.",
    "answer": " \n   AND whose last name is Vanos.  */"
  },
  {
    "id": 1231,
    "db_id": "art_1",
    "question": "What is the name and year of each painting created by the artist whose first name is Mary?",
    "answer": "\n  SELECT p.title, to_char(p.created_at, 'YYYY') AS year FROM mary_m_paintings p;"
  },
  {
    "id": 1232,
    "db_id": "art_1",
    "question": "What are the widths of the paintings that were created by the artist who was born before 1850?",
    "answer": "\n I do not know how to write a query in SQL to do this.\n I am just starting to learn SQL. Please help me.\n SELECT p.width FROM Painting p WHERE p.artist_born_before_1850 IS TRUE ORDER BY p.width NULLS LAST;"
  },
  {
    "id": 1233,
    "db_id": "art_1",
    "question": "How wide were the paintings by the artist who was born prior to 1850?",
    "answer": "\n C. Gude, A. (2016) The History of British Painting, Volume 2: The Late Nineteenth Century. London: Duckworth.\n43. Does this painting have a large proportion of blotches or damage in the form of pink spots on the surface? If it is a watercolour, will it be more or less damaged if hung sideways than if it was painted sideways? If it is an"
  },
  {
    "id": 1234,
    "db_id": "art_1",
    "question": "What are the location and medium type of paintings that are created by the artist whose first name is Pablo?",
    "answer": "\n The statement 'Pablo's paintings are mainly done in oil on canvas' could be rephrased as:\n Inventories of paintings created by the artist whose first name is Pablo are mostly produced in oil on canvas."
  },
  {
    "id": 1235,
    "db_id": "art_1",
    "question": "In what locations and on what mediums are the paintings created by the artist with the first name Pablo?",
    "answer": "\n I do not know of any artists with the first name Pablo, but there are plenty of other artists who have paintings in museums and galleries.\n\nAnswer: There are several artists whose first names are Pablo. Here are a few examples: Pablo Picasso (1881-1973), Pablo Kacs (1856-1927), and Pablo Yvars Soler (1870-1940)."
  },
  {
    "id": 1236,
    "db_id": "art_1",
    "question": "Find the first and last names of the artists who have both works of paintings and sculptures?",
    "answer": "\n The list of artists is:\n \n- Caravaggio\n- Michelangelo Buonarroti (Caravaggio's father)\n- Bernini\n- Titian\n- Raphael\n- Rubens\n- Van Dyck\n\n I hope you find this information helpful."
  },
  {
    "id": 1237,
    "db_id": "art_1",
    "question": "Give the full names of artists who have created paintings and sculptures.",
    "answer": " A number of other artists, including those whose work you might not be familiar with, also have paintings and sculptures that can be viewed in person at the museum.\nThe museum is open from 9:30 a.m. to 5:30 p.m. Monday through Saturday. On Sundays and holidays the museum is open from 9:30 a.m. to 6:00 p.m.\nFor more information, visit"
  },
  {
    "id": 1238,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?",
    "answer": "\n FEBRUARY 15, 2009 - A GREAT EXHIBITION AND MAGNIFICENT VENUE: The exhibition of \u201cOil and Lithographs\u201d is currently on view at the Brooklyn Museum through February 23. The museum is open to visitors from Tuesday to Sunday, with special consideration for those with mobility issues. More information and admission tickets are available here.\nMARCH "
  },
  {
    "id": 1239,
    "db_id": "art_1",
    "question": "What are the first and last names of artists who have painted using both oil and lithographic mediums?",
    "answer": "\n One way to find out is to look at their websites. If you're using a name like \"Litro Painting\" or \"Oil Painting,\" it may be time to move on to the next artist in the list. Often, an artist will use one medium exclusively. That means that the names listed next to each other are not both oil and lithographic artists.\n2) Listen to their website's tone. If a website is"
  },
  {
    "id": 1240,
    "db_id": "art_1",
    "question": "What is the birth year of the artist who created a painting in 1884 that is on canvas?",
    "answer": "\n The birth year of the artist who created a painting in 1884 that is on canvas.\n What is the birth year of the artist who created a painting in 1884 that is on canvas."
  },
  {
    "id": 1241,
    "db_id": "art_1",
    "question": "In what year was the artist who created a painting in 1884 born?",
    "answer": "\",\n #\"What year was the artist who painted 'The Starry Night' born?\"},\n C{\"Which city did Vincent van Gogh live in before moving to Auvers-le-Ryesse?\"} ]"
  },
  {
    "id": 1242,
    "db_id": "art_1",
    "question": "What are the unique first names of the artists who had medium oil paintings located in gallery 241?",
    "answer": "\n  a. Bridget, Cynthia, and Denise.\n\n  SELECT DISTINCT artist_first_name FROM MEDIUM_OIL_PAINTINGS mop WHERE mop.GALLERY_NUMBER = 241;"
  },
  {
    "id": 1243,
    "db_id": "art_1",
    "question": "What are first names of the artists with oil paintings in gallery 241?",
    "answer": "\n Posted By: johnny on Thu, 17 Feb 2011 13:58 GMT\n A long time ago I was a member of the gallery owner's artist group. When I left the group a few years back I found myself no longer having access to any of the first names. Is there a way to get that information? I still have my old user name. Do you know how I can recover the first names?\nRe"
  },
  {
    "id": 1244,
    "db_id": "art_1",
    "question": "What are the numbers of works for different medium type?",
    "answer": "\n  const auto& work_counts = ctx.get<WorkCounts>(\"work_counts\");\n  for (const auto& count : work_counts) {\n    os << std::setw(5) << std::left << getMediumName(count.first) << \": \" << std::setw(5) << count.second << std::endl;\n  }\n}"
  },
  {
    "id": 1245,
    "db_id": "art_1",
    "question": "How many works are there in each medium?",
    "answer": "\n C) For a given medium, how many types of works are there?\n  D) For a given medium and type of work, how many distinct artists are there?\n\n\nI have already solved this problem for the first three questions. But I'm stumped on the last question. Here's what I've tried:\n\n SELECT mt.medium_id, COUNT(DISTINCT t.type_name) AS num_types FROM medium_"
  },
  {
    "id": 1246,
    "db_id": "art_1",
    "question": "What are the average height of paintings for different medium types?",
    "answer": "\n This question was asked by a user: How can I find out what the average painting size is for various artistic mediums, such as oil, acrylic, or watercolor.\nThe artist's answer was: To get an average size, you could check out the sizes of paintings in different art galleries and museums, but it would be difficult to find a single \"average\" painting size that is representative of all types of mediums. The size of a"
  },
  {
    "id": 1247,
    "db_id": "art_1",
    "question": "What is the average height of paintings for different medium types?",
    "answer": "\n Painting sizes vary greatly depending on the size of the room, and the intended use.\nMedium size painting Medium height (inches)\nSmall 12 \u00d7 16 5 7/8\nLarge 18 \u00d7 24 7 3/8"
  },
  {
    "id": 1248,
    "db_id": "art_1",
    "question": "What are the numbers of paintings created before 1900 in different places?",
    "answer": "\n Home > Collections > Countries > United States > Places > California > Cities and Regions > Los Angeles > Artists\n A-Z > Painters > S > Thomas Stielowsky."
  },
  {
    "id": 1249,
    "db_id": "art_1",
    "question": "How many paintings were created before 1900 in different locations?",
    "answer": "\n My father-in-law was a collector of old postcards and I can tell you that the more common theme among these items is not the artwork itself, but rather the artist\u2019s signature. But that\u2019s only for the most part: sometimes, when there is no artist\u2019s name to go by, a random drawing would be signed \u201cR. S.\u201d or \u201cD. H.\u201d The factories did not have artists on staff who could sign their names; they"
  },
  {
    "id": 1250,
    "db_id": "art_1",
    "question": "What are the titles of paintings that are created after 1910 and whose medium is oil?",
    "answer": "\n C) Give a list of all the artists whose work is in the National Gallery, London."
  },
  {
    "id": 1251,
    "db_id": "art_1",
    "question": "Give the names of all oil paintings created after 1910.",
    "answer": " A 400-page book with a list of over 3,500 works, with many images and a short description of each painting.\n* Oil Paintings by Monet: 75 of the most famous oil paintings of Claude Monet, the father of modern art. Many reproductions and high resolution scans of these paintings.\n* Oil Paintings Online: The best oil paintings available online in a variety of sizes and formats"
  },
  {
    "id": 1252,
    "db_id": "art_1",
    "question": "Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?",
    "answer": "\n Paintings in this exhibition are identified by a unique id that is given to all the works on this exhibition. For example, painting 1 has an id of 1.\n */\nfunction findPaintersWithMediumOilPaintingsAtGallery(galleryNumber) {\n    const results = [];\n    const query = ` SELECT DISTINCT p.painter_id FROM exhibit e JOIN exhibition_program ep ON e.exhibit_"
  },
  {
    "id": 1253,
    "db_id": "art_1",
    "question": "What is the unique id of every painter who had a medium oil painting displayed at gallery 240?",
    "answer": "\n In addition, you need to know the artist\u2019s name, the date of their birth, and their gender. If possible, provide a link to an image of their work.\n```"
  },
  {
    "id": 1254,
    "db_id": "art_1",
    "question": "Find the distinct titles of all the paintings that have a longer height than some painting on canvas?",
    "answer": "\n  SELECT DISTINCT p.title FROM Painting p WHERE p.height > (SELECT MAX(p2.height) FROM Painting p2 WHERE EXISTS (SELECT 1 FROM Canvas));"
  },
  {
    "id": 1255,
    "db_id": "art_1",
    "question": "What are the distinct titles of every painting that has a greater height than some painting on canvas?",
    "answer": "\n  SELECT DISTINCT p.title FROM Painting p WHERE p.height > (SELECT AVG(p2.height) FROM Painting p2);"
  },
  {
    "id": 1256,
    "db_id": "art_1",
    "question": "Find the distinct ids of all paintings that are older than some painting at location gallery 240.",
    "answer": " \"250\"\n\n SELECT p.id FROM Paintings p JOIN Locations l ON p.location_id = l.id WHERE CAST(l.gallery_number AS text) < '250' ORDER BY p.id NULLS LAST;"
  },
  {
    "id": 1257,
    "db_id": "art_1",
    "question": "What are the distinct ids of every painting that is older than some painting in gallery 240?",
    "answer": "\n The list returned should not include any duplicates.\n SELECT DISTINCT p.id FROM painting p WHERE p.creation_date < (SELECT MAX(p2.creation_date) FROM painting p2 WHERE p2.gallery = 240);"
  },
  {
    "id": 1258,
    "db_id": "art_1",
    "question": "Find the id of the oldest painting.",
    "answer": "  */\n        int oldest_painting_id = get_oldest_painting(db);\n\n        /* Get the painting with the oldest id.  */\n        Painting painting = get_painting_by_id(oldest_painting_id, db);\n\n        if (painting == NULL) {\n            fprintf(stderr, \"get_oldest_painting() returned a NULL value"
  },
  {
    "id": 1259,
    "db_id": "art_1",
    "question": "What is the id of the oldest painting?",
    "answer": "\n The first picture was painted in 1465, by an artist named Jean Fouquet.\n It's called \"Gentleman with a Mask\".\n What color is the sky in \"The Scream\"?\n In the movie \"The Scream\", the color of the sky is blue."
  },
  {
    "id": 1260,
    "db_id": "art_1",
    "question": "What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?",
    "answer": "\n  var name = \"\";\n  for (var i = 0; i < artists.length; i++) {\n    if (artists[i].name.toLowerCase().indexOf('female') > -1) {\n      name = artists[i].name;\n      break;\n    }\n  }\n  return name;\n}"
  },
  {
    "id": 1261,
    "db_id": "art_1",
    "question": "What is the full name of the artist with a sculpture whose title includes the word \"female\"?",
    "answer": "\n The following method should return an array of artists with their full name:\n  Sculptor.where(\"title ilike '%female%'\").pluck(:full_name)\n"
  },
  {
    "id": 1262,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings in alphabetical order.",
    "answer": " \n# Example: \n#   Input: [\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]\n#   Output: [\"a\", \"b\", \"c\"] \n# Hint: use a set (or a Counter) to get all unique elements. Iterate over the input array and add each element to the set (or the count of the element in the set). Then, iterate over the elements of the set (or the"
  },
  {
    "id": 1263,
    "db_id": "art_1",
    "question": "What is the name of every distinct painting in alphabetical order?",
    "answer": "\n The order in which the paintings are listed will be randomized.\n */\n- (NSArray *)allPaintings;\n\n/** Returns all paintings in a random order, with no duplicates. If you want to add new paintings or change existing ones, call savePainting: beforehand and then call reloadAllData. */\n- (NSArray *)randomOrderWithNoDuplicates;\n@end"
  },
  {
    "id": 1264,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings ordered by length.",
    "answer": " \n *\n * @param {Array} list - The list to order. \n */\nfunction orderPaintingNames(list) {\n    return list.sort((a, b) => b.length - a.length);\n};"
  },
  {
    "id": 1265,
    "db_id": "art_1",
    "question": "List the names of all distinct paintings from shortest to longest in height.",
    "answer": " \n * (for example, a painting with 5 cm in height will be placed before a painting with 10 cm in height) \n * The list should be sorted in alphabetical order by the first letter of the painting's title (alphabetical) and then by the last name of the author (alphabetical), or vice versa.\n * If the first/last name of an author is empty, the corresponding entry must not be considered when sorting.\n"
  },
  {
    "id": 1266,
    "db_id": "art_1",
    "question": "What are the names of both paintings and sculptures created between 1900 and 1950?",
    "answer": "\n B) The artists who created these paintings and sculptures. C) Where do these artists come from? D) Who are some of the most famous artists from this time period? A) What did they have in common?"
  },
  {
    "id": 1267,
    "db_id": "art_1",
    "question": "What are the names of  paintings and scupltures created between 1900 and 1950?",
    "answer": "\n Homework help with this question.\n\n\\begin{code}\n SELECT DISTINCT p.title FROM Painting p WHERE EXTRACT(YEAR FROM p.creation_date) BETWEEN 1900 AND 1950;"
  },
  {
    "id": 1268,
    "db_id": "art_1",
    "question": "Find the titles of paintings and sculpture works made by the artist whose id is 222?",
    "answer": "\n A query for a list of all the paintings and sculpture works made by this artist would be:\n PaintingsAndSculptures.find_by_artist(222)"
  },
  {
    "id": 1269,
    "db_id": "art_1",
    "question": "What are the titles of all paintings and sculpture works made by the artist whose id is 222?",
    "answer": "\n ASSIGNMENT: SELECT p.title FROM painting p JOIN artist_painting a ON CAST(p.id AS TEXT) = a.artist_id WHERE a.artist_id = '222';"
  },
  {
    "id": 1270,
    "db_id": "art_1",
    "question": "What is the id of the artist who has the highest number of painting works before 1900?",
    "answer": "\n A. Caravaggio\n B. Rembrandt\n C. Titian (Titian's artwork was created between 1533 and 1572)\n D. Canova"
  },
  {
    "id": 1271,
    "db_id": "art_1",
    "question": "What is the id of the artist with the most paintings before 1900?",
    "answer": "\n Tags: artists, art, artwork, auction, painting, artist, exhibit\n You may also be interested in these: Artist, artwork, auction, painting, artist, exhibit, art, artwork, auction, exhibition"
  },
  {
    "id": 1272,
    "db_id": "art_1",
    "question": "What is the first name of the artist who has the highest number of sculptures?",
    "answer": "\n  This task should be done using a single SQL SELECT statement.\n*/\nSELECT MAX(sculptor_count) AS max_sculptors FROM (SELECT COUNT(DISTINCT sculpture_id) AS sculptor_count FROM sculptures JOIN artists ON sculptures.artist_id = artists.id GROUP BY artists.id) AS subquery;"
  },
  {
    "id": 1273,
    "db_id": "art_1",
    "question": "What is the first name of the sculptor with the greatest number of works?",
    "answer": "\n  */\n  public static String sculptorWithMostWorks(List<Sculpture> sculptures) {\n    return sculptures.stream()\n        .sorted((s1, s2) -> s1.sculptorsName().compareTo(s2.sculptorsName()))\n        .reduce(sculptures.get(0))\n        .get()\n        .sculptorsName();\n  }\n}"
  },
  {
    "id": 1274,
    "db_id": "art_1",
    "question": "What are the names of paintings whose width is less than 600 or height is larger than 800?",
    "answer": "\n The problem has been solved by using a combination of the `select` statement and an `and` expression. The query will return the name of the painting, its width, and its height.\n ```sql SELECT p.name, p.width, p.height FROM Paintings p WHERE (p.width < 600 AND p.height > 800) ORDER BY p.width NULLS LAST;"
  },
  {
    "id": 1275,
    "db_id": "art_1",
    "question": "What are the titles of paintings that have a width less than 600 or a height taller taller than 800?",
    "answer": "\n 'A', 'B', 'C' respectively.\n\n\\begin{code}\n SELECT CASE WHEN p.width < 600 OR p.height > 800 THEN 'A' WHEN p.width < 400 OR p.height > 700 THEN 'B' ELSE 'C' END AS title FROM paintings p;"
  },
  {
    "id": 1276,
    "db_id": "art_1",
    "question": "Which locations have paintings created before 1885 or after 1930?",
    "answer": "\n On a scale of 1 to 5, how much would you rate the condition of your paintings? 5 = best condition, 1 = worst condition.\nHow many artists do you feel are too old-fashioned for modern art, and how many artists do you feel are too new-fashioned? How will they be treated in this exhibition, compared to those you prefer?\nI would love to see a variety of styles in the exhibition, but I don"
  },
  {
    "id": 1277,
    "db_id": "art_1",
    "question": "What locations have works painted before 1885 or after 1930?",
    "answer": "\n Whenever a location is painted, it will be added to this list. If there are no dates on the location's painting history, it will be listed as \"Unknown.\"\nPainting of locations done between 1885 and 1930 will be marked with a dagger (\u2022) after the date, for example: \u2022 1924. Paintings of locations before 1885 will not be included in this list."
  },
  {
    "id": 1278,
    "db_id": "art_1",
    "question": "Find the ids of paintings whose height is bigger than 500 and less than 2000?",
    "answer": "\n The ids can be found in the array of paintings:\n  var paintings = [{id: 1, height: 300}, {id: 2, height: 501}, {id: 3, height: 750}, {id: 4, height: 1500}];\n\\end{blockquote}\n\nIn this case, the expected output is `[2]`."
  },
  {
    "id": 1279,
    "db_id": "art_1",
    "question": "What are the ids of paintings that are taller than 500 and shorter than 2000?",
    "answer": "\n 'select p.id from painting p where (p.height > 500 and p.height < 2000)';"
  },
  {
    "id": 1280,
    "db_id": "art_1",
    "question": "Which locations have paintings in the mediums of on panel and on canvas?",
    "answer": "\n My interest in painting has been a long time, I have had many friends who paint, I like to look at them. But when I am not doing anything else, I am an art enthusiast and I can appreciate the work of others. I enjoy it as much if I see it in a museum or online, but I am happy when someone makes a painting for me as well.\nIf I had to do one piece again, I would choose a still life with fruits and veget"
  },
  {
    "id": 1281,
    "db_id": "art_1",
    "question": "What are the locations that have paintings in the mediums of on panels and on canvas?",
    "answer": "\n \u201cGirl with a Painting\u201d is an exhibition that showcases 40 artworks from 27 artists. Each piece has been hand-picked by curators from around the world to make sure it\u2019s something truly unique and exciting for this year\u2019s event. This year, all of the pieces are either new or have never been exhibited in public before, but they\u2019ve all been featured in art magazines and online galleries.\nThe"
  },
  {
    "id": 1282,
    "db_id": "art_1",
    "question": "Find the locations that have paintings created before 1885 and after 1930?",
    "answer": "\n I.e. Find all the locations that contain a painting from before 1885, AND/OR after 1930.\n SELECT l.location_name FROM locations l JOIN paintings p ON l.location_id = CAST(p.location_id AS VARCHAR) WHERE (p.painting_date < '1885-01-01' OR p.painting_date > '1930-"
  },
  {
    "id": 1283,
    "db_id": "art_1",
    "question": "What are the locations that have works painted before 1885 and after 1930?",
    "answer": "\n By my understanding, these two dates should be considered as cutoffs for artwork of a specific type (in this case, oil painting). So I am looking for artworks that were created before 1885 but not necessarily in the period 1880-1884, and likewise for artworks after 1930 but not in the period 1926-1930.\n\nAnswer: You can use a combination of"
  },
  {
    "id": 1284,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings that are oil medium in the place of gallery 241?",
    "answer": "\n C:\\Users\\Acer\\Desktop\\art.txt\" is not a correct format.\nThe program can only handle png, jpg and bmp files.\n\nWhat do you think? Can I use the paintings from the website on the gallery with these extensions?"
  },
  {
    "id": 1285,
    "db_id": "art_1",
    "question": "What is the average height and width of paintings that are oil medium in gallery 241?",
    "answer": "\n Include both the average height and average width in a single output.\n SELECT 'Average Height' = AVG(p.height), 'Average Width' = AVG(p.width) FROM paintings p WHERE p.gallery = 241;"
  },
  {
    "id": 1286,
    "db_id": "art_1",
    "question": "What are the maximum height and id of paintings painted before 1900?",
    "answer": "\n MONTH: January, FEED_DATE: 2019-01-01, START_DATE: 1899-12-31, END_DATE: 1900-12-31, HEIGHT: 554.77 inches\nMAXIMUM_HEIGHT = 554.77 * 0.95 # for the height of the painting to be considered"
  },
  {
    "id": 1287,
    "db_id": "art_1",
    "question": "What is the height and id of the tallest painting created before 1900?",
    "answer": "\n Painter: Frans Hals, id: 1254967\n N/A. There is no information about the painting's height in the database.\n\"\"\"\n@app.route(\"/api/paintings\", methods=[\"GET\"])\ndef get_all_paintings():\n    return jsonify(paintings)\n"
  },
  {
    "id": 1288,
    "db_id": "art_1",
    "question": "What are the maximum height and width of paintings for each year?",
    "answer": "\n  SELECT YEAR, MAX(WIDTH) AS max_width, MAX(HEIGHT) AS max_height FROM paintings GROUP BY YEAR;"
  },
  {
    "id": 1289,
    "db_id": "art_1",
    "question": "What are largest height and width dimensions for paintings in each year?",
    "answer": "\n  I know I can do this with a single query, but is there a more efficient way to get the answer?\n  My current method is:\n\n\\begin{code}\n SELECT MIN(p.height) AS min_height FROM Painting p WHERE EXTRACT(YEAR FROM p.creation_date) = 2015; SELECT MIN(p.width) AS min_width FROM Painting p WHERE EXT"
  },
  {
    "id": 1290,
    "db_id": "art_1",
    "question": "What are the average height and width of paintings grouped by painters and ordered by name?",
    "answer": "\n  SELECT p.painter, AVG(p.height) AS average_height, COUNT(DISTINCT p.id) AS number_of_paintings FROM Paintings p GROUP BY p.painter ORDER BY average_height DESC NULLS LAST;"
  },
  {
    "id": 1291,
    "db_id": "art_1",
    "question": "Find the average height and width of paintings grouped by painters and ordered by name",
    "answer": ". \n    SELECT p.painter_name, AVG(p.height) AS average_height, AVG(p.width) AS average_width FROM paintings p GROUP BY p.painter_name ORDER BY p.painter_name NULLS LAST;"
  },
  {
    "id": 1292,
    "db_id": "art_1",
    "question": "Find the first names and number of works of all artists who have at least two paintings?",
    "answer": "\n  SELECT a.\"first name\", COUNT(DISTINCT p.work_id) AS num_works FROM artist a JOIN artist_paintings ap ON a.artist_id = ap.ar_id JOIN paintings p ON ap.p_id = p.p_id GROUP BY a.\"first name\" HAVING COUNT(DISTINCT p.work_id) >= 2;"
  },
  {
    "id": 1293,
    "db_id": "art_1",
    "question": "What are the first names of all artists who have at least two paintings, and how many works did each create?",
    "answer": "\n  SELECT a.\"first name\", COUNT(DISTINCT a.id) AS number_of_works FROM artist a JOIN painting p ON a.id = p.artist_id GROUP BY a.\"first name\" HAVING COUNT(p.id) >= 2 ORDER BY number_of_works DESC NULLS LAST;"
  },
  {
    "id": 1294,
    "db_id": "art_1",
    "question": "Find the death year of all artists who have at most 3 paintings?",
    "answer": "\n #\nquery_1 = \" SELECT a.\"ArtistId\", a.\"ArtistFirstName\", a.\"ArtistLastName\", COUNT(p.\"PaintingId\") AS PaintingsCount FROM ARTIST a JOIN PAINTING p ON a.\"ArtistId\" = p.\"ArtistId\" GROUP BY a.\"ArtistId\", a.\"ArtistFirstName\", a.\"ArtistLastName\" HAVING COUNT(p.\"PaintingId\") <="
  },
  {
    "id": 1295,
    "db_id": "art_1",
    "question": "When did each artist who created less than 4 paintings die ?",
    "answer": "\n Mick Hockney died in 2018 at the age of 77."
  },
  {
    "id": 1296,
    "db_id": "art_1",
    "question": "Find the death year of the artist who made the least number of sculptures?",
    "answer": "\n  - Artist: Frida Kahloe\n I found a list with the years and number of sculptures made by each artist.\n    - https://en.wikipedia.org/wiki/List_of_artists_by_number_of_sculptures_in_public_collections\n  - Then looked up the artist who made the most sculptures."
  },
  {
    "id": 1297,
    "db_id": "art_1",
    "question": "When did the artist who made the fewest sculptures die?",
    "answer": "\n On April 28, 1964, 150-year-old American sculptor, Thomas Ball, died. He is still remembered for his iconic work, a sculpture he called \"The Lady with the Flower in Her Hair.\"\nHow many people did it take to make the first successful catamaran? In 1967, only six people worked together to design and build the first successful catamaran. They were: John"
  },
  {
    "id": 1298,
    "db_id": "art_1",
    "question": "What are the id and height of the painting with the longest width in gallery 240?",
    "answer": "\n [dave@daveslaptop]$ psql -t -c \"SELECT MAX(p.width) AS max_width, p.id FROM paintings p WHERE p.gallery_id = 240\"\n 7680  317775\n\\end{code}"
  },
  {
    "id": 1299,
    "db_id": "art_1",
    "question": "Tell me the height and id number of the widest painting in gallery 240.",
    "answer": " The number should be output to the console.\ndef max_painting(gallery_number, width):\n    return f\"The maximum painting is {width} inches wide (Gallery number: {gallery_number})\"\n\\end{code}"
  },
  {
    "id": 1300,
    "db_id": "art_1",
    "question": "What are the ids of the paintings created before all of the paintings in gallery 240?",
    "answer": "\n Paintings in gallery 240 with an id lower than 11739.\n\\end{blockquote}\n\nI am trying to write a query that gives me the id's of the paintings that are created before 11739.\n\nSo far I have:\n\n\\begin{code}\n SELECT p.id FROM paintings p WHERE p.id < 11739;"
  },
  {
    "id": 1301,
    "db_id": "art_1",
    "question": "What is the id of every painting created before the oldest painting in gallery 240?",
    "answer": "\n Tags: Art, art-gallery, art-history, art-theory, art-movements, art-periods, art-styles, art-techniques, artists, artist, art-education, art-exhibition, art-fair, art-dealers, art-merchandising, art-marketing, art-research, art-theorists, art-criticism, art-analysis, art-"
  },
  {
    "id": 1302,
    "db_id": "art_1",
    "question": "What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?",
    "answer": "\n 'p' is a list of all paintings.\n# Assume that p.length <= 5000.\n\ndef get_ids(p):\n    ids = []\n    for painting in p:\n        if painting['height'] > max(p[p.index(p)+1:].height, p[p.index(p)+1:].creation_year) then ids.append(painting['id'])\n    return"
  },
  {
    "id": 1303,
    "db_id": "art_1",
    "question": "List the ids of all paintings that are taller than the longest painting created after 1900.",
    "answer": " \"\n                   + \"in a list in ascending order.\"));\n        }\n        catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n}"
  },
  {
    "id": 1304,
    "db_id": "art_1",
    "question": "Find the top 3 artists who have the biggest number of painting works whose medium is oil?",
    "answer": "\n Posted 7 years ago in Art and Entertainment, Music & Film, Photography, Top Stories\n What is it about this time of year that makes people so passionate about Oil Painting? I\u2019m going to guess it has to do with the holiday season. It seems like there\u2019s a painting to hang in every room in every house where you go to visit someone. In fact, all you need is a paint can and some brushes to create"
  },
  {
    "id": 1305,
    "db_id": "art_1",
    "question": "Which artists have the most paintings in oil?",
    "answer": "\n On 30 March 2015, I spoke with the art world's most-known painter, Jackson Pollock. He told me that he had painted over 800 canvasses. He was so proud of his creations and often carried them around the country with him as if they were his children. In fact, he did have three children who lived with their mother in the artist's home.\nIt is also said that Pollock had a"
  },
  {
    "id": 1306,
    "db_id": "art_1",
    "question": "List the painting id, location and title of the medium oil paintings ordered by year.",
    "answer": " 1987, in a specific order\n5. The number of oil paintings, by year 1987, created by artists with last name starting with 'M', in a specific order;\n6. All the titles of the medium oil paintings, created by artists with first name 'Peter' and last name starting with 'L', in a specific order;"
  },
  {
    "id": 1307,
    "db_id": "art_1",
    "question": "Order all of the oil paintings by date of creation and list their ids, locations, and titles.",
    "answer": " \n// In case of a tie, order alphabetically by title.\n// Only return paintings created before a certain date (2015-01-01).\n// Paintings can be in any location.\n// Titles can be anything.\n// Paintings without titles are listed as \"Untitled\".\n// The listings should be ordered like this:\n// 1476817029, 14"
  },
  {
    "id": 1308,
    "db_id": "art_1",
    "question": "List the year, location and title of paintings whose height is longer than 1000 ordered by title.",
    "answer": " \" ASC \" and date_created DESC LIMIT 10;"
  },
  {
    "id": 1309,
    "db_id": "art_1",
    "question": "List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.",
    "answer": " \"SELECT p.year, p.location, p.name FROM Painting p WHERE EXTRACT(INCH FROM p.height) > 1000 ORDER BY p.year ASC, p.location ASC, p.name ASC\";"
  },
  {
    "id": 1310,
    "db_id": "art_1",
    "question": "Find the first and last name of artists who have painting but no sculpture work.",
    "answer": " \n```javascript\n SELECT a.\"first name\", a.\"last name\" FROM artists a JOIN artist_paintings ap ON a.id = ap.artist_id LEFT JOIN artist_sculptures AS AS ON a.id = AS.artist_id WHERE AS.artist_id IS NULL;"
  },
  {
    "id": 1311,
    "db_id": "art_1",
    "question": "What are the first and last names of the artists who did not sculpt but could paint.",
    "answer": "  I do have a list of the artists who sculpted, so I'm only looking for the last name.\n\nI can use `awk` to get the last name from every line:\n\n\\begin{code}\nawk '{print $1}' FS='\"' file\n\\end{code}\n\nI need to do this in a list comprehension so that I can put them in an array.  How would I go about doing this?\n\n"
  },
  {
    "id": 1312,
    "db_id": "art_1",
    "question": "Find the locations that have paintings before 1885 and no work with medium on canvas?",
    "answer": "\n Mapping it out to a list of the cities where these things are located. The city-painting relationship is not symmetrical, so we might find more than one painting in some cities, and more than one city for each painting.\n    # Paintings before 1885 and no work with medium on canvas; those that don't have the word \"canvas\" in their description; those where there is a painting but no place to display it (e."
  },
  {
    "id": 1313,
    "db_id": "art_1",
    "question": "Where do you have paintings that were created before 1885 that are not on canvas?",
    "answer": "\n Category: History of Art, Paintings Tags: art history, canvas, history of painting, non-canvas artworks, painting techniques, pre-1885, pre-19th century painting\n A few months ago I was in an art museum (I can't remember which one) when I saw a painting. It was not on canvas, it was on wood. In fact, I believe that's the only time I ever saw a non-canvas painting"
  },
  {
    "id": 1314,
    "db_id": "car_road_race",
    "question": "How many races are there?",
    "answer": "\n Whenever you get a new race, make sure to add the new race to your list in the configuration file. You can do this by adding a line like this:\n\n    ```\n    RaceNameHere:\n      class_name: \"MyRace\"\n      config:\n        # Configurations for the race...\n    ```\n\n## Contributing to this project\n\nBefore contributing code, please read our [CONTRIBUTING.md"
  },
  {
    "id": 1315,
    "db_id": "car_road_race",
    "question": "Count the number of races.",
    "answer": "  This will ensure that we don't accidentally miss any and can catch them all.\n        let num_races = race_list.len();\n        for i in (0..num_races).rev() {\n            let (_, _, result) = race_list[i].0.join().unwrap();\n            if result != 200 {\n                return;\n            }\n        }\n\n        // All races have completed successfully,"
  },
  {
    "id": 1316,
    "db_id": "car_road_race",
    "question": "List the winning drivers and winning teams of races in ascending alphabetical order of winning team.",
    "answer": " \n *  names.\n */\npublic class RaceResults implements Comparable<RaceResults> {\n\tprivate String driver;\n\tprivate String team;\n\tprivate int numberOfWins;\n\n\tpublic RaceResults(String driver, String team) {\n\t\tthis.driver = driver;\n\t\tthis.team = team;\n\t\tthis.numberOfWins = 0;\n\t}\n\n\tpublic void addWin() {"
  },
  {
    "id": 1317,
    "db_id": "car_road_race",
    "question": "What are the winning drivers and teams of races, ordered alphabetically by team?",
    "answer": "\n 1. 2019: Kyle Larock (BAR), Audi R8 LMS (DHL)\n 2. 2019: Lance Stroll (RS CRE, TEXAS), Toyota GRB HYBRID (TOSHIO, SATSUKO).\n 3. 2019: Pierre-Louis Weiss, Citroen XPS WRC (CITROEN)"
  },
  {
    "id": 1318,
    "db_id": "car_road_race",
    "question": "Which winning drivers of races had pole position that is not \"Junior Strous\"?",
    "answer": "\n What should the answer be?\n The correct answer is: Junior Strous. \n The only car with pole position in this race was the Junior Strous, so it is the answer."
  },
  {
    "id": 1319,
    "db_id": "car_road_race",
    "question": "Return the winning drivers of races who did not have the pole position of Junior Strous.",
    "answer": " 7. Sven Eriksson, Sweden. He is the leader of the team JRD, a Swedish rally team. In 2015 he won the Rally Argentina, and the RX3, in 2016, the RX2, and in 2018 the RX4 and RX5.\n9. Marcus Combroutz\u00e9, Belgium. He is a member of the team M-Sport, a"
  },
  {
    "id": 1320,
    "db_id": "car_road_race",
    "question": "Who are the constructors of drivers sorted by drivers' age in ascending order?",
    "answer": "\n  // Expected output:\n  [ 'Dave', 'Eric' ]\n  */\n  public static List<String> getDriversByAge(List<Driver> driverList) {\n    return driverList.stream().sorted(Comparator.comparingInt(d -> d.getAge()))\n                   .map(d -> d.getName())\n                   .collect(Collectors.toList());\n  }"
  },
  {
    "id": 1321,
    "db_id": "car_road_race",
    "question": "Return the different constructors of drivers, ordered by age ascending.",
    "answer": " \n   * @return a list of all drivers, ordered from youngest to oldest. */\n  public List<Driver> getDriversAscendingAge() {\n    return this.drivers;\n  }\n}"
  },
  {
    "id": 1322,
    "db_id": "car_road_race",
    "question": "What are the distinct entrant types of drivers aged 20 or older?",
    "answer": "\n Drivers under the age of 21 who have an A1 license may not drive for hire, and must obtain a special permit. This is a unique case in that they do not qualify under any other criteria (such as age, car, etc.), but rather their license type alone makes them a non-entrant driver.\nWhat are the distinct categories of drivers? I think there are four: age over 20, underage, and foreigners.\n"
  },
  {
    "id": 1323,
    "db_id": "car_road_race",
    "question": "Give the different entrant types for drivers at least 20 years old.",
    "answer": " The A15360 is a good all-rounder, with a huge amount of power but also some decent handling.\nThe A15360 is a great all-rounder, with a huge amount of power but also some decent handling. In terms of power, it has more than any other car in the sub-$20,000 price range. But to get the best out of it, you'll need to drive like a maniac."
  },
  {
    "id": 1324,
    "db_id": "car_road_race",
    "question": "What are the maximum and minimum age of driver?",
    "answer": "\n 2. How many drivers have a higher education level than a certain threshold (i.e. higher than Bachelors)?\n 3. Which cities in the US have the most drivers with high education level?\n 4. What is the correlation between hours per day driven and miles driven?\n 5. What is the variance of hours per day driven?"
  },
  {
    "id": 1325,
    "db_id": "car_road_race",
    "question": "Return the maximum and minimum age across drivers.",
    "answer": " \n    \n    SELECT MAX(EXTRACT(YEAR FROM AGE(d))) AS max_age, MIN(EXTRACT(YEAR FROM AGE(d))) AS min_age FROM DRIVERS d;"
  },
  {
    "id": 1326,
    "db_id": "car_road_race",
    "question": "How many different engines are used by drivers with age older than 30 or younger than 20?",
    "answer": "\n C. The number of drivers who have a certain type of car (e.g. economy, sports, luxury) is known.\nD. The number of drivers who live in a particular geographic area (e.g. city, rural region) is unknown.\nE. The number of drivers who use a certain type of engine (e.g. petrol, diesel, hybrid) is known.\nF. The number of drivers who have a certain level"
  },
  {
    "id": 1327,
    "db_id": "car_road_race",
    "question": "Count the number of different engines used by drivers who had an age either over 30 or under 20.",
    "answer": " \"\n                + \"Also, count the number of drivers with age between 21 and 25.\";\n        String expected = \" SELECT SUM(CASE WHEN d.age >= 30 THEN 1 ELSE 0 END) AS over_30s, SUM(CASE WHEN d.age >= 20 THEN 1 ELSE 0 END) AS under_20s, COUNT(CASE WHEN EXTRACT(YEAR FROM AGE(d."
  },
  {
    "id": 1328,
    "db_id": "car_road_race",
    "question": "List all names of drivers in descending alphabetical order.",
    "answer": " \n//      var driverNames = drivers.OrderBy(x => x.DriverName, StringComparer.OrdinalIgnoreCase).ToList();\n//      return View(driverNames);"
  },
  {
    "id": 1329,
    "db_id": "car_road_race",
    "question": "What are the names of drivers, ordered descending alphabetically?",
    "answer": "\n  \\item The names of drivers, ordered ascending alphabetically.\n  \\item How many drivers are there?\n  \\item The name of the driver whose number on the table is a given number.\n  \\item The number of the driver whose name is a given string.\n  \\item Does the list contain the name of a given driver?\n  \\item Is the name of a driver in the list?\n  \\item All drivers with the same first letter"
  },
  {
    "id": 1330,
    "db_id": "car_road_race",
    "question": "Please show the names of drivers and the names of races they participate in.",
    "answer": "  I know this is possible with a subquery but I can't get it working.  Here is what I have so far:\n\n\\begin{code}\n SELECT d.name, r.race_name FROM drivers d JOIN race_drivers rd ON d.id = rd.driver_id JOIN races r ON rd.race_num = r.number;\n\\end{code}\n\nAnswer: I believe you're looking for a"
  },
  {
    "id": 1331,
    "db_id": "car_road_race",
    "question": "What are the names of drivers and the names of the races they took part in?",
    "answer": "\n A) Yes, I can do that. However, I must first have a database with this information to perform this query. If you don't have such a database, I can give you the general idea, but I cannot guarantee correctness."
  },
  {
    "id": 1332,
    "db_id": "car_road_race",
    "question": "Please show the names of drivers and the number of races they participate in.",
    "answer": " \n\"\"\"\nfrom collections import defaultdict, Counter\n\nclass DrivingData:\n    def __init__(self):\n        self.drivers = set()\n        self.races_per_driver = defaultdict(int)\n    def add_race(self, driver):\n        self.drivers.add(driver)\n        self.races_per_driver[driver] += 1\n        \n    def show_data"
  },
  {
    "id": 1333,
    "db_id": "car_road_race",
    "question": "How many races did each driver participate in?",
    "answer": "\n A) 50% of the population has 2-3 vehicles, and 40% have 4 or more.\n B) 75% of the population owns at least one car, but only 15% have multiple cars. C) 60% of the population drives at least one car.\n D) 80% of the population have more than one car. E) 90% of the population drive at least two cars"
  },
  {
    "id": 1334,
    "db_id": "car_road_race",
    "question": "Please show the age of the driver who participated in the most number of races.",
    "answer": " \nThe maximum age of a driver is 50 years.\nIf there's a tie for the most number of races, then all drivers with that number of races should be printed."
  },
  {
    "id": 1335,
    "db_id": "car_road_race",
    "question": "What is the age of the driver who raced in the most races?",
    "answer": "\n  (select max(age) from Drivers d) SELECT 'The age of the oldest driver is' || to_char(max(d.age), '9999') FROM Drivers d;"
  },
  {
    "id": 1336,
    "db_id": "car_road_race",
    "question": "Please show the names and ages of the drivers who participated in at least two races.",
    "answer": " 2. For each driver, show their name and age. 3. For all drivers with an age less than 21, show their name and age.\n\nAnswer: 1. SELECT d.name, COUNT(r.race_id) AS number_of_races FROM Drivers d JOIN Races r ON d.driver_id = r.driver_id GROUP BY d.name ORDER BY number_of_races DESC NULLS LAST"
  },
  {
    "id": 1337,
    "db_id": "car_road_race",
    "question": "What are the names and ages of drivers who raced in two or more races?",
    "answer": "\n  SELECT d.name, d.age FROM Drivers d JOIN RaceDrivers rd ON d.id = rd.driver_id GROUP BY d.name, d.age HAVING COUNT(rd.race_id) >= 2 ORDER BY d.name NULLS LAST;"
  },
  {
    "id": 1338,
    "db_id": "car_road_race",
    "question": "Please list the names of races with drivers aged 26 or older participating.",
    "answer": " \"\n                . \"in the event.\";\n        $result = array();\n        $stmt = $this->getEntityManager()->createQuery($query);\n        $result['total_count'] = $stmt->getSingleScalarResult();\n\n        $query = \" SELECT r.name, COUNT(r.name) AS count FROM Race r JOIN Driver d ON r.id = d.raceId WHERE EXTRACT(YEAR FROM age(d"
  },
  {
    "id": 1339,
    "db_id": "car_road_race",
    "question": "What are the names of races in which drivers 26 or older took part?",
    "answer": "\n MIRAGE: A race for people under 25.\nThe Grand Prix has a history dating back to 1907 and is one of the oldest motor sport events still being held in Europe. The Grand Prix was first organised by Louis Renault, who founded the Renault Motoring Company in 1898. Renault\u2019s company was originally set up as a vehicle manufacturing and repair company, but soon evolved into an auto racing team"
  },
  {
    "id": 1340,
    "db_id": "car_road_race",
    "question": "List the names of drivers whose constructor is not \"Bugatti\".",
    "answer": "\n  List<string> GetNamesOfDriversWithoutBugatti(List<Driver> drivers) => drivers.Where(d => d.Constructor != \"Bugatti\").Select(d => d.Name).ToList();\n}"
  },
  {
    "id": 1341,
    "db_id": "car_road_race",
    "question": "What are the names od drivers who did not have the constructor Bugatti?",
    "answer": "\n Cars and other vehicles that do not have the name Bugatti are called \"Anti-Bugattis\". The term Bugatti is used as a synonym for the name of the car, but with a negative connotation. It is not often used in an insulting way, however. For example, when a car that has no name Bugatti is said to have one."
  },
  {
    "id": 1342,
    "db_id": "car_road_race",
    "question": "List different constructors and the number of drivers that use each constructor.",
    "answer": " \n// as well as the total number of vehicles constructed. \n\nimport java.util.*;\n\npublic class CarConstructorCounter {\n    private static Map<String, Integer> carConstructors;\n    private static int totalCars = 0;\n    \n    public static void recordCarConstructor(String constructor, String driver) {\n        totalCars++;\n        \n        if (carConstructors == null) {\n            carConstructors"
  },
  {
    "id": 1343,
    "db_id": "car_road_race",
    "question": "How many drivers use each constructor?",
    "answer": "\n The new, high-performance Ford F-150 is available in only two body styles, the Lariat and the Bronco. Both trucks are powered by V8 engines and feature high-lift suspension for a comfortable ride on the road. The 6.2-liter EcoBoost engine pumps out 370 horsepower and 530 lb.-ft. of torque, and the Ford F-150 is"
  },
  {
    "id": 1344,
    "db_id": "car_road_race",
    "question": "List the most common type of engine used by drivers.",
    "answer": " 68% of all cars sold in the UK are petrol-powered and 15% are electric, but there are still many more petrol-powered cars on the road. The number one fuel type is also changing. In 2016 it was petrol, now it's diesel.\nGermany has a high number of diesel cars but with a lower proportion of them compared to other countries in Europe. It's still not clear"
  },
  {
    "id": 1345,
    "db_id": "car_road_race",
    "question": "What is the most common type of engine?",
    "answer": "\n Category: Motorcycle engines.\nWhat is the most common type of engine in the world?\nA) Gasoline-powered engine.\nB) Diesel-powered engine.\nC) Electric motor.\nD) Hybrid-electric motor."
  },
  {
    "id": 1346,
    "db_id": "car_road_race",
    "question": "List the types of engines that are used by at least two drivers.",
    "answer": " \n   (A) List all the different engines that are used in a car park.\n   (B) Which car park has the most unique engines?\n   (C) If there is one car parks with more than 50% of distinct engines, which car park is it?"
  },
  {
    "id": 1347,
    "db_id": "car_road_race",
    "question": "What are the engine types that are used by two or more drivers?",
    "answer": "\n The first solution I can think of is to have a table of engines with a count column which stores how many times they are used. Whenever a driver uses an engine, increment the counter for that particular engine type. Then, select all the engines whose count is > 1."
  },
  {
    "id": 1348,
    "db_id": "car_road_race",
    "question": "List the names of drivers that do not participate in any race.",
    "answer": "  */\n        public List<string> getInactiveDrivers() {\n            var inactiveDrivers = new List<string>();\n            foreach (var driver in drivers) {\n                var races = driverRaces[driver];\n                if(races.Count == 0)\n                    inactiveDrivers.Add(driver);\n            }\n            return inactiveDrivers;\n        }\n    }\n}"
  },
  {
    "id": 1349,
    "db_id": "car_road_race",
    "question": "What are names of drivers who did not take part in a race?",
    "answer": "\n  int count = 0;\n \"Sorry, we don't have any data on that name.\";"
  },
  {
    "id": 1350,
    "db_id": "car_road_race",
    "question": "Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.",
    "answer": " A good place to start is to look at the \"Age\" field in the \"drivers\" table, but there may be other fields that also need to be considered.\n\nAnswer: You can try this\n\n\\begin{code}\n SELECT d.name, CASE WHEN d.age < 20 THEN 'Youth Driver' WHEN d.age > 30 THEN 'Mature Driver' ELSE 'Driver' END AS age_range FROM drivers d;"
  },
  {
    "id": 1351,
    "db_id": "car_road_race",
    "question": "What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?",
    "answer": "\n In that case, the result should be a set of two different constructors. How can I do that using HQL?\n\nAnswer: \\begin{code}\n SELECT DISTINCT c.name FROM Constructor c JOIN Driver d ON c.id = d.constructor_id WHERE d.age >= 20 AND (d.age <= 30 OR d.age > 30) GROUP BY c.name ORDER BY c.name NULLS LAST"
  },
  {
    "id": 1352,
    "db_id": "car_road_race",
    "question": "Find the teams that won more than once.",
    "answer": "  The data for the team with the most wins is then displayed on the screen.  If multiple teams have the same number of wins, the teams are ranked in alphabetical order.\n */\npublic class RankTeamWins implements Program {\n    public void execute() throws Exception {\n        List<String> games = Files.readLines(new File(\"games-data.txt\"));\n        Map<String, Integer> teamWins = new HashMap<>();\n        for ("
  },
  {
    "id": 1353,
    "db_id": "car_road_race",
    "question": "Which teams won more than 1 race?",
    "answer": "\n BALCO (British American Llama Company) has been in operation since 1860.\nIn the early days, it was a small company that made hay balers. But the British American Llama Company grew rapidly over the years.\nToday, the company has about 200 people, including farmers, engineers, mechanics, drivers and marketing specialists.\nThe company also operates a large research facility to develop"
  },
  {
    "id": 1354,
    "db_id": "car_road_race",
    "question": "Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before.",
    "answer": " 1927.\n\n SELECT d.name FROM Drivers d WHERE d.name ilike '%James%Hinchcliffe%' AND d.name ilike '%Carl%Skerlong%' AND d.date_of_birth < '1927-01-01';"
  },
  {
    "id": 1355,
    "db_id": "car_road_race",
    "question": "What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?",
    "answer": "\n It would be nice to know if there is a way to get this information."
  },
  {
    "id": 1356,
    "db_id": "car_road_race",
    "question": "find the name of drivers who were never in \"James Hinchcliffe\" pole position before.",
    "answer": " A great race with a great driver, but I do not know what he was called or how well he performed at this track.\nIn the past, it has been said that the name \"James Hinchcliffe\" is not as popular as other names that start with 'J' (such as John, Jack or Joe). If you like this name, then great, it is unique and handy for your baby boy or boy name ideas. If you are looking for a more traditional name"
  },
  {
    "id": 1357,
    "db_id": "car_road_race",
    "question": "What are the names of drivers except for those who had the pole position James Hinchcliffe?",
    "answer": "\n What were their average finishing positions in the race?\n Averaging their results can be tricky because it is a weighted average and not an unweighted average. The weighting should be given more importance to the top finishers, but also have enough of a handicap to the bottom finishers that all teams are averaged, except for those who had the pole position.\n\\item What were their average finishing positions in the race taking into account the pole position? James Hin"
  },
  {
    "id": 1358,
    "db_id": "country_language",
    "question": "How many languages are there?",
    "answer": "\n You are likely to find that the number of languages you speak can have a significant effect on how much you earn. According to the U.S. Bureau of Labor Statistics, for each additional language spoken, employers may pay you 10% higher salary and benefits.\n So if you're proficient in two foreign languages, you'll be asking for a 45% increase in salary from your English-only resume. If you speak three or"
  },
  {
    "id": 1359,
    "db_id": "country_language",
    "question": "Count the number of languages.",
    "answer": " 184.3% of people in Germany speak German as their first language and 176.2% speak another language.\nThe average age of Germans is 59.8 years of age. 25.7% have not completed at least upper secondary education, while 69.5% are under 20 years old. Of those over 64 years old, 26.1% do not have a high school diploma"
  },
  {
    "id": 1360,
    "db_id": "country_language",
    "question": "List the name of languages in ascending alphabetical order.",
    "answer": " \n// Languages are grouped by country. If two or more countries have the same language, all these languages will be listed together (e.g. English, French, Spanish; England, France, Spain)\n// Languages in the world are grouped in the order of their popularity (English, Chinese, Arabic, Russian, Hindi, Portuguese, Spanish)\n\npublic class Solution {\n\tpublic List<String> getCountryLanguages(List<String[]>"
  },
  {
    "id": 1361,
    "db_id": "country_language",
    "question": "What are the names of languages, in alphabetical order?",
    "answer": "\n The name of a language is its ISO 639-1 code. In this case, I am interested in the list of all languages with the codes \"af\", \"am\", \"ar\", \"az\", \"be\", \"bg\", \"ca\", \"ch\", \"co\", \"cs\", \"da\", \"de\", \"el\", \"en\", \"eo\", \"es\", \"et\", \"eu\", \"fa\", \"fi\", \"fr\", \"ga\","
  },
  {
    "id": 1362,
    "db_id": "country_language",
    "question": "What are the names of languages that contain the word \"ish\"?",
    "answer": "\n Is there a way to do this in Python?\n  For example, I might have an array containing:\n    ['German', 'French', 'Spanish', 'Japanese']\n    ['English', 'German', 'Japanese']\n    ['English', 'French', 'Spanish', 'Italian']\n    ['Hindi', 'Greek', 'Swedish']\n  I'd like to get the following output:"
  },
  {
    "id": 1363,
    "db_id": "country_language",
    "question": "Return the names of langauges that contain the substring \"ish\".",
    "answer": "\n \n*/\n  public static List<String> getIshLanguages(List<String> languages) {\n    return languages.stream()\n        .filter(s -> s.contains(\"ish\"))\n        .collect(Collectors.toList());\n  }"
  },
  {
    "id": 1364,
    "db_id": "country_language",
    "question": "Show the names of countries in descending order of overall scores.",
    "answer": " \n  \n    def show_countries(self):\n        country_names = self.scores.keys()\n        country_names.sort(key=lambda x: self.scores[x], reverse=True)\n        return country_names\n    \n# Tests the methods on a new object "
  },
  {
    "id": 1365,
    "db_id": "country_language",
    "question": "What are the names of the countries, ordered descending by overall score?",
    "answer": "\n  \"\"\"\n  return sorted(countries_with_score.items(), key=lambda x: x[1], reverse=True)\n\ndef get_country_names(countries):\n  \"\"\" Return a list of country names in their given order\n  \"\"\"\n  return [c['country'] for c in countries]"
  },
  {
    "id": 1366,
    "db_id": "country_language",
    "question": "What is the average justice scores among countries?",
    "answer": "\n  https://data.worldbank.org/indicator/si/18-607-2943251-4-17-29-356-82-725-77010/\n\n  // Get the average score among countries in a continent and rank them.\n  SELECT country, continent, avg_score = AVG(score) FROM (SELECT c.country, c.cont"
  },
  {
    "id": 1367,
    "db_id": "country_language",
    "question": "Give the average justice scores across all countries.",
    "answer": " The researchers are not sure how to interpret the data, but it could be that high-scoring countries have better overall performance in international cooperation and more effective institutions.\nThe study\u2019s authors cautioned that the data may be influenced by factors that make it impossible to draw firm conclusions. For example, they noted that \u201cthere are many other variables that could have an impact on this study, such as population density and economic development.\u201d The researchers also suggested that the data could"
  },
  {
    "id": 1368,
    "db_id": "country_language",
    "question": "What are the maximum and minimum health scores among countries that are not \"Norway\".",
    "answer": "\n  country_min = min(health_scores.loc[~health_scores['country'].str.contains('Norway')])['score']\n  country_max = max(health_scores.loc[~health_scores['country'].str.contains('Norway')])['score']\n  print(\"Minimum health score not from Norway:\", country_min)\n  print(\"Maximum health score not"
  },
  {
    "id": 1369,
    "db_id": "country_language",
    "question": "Return the maximum and minimum health scores across all countries other than Norway.",
    "answer": " 2) Show the average health score for each country in the European Union. 3) Compute the correlation between the average health score and the GDP per capita of a country in the European Union. 4) Plot the average health score vs the GDP per capita of a country in the European Union.\n"
  },
  {
    "id": 1370,
    "db_id": "country_language",
    "question": "How many different official languages are there?",
    "answer": "\n You are the 7th most common language(s) spoken, globally!\n [156 people (0.02%)]\n   1. English\n   2. Spanish\n   3. French\n   4. German\n   5. Japanese\n   6. Portuguese\n   7. Italian\n   -------- total: 7 languages"
  },
  {
    "id": 1371,
    "db_id": "country_language",
    "question": "Count the number of different official languages.",
    "answer": " 74,157,098 people speak Chinese as their first or second language, which is about 15% of the world's population.\nChinese as a mother tongue is more widely spoken than English and Spanish combined. (Source: Wiki)\nIn 2001, the World Intellectual Property Organization (WIPO) was founded with the aim to \"strengthen international cooperation in intellectual property matters.\" It has since"
  },
  {
    "id": 1372,
    "db_id": "country_language",
    "question": "List names of countries in descending order of education_score.",
    "answer": " \n   public function getCountryList() {\n       $this->db->select('*');\n       $this->db->from('countries');\n       $this->db->order_by(\"education_score\", \"desc\");\n       $query = $this->db->get();\n       return $query->result();\n   } \n}"
  },
  {
    "id": 1373,
    "db_id": "country_language",
    "question": "What are the names of the countries, ordered descending by education score?",
    "answer": "\n  - List the name of the country and its education score next to each other, in a single row, separated by a comma.\n  - Each country's name should be enclosed in apostrophes (') and placed in the same line with the previous entry.\n  - If two countries have the same education score, display only one of them.\n    */\n   var data = [['United Kingdom', 85], ['Spain', 76"
  },
  {
    "id": 1374,
    "db_id": "country_language",
    "question": "List the name of the country with the biggest score in politics.",
    "answer": " 1590876\nWhat is the name of the country with the biggest score in sports? 2457632\nWhat is the name of the country with the highest score overall? 2576324"
  },
  {
    "id": 1375,
    "db_id": "country_language",
    "question": "What is the name of the country with the highest politics score?",
    "answer": "\n  */\n- (NSString *)highestCountryWithPoliticsScore;"
  },
  {
    "id": 1376,
    "db_id": "country_language",
    "question": "Show the names of countries and their official languages.",
    "answer": " The result of the analysis is a list of country code, country name, language name in English and language code in English.\n\nI have created a simple table with this structure:\n\n\\begin{code}\nCREATE TABLE COUNTRIES (\n   CODE         VARCHAR(2)  NOT NULL,\n   NAME         VARCHAR    NOT NULL,\n   LANGUAGE_NAME VARCHAR    NOT NULL,\n   LANGUAGE_CODE VARCHAR    NOT NULL\n);"
  },
  {
    "id": 1377,
    "db_id": "country_language",
    "question": "What are the names of the countries, as well as the names of their official langauges?",
    "answer": "\n The output should be in the following format: Country name - Language name.\nIf a country has two official languages, then it should be displayed twice on the output, once for each language.\nCountries that have no official language should not be included on the output at all.\n*/\nfunction getNames() {\n  const langauges = require('./country-langauges.json');\n  let output = [];\n\n  langauges.forEach((language"
  },
  {
    "id": 1378,
    "db_id": "country_language",
    "question": "Show the official languages and the number of countries speaking each language.",
    "answer": " 1795420809074755894364848760L\n3755d419a0cfe0e5ebabeDeutschland5AustriaBrazilChileColombiaCubaEcuadorGuatemalaHondurasMexicoPeruPhilippinesPortugalSpainVenezuela2423755d41"
  },
  {
    "id": 1379,
    "db_id": "country_language",
    "question": "What are the names of the different official languages, as well as the number of countries that speak each?",
    "answer": "\n I was trying to find a list of all of these, but I couldn't find anything. Any help would be greatly appreciated.\n\nComment: I don't think there is any \"official language\" in the world.\n\nAnswer: This question isn't answerable because it's an assumption that the languages of a country are not official. This is not a useful criterion to determine what language should be used as an official language, and the fact that a"
  },
  {
    "id": 1380,
    "db_id": "country_language",
    "question": "Show the official language spoken by the most number of countries.",
    "answer": " 7.8% of the world's population speaks one or more languages, but do not consider themselves to be bilingual.\nThe bilingualism rate in the U.S. is even higher than the average worldwide rate, at 22.6%. In fact, 52% of all American residents say they are bilingual (English and Spanish) while 49% identify themselves as bilingual in Spanish and English.\nThe United"
  },
  {
    "id": 1381,
    "db_id": "country_language",
    "question": "What is the official language that is most common?",
    "answer": "\n What about if there are multiple languages in the region? How does this work? Are there any standard practices for how to handle multiple languages in a region?\n\n\nComment: I am not sure about the practicality of having more than one language, but I know you can have more than one dialect. But with the number of people it can be difficult to find someone fluent in multiple dialects.\n\nAnswer: A region is defined by a set of languages, and each language"
  },
  {
    "id": 1382,
    "db_id": "country_language",
    "question": "Show the official languages spoken by at least two countries.",
    "answer": " 56% of the world's population speaks more than one language, a figure that has been increasing steadily since the end of World War II.\nThe United States is still the largest economy in the world, but its dominance is now much more narrow. China surpassed the US as the country with the highest GDP and is expected to overtake it by 2029. This change could happen sooner if the Chinese government doesn't make any mistakes."
  },
  {
    "id": 1383,
    "db_id": "country_language",
    "question": "Which official languages are spoken in two or more countries?",
    "answer": "\n On this website, we provide information on the countries where English is an official language, as well as on the countries where English is not an official language but is widely spoken. We also list the countries which have more than one official language."
  },
  {
    "id": 1384,
    "db_id": "country_language",
    "question": "Show the average overall scores of countries whose official language is \"English\".",
    "answer": "\n 2. Include only those countries where the English name for the language is recognised and not 'English'.\n 3. Sort the list by average score in descending order.\n */"
  },
  {
    "id": 1385,
    "db_id": "country_language",
    "question": "What is the average overall score across countries with English as their official language?",
    "answer": "\n By this I mean, if a country has 10 different languages and only English is one of them, how would that affect its average score? I'm not sure how to account for that in my program.\n\nAnswer: You can use [`array_count`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.count.html) with `value` set to `None`, so that it counts all non-"
  },
  {
    "id": 1386,
    "db_id": "country_language",
    "question": "Show the three official languages that are most commonly spoken.",
    "answer": " 48% of the population speaks Spanish, 29% English, 11% Guarani, and 3% Portuguese.\nThe majority of the population (67%) are Roman Catholics, 10% are Pentecostals, 5% are Baptists, and 4% are Presbyterians."
  },
  {
    "id": 1387,
    "db_id": "country_language",
    "question": "What are the names of the three official languages spoken in the most countries?",
    "answer": "\n It\u2019s not easy to find a country that does not have at least three official languages, but some do. These countries and their languages are:\n\n1. Vanuatu \u2014 Bislama (which is also the national language)\n2. Papua New Guinea \u2014 Tok Pisin (also known as \u201cPapua New Guinean\u201d or PNG)\n3. Nauru \u2014 Naurese (also known as \u201cNauruian\u201d)\n"
  },
  {
    "id": 1388,
    "db_id": "country_language",
    "question": "Show the official languages sorted in descending order by the average overall scores among countries speaking them.",
    "answer": " \n```sh\n SELECT l.language, AVG(l.score) AS avg_score FROM Languages l GROUP BY l.language ORDER BY avg_score DESC NULLS LAST;"
  },
  {
    "id": 1389,
    "db_id": "country_language",
    "question": "What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?",
    "answer": "\n Tags: international-languages, language-usage, linguistics, linguistic-analysis\n Post Type: Question Answered"
  },
  {
    "id": 1390,
    "db_id": "country_language",
    "question": "Show the name of the country that has the greatest number of official languages.",
    "answer": " 15) Which country has the most official languages?\nA: The country with the most official languages is Saint Kitts and Nevis, which has three: English, French, and Saint Kitts and Nevis Annotated Map. This article also ranks the countries by the number of official languages and their names. 260 countries have at least three official languages, and several more have two or four or five. The information in this article is based on data from"
  },
  {
    "id": 1391,
    "db_id": "country_language",
    "question": "Which country has the greatest number of official languages?",
    "answer": "\n On October 20, 2018, a new world record for the most official languages was set by Bhutan. The country\u2019s government has officially recognized and promulgated 26 languages in the official language of the kingdom: Dzongkha, Tibetan, Thimbu, Namsacad, Khamtrul, Shamla, Tingri, Ngawa, Rinpoche, Lhotse, Dorji"
  },
  {
    "id": 1392,
    "db_id": "country_language",
    "question": "List the names of languages that are not the official language of any countries.",
    "answer": " \n   - It is not necessary to check the official language of a country, even if there are two or more official languages. */\n   public static List<String> getLanguagesNotOfficialOfANyCountry() {\n      return Arrays.asList(new String[]{\"Hindi\", \"Spanish\", \"Russian\"});\n   }"
  },
  {
    "id": 1393,
    "db_id": "country_language",
    "question": "What are the names of languages that are not the official language of any country?",
    "answer": "\n A language that is not an official language of any country is sometimes referred to as a \"de facto\" or \"de jure\" language. The term \"de facto\" indicates that the language is not recognized by any government, while \"de jure\" refers to a language that is recognized but has not yet been granted full rights to an official status.\n The following languages are listed as de facto languages: Ainu, Bamanak, Dravidian, E"
  },
  {
    "id": 1394,
    "db_id": "country_language",
    "question": "List the names of countries that do not have any official language.",
    "answer": " 23 January 2017, 9:00 AM\n Is there any country that does not have an official language? The answer is yes. There are several countries around the world without an officially recognized language. Here is a list of a few examples, from least to most languages. 1) The Republic of Korea 2) The Democratic People's Republic of Korea (North Korea) 3) The Republic of Moldova 4) The Republic of Ser"
  },
  {
    "id": 1395,
    "db_id": "country_language",
    "question": "What are the names of countries that do not have an official language?",
    "answer": "\n In my research I found that there are 57 countries with no official language:\n Gambia, Sao Tome and Principe, St. Kitts and Nevis, Trinidad and Tobago, Vanuatu, Zaire, Zanzibar. I am having trouble with these five countries because the government is not able to provide me information on their official language or any other reliable sources that would help me in finding the answer to my question.\n\n"
  },
  {
    "id": 1396,
    "db_id": "country_language",
    "question": "Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.",
    "answer": " Cut-off values for each country can be calculated as follows:\n\\begin{itemize}\n\\item Country A - score above 95 -> 100% of all languages that have a percentage higher than 95 (e.g. 45% of the total number of languages).\n\\item Country A - score below 90% -> 25% of all languages that have a percentage lower than 90 (e.g. "
  },
  {
    "id": 1397,
    "db_id": "country_language",
    "question": "What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?",
    "answer": "\n In addition, I would like to see a list of all countries that do not have an official language that is included in the top 10. I would like to see this information grouped by country name and written in a specific order.\n\nAnswer: Here's the query:\n\n SELECT c.country_name, l.language_name, s.overall_score FROM country c JOIN language l ON c.official_language = l.code JOIN survey s"
  },
  {
    "id": 1398,
    "db_id": "real_estate_rentals",
    "question": "Which countries and cities are included in addresses?",
    "answer": "\n In most cases, the country is not included. But in some cases it can be included for example with a post code that contains an abbreviation of a country name.\n\nComment: @Botzio That's why I said \"it can be included.\" I don't know any other reason it would be included than because of the postcode."
  },
  {
    "id": 1399,
    "db_id": "real_estate_rentals",
    "question": "What are the countries and cities for each address?",
    "answer": "\n The US has 50 states, but a single state has more than one postal code system. Postal codes can be used to identify both cities and counties.\n The US is a large country with more than 3 million post offices. However, there are not enough post offices in the country to send the mail. Postal code systems are used to identify the zip codes."
  },
  {
    "id": 1400,
    "db_id": "real_estate_rentals",
    "question": "In which states are each of the the properties located?",
    "answer": "\n I.e. is it in the United States, or the UK, or Canada, and so on.\n\nComment: Yes, you can use the `country_code` attribute to do that. However, if you have a large number of country codes, that will be very slow. In that case you might want to create your own lookup table with the country names and their corresponding code (e.g. for every country in the world)"
  },
  {
    "id": 1401,
    "db_id": "real_estate_rentals",
    "question": "Give the states or provinces corresponding to each property.",
    "answer": "  For instance,\n * in the US, California would be a state.  In Canada, Quebec would be a province.\n */\npublic class Place {\n    public String name;\n    public String code;\n    public boolean isState = true; // in the US, this is always true, for example\n    public float lat;\n    public float lng;\n    public int population;\n\n    public Place(String nm, String cd, boolean st"
  },
  {
    "id": 1402,
    "db_id": "real_estate_rentals",
    "question": "How is the feature rooftop described?",
    "answer": "\n C. E. Shapiro, \"Flat roofs: a review\" (2003) in American Society of Civil Engineers, Journal of Transportation Engineering 75(3), p. 158-160."
  },
  {
    "id": 1403,
    "db_id": "real_estate_rentals",
    "question": "Return the description of the feature 'rooftop'.",
    "answer": "\n  # The first line is a short summary, and the rest is long-form. The # means that\n  # all text after # is treated as long-form text. The blank line below the brief\n  # text is required.\n\n  # == Summary\n  #\n  # Describe the rooftop feature in a few sentences, with no more than two lines of text.\n  # This description will be displayed on the homepage and in"
  },
  {
    "id": 1404,
    "db_id": "real_estate_rentals",
    "question": "What are the feature name and description of the most commonly seen feature across properties?",
    "answer": "\n \n </p>\n  <p class=\"MsoNormal\">\n  <img src=\"/assets/images/feature_distribution.png\" alt=\"\" width=\"60%\" height=\"300px\"/>\n  </p>\n  <p class=\"MsoNormal\">\n  We can see that the most frequently encountered feature is the \"pool\". It accounts for more than 12% of properties in our dataset, and the next most common features are \""
  },
  {
    "id": 1405,
    "db_id": "real_estate_rentals",
    "question": "Give the feature name and description for the most common feature across all properties.",
    "answer": " \n * This will be used to generate a default feature name/description if no user-specified values are given in the UI.\n */\nfunction getDefaultFeatureNameAndDescription(featureCounts) {\n    const mostCommonFeature = Object.keys(featureCounts)[0];\n    return (featureCounts[mostCommonFeature] > 1 ? [mostCommonFeature, ''] : ['', '']);\n}\nexports.getDefaultFeatureNameAndDescription"
  },
  {
    "id": 1406,
    "db_id": "real_estate_rentals",
    "question": "What is the minimum number of rooms in a property?",
    "answer": "\n  min_rooms = 1;\n \"\n  ^property.min_rooms\nend\n\ndef max_rooms(property)\n  # What is the maximum number of rooms in a property?\n  property.max_rooms || -1\nend\n\ndef total_bedrooms(property)\n  (bedroom_count(property) || 0) + (bathroom_count(property) || 0)\nend\n\ndef total"
  },
  {
    "id": 1407,
    "db_id": "real_estate_rentals",
    "question": "What is the lowest room count across all the properties?",
    "answer": "\n 12. What is the highest number of rooms in any property?\n\\end{code}"
  },
  {
    "id": 1408,
    "db_id": "real_estate_rentals",
    "question": "How many properties have 1 parking lot or 1 garage?",
    "answer": "\n Are the doors in good condition? Is there a key holder near the door? If you\u2019re using a locking mechanism, does it work properly? Do the windows open easily? Can you turn the headlights on and off? Are the brake lights working properly? Are the mirrors in good condition? Do the wipers reach the windshield? Can you see over the dashboard? Do the airbags deploy properly?\n Batteries are good? Is"
  },
  {
    "id": 1409,
    "db_id": "real_estate_rentals",
    "question": "Count the number of properties that have 1 parking lot or 1 garage.",
    "answer": " Criteria are specified using a logical AND operator.\n\n```python\n# Get a list of all the properties that have 1 parking lot and 1 garage\nproperties = db.get('SELECT p FROM Property p WHERE p.parking_lots=1 AND p.garages=1')\n```\n"
  },
  {
    "id": 1410,
    "db_id": "real_estate_rentals",
    "question": "For users whose description contain the string 'Mother', which age categories are they in?",
    "answer": "\n  Ages_with_mother.values().each do |age|\n    if age[:description].include?('Mother')\n      puts age[:name]\n    end\n  end"
  },
  {
    "id": 1411,
    "db_id": "real_estate_rentals",
    "question": "What are the age categories for users whose description contains the string Mother?",
    "answer": "\n  SELECT a.age_category FROM age_categories a WHERE a.description ILIKE '%Mother%' ORDER BY a.age_category NULLS LAST;"
  },
  {
    "id": 1412,
    "db_id": "real_estate_rentals",
    "question": "What is the first name of the user who owns the greatest number of properties?",
    "answer": "\n 1. The first name of the user who owns the greatest number of properties."
  },
  {
    "id": 1413,
    "db_id": "real_estate_rentals",
    "question": "Return the first name of the user who owns the most properties.",
    "answer": " \n */\npublic static String getMostExpensiveUserFirstName(Connection con) throws SQLException {\n    String query = \" SELECT u.first_name FROM users u JOIN property_owners po ON u.id = po.user_id ORDER BY po.number_of_properties DESC LIMIT 1\";\n    Statement stmt = con.createStatement();\n    ResultSet rs = stmt.executeQuery(query);\n    if (rs.next"
  },
  {
    "id": 1414,
    "db_id": "real_estate_rentals",
    "question": "List the average room count of the properties with gardens.",
    "answer": " 78% of the total number of rooms are in houses that have a garden (130 out of 172).\n Average rooms for houses without a garden: 59 out of 64. The difference between these two figures is 41 out of 64. So I guess it's pretty evenly split.\n\nI hope that helps clarify the situation.\n\nAnswer: \\begin{blockquote}\n\nAverage rooms for houses"
  },
  {
    "id": 1415,
    "db_id": "real_estate_rentals",
    "question": "On average, how many rooms do properties with garden features have?",
    "answer": "\n  if(has_garden) return avg_rooms; end\n CTE: avg_rooms = (SELECT AVG(r.number_of_rooms) FROM room r JOIN property p ON r.property_id = p.id WHERE has_garden = TRUE);"
  },
  {
    "id": 1416,
    "db_id": "real_estate_rentals",
    "question": "In which cities are there any properties equipped with a swimming pool?",
    "answer": "\n Is it possible to find a property that has an indoor or outdoor pool on the following day, I don't care where it is located, as long as it is available at a reasonable distance from the location of my choosing.\nI have already searched for those properties that are close to the city center or have a swimming pool near their location. However, many of these properties also offer indoor and outdoor pools in other cities, and I would like to know if"
  },
  {
    "id": 1417,
    "db_id": "real_estate_rentals",
    "question": "Return the cities in which there exist properties that have swimming pools.",
    "answer": " The\n  pool locations are returned as a list of objects with a 'pool_city' field and an 'address' field. */\n  def find_cities_with_pools(min_water_area: Double, max_water_area: Double): List[CityWithPool] = {\n    val citiesWithPools = pool_locations.filter(l => l.water_area > min_water_area && l.water_area <"
  },
  {
    "id": 1418,
    "db_id": "real_estate_rentals",
    "question": "Which property had the lowest price requested by the vendor? List the id and the price.",
    "answer": " \n```java\n SELECT p.id, p.price FROM Product p ORDER BY p.price ASC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1419,
    "db_id": "real_estate_rentals",
    "question": "What is the id of the property that had the lowest requested price from the vendor, and what was that price?",
    "answer": "\n 1) I am looking for a list of all the ids of the properties sold to customers. 2) I want to know the number of customers who purchased each property. 3) I need to get a list of the properties that were not bought by any customers.\n */\npublic class PropertyServiceImpl implements PropertyService {\n\t@Autowired\n\tPropertyRepository propertyRepo;\n\tCustomerRepository custRepo;\n\tCustomerOrderRepository orderRepo;\n"
  },
  {
    "id": 1420,
    "db_id": "real_estate_rentals",
    "question": "On average, how many rooms does a property have?",
    "answer": "\n 10. What is the average number of bathrooms in a property? 12. How long on average is a property's description? 13. How many properties are listed for sale with a price range of under $500,000? 14. How much on average does a property's price range from? 15. How long is the average length of time to sell a property before it's removed from the market?"
  },
  {
    "id": 1421,
    "db_id": "real_estate_rentals",
    "question": "What is the average number of rooms in a property?",
    "answer": "\n 2. How many bathrooms are there on average in a property?\n3. Are there more male than female guests?\n4. Is the average age of guests over 18 years old?"
  },
  {
    "id": 1422,
    "db_id": "real_estate_rentals",
    "question": "How many kinds of room sizes are listed?",
    "answer": "\n What I need to do is to find the ratio of the largest room in the apartment building to the smallest. In order to do this, I can use the following code:\n\n\\begin{code}\nSELECT (MAX(r.size)::FLOAT / NULLIF(MIN(r.size), 0)) AS ratio FROM rooms r;\n\\end{code}"
  },
  {
    "id": 1423,
    "db_id": "real_estate_rentals",
    "question": "Return the number of different room sizes.",
    "answer": "  */\n\n  int num_room_sizes = (int) (double) data->room_sizes;\n\n  /* Allocate memory for the room sizes and their corresponding numbers. */\n\n  int *room_sizes = malloc ((num_room_sizes + 1) * sizeof (data->room_sizes));\n  if (!room_sizes) {\n    fprintf (stderr, \"Couldn't allocate"
  },
  {
    "id": 1424,
    "db_id": "real_estate_rentals",
    "question": "What are the ids of users who have searched at least twice, and what did they search?",
    "answer": "\n  SELECT u.id AS user_id, ARRAY_AGG(s.search_term) AS search_terms FROM (SELECT id FROM users WHERE search_count >= 2) AS s JOIN users u ON s.id = u.id GROUP BY u.id;"
  },
  {
    "id": 1425,
    "db_id": "real_estate_rentals",
    "question": "Return the ids of users who have performed two or more searches, as well as their search sequence.",
    "answer": " \n\t */\n\tpublic function getSearcherIdsWithSequences() {\n\t\t$user_ids = array();\n\t\tforeach ($this->searches as $id => $val) {\n\t\t\tif (count($this->searches[$id]) >= 2) { // found a user with more than one search\n\t\t\t\tarray_push($user_ids, $id);\n\t\t}\n\t}\n\treturn $"
  },
  {
    "id": 1426,
    "db_id": "real_estate_rentals",
    "question": "When was the time of the latest search by a user?",
    "answer": "\n  static public Date lastSearchDate = null;\n fromWhere = \"\";\n\\end{code}\n\nIf I don't initialize it, then I get an error when compiling. But if I initialize it to null, I can't tell when was the latest search made. Is there a way for me to find out that information?\n\nComment: In what context do you use this static field? Is this in a web-application, or is it in a desktop"
  },
  {
    "id": 1427,
    "db_id": "real_estate_rentals",
    "question": "What was the time of the most recent search?",
    "answer": "\n The previous searches were:\n 1. The term \"Mars\"\n\\end{code}\n\nSo I am guessing that this is the problem, but I don't know how to fix it.\n\nAnswer: You can set an `index` on the field to make sure that there's only one search history item per user.\n\nhttps://firebase.google.com/docs/reference/rest/database/#section-indexes"
  },
  {
    "id": 1428,
    "db_id": "real_estate_rentals",
    "question": "What are all the user searches time and content? Sort the result descending by content.",
    "answer": " 2013-07-28T16:45:01Z\nThe list of searches, ordered by date in reverse order (most recent first)\n\n### Example Request\n\n GET /api/searches\n\n## Get a single search\n\n ### Example Request\n\n GET /api/searches/{id}\n \n ### Example Response\n\n ```javascript\n{\n    \"id\": \"c057641"
  },
  {
    "id": 1429,
    "db_id": "real_estate_rentals",
    "question": "Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.",
    "answer": " \n\t */\n\tpublic function getAllSearches() {\n\t\t$search_data = array();\n\t\t$query = $this->db->get('search');\n\t\tforeach($query->result() as $row) {\n\t\t\tarray_push($search_data, array(\n\t\t\t\t'search_string'=>$row->search_string,\n\t\t\t\t'time_stamp'=>$row->time_"
  },
  {
    "id": 1430,
    "db_id": "real_estate_rentals",
    "question": "What are the zip codes of properties which do not belong to users who own at most 2 properties?",
    "answer": "\n [Florida] SELECT p.zip FROM Properties p WHERE NOT EXISTS (SELECT 1 FROM Properties o WHERE o.owner_id = p.owner_id AND o.zip = p.zip HAVING COUNT(o.id) >= 3) GROUP BY p.zip;"
  },
  {
    "id": 1431,
    "db_id": "real_estate_rentals",
    "question": "Return the zip codes for properties not belonging to users who own two or fewer properties.",
    "answer": " \n\n  SELECT p.zip_code FROM property p JOIN user u ON CAST(p.user_id AS text) = u.user_id WHERE (SELECT COUNT(*) FROM property pr WHERE pr.user_id = p.user_id) < 3;"
  },
  {
    "id": 1432,
    "db_id": "real_estate_rentals",
    "question": "What are the users making only one search? List both category and user id.",
    "answer": "  */\n  public function get_category_and_userid() {\n    return array('cat' => $this->get_category(), 'uid' => $this->get_user_id());\n  }\n}"
  },
  {
    "id": 1433,
    "db_id": "real_estate_rentals",
    "question": "What are the ids of users who have only made one search, and what are their category codes?",
    "answer": "\n  SELECT u.id AS user_id, c.code AS category_code FROM user_categories uc JOIN categories c ON uc.category_id = c.id WHERE (SELECT COUNT(*) FROM user_searches WHERE user_id = u.id) = 1;"
  },
  {
    "id": 1434,
    "db_id": "real_estate_rentals",
    "question": "What is the age range category of the user who made the first search?",
    "answer": "\n  /// The range is from 0 to 25, where 0 corresponds to less than 25 years old and 25 corresponds to over 25 years old.\n  AgeRangeEnum firstSearchAgeRange;\n\n  /// What is the gender of the user who made the first search?\n  GenderEnum firstSearchGender;\n\n  /// Which platform was used to make the first search?\n  PlatformTypeEnum firstSearchPlatform;\n"
  },
  {
    "id": 1435,
    "db_id": "real_estate_rentals",
    "question": "Return the age category for the user who made the earliest search.",
    "answer": "  For\n  example, \"18-24\" would be returned if the earliest age range is between 18 and 24. */\n  min_age?: string;\n\n  /** The maximum age range that includes the most recent search. This value will be empty for users who have never made a search. Return the age category for the user who made the latest search. For example, \"60+\" would be returned if the latest age range is 6"
  },
  {
    "id": 1436,
    "db_id": "real_estate_rentals",
    "question": "Find the login names of all senior citizen users ordered by their first names.",
    "answer": " \n *\n * @return array\n */\nfunction get_senior_citizen_users() {\n\t$users = User::where('age', '>', 70)->get();\n\treturn $users->sortBy('first_name')->toArray();\n}"
  },
  {
    "id": 1437,
    "db_id": "real_estate_rentals",
    "question": "What are the login names of all senior citizens, sorted by first name?",
    "answer": "\n  SELECT c.first_name, c.last_name FROM customer c JOIN senior_citizen s ON c.id = s.customer_id ORDER BY c.first_name;"
  },
  {
    "id": 1438,
    "db_id": "real_estate_rentals",
    "question": "How many searches do buyers make in total?",
    "answer": "\n What does a 10% increase in sales mean for a company with 750,000 customers?\n Certainly not a 750,000% increase. Let's use the more realistic figure of 2.5% to arrive at a total increase in sales of 204,000. Is that really enough for this company to achieve its goal?\nIt is up to the company to decide whether or not"
  },
  {
    "id": 1439,
    "db_id": "real_estate_rentals",
    "question": "Count the number of searches made by buyers.",
    "answer": "  The default is to use a single search for all\n    ///     searches. This can be useful in cases where there are many different searches, but the user wants to\n    ///     see only a single entry for all of them.\n    /// </summary>\n    public class SearchCount\n    {\n        private readonly ICollection<Search> _searches = new List<Search>();\n        public SearchCount() : this(true) { }\n        public SearchCount"
  },
  {
    "id": 1440,
    "db_id": "real_estate_rentals",
    "question": "When did the user with login name ratione register?",
    "answer": "\n  var username = req.body.username;\n  var password = req.body.password;\n\n  // check to see if the user is already registered\n  User.findOne( { \"loginName\": username }, function(err, user) {\n    if (user === null) {\n      // we have no record of this user, go ahead and create them in the database\n      var newUser = new User();\n      newUser.loginName"
  },
  {
    "id": 1441,
    "db_id": "real_estate_rentals",
    "question": "What was the registration date for the user whose login name is ratione?",
    "answer": "\n  It is possible that there are multiple users with the same name, so it should return the most recent one.\n */\n  public static function findByLoginName(string $login_name): ?self {\n    // SELECT u.id FROM users u WHERE u.login_name = 'ratione' ORDER BY u.registration_date DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1442,
    "db_id": "real_estate_rentals",
    "question": "List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.",
    "answer": " \"Seller\" in the user_roles table.\n```\n SELECT u.first_name, u.middle_name, u.last_name, u.login FROM user_roles ur JOIN users u ON ur.user_id = u.id WHERE ur.role_id = 1;"
  },
  {
    "id": 1443,
    "db_id": "real_estate_rentals",
    "question": "What are the first, middle, last, and login names for all users who are sellers?",
    "answer": "\n 1. First name: \"John\"\n 2. Middle name: \"\"\n 3. Last name: \"Smith\"\n 4. Login name: \"john@gmail.com\" (this is the email address used to log into the site, so it should be unique)\n *\n */\nfunction generateNamesForSellers() {\n\t$sellers = array();\n\tfor($i=0; $i < 10; $i"
  },
  {
    "id": 1444,
    "db_id": "real_estate_rentals",
    "question": "Where do the Senior Citizens live? List building, street, and the city.",
    "answer": " The new housing will be located in a more central area of the city, where it would be less dense, and it would have better access to public transportation.\nThe project is expected to generate 40-50 jobs. The project is also planned to increase property values in the surrounding areas, which are considered some of the most affluent neighborhoods in the state.\nSeveral other developers plan to build condos and apartments on this site, so it\u2019s"
  },
  {
    "id": 1445,
    "db_id": "real_estate_rentals",
    "question": "What are the buildings, streets, and cities corresponding to the addresses of senior citizens?",
    "answer": "\n My favorite was a small town in Colorado called Soda Springs. The population density there was 574.8 people per square mile. The average age of the residents was 61 years old (which is not that surprising considering the population density). But you can't get to Soda Springs from anywhere else but there. It's a small place, with a limited amount of shops and businesses. And it has a small town square in the middle of"
  },
  {
    "id": 1446,
    "db_id": "real_estate_rentals",
    "question": "How many properties are there with at least 2 features?",
    "answer": "\n # of unique properties: 107,497 (25%)\n CLASSIFICATION AND SELECTION CRITERIA\n\n# Classification and selection criteria can be defined as a logical expression using available attributes in the data set. For example \"age > 65\" or \"age < 30 & gender = 'M'\"\n classification_and_selection_criteria <- c(sprintf(\"age >= 65\"))\n\n# Classification"
  },
  {
    "id": 1447,
    "db_id": "real_estate_rentals",
    "question": "Count the number of properties with at least two features.",
    "answer": " \n\t\t/// </summary>\n\t\tpublic int MinimumNumberOfFeatures => (int)Math.Ceiling(Math.Log2(MaximumNumberOfFeatures));\n\n\t\t/// <summary>\n\t\t/// Calculates the minimum number of properties with at least two features, rounded down to a non-negative integer. \n\t\t/// </summary>\n\t\tpublic int MinimumNumberOfFeaturesRoundedDown => (int"
  },
  {
    "id": 1448,
    "db_id": "real_estate_rentals",
    "question": "How many photos does each property have?",
    "answer": "\n The answer to that is 1. You don't need to know the total number of photos for a property to display them, you just need to know how many photos are available at any given time. We will use the number of photos available as a variable called *numPhotos*.\n */\nlet numPhotos = 8;\n\n/* 2. How do we represent those photos? What kind of object is used to display them? The answer to that is "
  },
  {
    "id": 1449,
    "db_id": "real_estate_rentals",
    "question": "Count the number of property photos each property has by id.",
    "answer": " \n * \n * @param {string} propertyId - The unique identifier of a particular property\n * @return {number} - The number of photos associated with that property\n */\nexport async function countPropertyPhotos(propertyId) {\n    return new Promise((resolve, reject) => {\n        const query = Photo.find({ propertyId }, (err, res) => {\n            if (err) reject(err);\n            resolve(res."
  },
  {
    "id": 1450,
    "db_id": "real_estate_rentals",
    "question": "How many photos does each owner has of his or her properties? List user id and number of photos.",
    "answer": " \n\t */\n\tpublic function getUserPhotoCounts(array $user_ids = array()): array {\n\t\t$photos_count = array();\n\t\tforeach ($user_ids as $id) {\n\t\t\t$photos_count[$id] = count($this->getPhotos($id));\n\t\t}\n\t\treturn $photos_count;\n\t}\n\n\t/**\n\t * Get all photos for"
  },
  {
    "id": 1451,
    "db_id": "real_estate_rentals",
    "question": "What are the user ids of property owners who have property photos, and how many do each of them have?",
    "answer": "\n  \"\"\" SELECT p.user_id, COUNT(p.photo_id) AS num_photos FROM Property p GROUP BY p.user_id ORDER BY num_photos DESC NULLS LAST;"
  },
  {
    "id": 1452,
    "db_id": "real_estate_rentals",
    "question": "What is the total max price of the properties owned by single mothers or students?",
    "answer": "\n I do not know how to write a query that returns the maximum price for all houses owned by single mothers and/or students.\n\n SELECT MAX(p.price) AS maximum_price FROM Property p JOIN Owner o ON p.owner_id = o.id WHERE o.relationship IS NULL OR o.relationship IN ('single mother','student');"
  },
  {
    "id": 1453,
    "db_id": "real_estate_rentals",
    "question": "Give the total max price corresponding to any properties owned by single mothers or students.",
    "answer": " \ndef find_max_price(prices):\n    return max(filter_non_empty_prices(prices))\n\n# Given a list of prices, returns only non-empty ones.\ndef filter_non_empty_prices(prices):\n    return [p for p in prices if not empty_price(p)]\n\n# Checks if the price is empty or not.\ndef empty_price(price):\n    return"
  },
  {
    "id": 1454,
    "db_id": "real_estate_rentals",
    "question": "What are the date stamps and property names for each item of property history, ordered by date stamp?",
    "answer": "\n  - Returns an array of objects with `date_stamp` and `prop_name` fields.\n- `get_property_history_by_date(date_stamp)`\n  - What is the history of a particular property at a given point in time?\n  - Returns an object with `date_stamp`, `prop_name` and any other relevant information about that time period.\n"
  },
  {
    "id": 1455,
    "db_id": "real_estate_rentals",
    "question": "Return the date stamp and property name for each property history event, sorted by date stamp.",
    "answer": " \n     * @return array of PropertyHistoryEvent objects, ordered by date stamp and property name\n     */\n    public function getPropertyHistoryEvents() {\n        return $this->property_history_events;\n    }\n}"
  },
  {
    "id": 1456,
    "db_id": "real_estate_rentals",
    "question": "What is the description of the most common property type? List the description and code.",
    "answer": "  I want to list all the descriptions in one column, but with each description displayed only once.\n\nComment: Please add this information to your question by editing it. Also, do you want the code (if any) that corresponds to the description in the output as well?\n\nAnswer: \\begin{code}\n SELECT DISTINCT p.description FROM properties p;"
  },
  {
    "id": 1457,
    "db_id": "real_estate_rentals",
    "question": "What is the most common property type, and what is its description.",
    "answer": " \n   - It's a good idea to include a high-level overview of any features you want to include in your home automation system, such as thermostat control, lighting systems, entertainment systems, or security systems.\n   \n4) What is the budget for this project? Who will be paying for it and how much will they expect to spend?\n"
  },
  {
    "id": 1458,
    "db_id": "real_estate_rentals",
    "question": "What is the detailed description of the age category code 'Over 60'?",
    "answer": "\n CKHB_CMS_035.014.72381\nWhat is the detailed description of the age category code 'Under 20'? CKHB_CMS_035.014.72382\nWhat is the detailed description of the age category code '20-60'? CKHB_CMS_035.014.7238"
  },
  {
    "id": 1459,
    "db_id": "real_estate_rentals",
    "question": "Give the category description of the age category 'Over 60'.",
    "answer": "\n Criteria for the age category 'Over 60' are:\n  (a) age over 65.\n\n\\end{itemize}\n\\end{blockquote}"
  },
  {
    "id": 1460,
    "db_id": "real_estate_rentals",
    "question": "What are the different room sizes, and how many of each are there?",
    "answer": "\n You don\u2019t have to be a math whiz to get this right. For example: If I tell you that there are 5 rooms in total, but only 3 of them are small, then 75% of the total number of rooms is small rooms. So if you multiply 0.75 by the total room count (5), you get the percentage of small rooms, which is 3 out of 5 or 60%.\nYou can also use"
  },
  {
    "id": 1461,
    "db_id": "real_estate_rentals",
    "question": "Return the number of rooms with each different room size.",
    "answer": " \n     */\n    public int[] getCountOfRoomsBySize() {\n        int[] counts = new int[6];\n        for (int i = 0; i < counts.length; i++) {\n            counts[i] = roomList.stream().filter(r -> r.getSize() == (i + 1)).mapToInt(Room::getSize).sum();\n        }\n        return counts;\n    }\n"
  },
  {
    "id": 1462,
    "db_id": "real_estate_rentals",
    "question": "In which country does the user with first name Robbie live?",
    "answer": "\n  If no such user exists, return \"No user found\"\n  Otherwise, return the user's last name.\n"
  },
  {
    "id": 1463,
    "db_id": "real_estate_rentals",
    "question": "Return the country in which the user with first name Robbie lives.",
    "answer": " 2500 miles away from the country where the user with first name Sarah is living.\"\n        }\n    ],\n    \"description\": \"Given two users, find a user that lives in another country\",\n    \"helpLink\": \"\",\n    \"name\": \"FindUserInAnotherCountry\"\n}"
  },
  {
    "id": 1464,
    "db_id": "real_estate_rentals",
    "question": "What are the first, middle and last names of users who own the property they live in?",
    "answer": "\n I want to do this using a single query that will return three columns. The three columns are:\n\\begin{itemize}\n\\item First Name\n\\item Last Name\n\\item City (from Address table)\n\\end{itemize}\n\nThe table is called Person, and the address is stored in an Address table, and there is a one-to-one relationship between these two tables. The columns that I want to use are p.first_name, p"
  },
  {
    "id": 1465,
    "db_id": "real_estate_rentals",
    "question": "Return the full names of users who live in properties that they own.",
    "answer": "  I tried the following but it returns an empty result set:\n\n\\begin{code}\n SELECT u.first_name, u.last_name FROM users u JOIN user_properties up ON u.id = up.user_id WHERE EXISTS (SELECT 1 FROM properties p WHERE p.owner_id = u.id);\n\\end{code}\n\nComment: Possible duplicate of [Get users from a table that owns another table](https://stackoverflow."
  },
  {
    "id": 1466,
    "db_id": "real_estate_rentals",
    "question": "List the search content of the users who do not own a single property.",
    "answer": " \n            /// </summary>\n            public IEnumerable<UserDto> GetAllUsers() => this.mapper.Map<IEnumerable<UserDto>>(this.repository.GetAll());\n        }\n    }"
  },
  {
    "id": 1467,
    "db_id": "real_estate_rentals",
    "question": "What search strings were entered by users who do not own any properties?",
    "answer": "\n  private_search = Search.new(Search::SEARCH_TYPE[\"PROPERTY\"]).not_owned_by(current_user)\n  @properties = @search.paginate_and_order(:page => params[:property_page]).permit_search_filtering(@filters)\n  # In case the user has no properties but searched for a filter like 'status=available' he should not be able to further filter by that status.\n"
  },
  {
    "id": 1468,
    "db_id": "real_estate_rentals",
    "question": "List the last names and ids of users who have at least 2 properties and searched at most twice.",
    "answer": " \"at least 2\" means that a user with 1 property is not considered eligible, since we are only interested in users with at least two properties.\n\n\\begin{code}\n SELECT u.first_name, u.last_name, COUNT(DISTINCT p.id) AS num_properties FROM Users u JOIN Properties p ON u.id = p.owner GROUP BY u.first_name, u.last_name HAVING COUNT("
  },
  {
    "id": 1469,
    "db_id": "real_estate_rentals",
    "question": "What are the last names and ids of users who have searched two or fewer times, and own two or more properties?",
    "answer": "\n  SELECT u.last_name, u.id FROM (SELECT id FROM User WHERE email IN (SELECT email FROM UserSearch)) AS subquery JOIN (SELECT user_id FROM OwnershipGroup WHERE COUNT(DISTINCT property_id) > 1 ) AS subsubquery ON subsubquery.user_id = subquery.id JOIN User u ON subquery.id = u.id;"
  },
  {
    "id": 1470,
    "db_id": "bike_racing",
    "question": "How many bikes are heavier than 780 grams?",
    "answer": "\n In order to know how many bikes are heavier than 780 g, you need to first filter the bikes. Then, you can count the number of bikes.\n\n```javascript\nvar filteredBikes = bikes.filter(function(bike) { return bike.weight > 780; });\nconsole.log('There are ' + filteredBikes.length + ' bikes heavier than 780 grams');"
  },
  {
    "id": 1471,
    "db_id": "bike_racing",
    "question": "List the product names and weights of the bikes in ascending order of price.",
    "answer": " \n   //! \\return A vector of product names and prices\n   std::vector<std::pair<std::string, double>> getProductNamesAndPrices() const;\n};\n\nclass BikeShopException : public std::runtime_error {\npublic:\n   BikeShopException(const char *msg) : runtime_error(msg) {};  //! Constructor \n};"
  },
  {
    "id": 1472,
    "db_id": "bike_racing",
    "question": "List the heat, name, and nation for all the cyclists.",
    "answer": " \ud83e\udd29\nThe 2019-2020 LCCR Championship was a success and we\u2019re proud to have you all as members of our community. We hope that you are well and enjoying the rest of your weekend. To our athletes, we hope that next season is even better! Thanks again for being a part of it."
  },
  {
    "id": 1473,
    "db_id": "bike_racing",
    "question": "What are the maximum and minimum weight of all bikes?",
    "answer": "\n  Weight.max = max(bikedata['weight'])\n  Weight.min = min(bikedata['weight'])\n\n  # Print the values to the screen\n  print('Maximum weight:', Weight.max, 'Minimum weight:', Weight.min)"
  },
  {
    "id": 1474,
    "db_id": "bike_racing",
    "question": "What is the average price of the bikes made of material 'Carbon CC'?",
    "answer": "\n Average price of all bikes made of 'Carbon CC' is 30,412.95 USD.\n\nAnswer: 30,412.95\n\\end{code}"
  },
  {
    "id": 1475,
    "db_id": "bike_racing",
    "question": "What are the name and result of the cyclists not from 'Russia' ?",
    "answer": "\n A = SELECT c.name, c.result FROM cyclist c WHERE c.nationality != 'Russian';"
  },
  {
    "id": 1476,
    "db_id": "bike_racing",
    "question": "What are the distinct ids and product names of the bikes that are purchased after year 2015?",
    "answer": "\n # Write your code here.\n SELECT DISTINCT p.product_name FROM products p JOIN product_purchases pp ON p.id = pp.product_id WHERE EXTRACT(YEAR FROM pp.purchase_date) > 2015;"
  },
  {
    "id": 1477,
    "db_id": "bike_racing",
    "question": "What are the ids and names of racing bikes that are purchased by at least 4 cyclists?",
    "answer": "\n \"SELECT bike_id, bike_name FROM racing_bikes JOIN (SELECT customer_id FROM customers GROUP BY customer_id HAVING COUNT(customer_id) >= 4) AS frequent_buyers ON racing_bikes.id = frequent_buyers.customer_id;\";"
  },
  {
    "id": 1478,
    "db_id": "bike_racing",
    "question": "What are the id and name of the cyclist who owns the most bikes?",
    "answer": "\n  SELECT c.id, c.name FROM cyclists c JOIN (SELECT m.cyclist_id, COUNT(*) AS num_bikes FROM machine_makers m GROUP BY m.cyclist_id) AS mb ON c.id = mb.cyclist_id WHERE mb.num_bikes = (SELECT MAX(num_bikes) FROM mb);"
  },
  {
    "id": 1479,
    "db_id": "bike_racing",
    "question": "What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?",
    "answer": "\n The result I want is a list of distinct products that are sold in the UK (or Russian) and not shared with other countries.\n SELECT DISTINCT p.product_name FROM products p JOIN product_countries pc ON p.product_id = pc.product_id WHERE pc.country_code NOT IN ('RU','GB') ORDER BY p.product_name NULLS LAST;"
  },
  {
    "id": 1480,
    "db_id": "bike_racing",
    "question": "How many different levels of heat are there for the cyclists?",
    "answer": "\n At some point I'll have to look at this. Thanks for your answer though!\n\nAnswer: This is a classical example of [heat transfer](https://en.wikipedia.org/wiki/Heat_transfer) in a cavity, see e.g. [this question on Math.SE](https://math.stackexchange.com/q/231479).\n\nIt's not difficult to see that the heat transfer is proportional"
  },
  {
    "id": 1481,
    "db_id": "bike_racing",
    "question": "How many cyclists did not purchase any bike after year 2015?",
    "answer": "\n Is it true that there are no bikes with the name \u201cMing\u201d on them anymore? Do I need to look for a different brand? Or is this just a marketing trend? Is it like when Apple used to have a product called the \"iMing\"?\n Certainly, some products had the word \u201cApple\u201d in their names. Thanks for any clarification you can provide!\nYou don't need to buy bikes with the name Ming"
  },
  {
    "id": 1482,
    "db_id": "bike_racing",
    "question": "What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?",
    "answer": "\nI tried this but it didn't work for me. It returned the same values as I entered in the SELECT statement.\n SELECT DISTINCT b.name FROM Bikes b WHERE b.distance < (SELECT AVG(b2.distance) FROM Bikes b2 WHERE b2.id = b.id);"
  },
  {
    "id": 1483,
    "db_id": "bike_racing",
    "question": "List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.",
    "answer": "\n  |- The name and price of the bike that is owned by the cycling team 'Garmin'\n50% discount for the bike that is owned by the cyclists named 'Lance Armstrong' and 'Freda Madvula'.\n"
  },
  {
    "id": 1484,
    "db_id": "bike_racing",
    "question": "Show the name, nation and result for the cyclists who did not purchase any racing bike.",
    "answer": " The cyclists that purchased a racing bike will show the name of the cyclist only.\n\nAnswer: \\begin{code}\n SELECT c.name, c.nation, c.result FROM cycling_team AS t JOIN cyclist_cyclingteam AS cc ON t.id = cc.cyclingteam_id AND cc.deleted = 0 JOIN cyclists AS c ON c.id = cc.cyclist_id WHERE NOT EXISTS (SELECT"
  },
  {
    "id": 1485,
    "db_id": "bike_racing",
    "question": "What are the names of the bikes that have substring 'fiber' in their material?",
    "answer": "\n  SELECT DISTINCT b.name FROM Bike b WHERE b.material ILIKE '%fiber%';"
  },
  {
    "id": 1486,
    "db_id": "bike_racing",
    "question": "How many bikes does each cyclist own? Order by cyclist id.",
    "answer": " \n    SELECT c.cyclist_id, COUNT(b.bike_id) AS number_of_bikes FROM cyclists c JOIN bikes_owned bo ON c.cyclist_id = bo.cyclist_id GROUP BY c.cyclist_id ORDER BY c.cyclist_id NULLS LAST;"
  },
  {
    "id": 1487,
    "db_id": "bakery_1",
    "question": "What is the most expensive cake and its flavor?",
    "answer": "\n Category: Desserts | Tags: baking, baked goods, butterscotch, cakes, chocolate, chocolate cake, chocolate frosting, dark chocolate, decadence, delectable desserts, delicious cake, edible butterscotch, exotic flavors, exotic recipes, exquisite desserts, flavor of the month, frosting, g"
  },
  {
    "id": 1488,
    "db_id": "bakery_1",
    "question": "Give the id and flavor of the most expensive cake.",
    "answer": " 136,700,000\n     * 1892528 = 4735401 - 1367000000 + 1892528 = 6057529\n     *\n     * 3475401, 6057529\n     * 1367000000,"
  },
  {
    "id": 1489,
    "db_id": "bakery_1",
    "question": "What is the cheapest cookie and its flavor?",
    "answer": "\n How does one know what to order at a restaurant? What's the best coffee shop in town? How do I find the nearest place to buy milk? What's the best park to go to for hiking? And so on. These kinds of questions have become increasingly common as the world has gotten more and more dependent on technology.\nThe rise in the popularity of asking questions via smartphones or tablets is largely due to the fact that people are now"
  },
  {
    "id": 1490,
    "db_id": "bakery_1",
    "question": "What is the id and flavor of the cheapest cookie?",
    "answer": "\n  If a cookie is marked as \"special order\", what does that mean? Does it get made differently, or are there special ingredients used?\n  How do you make your cookies?\n  Have you ever had any complaints about your cookies?\n\\end{blockquote}"
  },
  {
    "id": 1491,
    "db_id": "bakery_1",
    "question": "Find the ids of goods that have apple flavor.",
    "answer": "  I know you can do this with a regex like this:\n\n\\begin{code}\n\n SELECT g.id FROM goods g WHERE g.name ilike '%apple%'\n\\end{code}"
  },
  {
    "id": 1492,
    "db_id": "bakery_1",
    "question": "What are the ids with apple flavor?",
    "answer": "\n A: Let's take a look at this data set and see what we can find. We will start by finding all the items that have an apple flavor. We can do this using the SELECT statement in conjunction with the WHERE clause.\n SELECT id FROM inventory_items WHERE flavor = 'apple';"
  },
  {
    "id": 1493,
    "db_id": "bakery_1",
    "question": "What are the ids of goods that cost less than 3 dollars?",
    "answer": "\n Cashiers, I'm looking at you.\nAnd now we have this:\nThe world's largest bookstore, in the form of a giant bookshelf. The world's largest post office, in the form of a postman with a tiny bag and a large stomach. A huge, old-fashioned clock. A small pond, full of very small fish. A long table, with a few chairs. A room for the blind"
  },
  {
    "id": 1494,
    "db_id": "bakery_1",
    "question": "Give the ids of goods that cost less than 3 dollars.",
    "answer": " \"\n                                   + \"The price is: {0}\", item.Price));\n                    Console.WriteLine();\n                }\n            }\n        }\n    }\n}"
  },
  {
    "id": 1495,
    "db_id": "bakery_1",
    "question": "List the distinct ids of all customers who bought a cake with lemon flavor?",
    "answer": "\n  SELECT DISTINCT c.customer_id FROM cakes c JOIN orders o ON c.customer_id = o.orderer WHERE c.flavor = 'lemon';"
  },
  {
    "id": 1496,
    "db_id": "bakery_1",
    "question": "What are the distinct ids of customers who bought lemon flavored cake?",
    "answer": "\n  SELECT DISTINCT c.customer_id FROM cake c JOIN order_item oi ON c.customer_id = oi.order_id WHERE c.flavor = 'lemon';"
  },
  {
    "id": 1497,
    "db_id": "bakery_1",
    "question": "For each type of food, tell me how many customers have ever bought it.",
    "answer": " \n- Then for each customer, tell me which products they've purchased.  \nI'd like to know the total amount spent by each customer on all products."
  },
  {
    "id": 1498,
    "db_id": "bakery_1",
    "question": "How many customers have bought each food?",
    "answer": "\n What do the products cost?\n The store will be open on Saturday.\n This is what I did. I put up a Facebook page and made an ad for the event.\n When people started asking me if I was going to sell my own food or not, that's when I realized it would be silly to have an ad saying I was selling my own product but then just state on the ad \"we're open on Saturday\" - which is a very vague statement."
  },
  {
    "id": 1499,
    "db_id": "bakery_1",
    "question": "Find the id of customers who shopped at the bakery at least 15 times.",
    "answer": " CTE-YEARS is a subquery that returns all the years that a customer has shop at the bakery, so you can't have more than 15 years (since there's a limit on the number of years a customer has to shop for a discounted price).\n SELECT DISTINCT c.id FROM customers c JOIN CTE_YEARS y ON c.id = y.customer_id WHERE (SELECT COUNT(DISTINCT y"
  },
  {
    "id": 1500,
    "db_id": "bakery_1",
    "question": "What are the customer ids of customers who have at least 15 receipts?",
    "answer": "\n 'use strict';\n  var customerIds = [];\n  for (var c in customers) {\n    if (customers[c].receipts.length >= 15) customerIds.push(customers[c].id);\n  }\n  return customerIds;\n}\n"
  },
  {
    "id": 1501,
    "db_id": "bakery_1",
    "question": "What is the last name of the customers who shopped at the bakery more than 10 times?",
    "answer": "\n (last_name) AS (SELECT c.last_name FROM customers c GROUP BY c.last_name HAVING COUNT(c.customer_id) > 10) SELECT c.last_name, c.first_name, c.title FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.last_name IN (SELECT last_name FROM customer_with_orders_more_than_10_"
  },
  {
    "id": 1502,
    "db_id": "bakery_1",
    "question": "Give the last names of customers who have been to the bakery more than 10 times?",
    "answer": "\n (Note that you should not include any customer whose name is \u201cBob\u201d.) */\n\n SELECT c.last_name FROM Customer c WHERE c.last_name != 'Bob' GROUP BY c.last_name HAVING COUNT(c.id) >= 10;"
  },
  {
    "id": 1503,
    "db_id": "bakery_1",
    "question": "How many types of Cake does this bakery sell?",
    "answer": "\n M & K is a bakery that specializes in chocolate cakes. Their products are available in many varieties, including chocolate cakes with nuts and cream. However, chocolate cakes without any additives are the most popular product of the company. The chocolate cake without additives is a classic, not too sweet and with good texture. They also make some other types of chocolate cakes that are more sweet"
  },
  {
    "id": 1504,
    "db_id": "bakery_1",
    "question": "Count the number of types of cake this bakery sells.",
    "answer": " 13 different flavors, to be exact!\nCoverage of the events that happened in New York City over the past few days.\nCelebrity chef Gordon Ramsay talks about what he's learned from his time in prison.\nEating disorder? I'm not one of those people. Well, at least I don't think so! This video is a testament to the fact that I have a strong stomach and a weak"
  },
  {
    "id": 1505,
    "db_id": "bakery_1",
    "question": "List all the flavors of Croissant available in this bakery.",
    "answer": " \ud83d\ude0a\nCroissants: These are made with finely divided biscuits and have a delicate crumb, perfect for making sandwiches or topping an apple tart with a fruit compote. \ud83c\udf5e"
  },
  {
    "id": 1506,
    "db_id": "bakery_1",
    "question": "What are all the flavors of croissant?",
    "answer": "\n Fancy Croissants, Plain Croissants, French Croissants and more!\n Breaded or not baked, these croissants are a delicious addition to any breakfast table. With different types of croissants available, this breaded treat is sure to please everyone.\n1125-165g (200 g)\nGermane Croissants, a delicious breaded treat with 7 different varieties to choose"
  },
  {
    "id": 1507,
    "db_id": "bakery_1",
    "question": "Give me a list of all the distinct items bought by the customer number 15.",
    "answer": " \"Sara\".\n\nI've tried with this query, but it returns empty: SELECT DISTINCT item_name FROM invoice JOIN customer_invoice ON invoice.id = customer_invoice.invoice_id WHERE customer_invoice.customer_id = 15;"
  },
  {
    "id": 1508,
    "db_id": "bakery_1",
    "question": "What are all the distinct items bought by customer 15?",
    "answer": "\n [select d.item_name, d.quantity_sold from customer c JOIN customers_to_items ci ON c.customer_id = ci.customer_id JOIN products p ON p.product_id = ci.item_id WHERE c.customer_id = 15;"
  },
  {
    "id": 1509,
    "db_id": "bakery_1",
    "question": "For each type of food, what are the average, maximum and minimum price?",
    "answer": "\n  <p class=\"text-center\">The prices are:</p>\n  <table class=\"table table-striped\">\n    <thead>\n      <tr>\n        <th class=\"text-center\">Food type</th>\n        <th class=\"text-center\">Average price</th>\n        <th class=\"text-center\">Maximum price</th>\n        <th class=\"text-center\">Minimum price"
  },
  {
    "id": 1510,
    "db_id": "bakery_1",
    "question": "What are the average, minimum and maximum prices for each food?",
    "answer": "\n  min_price = df['price'].min()\n [2.05]\n  max_price = df['price'].max() [10.95]\n  avg_price = (min_price + max_price) / 2.0\n  return {'minimum_price': min_price, 'average_price': avg_price, 'maximum_price': max_price}\n\\end{code}"
  },
  {
    "id": 1511,
    "db_id": "bakery_1",
    "question": "Find the receipt numbers where both Cake and Cookie were bought.",
    "answer": " \n   SELECT r.receipt_number FROM Receipts r JOIN Items i ON r.receipt_number = i.receipt_number WHERE i.name IN ('Cake', 'Cookie') GROUP BY r.receipt_number HAVING COUNT(DISTINCT i.name) = 2;"
  },
  {
    "id": 1512,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for instances where both cakes and cookies were purchased?",
    "answer": "\n C. Write a SELECT statement that returns all cake orders (order_id) from the orders table that do not have a corresponding cookie order (order_id) in the orders_with_cake table."
  },
  {
    "id": 1513,
    "db_id": "bakery_1",
    "question": "Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.",
    "answer": " 376205\n    SELECT DISTINCT r.receipt_number FROM Customer c JOIN Purchase p ON c.customer_id = p.customer_id AND c.last_name = 'LOGAN' JOIN Product pr ON p.product_id = pr.product_id AND pr.product_name = 'Croissant' ORDER BY r.receipt_number NULLS LAST;"
  },
  {
    "id": 1514,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for a customer with the last name Logan who purchased a croissant?",
    "answer": "\n A customer who has the last name Logan can purchase a croissant, but does not necessarily have a receipt number. The customer's first name is not known.\n\nAnswer: SELECT 'Unknown'."
  },
  {
    "id": 1515,
    "db_id": "bakery_1",
    "question": "What is the receipt number and date of the receipt in which the most expensive item was bought?",
    "answer": "\n  If multiple items are purchased on the same day, list the receipt numbers and dates only once.\n  Return the answer as a sorted list (by receipt number) of objects with two attributes: rec_num and rec_date.\n\"\"\"\n    def most_expensive(self):\n        return sorted(\n            [{'rec_num': r['receipt'], 'rec_date': r['date']} for r in self.receipts"
  },
  {
    "id": 1516,
    "db_id": "bakery_1",
    "question": "What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?",
    "answer": "\n  \"\"\"\n        return self.receipts[-1]\n    def latest_receipt(self):\n        \"\"\"Return the most recent receipt in the receipt book, or None if there are no receipts.\"\"\"\n        if not self.receipts:\n            return None\n        else:\n            return self.receipts[-1]"
  },
  {
    "id": 1517,
    "db_id": "bakery_1",
    "question": "What is the item that was bought the least number of times?",
    "answer": "\n  IMPORTANT: You must use only one SELECT statement and no subqueries.\n  (e.g. \" SELECT product_name FROM products WHERE product_id = (SELECT product_id FROM sales ORDER BY count_sales DESC LIMIT 1)\")."
  },
  {
    "id": 1518,
    "db_id": "bakery_1",
    "question": "Which item was bought the fewest times?",
    "answer": "\n The last 100 items purchased are:\");\n  for (int i = 0; i < 100; i++) {\n    System.out.println(purchased[i]);\n  }\n}\n\n/** Returns whether or not an item is in the purchase history of a user */\nprivate static boolean hasPurchased(String username, String item) {\n  // TODO: Implement this method\n  return false;\n"
  },
  {
    "id": 1519,
    "db_id": "bakery_1",
    "question": "How many goods are available for each food type?",
    "answer": "\n The food_types table has a one to many relationship with the products table. When I am selecting a product from the products table, I want to display all of the available food types along with the products that share those food types. For example:\n\\begin{itemize}\n\\item Product 1 - (fruit) apple - has two food_types (FoodType 1, FoodType 2) and is available in 50 stores\n\\item Product "
  },
  {
    "id": 1520,
    "db_id": "bakery_1",
    "question": "Count the number of goods for each food type.",
    "answer": " \n# Adds a new column to the DataFrame called \"Food Type Count\" with the number of items in that category\nfood_count = food_data['Food Type'].value_counts()\n\n# Concatenate this new DataFrame onto the original DataFrame\nfood_data = pd.concat([food_data, pd.DataFrame(food_count)], axis=1)\n\n# Drop the \"Food Type Count"
  },
  {
    "id": 1521,
    "db_id": "bakery_1",
    "question": "What is the average price for each food type?",
    "answer": "\n Tags: price, average-price, grocery-store, shopping\n \n"
  },
  {
    "id": 1522,
    "db_id": "bakery_1",
    "question": "Give the average price for each food type.",
    "answer": " \n\tpublic double getAveragePrice(FoodType type) {\n\t\tdouble total = 0;\n\t\tfor (Food f : this.foods) {\n\t\t\tif (f.getType() == type) {\n\t\t\t\ttotal += f.getPrice();\n\t\t} }\n\t\treturn total / this.getFoodCount(type);\n\t}\n}"
  },
  {
    "id": 1523,
    "db_id": "bakery_1",
    "question": "What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?",
    "answer": "\n # Write an SQL query to find these products. Use a LIKE operator in the WHERE clause.\n SELECT p.id FROM Products p WHERE p.name ilike '%apricot%' AND p.price < 5.00 ORDER BY p.id NULLS LAST;"
  },
  {
    "id": 1524,
    "db_id": "bakery_1",
    "question": "Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.",
    "answer": " \"Goods.id\" <= 5) ORDER BY \"Goods.id\" NULLS LAST;"
  },
  {
    "id": 1525,
    "db_id": "bakery_1",
    "question": "Find flavor of cakes that cost more than 10 dollars.",
    "answer": " Cake costs from 5 to 20 dollars, depending on the type of chocolate used, the number of candles, and the size of the cake.\n\n\\begin{code}\nSELECT CAST(AVG(CASE WHEN price > 10 THEN price END) AS FLOAT)/NULLIF(COUNT(*), 0) AS avg_price FROM cakes WHERE price > 10;\n\\end{code}"
  },
  {
    "id": 1526,
    "db_id": "bakery_1",
    "question": "What are the flavors of cakes that cost more than 10 dollars?",
    "answer": "\n Fatso Slim's Cake Emporium.\nA: These are not available to purchase, but we do offer a free sample for you to try!"
  },
  {
    "id": 1527,
    "db_id": "bakery_1",
    "question": "Give me the distinct id and price for all goods whose price is below the average of all goods?",
    "answer": "\n  SELECT g.id, g.price FROM Goods g WHERE g.price < (SELECT AVG(g2.price) FROM Goods g2);"
  },
  {
    "id": 1528,
    "db_id": "bakery_1",
    "question": "What are the distinct ids and prices for goods that cost less than the average good?",
    "answer": "\n  SELECT DISTINCT g.id, AVG(g.price) FROM Goods g GROUP BY g.id HAVING AVG(g.price) < (SELECT AVG(price) FROM Goods);"
  },
  {
    "id": 1529,
    "db_id": "bakery_1",
    "question": "What are the distinct ids of all goods that are cheaper than some goods of type Tart?",
    "answer": "\n  */\n    public static Set<Integer> getCheapGoods(final int aTartType) {\n        final Set<Integer> cheapGoods = new HashSet<>();\n        for (int i = 0; i < CATS; i++) {\n            if (goodTypes[i] < aTartType) {\n                cheapGoods.add(i);\n            }\n        }\n        return cheapGoods;\n   "
  },
  {
    "id": 1530,
    "db_id": "bakery_1",
    "question": "Give the distinct ids for goods that cost less than any Tart.",
    "answer": " 20% of the time, this will give you a nice mix of different IDs.\n\nAnswer: The most efficient way to do this is with a random number generator. If your RNG produces a series of numbers in order, then the first value will be larger than 0.5 * (MAX(ids) - MIN(ids)) and the second will be smaller than that value. This works because all numbers are equally likely, so it's not possible to predict"
  },
  {
    "id": 1531,
    "db_id": "bakery_1",
    "question": "List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.",
    "answer": " C#\nI am trying to write a query to get the customer name, product, and number of receipts in which the product was purchased.\n\n\\begin{code}\n SELECT c.customerName, p.productName, COUNT(pr.receiptNumber) AS receiptCount FROM Customers c JOIN Products p ON c.customerID = CAST(p.productID AS integer) JOIN Receipts pr ON c.customerID = CAST("
  },
  {
    "id": 1532,
    "db_id": "bakery_1",
    "question": "What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?",
    "answer": "\n In my head I'm thinking about this in terms of an equation like: $x+y=14$, where x and y are the two receipts. But I'm not sure how to find the values of x and y from just knowing the values of the two receipts. Can you help me out? Thanks in advance!\n\nComment: What is your definition for \"dollars\"? Does it mean 100 cents, or 1"
  },
  {
    "id": 1533,
    "db_id": "bakery_1",
    "question": "On which date did some customer buy a good that costs more than 15 dollars?",
    "answer": "\n \"2019-07-24\" for example.\nI've tried with the following query:\n SELECT COUNT(*) FROM order_items oi JOIN orders o ON oi.order_id = o.order_id JOIN products p ON o.product_id = p.product_id WHERE p.price > 15 AND date(o.order_date) >= '2019-07-24';"
  },
  {
    "id": 1534,
    "db_id": "bakery_1",
    "question": "Which date corresponds to when a customer purchased a good costing over 15 dollars?",
    "answer": "\n \"1960-01-01\" means that the customer ordered on the first of January, 1960.\n\\end{blockquote}"
  },
  {
    "id": 1535,
    "db_id": "bakery_1",
    "question": "Give me the list of ids of all goods whose id has \"APP\".",
    "answer": "\n  ```SELECT g.id FROM Goods g WHERE g.id ILIKE '%APP%' ORDER BY g.id NULLS LAST;```"
  },
  {
    "id": 1536,
    "db_id": "bakery_1",
    "question": "What are all the ids of goods with an id which contains \"APP\"?",
    "answer": "\n  */\n        public static List<int> GetIds(string query) =>\n            Goods.Select(g => g.Id).Where(id => id.ToString().Contains(query));"
  },
  {
    "id": 1537,
    "db_id": "bakery_1",
    "question": "Which good has \"70\" in its id? And what is its price?",
    "answer": "\n  Product.find_by(id: \"70\") # => <Product name=\"Tires\">\n  Product.find_by(id: \"70\").price # => 45\nend\n\\end{code}"
  },
  {
    "id": 1538,
    "db_id": "bakery_1",
    "question": "What are the id and price for the good with \"70\" in its id?",
    "answer": "\n Tags: [\"70\", \"id\", \"price\"]\n  ```\n - If I search for \"15\" in any field, I want to get all the fields for that row. But if the field is \"price\", I only want \"price\". The other fields should be excluded. Tags: [\"15\", \"*\"]\n  ```\n - In a similar vein to the previous one, if the field is \"70\", I only want \"id\""
  },
  {
    "id": 1539,
    "db_id": "bakery_1",
    "question": "List the last names of all customers in an alphabetical order.",
    "answer": " \n# I am not sure how to do this. \n# Do you like to give it a try?"
  },
  {
    "id": 1540,
    "db_id": "bakery_1",
    "question": "What are the last names of the customers in alphabetical order?",
    "answer": "\n  Customer.order_by(:last_name).each do |customer|\n    puts customer.last_name\n  end\nend"
  },
  {
    "id": 1541,
    "db_id": "bakery_1",
    "question": "Return the ordered list of all good ids.",
    "answer": "  If an item is not in the list, then it has a bad id. */\n  def isGoodId(id: String): Boolean = goodIds contains id\n}"
  },
  {
    "id": 1542,
    "db_id": "bakery_1",
    "question": "Order the distinct good ids.",
    "answer": " 757071\n\nSELECT DISTINCT order_id FROM order_products;"
  },
  {
    "id": 1543,
    "db_id": "bakery_1",
    "question": "Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.",
    "answer": " \"apple flavored\" products\n    SELECT r FROM Receipt r JOIN Order o ON r.order_id = o.order_id WHERE (SELECT COUNT(*) FROM Product p WHERE p.product_name = 'apple flavored') > 0 AND o.customer_id = 12;"
  },
  {
    "id": 1544,
    "db_id": "bakery_1",
    "question": "What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?",
    "answer": "\n CTE AS OF '2023-01-01'.\";"
  },
  {
    "id": 1545,
    "db_id": "bakery_1",
    "question": "Find all receipts which has the latest date. Also tell me that date.",
    "answer": "\n\\item Then find the latest receipt date from the above query result and store that in a variable 'latest_date'.\n\\item Use that 'latest_date' to filter your receipts table based on the latest date and get all receipt records for those dates.\n\\end{itemize}"
  },
  {
    "id": 1546,
    "db_id": "bakery_1",
    "question": "What is the receipt number with the latest date, and what is that date?",
    "answer": "\n Tags: data-science, data-analytics, kaggle, jupyter-notebook, python-3.x, machine-learning\n\nQuestion: How do I find the most recent receipt in a CSV file?\n\nI am very new to programming and have started with a basic Python course on Udacity. I'm working through the Kaggle competition for Data Science and currently struggling with finding the most recent date in a CSV file.\n"
  },
  {
    "id": 1547,
    "db_id": "bakery_1",
    "question": "Find all receipts which either has the earliest date or has a good with price above 10.",
    "answer": " #5 has an offer of 10, so it is ineligible, but there are other offers lower than 10, so we take the next one.\n\nI am looking for a sql query that can give me the first receipt that is either the earliest date or has the lowest price offer above 10 and not have any other offers below that price. I could also use the word \"efficiently\" in the query if you want to show that it'"
  },
  {
    "id": 1548,
    "db_id": "bakery_1",
    "question": "What are all the receipt numbers that have a good with a price above 10 or have the earliest date?",
    "answer": "\n I want to use the `where` clause like this:\n  SELECT r.receipt_number, r.date FROM Receipts r WHERE (r.price > 10 OR (SELECT MAX(r2.date) FROM Receipts r2)) ORDER BY r.date NULLS LAST;"
  },
  {
    "id": 1549,
    "db_id": "bakery_1",
    "question": "What are the ids of Cookie and Cake that cost between 3 and 7 dollars.",
    "answer": " \n SELECT c.id, c.name, c.cost FROM Cookie c WHERE c.cost BETWEEN 3 AND 7;"
  },
  {
    "id": 1550,
    "db_id": "bakery_1",
    "question": "Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.",
    "answer": " \"\n\ndef filter_cost(cost, low, high):\n    return [c['id'] for c in cookies if (c['price'] >= low) & (c['price'] <= high)]\n\\end{code}"
  },
  {
    "id": 1551,
    "db_id": "bakery_1",
    "question": "Find the first name and last name of a customer who visited on the earliest date.",
    "answer": "  \r\nSELECT c.first_name, c.last_name FROM customers c JOIN reservations r ON c.id = r.customer_id ORDER BY r.date_time ASC LIMIT 1;"
  },
  {
    "id": 1552,
    "db_id": "bakery_1",
    "question": "What is the full name of the customer who visited on the earliest date?",
    "answer": "\n Tags: Data Science, SQL, Python, Data Analysis, Database, Customer, customer data\n \n"
  },
  {
    "id": 1553,
    "db_id": "bakery_1",
    "question": "What is average price of goods whose flavor is blackberry or blueberry?",
    "answer": "\n The price for the item \"Goods with Flavor Blackberry, Blueberry\" can be as high as $250.00 USD (according to the information provided by the seller).\n\nAnswer found: 250.00"
  },
  {
    "id": 1554,
    "db_id": "bakery_1",
    "question": "What are the average prices of goods with blackberry or blueberry flavor?",
    "answer": "\n On an average, what is the price of a product with blueberry flavor on Amazon.com compared to a product with blackberry flavor? Which one is more expensive?\n I don't know and that's why I'm asking!"
  },
  {
    "id": 1555,
    "db_id": "bakery_1",
    "question": "Return the cheapest price for goods with cheese flavor.",
    "answer": " 148.99 is the lowest among all other options.\nThe cake's average price is 70.56. It is more expensive than the average of the other products. Therefore, it is the most expensive product in comparison to the other products."
  },
  {
    "id": 1556,
    "db_id": "bakery_1",
    "question": "What is the cheapest good with cheese flavor?",
    "answer": "\n Flavors: Cheesy, Creamy, Yummy.\n\"I have a 5-year-old boy who eats pizza like it's going out of style,\" said Janae. \"But he loves spicy food too.\"\nShe is also an avid ice hockey player and a talented photographer.\nJane is married to Mark and has two sons, Tommy and Timmy. They all have their own names."
  },
  {
    "id": 1557,
    "db_id": "bakery_1",
    "question": "What are highest, lowest, and average prices of goods, grouped and ordered by flavor?",
    "answer": "\n  SELECT f.flavor, MAX(p.price) AS max_price, MIN(p.price) AS min_price, AVG(p.price) AS avg_price FROM products p JOIN product_flavors f ON p.id = f.product_id GROUP BY f.flavor ORDER BY max_price DESC NULLS LAST;"
  },
  {
    "id": 1558,
    "db_id": "bakery_1",
    "question": "What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?",
    "answer": "\n  SELECT f.name AS flavor_name, MIN(p.price) AS min_price, MAX(p.price) AS max_price, AVG(p.price) AS avg_price FROM Flavors f JOIN Products p ON f.id = p.fk_flavor GROUP BY f.name ORDER BY avg_price DESC NULLS LAST;"
  },
  {
    "id": 1559,
    "db_id": "bakery_1",
    "question": "Return the lowest and highest prices of goods grouped and ordered by food type.",
    "answer": " \n```\n SELECT f.food_type, MIN(p.price) AS min_price, MAX(p.price) AS max_price FROM products p JOIN FOOD f ON p.product_id = f.product_id GROUP BY f.food_type ORDER BY min_price NULLS LAST, max_price NULLS LAST;"
  },
  {
    "id": 1560,
    "db_id": "bakery_1",
    "question": "What are the minimum and maximum prices of food goods, ordered by food?",
    "answer": "\n  SELECT f.food_name, MIN(f.price) AS min_price, MAX(f.price) AS max_price FROM foods f GROUP BY f.food_name ORDER BY min_price NULLS LAST;"
  },
  {
    "id": 1561,
    "db_id": "bakery_1",
    "question": "Find the top three dates with the most receipts.",
    "answer": " \nSELECT d.date, SUM(r.amount) AS total_amount FROM receipt r JOIN date d ON r.date_id = d.date_id GROUP BY d.date ORDER BY total_amount DESC NULLS LAST LIMIT 3;"
  },
  {
    "id": 1562,
    "db_id": "bakery_1",
    "question": "What are the three dates for which the most receipts were given?",
    "answer": "\n  The two dates that have the highest number of receipts are January 5th, 2013 and March 4th, 2013. These dates have a total of 17999 receipts (I know these are not the exact numbers but I am writing this code for fun)\n\\end{blockquote}\n\nComment: @Andrew I tried to help you with your question as much as possible, but I don'"
  },
  {
    "id": 1563,
    "db_id": "bakery_1",
    "question": "Which customer shopped most often? How many times?",
    "answer": "\n Home \u00bb Services \u00bb Hairdressing & Haircuts \u00bb Frequent Hairdresser or Haircuts?\n A: I've been going to this hairdresser every week for the past year. I think once a month should be enough. I don't like my hair being cut so short and it's not good looking. I prefer my long hair to look like my father's. If you cut my hair, it will be"
  },
  {
    "id": 1564,
    "db_id": "bakery_1",
    "question": "Give the customer id of the customer that made the most purchases, as well as the number of purchases made.",
    "answer": " \n\nAnswer the question: What is the name of the product with the highest number of reviews? "
  },
  {
    "id": 1565,
    "db_id": "bakery_1",
    "question": "For each date, return how many distinct customers visited on that day.",
    "answer": " \ndef unique_customers(date):\n    return len(set(orders[date]))\n\n# Plot a line graph of total orders vs. number of unique customers for every day in the dataset.\nplt.plot(orders.keys(), [total_orders(d) for d in orders.keys()], label='Total Orders')\nplt.plot(orders.keys(), [unique_customers(d) for d in orders.keys()"
  },
  {
    "id": 1566,
    "db_id": "bakery_1",
    "question": "How many cusomters visited on each date?",
    "answer": "\n The query: SELECT date_trunc('month', o.order_date) AS MONTH, COUNT(DISTINCT o.customer_id) AS unique_customers FROM orders o GROUP BY MONTH;"
  },
  {
    "id": 1567,
    "db_id": "bakery_1",
    "question": "Give me the first name and last name of customers who have bought apple flavor Tart.",
    "answer": " 537921, oranges?\nCrazy Pineapple Tango\nApple flavored Tart 537921 is a delicious dessert made from apples and sugar. Oranges are a healthy fruit that also have many benefits for the body. If you're looking for the first name and last name of customers who have purchased apple flavored tart 537921, oranges, you can try the following"
  },
  {
    "id": 1568,
    "db_id": "bakery_1",
    "question": "What are the full names of customers who bought apple flavored Tarts?",
    "answer": "\n CUSTOMER_NAME, COUNT(t.id) AS num_purchases FROM customer c JOIN tart t ON c.id = t.customer_id WHERE t.flavor = 'apple' GROUP BY c.first_name, c.last_name ORDER BY num_purchases DESC NULLS LAST;"
  },
  {
    "id": 1569,
    "db_id": "bakery_1",
    "question": "What are the ids of Cookies whose price is lower than any Croissant?",
    "answer": "\n  SELECT c.id FROM Cookie c WHERE c.price < (SELECT MIN(p.price) FROM Pret p);"
  },
  {
    "id": 1570,
    "db_id": "bakery_1",
    "question": "Give the ids of cookes that are cheaper than any croissant.",
    "answer": " \ud83e\udd50\n    public static var cookes = [1, 3, 5]\n    \n    /// Get a random cookie. \ud83c\udf6a\n    public static var random = cookes[0]\n}"
  },
  {
    "id": 1571,
    "db_id": "bakery_1",
    "question": "Give me the ids of Cakes whose price is at least as much as the average price of Tart?",
    "answer": "\n  SELECT c.id FROM Cake c JOIN (SELECT AVG(price) AS avg_price FROM Tart) AS t ON c.price >= t.avg_price;"
  },
  {
    "id": 1572,
    "db_id": "bakery_1",
    "question": "What are the ids of cakes that are at least as expensive as the average Tart?",
    "answer": "\n  SELECT CAKE.ID FROM CAKE WHERE CAKE.PRICE >= (SELECT AVG(CAKE2.PRICE) FROM CAKE CAKE2);"
  },
  {
    "id": 1573,
    "db_id": "bakery_1",
    "question": "What are the ids of goods whose price is above twice the average price of all goods?",
    "answer": "\n  SELECT g.id FROM Goods g WHERE g.price > (SELECT AVG(g2.price) FROM Goods g2);"
  },
  {
    "id": 1574,
    "db_id": "bakery_1",
    "question": "Give the ids of goods that are more than twice as expensive as the average good.",
    "answer": " 2. Get a list of all the items with a price that is higher than or equal to 50% of the average price. 3. Get a list of all the items with a price that is less than or equal to 50% of the average price.\n\nComment: @VadimKotovsky I have updated my answer, let me know if this meets your requirements?"
  },
  {
    "id": 1575,
    "db_id": "bakery_1",
    "question": "List the id, flavor and type of food of goods ordered by price.",
    "answer": " \n  \n    public static void main(String[] args) {\n        double total_price = 0;\n        String item_name = \"\";\n        int quantity = 1;\n        HashMap<Integer, ArrayList<Food>> list_of_foods = new HashMap<>();\n        \n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            Food f = new Food();\n            \n            System.out."
  },
  {
    "id": 1576,
    "db_id": "bakery_1",
    "question": "What are the ids, flavors, and food types of goods, ordered by price?",
    "answer": "\n  public ArrayList<Food> getSortedFoodList() {\n Cursor c = database.rawQuery(\"SELECT * FROM Food ORDER BY Price DESC\", null); return convertCursorToList(c); }\n\n  // Get all the data in the Database.\n  public ArrayList<Food> getAllFoodData() { Cursor c = database.rawQuery(\"SELECT * FROM Food\", null); return convertCursorToList(c); }\n\n  //"
  },
  {
    "id": 1577,
    "db_id": "bakery_1",
    "question": "Return a list of the id and flavor for Cakes ordered by flavor.",
    "answer": " \n   * @return A list of cakes with their ids and flavors \n   */\n  public List<Cake> getAllCakes() {\n    return CAKE_ORDERED;\n  }\n}"
  },
  {
    "id": 1578,
    "db_id": "bakery_1",
    "question": "What are the ids and flavors of cakes, ordered by flavor?",
    "answer": "\n  def list_cake_flavors(self) -> List[CakeFlavor]:\n 'SELECT DISTINCT c.flavor FROM Cake c ORDER BY c.flavor NULLS LAST'\n\nclass CakeShop:\n  @property\n  @abstractmethod\n  def list_cake_flavors(self) -> List[CakeFlavor]: ... # pragma: no cover\n"
  },
  {
    "id": 1579,
    "db_id": "bakery_1",
    "question": "Find all the items that have chocolate flavor but were not bought more than 10 times.",
    "answer": " # In this case, we are using the 'filter' method on the array of results from our previous query.\n\nputs \"Chocolate items with less than 10 sales: #{chocolate_items.filter { |item| item['sales'] < 10 }}\""
  },
  {
    "id": 1580,
    "db_id": "bakery_1",
    "question": "What are the items with chocolate flavor that were purchased at most 10 times.",
    "answer": " Criteria 2: Find all the products with the name \"chocolate\" or \"flavored\" in their name, regardless of case. Criteria 3: Find all products that have a price more than 500.\n\n```javascript\ndb.products.find(c1 AND (c2 OR c3))\n```"
  },
  {
    "id": 1581,
    "db_id": "bakery_1",
    "question": "What are the flavors available for Cake but not for Tart?",
    "answer": "\n In order to make a cake, you have to know how to make a dough from scratch, which requires time and patience. If you're in a hurry, consider purchasing an already prepared cake mix that has all the ingredients pre-mixed and ready to use. A similar situation exists for Tart - you can buy a premade Tart mix at the store or on the web that contains all the necessary ingredients.\nIf you'"
  },
  {
    "id": 1582,
    "db_id": "bakery_1",
    "question": "Give the flavors of Cakes that are not available for Tart.",
    "answer": " 2018-07-29T17:45:39Z\n */\npublic class UnavailableCakeFlavorException extends Exception {\n\n    public UnavailableCakeFlavorException(String message) {\n        super(message);\n    }\n}"
  },
  {
    "id": 1583,
    "db_id": "bakery_1",
    "question": "What is the three most popular goods in this bakery?",
    "answer": "\n A) cakes B) cookies C) chocolates D) breadsticks \n Apple, the fruit company, was founded by Steve Jobs and was acquired by the much larger and more successful apple-based company, Microsoft. The founding of Apple (and its acquisition by Microsoft) are fictional events in a made up story. The question is \"What is the most popular good in this bakery?\" and the answer is C) chocolates."
  },
  {
    "id": 1584,
    "db_id": "bakery_1",
    "question": "Give the three most purchased items at this bakery.",
    "answer": " The following data should be returned:\n\n```text\n SELECT i.name, p.quantity_sold, SUM(p.quantity_sold) OVER () AS total_quantity_sold FROM Item i JOIN PurchasedItem p ON i.item_id = p.item_id;"
  },
  {
    "id": 1585,
    "db_id": "bakery_1",
    "question": "Find the ids of customers who have spent more than 150 dollars in total.",
    "answer": " \"I can do that\"\n\nI'm using the following query to find customer ids whose total amount spent is over $150:\n\n\\begin{code}\n SELECT c.id FROM orders o JOIN customers c ON o.customer_id = c.id WHERE o.total_amount_spent > 150;\n\\end{code}"
  },
  {
    "id": 1586,
    "db_id": "bakery_1",
    "question": "What are the ids of customers who have spent over 150 dollars in total?",
    "answer": "\n \" SELECT c.customer_id FROM customer c JOIN order o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING SUM(o.order_total) > 150;"
  },
  {
    "id": 1587,
    "db_id": "bakery_1",
    "question": "Find the ids of customers whose average spending for each good is above 5.",
    "answer": " \"Good\" refers to the category of the product (e.g. electronics, books etc.).\n    SELECT c.customer_id FROM customer c JOIN orders o ON c.customer_id = o.customer_id WHERE AVG(o.order_value) > 5 GROUP BY c.customer_id;"
  },
  {
    "id": 1588,
    "db_id": "bakery_1",
    "question": "What are the ids of customers who spend more than 5 on average for each good?",
    "answer": "\n CURRENT_DATE = '2018-12-31'::DATE; SELECT oi.product_id, AVG(oi.unit_price) AS avg_price FROM order_items oi JOIN orders o ON oi.order_id = o.order_id WHERE EXTRACT(YEAR FROM o.order_date) <= EXTRACT(YEAR FROM CURRENT_DATE) AND o.customer"
  },
  {
    "id": 1589,
    "db_id": "bakery_1",
    "question": "On which day did the bakery sell more than 100 dollars in total.",
    "answer": " Clients may pay cash or with a card, and may be charged for their purchases if the bakery does not receive payment within 30 days of the date of delivery.\n    * Payment is made using a credit card only after all the delivery orders have been paid for in full, on the due date. All cash payments are considered made immediately upon receipt by the bakery. A customer who has not paid his/her order within 3"
  },
  {
    "id": 1590,
    "db_id": "bakery_1",
    "question": "On what dates did the bakery sell more than 100 dollars worth of goods in total?",
    "answer": "\n Tags: food, grocery, market, retailing, sales, trading Post navigationPrevious post Next post\n More on the topic of food and grocery stores and their importance for the country\nThe Importance of Food Retail Stores for Your Health\nFood retailers play an important role in your overall health. They provide you with necessary nutrients, minerals and vitamins that are essential for your life. In this article we will"
  },
  {
    "id": 1591,
    "db_id": "car_racing",
    "question": "How many drivers are there?",
    "answer": "\n My thoughts and prayers go out to the family of the late great George Floyd. He will not be forgotten. We will always remember him. \ud83d\udc94\ud83d\ude4f\nPrevious articleGovernor DeWine Signs Legislation to Aid First Responders\nNext articleIndiana\u2019s Second Consecutive Win in a Row; Next Up: Nine-point Victory over Tennessee"
  },
  {
    "id": 1592,
    "db_id": "car_racing",
    "question": "Find the total number of drivers.",
    "answer": " \n   int n_drivers = 0;\n   \n   // Start a for loop from 1 to the total number of vehicles.\n   for (int i = 1; i <= N_VEHICLES; i++) {\n       int v = V[i];\n       \n       // If this vehicle has a driver, increment the counter.\n       if (DRIVERS.count(v) != 0) n_drivers++;"
  },
  {
    "id": 1593,
    "db_id": "car_racing",
    "question": "Find the number of drivers whose points are greater than 150 for each make.",
    "answer": " \"GROUP BY car_make ORDER BY car_make, COUNT(*) DESC NULLS LAST;\"\n   SELECT car_make, COUNT(*) AS num_drivers FROM drivers WHERE points > 150 GROUP BY car_make ORDER BY car_make, num_drivers DESC NULLS LAST;"
  },
  {
    "id": 1594,
    "db_id": "car_racing",
    "question": "How many drivers receive points greater than 150 for each make? Show the make and the count.",
    "answer": " Cars from one make should be grouped together.\n\n\\begin{code}\n SELECT car_make, COUNT(car_points) AS point_count FROM cars GROUP BY car_make ORDER BY point_count DESC NULLS LAST;"
  },
  {
    "id": 1595,
    "db_id": "car_racing",
    "question": "Find the average age of drivers for each make.",
    "answer": " \nSELECT d.make, AVG(EXTRACT(YEAR FROM AGE(d.date_of_birth))) AS average_age FROM drivers d GROUP BY d.make ORDER BY average_age DESC NULLS LAST;"
  },
  {
    "id": 1596,
    "db_id": "car_racing",
    "question": "What is the average age of drivers for each make? Return the average age and make.",
    "answer": " \n        return [avg_age, car_make]\n    except KeyError as e:\n        # If there is no data for this make, return a tuple with just the average age\n        return [avg_age]"
  },
  {
    "id": 1597,
    "db_id": "car_racing",
    "question": "What are the average laps of all the drivers who are younger than 20?",
    "answer": "\n # SELECT AVG(d.age) FROM Drivers d WHERE d.age > 20;"
  },
  {
    "id": 1598,
    "db_id": "car_racing",
    "question": "Compute the average laps of drivers under the age of 20.",
    "answer": " \"\n\n  SELECT AVG(age) AS average_age FROM driver WHERE EXTRACT(YEAR FROM AGE(CURRENT_DATE, birth_date)) < 20;"
  },
  {
    "id": 1599,
    "db_id": "car_racing",
    "question": "What are the managers and sponsors of teams? Sort the results by Car Owners.",
    "answer": " \n- Write a query that displays the names, phone numbers and email addresses of teams in descending order of phone number. "
  },
  {
    "id": 1600,
    "db_id": "car_racing",
    "question": "Find the manager and sponsor for each team and order them by the car owner.",
    "answer": " 1-4-2023\n     * @param teamManagerList  List<TeamManager> The list of team managers to be sorted\n     */\n    public void sortTeamManagers(List<TeamManager> teamManagerList);\n}\n"
  },
  {
    "id": 1601,
    "db_id": "car_racing",
    "question": "Find the make that has more than one team.",
    "answer": "  If not, it's a single-team make.\n    bool multiTeam = false;\n    for (size_t i = 0; i < teams.size(); ++i) {\n        if (teams[i].makes.size() > 1) {\n            multiTeam = true;\n            break;\n        }\n    }\n    std::string name = mName + \" (\" + (multiTeam ? \"Multi-team"
  },
  {
    "id": 1602,
    "db_id": "car_racing",
    "question": "Which make has more than one team?",
    "answer": "\n I.e. can a player be on two teams at once?\n\\item How is the relationship between a team and its players? Is it 1:M (one team has many players) or 1:1 (one team has only one player)? If you want to support multiple teams, you have to use 1:1.\n\\end{itemize}"
  },
  {
    "id": 1603,
    "db_id": "car_racing",
    "question": "What are the makes of the teams with car owner \"Buddy Arrington\"?",
    "answer": "\n By the way, this is a great question because it shows how to do a reverse lookup, i.e. what are all the teams that have \"Buddy Arrington\" as their car owner? (This is a special case where we can assume that there may be multiple teams with the same name, hence why we use the reverse function)\n\n```javascript\nvar teams = getTeamNames(new TeamHasOwnerPredicate(\"Buddy Arrington\"));\nconsole."
  },
  {
    "id": 1604,
    "db_id": "car_racing",
    "question": "Find the make of the team whose car owner is \"Buddy Arrington\".",
    "answer": "\n  # => [#<Team:0x7fd4d910348b>]\n '\n  ```\n\n### `find_by_email`\nFinds teams that have a member with the given email address.\n  ```ruby\n  Team.find_by_email('team-member@example.com') # => [#<Team:0x7fd4d910348b>] '\n"
  },
  {
    "id": 1605,
    "db_id": "car_racing",
    "question": "What are the maximum and minimum points of drivers.",
    "answer": "  */\n        max_points = (max_points > p->total_points) ? p->total_points : max_points;\n\n        min_points = (min_points < p->total_points) ? p->total_points : min_points;\n    }\n\n    printf(\"Maximum total points: %d\\nMinimum total points: %d\\n\", max_points, min_points);\n}"
  },
  {
    "id": 1606,
    "db_id": "car_racing",
    "question": "Find the highest and lowest points of drivers.",
    "answer": "  This can be used to create a\n    *       2D heatmap of all the driver's locations in space and time.\n    */\n   public List<Point> findExtremePoints(final Collection<? extends VehicleState> vehicleStates, final double minSpatialDistance) {\n      final Set<? extends Point> points = new LinkedHashSet<>();\n      for (final VehicleState state : vehicleStates) {\n         if (!"
  },
  {
    "id": 1607,
    "db_id": "car_racing",
    "question": "How many drivers have points smaller than 150?",
    "answer": "\n Tags: Bicycle, cycling, sports, bikes, motorcycle\n The two-wheeled transportation vehicle that has been in the world for over a century.\nBy now you can probably guess what we\u2019re talking about; we\u2019ve written about bikes before, and not only because of their inherent interest to us as a group (aside from their intrinsic value) but also due to the fact that the past decade has seen a sur"
  },
  {
    "id": 1608,
    "db_id": "car_racing",
    "question": "Count the number of drivers whose points are below 150.",
    "answer": " \"\n\nComment: @Matthew: Yes, that is what I meant (I edited my question to clarify it). Thank you for your help.\n\nAnswer: \\begin{code}\n SELECT AVG(d.points) FROM Drivers d JOIN DriverPoints p ON d.id = p.driver_id WHERE p.points < 150;"
  },
  {
    "id": 1609,
    "db_id": "car_racing",
    "question": "List all the driver names in ascending order of age.",
    "answer": " \n   age = [18, 20, 22, 24, 27] \n   name = ['Dave', 'Tom', 'Nick', 'John'] \n   new_list = [] \n   for i in range(len(age)): \n       new_list.append((name[i], age[i])) \n   print(sorted(new_list, key=lambda x: x[1"
  },
  {
    "id": 1610,
    "db_id": "car_racing",
    "question": "Sort the driver names by age in ascending order.",
    "answer": " \n   for (int i = 0; i < m_numDrivers; i++) {\n      int j = i + 1;\n      while (j < m_numDrivers && m_driverNames[i].age > m_driverNames[j].age) {\n         Driver tempDriver = m_driverNames[j];\n         m_driverNames[j] = m_driverNames[i];\n         m_driver"
  },
  {
    "id": 1611,
    "db_id": "car_racing",
    "question": "List all the driver names in descending order of points.",
    "answer": " \n   std::sort(drivers.begin(), drivers.end(), [&](Drivers d1, Drivers d2) { return d1.points > d2.points; });\n}"
  },
  {
    "id": 1612,
    "db_id": "car_racing",
    "question": "What is the list of drivers ordered by points in descending order?",
    "answer": "\n \nquery.all().order_by('points DESC')\n\\end{code}"
  },
  {
    "id": 1613,
    "db_id": "car_racing",
    "question": "Please show the names of drivers, and countries they are from.",
    "answer": "  I will appreciate it if you can provide a working code. Thanks in advance.\n\n\\begin{code}\nSELECT d.name, c.country FROM Drivers d JOIN Countries c ON d.country_id = c.id ORDER BY d.name NULLS LAST;\n\\end{code}"
  },
  {
    "id": 1614,
    "db_id": "car_racing",
    "question": "For each driver, return his or her name and country.",
    "answer": " 2023-01-05T16:47:22Z \n// # Driver: Driver Name (Country)\n// # Driver: John Smith (United States)"
  },
  {
    "id": 1615,
    "db_id": "car_racing",
    "question": "Show the maximum points of the drivers from countries with capital \"Dublin\"",
    "answer": " in their name,\n  and the maximum points of the drivers without the country name (e.g., \"Massimiliano\") in their name.\n\\end{blockquote}\n\nMy code for the first part is:\n\n\\begin{code}\n SELECT MAX(p.points) FROM Drivers d JOIN Participants p ON d.id = p.driver_id WHERE d.country ILIKE '%Dublin%' GROUP BY d."
  },
  {
    "id": 1616,
    "db_id": "car_racing",
    "question": "What is the maximum points of the drivers from a country whose capital is \"Dublin\"?",
    "answer": "\n A. Dublin B. London C. Paris D. Rome E. Berlin F. Moscow\n1) Which of the following countries has the highest population density? A. Japan B. Mexico C. China D. India E. United States F. Canada"
  },
  {
    "id": 1617,
    "db_id": "car_racing",
    "question": "What is the average age of drivers from countries with official native language \"English\"",
    "answer": "\n 2. What is the average age of drivers in a country where the official native language is not English?"
  },
  {
    "id": 1618,
    "db_id": "car_racing",
    "question": "Find the average age of the drivers from the countries that use \"English\" as official native language.",
    "answer": " 70% of the population speaks English.\n\nThe average age of people in these countries is higher than the global average (68 years), but not significantly so. The distribution of ages varies considerably, with older men and younger women having more common patterns of age distribution than the global average. For example, 29% of the population are under the age of 45, compared to 18% globally; 27% of the population are"
  },
  {
    "id": 1619,
    "db_id": "car_racing",
    "question": "What are the countries that have drivers with points larger than 150?",
    "answer": "\n I think the first thing to do is to write a function for finding the countries which have points higher than 150. Let's call this function `high_points`. To do this we can just check if the driver point is greater than 150 and return the country name:\n```swift\nfunc highPoints() -> [String] {\n  var countries = [String]()\n  for driver in drivers {\n    if driver.point > 1"
  },
  {
    "id": 1620,
    "db_id": "car_racing",
    "question": "Find all the countries where some drivers have points above 150.",
    "answer": " \"\n\n\t^ (self countriesWhereSomeDriversHavePointsAbove: 150) asSortedCollection: [:a :b | a name < b name]"
  },
  {
    "id": 1621,
    "db_id": "car_racing",
    "question": "What is the capital of the country where the driver with the most points is from?",
    "answer": "\n  answer: England.\n- What is the name of the team that won the last Super Bowl?\n  answer: The New England Patriots won Super Bowl LIII in 2017.\n- What is the name of the highest-grossing movie of all time?\n  answer: Titanic (2019) was the highest-grossing film of all time until it's surpassed by Frozen 2 (20"
  },
  {
    "id": 1622,
    "db_id": "car_racing",
    "question": "Which country is the driver with the highest points from? Give me the capital of the country.",
    "answer": " 4. How many countries are there in the world? 5. What is the population of the most populous city in the world? 6. What is the name of the smallest country in the world, and what is its population? 7. What is the average age of people in the world, given by the United Nations Population Division, in 2004?"
  },
  {
    "id": 1623,
    "db_id": "car_racing",
    "question": "List each make with the number of drivers with that make.",
    "answer": "  If it has an error, then we will need to use the previous version of that make as a model.\n        // The following code will do that.\n        $makesWithError = $this->getMakesWithError();\n        $makeToReplace = array_pop($makesWithError);\n        if (!$makeToReplace) { return null; }\n\n        $lastMakeBeforeReplacement = $this->findLastMakeBeforeReplacement($"
  },
  {
    "id": 1624,
    "db_id": "car_racing",
    "question": "For each make, return the make and the count of drivers with that make.",
    "answer": " \n   SELECT m.make, COUNT(d.id) AS number_of_drivers FROM drivers d JOIN makes m ON d.make = m.name GROUP BY m.make ORDER BY number_of_drivers DESC NULLS LAST;"
  },
  {
    "id": 1625,
    "db_id": "car_racing",
    "question": "List the make that are associated with most drivers.",
    "answer": "  The goal of this project is to create a model for the correlation between these variables that can be used in a statistical modeling system to predict the likelihood of a driver being involved in a fatal accident from a crash data set.\n\n### Methodology\nThis analysis will use the following methodology:\n* Collect and clean the crash data\n* Perform exploratory data analysis (EDA) on the crash data to identify patterns and trends that may be indicative of a"
  },
  {
    "id": 1626,
    "db_id": "car_racing",
    "question": "Which make does the most drivers have?",
    "answer": "\n C. Drivers with a higher level of education and experience tend to be better at navigating unfamiliar roads and are less likely to get lost.\n Q. What is the average age of drivers who are lost in a foreign country? A. The average age of drivers who are lost in a foreign country is 41, and it is higher among those without a driver\u2019s license or passport than among those with one."
  },
  {
    "id": 1627,
    "db_id": "car_racing",
    "question": "List the driver makes that are associated with at least three drivers.",
    "answer": " \n# Return a list of all the drivers and their number of connections\ndef list_drivers():\n    conn = get_db_connection()\n    cur = conn.cursor()\n    query = ' SELECT d.name, COUNT(u.userid) AS num_connections FROM user_table u JOIN driver_table d ON u.driver_id = d.id GROUP BY d.name ORDER BY num_connections DESC NULLS LAST'\n"
  },
  {
    "id": 1628,
    "db_id": "car_racing",
    "question": "Which make is associated with 3 or more drivers?",
    "answer": "\n You should do the following:\n 1. Open a text file, called \u201cdrivers_to_be_removed.txt\u201d in a text editor.\n 2. List the Driver IDs in this file, one per line. For example:\n       4567890\n       abcdefghi\n       34567hjkl\n       34567jklmno\n       34567pqr"
  },
  {
    "id": 1629,
    "db_id": "car_racing",
    "question": "List the names of teams that do not have any drivers.",
    "answer": "  */\nfunc (t *Team) WithoutDrivers() []*Team {\n\tteams := make([]*Team, 0)\n\tfor _, team := range t.Groups {\n\t\tif len(team.Drivers) < 1 {\n\t\t\tteams = append(teams, team)\n\t\t}\n\t}\n\treturn teams\n}\n\n/* Returns a list of all the teams that have at least"
  },
  {
    "id": 1630,
    "db_id": "car_racing",
    "question": "Which team does not have drivers?",
    "answer": "\n This is not the case. The 100-mile per hour speed limit is for a two-lane highway with no passing lanes, so it's not a factor when comparing to 70 miles per hour. It's the fact that you cannot exceed 70 miles per hour without breaking the law and being killed that matters.\n\nComment: @Felis, I am very sorry that this is not the case in many countries. I am very sorry"
  },
  {
    "id": 1631,
    "db_id": "car_racing",
    "question": "Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?",
    "answer": "\n A. No, it is not possible to find a car in the US that only has make \"Dodge\". However, there are cars that have both make \"Dodge\" and make \"Chevrolet\".\n B. Yes, it is possible to find a car in the US that only has make \"Dodge\". There is at least one car that only has make \"Dodge\": the Dodge Durango."
  },
  {
    "id": 1632,
    "db_id": "car_racing",
    "question": "Find the countries in which there are both drivers with make \"Dodge\" and drivers with make \"Chevrolet\".",
    "answer": "\n  * Use a WHERE clause to find only the drivers who have a make of either \"Dodge\" or \"Chevrolet\".\n  */\n SELECT d.name, d.make FROM Drivers d WHERE d.make IN ('Dodge', 'Chevrolet') ORDER BY d.name NULLS LAST;"
  },
  {
    "id": 1633,
    "db_id": "car_racing",
    "question": "Show total and average points of all drivers.",
    "answer": " 2. Sort the list in descending order, so that highest total points are shown first, and then average points per driver.\n\n\\begin{code}\n SELECT d.DriverName, SUM(p.Points) AS TotalPoints, AVG(p.Points) AS AveragePoints FROM Drivers d JOIN Points p ON d.DriverID = p.DriverId GROUP BY d.DriverName ORDER BY TotalPoints DESC, AveragePoints DESC;\n\\"
  },
  {
    "id": 1634,
    "db_id": "car_racing",
    "question": "What are the total and average points of drivers?",
    "answer": "\n I know I can do this with a loop:\n  ```for i in range(1,4):```\n   ```driver_points = []```\n   ```for j in range(20, 30):```\n    ```score = (data['drivers'][i]['results']['points'])[j]```\n    ```driver_points.append(score)```.```\n\n    ```total_points = np.sum(driver_points"
  },
  {
    "id": 1635,
    "db_id": "car_racing",
    "question": "Find the countries where no driver come from.",
    "answer": "  This would not be a problem if I had my own car.\n\nComment: @Hagen von Eitzen - It's not about being lazy, it's about having other things to do. When you have a full time job and other hobbies that don't involve driving, then why take a chance to go by a different country's name than the one you already know?\n\nComment: I'm not saying you're being lazy, but it"
  },
  {
    "id": 1636,
    "db_id": "car_racing",
    "question": "Which countries do not have any drivers?",
    "answer": "\n Certainly not in the United States. If you're going to travel there, don't worry about that. Just don't drive!\n\nComment: @Gilles: You know, when I was a child, my parents took me to see my grandparents, who lived in Europe and spoke only French and English. We had no idea what language they spoke until we went there. In the US, it's usually just Spanish and English that people speak."
  },
  {
    "id": 1637,
    "db_id": "car_racing",
    "question": "What are the manager and sponsor of the team that has the most drivers?",
    "answer": "\n The number of drivers in a team is determined by the number of players in the roster, not by the number of cars in the garage. For example, if a team has 5 players with 5 different cars, then it has 5 * 5 = 25 drivers."
  },
  {
    "id": 1638,
    "db_id": "car_racing",
    "question": "Find the manager and sponsor of the team that has the most drivers.",
    "answer": " \n   def get_manager(self, managers):\n      driver_teams = {}\n      for manager in managers:\n         if manager.team not in driver_teams:\n            driver_teams[manager.team] = []\n         driver_teams[manager.team].append(manager.first_name)\n      most_drivers_in_team = max(driver_teams.items(), key=lambda x: len"
  },
  {
    "id": 1639,
    "db_id": "car_racing",
    "question": "What are the manager and car owner of the team that has at least 2 drivers?",
    "answer": "\n #. That is, the manager is also a driver in his/her own team.\n\\end{code}\n\nThis is what I have so far:\n\n\\begin{code}\n SELECT t.team_name FROM teams AS t JOIN members m ON t.team_id = m.team_id WHERE t.team_manager = m.member_id GROUP BY t.team_name HAVING COUNT(DISTINCT CASE WHEN m.member"
  },
  {
    "id": 1640,
    "db_id": "car_racing",
    "question": "Find the team with two or more drivers and return the the manager and car owner of the team.",
    "answer": " \n   def get_manager_and_owner(team) do\n     %{manager: team.manager, owner: team.owner}\n   end\nend"
  },
  {
    "id": 1641,
    "db_id": "institution_sports",
    "question": "How many institutions are there?",
    "answer": "\n My thoughts were a bit scattered. I didn\u2019t know how to focus on just one institution. The problem with my first approach was that I had a hard time focusing on the number of institutions without considering that this number could vary greatly depending on the time period, e.g. during the Great Depression a single person might have managed 100 institutions but for the same time period the next person may only manage 5.\nA second issue was that I had to consider"
  },
  {
    "id": 1642,
    "db_id": "institution_sports",
    "question": "Count the number of institutions.",
    "answer": " 79% of respondents said that they have had to move their operations to different locations over the years due to economic, political, or environmental reasons.\nThe study also found that nearly half of respondents stated that they have experienced at least one instance in which they moved a project from one location to another for \u201cfuture\u201d reasons \u2013 citing factors such as future energy needs, availability of skilled personnel, or need for new technologies."
  },
  {
    "id": 1643,
    "db_id": "institution_sports",
    "question": "List the names of institutions in ascending alphabetical order.",
    "answer": " \n  list_of_institutions = Institution.order(:name) # => <ActiveRecord::Relation [Institution(name: \"A\"), Institution(name: \"B\"), ...]>\n```\n\n### Finding Institution by name using `where` clause\n```ruby\ninstitution = Institution.first.where(name: 'C') # => Institution(name: 'C') or nil if no such institution exists\n```\n\n###"
  },
  {
    "id": 1644,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered alphabetically?",
    "answer": "\n In short: \"The list of institutions, sorted alphabetically\".\n A list.\n\\end{code}\n\nSo the output should be like this:\n\n\\begin{code}\n[\u2018Albert Einstein College of Medicine\u2019, \u2018Avery Institute of Mental Health\u2019, \u2018Baruch College\u2019, etc]\n\\end{code}\n\nThis is the code I've got so far:\n\n\\begin{code}\ninstitution"
  },
  {
    "id": 1645,
    "db_id": "institution_sports",
    "question": "List the names of institutions in ascending order of founded year.",
    "answer": " 2019-07-01\n     */\n    public List<String> getInstitutionNames() {\n        return this.institutions.stream().sorted(Comparator.comparing(Institution::getFoundedYear).thenComparing(Institution::getName)).map(Institution::getName)\n                .collect(Collectors.toList());\n    }\n\n    /**\n     * Add a new institution to the list"
  },
  {
    "id": 1646,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered by the years in which they were founded?",
    "answer": "\n I would like to do this using a subquery. Here's my attempt at doing that:\n SELECT i1.name, i2.founded_year FROM institution AS i1 JOIN (SELECT name, founded_year FROM institution ORDER BY founded_year DESC) AS i2 ON i1.name = i2.name;"
  },
  {
    "id": 1647,
    "db_id": "institution_sports",
    "question": "What are the cities and provinces of institutions?",
    "answer": "\n By Gideon Levy, CFA\u00ae, CFP\u00ae\n Few things are more important to an investor than understanding the geographic locations of the companies they are considering investing in. The financial industry is a special case, as the New York Stock Exchange (NYSE) is a unique institution with its own headquarters. When I was first starting out on Wall Street, one of my mentors told me to look for companies whose headquarters were located in cities that had a"
  },
  {
    "id": 1648,
    "db_id": "institution_sports",
    "question": "Return the cities and provinces of institutions.",
    "answer": " \n *\n * @param {string} value - The text to be searched in the institutions.\n * @return {Array<Object>} A list of objects with the cities or provinces found in the search.\n */\nfunction getCitiesProvincesWithText(value) {\n    const found = [];\n    cities.forEach((city) => {\n        if (city.name.toLowerCase().includes(value.toLowerCase())) {\n           "
  },
  {
    "id": 1649,
    "db_id": "institution_sports",
    "question": "What are the maximum and minimum enrollment of all institutions?",
    "answer": "\n  const min_enrollment = Math.min(...enrollments);\n  const max_enrollment = Math.max(...enrollments);\n\n  // return the results:\n  return { min_enrollment, max_enrollment };\n}"
  },
  {
    "id": 1650,
    "db_id": "institution_sports",
    "question": "Return the maximum and minimum enrollment across all institutions.",
    "answer": " \n# min_max_enrollment(df) --> (500, 700)\ndef min_max_enrollment(df):\n    min_value = df[\"enrollment\"].min()\n    max_value = df[\"enrollment\"].max()\n    return (min_value, max_value)\n\n# Function to normalize the enrollment of each institution. \ndef normalize_enrollment"
  },
  {
    "id": 1651,
    "db_id": "institution_sports",
    "question": "What are the affiliations of institutions that are not in city \"Vancouver\"?",
    "answer": "\n A more realistic query would be:\n BLACKSTAFF, I am not in the city of Vancouver."
  },
  {
    "id": 1652,
    "db_id": "institution_sports",
    "question": "Return the affiliations of instituions that are not in the city of Vancouver.",
    "answer": " \n     * @return array\n     */\n    public static function getInstitutionsOutsideCity() {\n        return array(\n            'African Institute for Mathematical Exploration of Pulse',\n            'British Columbia College',\n            'Cambridge University',\n            'Canadian Imperial College',\n            'Champlain College',\n            'Fordham University Canada',\n            'Georgian College',\n            '"
  },
  {
    "id": 1653,
    "db_id": "institution_sports",
    "question": "What are the stadiums of institutions in descending order of the capacity.",
    "answer": " \nprint_stadium(institutions, \"Capacity\", \"descending\")\n"
  },
  {
    "id": 1654,
    "db_id": "institution_sports",
    "question": "Return the stadiums of institutions, ordered by capacity descending.",
    "answer": "  */\n\t\t\t$query = $this->db->select('sid, sname, capacity')\n\t\t\t\t->from('stages')\n\t\t\t\t->order_by('capacity', 'desc');\n\n\t\t} else {\n\t\t\t/* Return the stadiums of institutions, ordered by capacity ascending. */\n\t\t\t$query = $this->db->select('sid, sname, capacity')\n"
  },
  {
    "id": 1655,
    "db_id": "institution_sports",
    "question": "What is the stadium of the institution with the largest enrollment?",
    "answer": "\n Home and away. The team that has won the most games this season. The opponent from whom they have lost the most games. The player who has scored the most goals in a match. The goalkeeper who has conceded the most goals in a game.\nCourse, there are many more statistics to collect and analyze than these six, but these are the ones we can do in an open-source statistical package, which is what I have used here."
  },
  {
    "id": 1656,
    "db_id": "institution_sports",
    "question": "Give the stadium of the institution which is the greatest enrollment.",
    "answer": " The name of this school is \"University of Phoenix\".\n"
  },
  {
    "id": 1657,
    "db_id": "institution_sports",
    "question": "What are the names and nicknames of institutions?",
    "answer": "\n On their homepage, each institution has a unique name and short name. For instance, University of California, Berkeley (UC Boulder) or UC Boulder. Both names are displayed on its website. However, for some institutions, this is not sufficient to distinguish them from other universities. It's necessary to create additional nicknames.\n\nThis list contains all institution-nickname combinations. They may be used in the URL.\n\n### How to"
  },
  {
    "id": 1658,
    "db_id": "institution_sports",
    "question": "Return the names of institutions, as well as their nicknames.",
    "answer": " \n* This function will return a list of dictionaries, where each dictionary contains institution name and its nickname. \n* @param institution_nicknames: A dictionary with institution name as key and nickname as value. \n* @return: A list of dictionaries, where each dictionary contains institution name and its nickname. \n*/\ndef get_institution_info(institution_nicknames):\n    return [{\"Institution\": k, \"N"
  },
  {
    "id": 1659,
    "db_id": "institution_sports",
    "question": "What is the nickname of the institution with the smallest enrollment?",
    "answer": "\n  */\n    public String getSmallestInstitutionName() {\n        return smallestEnrollment.getInstitution();\n    }\n}"
  },
  {
    "id": 1660,
    "db_id": "institution_sports",
    "question": "Return the nickname of the institution with the lowest enrollment.",
    "answer": "  */\n        $min_enrollment = $this->db->select('MIN(institutions.enrollment) AS min_enrollment')\n                         ->from('institutions')\n                         ->get()\n                         ->result();\n        return $min_enrollment[0]->min_enrollment;\n    }\n\n    /**\n     * Returns the max enrollment for institutions.\n     */\n    public"
  },
  {
    "id": 1661,
    "db_id": "institution_sports",
    "question": "List the names of institutions in descending order of the number of championships.",
    "answer": " \n#         won by each institution. If two or more institutions have the same number of championships, then list the name of each institution in alphabetical order.\n#         \"\"\"\n#         See https://github.com/sarahhiller20/csc261_project_fifa_football for project instructions and requirements.\n#         \n#         @param {Array<String>} institutions - A list of institutions in the format \"University"
  },
  {
    "id": 1662,
    "db_id": "institution_sports",
    "question": "What are the names of institutions, ordered descending by their number of championships?",
    "answer": "\n  institution_name = Institution.order(number_of_championships_desc: :asc)\n\\end{code}"
  },
  {
    "id": 1663,
    "db_id": "institution_sports",
    "question": "List the names of institutions with at least one championship.",
    "answer": " 15:20:30 is an estimate and is subject to change\n- Any time spent on a given institution's website is not included in this estimate."
  },
  {
    "id": 1664,
    "db_id": "institution_sports",
    "question": "What are the names of institutions that have 1 or more championships?",
    "answer": "\n I have this working for me:\n The following query returns the name of all colleges and universities that have at least one championship.\n SELECT c.name FROM (SELECT DISTINCT institution_id, name FROM Championships) AS c JOIN Institutions i ON i.institution_id = c.institution_id;"
  },
  {
    "id": 1665,
    "db_id": "institution_sports",
    "question": "What is the total number of championship of institution with public affiliation?",
    "answer": "\n  */\n\n  def total_championships_with_public_affiliations(institutions) do\n    institutions = Enum.filter(institutions, &(&1.institution_public_affiliations != nil))\n\n    Enum.reduce(institutions, 0), &+(&1.institution_public_affiliations.championships_count)\n  end\nend"
  },
  {
    "id": 1666,
    "db_id": "institution_sports",
    "question": "Return the total number of championships of institutions that have a Public affiliation.",
    "answer": "  */\n        int num_public_championships = 0;\n        \n        for (int i = 0; i < num_institutions; i++) {\n            if (is_public(institutions[i]) == TRUE) {\n                num_public_championships++;\n            }\n        }\n        \n        return num_public_championships;\n    }\n    \n    /****************************************************************************"
  },
  {
    "id": 1667,
    "db_id": "institution_sports",
    "question": "What are different types of affiliations of institutions and the corresponding number of institutions?",
    "answer": "\n  (a) Institutions with a total market value of at least $1,000,000; (b) institutions with a total market value between $500,000 and $999,999; (c) institutions with a total market value below $500,000.\n\\end{blockquote}\n\nFor the first type of institution we have:\n$$(a) \\text{Institution"
  },
  {
    "id": 1668,
    "db_id": "institution_sports",
    "question": "How many institutions are there for each type of affiliation?",
    "answer": "\n A. How do you know that the number is correct? \n B. Who can verify that the number is correct? \n C. What do you think is the most likely source of error? "
  },
  {
    "id": 1669,
    "db_id": "institution_sports",
    "question": "What is the most common type of affiliation for institutions?",
    "answer": "\n It would be great to know if there are any other types of affiliations that exist."
  },
  {
    "id": 1670,
    "db_id": "institution_sports",
    "question": "Return the most common type of affiliation across all institutions.",
    "answer": " 2.2% of institutions have no affiliation, 35.6% are member-only and 18.9% are open to non-members.\nMembers can use institutional identity for a variety of purposes, including access to certain online portals and tools. However, members who also become members of other associations are not eligible for access to the following portals and tools:\nOnline portal for research results\nMembers can access the online portal"
  },
  {
    "id": 1671,
    "db_id": "institution_sports",
    "question": "In which years were more than one institution founded?",
    "answer": "\n By how much was the average annual increase in endowment during the period 2007-2017?"
  },
  {
    "id": 1672,
    "db_id": "institution_sports",
    "question": "Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.",
    "answer": " Cf. (Hoover, 2009).\nI have an interesting result from the previous analysis. In 2007 there were 3 institutions founded in China. However, in 2008, only one institution was founded, resulting in a net loss of two institutions from that country. I'd like to know why this is? Is it due to market demand or due to competition for funding? Or are these institutions simply not as strong as"
  },
  {
    "id": 1673,
    "db_id": "institution_sports",
    "question": "List the nicknames of institutions in descending order of capacity.",
    "answer": " \ndef rank_institutions(institutions):\n    return sorted(institutions, key=lambda x: (x[1], x[2]), reverse=True)\n"
  },
  {
    "id": 1674,
    "db_id": "institution_sports",
    "question": "What are the nicknames of institutions, ordered descending by their capacities?",
    "answer": "\n  return a list of tuples (institution_name, capacity) for every institution.\n  \"\"\"\n  def get_capacities(self):\n    return [(institution[\"Name\"], int(institution[\"Capacity\"]))\n            for institution in self.data[\"Institutions\"].values()]\n  \n  \"\"\"\n  What are the capacities of all institutions, ordered descending?\n  Return a list of integers (capacity) for"
  },
  {
    "id": 1675,
    "db_id": "institution_sports",
    "question": "What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?",
    "answer": "\n ANSWER: 100000."
  },
  {
    "id": 1676,
    "db_id": "institution_sports",
    "question": "Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary .",
    "answer": "\n The code to do this is:\n \n SELECT COUNT(*) FROM institution i LEFT JOIN CITY c ON i.city_id = c.city_id WHERE (c.city = 'Vancouver' OR c.city = 'Calgary');"
  },
  {
    "id": 1677,
    "db_id": "institution_sports",
    "question": "Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.",
    "answer": " A-Z (including a brief description of each)\nAfghanistan: University of Peshawar (1875) and Kabul University (1946); both institutions in the 19th century, but not part of the British Indian Empire.\nAlbania: Tirana University (1912), which was founded during a time of political upheaval; as well as Berat University (1920) and University of V"
  },
  {
    "id": 1678,
    "db_id": "institution_sports",
    "question": "What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?",
    "answer": "\n You would want to look at the years of formation for each institution. In the second case you can add a new column in the table with the year of formation and then filter on that year."
  },
  {
    "id": 1679,
    "db_id": "institution_sports",
    "question": "How many distinct provinces are the institutions in?",
    "answer": "\n There is one institution per province.\n  - Institutions must be named after their respective provincial capitals.\n  - Each institution has a unique code (e.g. U of T for University of Toronto).\n  - The code must not start with the numbers 0-9.\n  - A code cannot contain spaces.\n  - A code cannot begin with the letters \"I\" or \"O\"."
  },
  {
    "id": 1680,
    "db_id": "institution_sports",
    "question": "Count the number of different provinces that have institutions.",
    "answer": " \n     * @return int\n     */\n    public function getNumProvinceWithInstitutions() {\n        $num = 0;\n        foreach ($this->provinces as $province) {\n            if (count($province->institutions) > 0) {\n                $num++;\n            }\n        }\n        return $num;\n    }\n\n    /**\n     * Return the number of different provinces that"
  },
  {
    "id": 1681,
    "db_id": "warehouse_1",
    "question": "Select all details of all warehouses.",
    "answer": "  */\n  async getAllWarehouses(): Promise<WarehouseDto[]> {\n    return this.http.get(this.baseUrl).toPromise();\n  }\n}"
  },
  {
    "id": 1682,
    "db_id": "warehouse_1",
    "question": "What is all the information about the warehouses?",
    "answer": "\n In that case, you can use the `GetWarehouse` method of your `FurnitureFactory`. You will need to pass in a string representing the name of the warehouse. Here's an example:\n```csharp\n// get a list of all warehouses\nList<string> warehouseNames = furnitureFactory.GetWarehouses();\nforeach (string warehouseName in warehouseNames) {\n    Console"
  },
  {
    "id": 1683,
    "db_id": "warehouse_1",
    "question": "Find all different contents stored in New York.",
    "answer": " 336,000 square feet of retail space.\nApartment complexes are designed to house between 2 and 5 apartments per floor.\nThe average rent for a rental is $1,900 per month with a total market value of $7,500 for a one-bedroom unit.\nNew York City apartments have an average rent of $3,264 per month, and the average market value is $1"
  },
  {
    "id": 1684,
    "db_id": "warehouse_1",
    "question": "What are all the different contents stored in boxes in New York?",
    "answer": "\n For each content type, what is the average amount of boxes that are filled with this content in New York?\n  What is the total number of boxes in New York?\n  If a box can hold many items, how do I know which ones they are? What if I have an item that takes up multiple boxes? Do I put it in one box or all the boxes that it takes up? How many boxes would that be?\n\nAnswer: The average number of boxes per"
  },
  {
    "id": 1685,
    "db_id": "warehouse_1",
    "question": "Select contents of all boxes with a value larger than $150.",
    "answer": " \n\t */\n\tpublic function testSelectWithGreaterThan() {\n\t\t$select = new \\PDO\\Select();\n\t\t$select->from('inventory')\n\t\t->where('quantity >', 150);\n\t\t$result = $this->inventoryTable->getDatabase()->query($select);\n\n\t\t// TODO: assert the contents of $result\n\t}\n\n\t/**\n\t * Select contents"
  },
  {
    "id": 1686,
    "db_id": "warehouse_1",
    "question": "What are the contents of boxes with value greater than 150?",
    "answer": "\n The box-contents is a list of integers, and we only want to return elements that are greater than 150. So we can use filter() to create a new list without those values less than or equal to 150:\n \n contents_over_150 = filter(lambda x: x > 150, box_contents)"
  },
  {
    "id": 1687,
    "db_id": "warehouse_1",
    "question": "Select the warehouse code and the average value of the boxes in each warehouse.",
    "answer": " \nSELECT s.warehouse_code, AVG(s.price) AS average_price FROM shipments s GROUP BY s.warehouse_code ORDER BY average_price DESC NULLS LAST;"
  },
  {
    "id": 1688,
    "db_id": "warehouse_1",
    "question": "What is the average value of boxes for each warehouse?",
    "answer": "\n  public List<double> AverageBoxValues(int warehouseId) {\n  //    SELECT AVG(value) AS avg_value FROM boxes WHERE warehouse_id = 757071;"
  },
  {
    "id": 1689,
    "db_id": "warehouse_1",
    "question": "Find the average and total values of all boxes.",
    "answer": "  The\n// results are returned in a single vector, with average first, then total second.\n// This is just for convenience.\nfunc (m *Metrics) GetAverageAndTotalValues() []float64 {\n\treturn m.GetAveragesAndTotals(true, false)\n}\n"
  },
  {
    "id": 1690,
    "db_id": "warehouse_1",
    "question": "What are the average and total values across all boxes?",
    "answer": "\n The total is simply the sum of the values for each box. The average is an average over all the values in that box, so it's the total divided by the number of samples in that box. We can calculate these quantities using the `summarise` and `mean` functions from the `dplyr` package:\n */```\n  summarise(total = sum(v), average = mean(v))\n)"
  },
  {
    "id": 1691,
    "db_id": "warehouse_1",
    "question": "Find the average and total capacity of all warehouses.",
    "answer": " \n     * @return array\n     */\n    public function getWarehouseCapacity() {\n        $total_capacity = 0;\n        $average_capacity = 0;\n        $warehouses = $this->db->get('warehouse')->result();\n        foreach ($warehouses as $warehouse) {\n            $total_capacity += $warehouse->capacity;\n            $average_capacity"
  },
  {
    "id": 1692,
    "db_id": "warehouse_1",
    "question": "What are the average and total capacities across all warehouses?",
    "answer": "\n  total_capacity = 0; avg_capacity = 0; warehouse_count = 0;\n # Calculate total capacity, average capacity, number of warehouses, and total/average capacity ratio for all warehouses.\n  warehouses = Warehouse.objects.all()\n  warehouse_count = len(warehouses)\n  total_capacity = sum([w.cap"
  },
  {
    "id": 1693,
    "db_id": "warehouse_1",
    "question": "Find the average and maximum value for each different content.",
    "answer": "  I know that the values are not the same because if I replace the 0 by a different number in the dataframe, it will be different.\n\n\\begin{code}\n          Average Value   Maximum Value\n1    75.8424569139     94.7103259575\n2   52.7090631173     85.8507"
  },
  {
    "id": 1694,
    "db_id": "warehouse_1",
    "question": "What are the average and maximum values for each type of content in boxes?",
    "answer": "\n  double[] averageValues = new double[6];\n Tags.GetAverageValues(averageValues, tags);\n  double[] maxValues = new double[6]; Tags.GetMaxValues(maxValues, tags);\n\n  Console.WriteLine(\"Average values: \" + averageValues.ToString());\n  Console.WriteLine(\"Maximum values: \" + maxValues.ToString());\n}"
  },
  {
    "id": 1695,
    "db_id": "warehouse_1",
    "question": "Find the content that has the highest total values in all boxes.",
    "answer": " \ndef get_max_total(list):\n    return max(list)\n"
  },
  {
    "id": 1696,
    "db_id": "warehouse_1",
    "question": "What is the content with the greatest value across all boxes?",
    "answer": "\n  let max_value = -1;\n # Add all values to a set and pick the maximum value.\n  for box in boxes:\n    max_value = max(max_value, np.sum(box))\n  return max_value"
  },
  {
    "id": 1697,
    "db_id": "warehouse_1",
    "question": "Select the average value of all the boxes.",
    "answer": "  This can be done using a simple for loop that iterates over each box and updates the running total variable:\n\n\n\\begin{code}\ntotal = 0;\nfor (i in 1:nrow(df)) {\n   total = total + df[i, \"value\"] }\navg_total = total / nrow(df)\n\\end{code}"
  },
  {
    "id": 1698,
    "db_id": "warehouse_1",
    "question": "What is the average value of boxes?",
    "answer": "\n  const totalBoxes = boxes.reduce((acc, { weight }) => acc + weight, 0);\n  return (totalBoxes / totalWeight) * 100;\n};"
  },
  {
    "id": 1699,
    "db_id": "warehouse_1",
    "question": "Select all distinct contents in all the boxes.",
    "answer": "  This will cause an error if any of those subexpressions are not true.  If you want to treat each subexpression as a separate question, you can use parentheses:\n\n\\begin{code}\nif (a > b) AND (b > c) AND (c > d) THEN 'Y' ELSE 'N' END;"
  },
  {
    "id": 1700,
    "db_id": "warehouse_1",
    "question": "What are the different contents in boxes?",
    "answer": "\n Inbox - the emails that have been delivered to your account but not yet read\n  Sent Items - the emails you have sent to others, including attachments and other information\n Drafts - unsent messages, either because of an error or because the sender cancelled sending\n Outbox - messages that are currently being sent, so this may contain a message that has recently been added but hasn't yet completed its journey down the line."
  },
  {
    "id": 1701,
    "db_id": "warehouse_1",
    "question": "Find the number of all distinct contents in all the boxes.",
    "answer": " \n   // (i.e. total items)\n    int num_all_contents = 0;\n    for (int i = 0; i < num_of_boxes; ++i) {\n        num_all_contents += this->num_contents[i];\n    }\n\n    return num_all_contents;\n}"
  },
  {
    "id": 1702,
    "db_id": "warehouse_1",
    "question": "How many different contents are stored in boxes?",
    "answer": "\n A. Each item is stored in a separate box. B. Items that can fit in a single box are placed side by side, with the items in each row and column aligned. C. Items are arranged so that the top and bottom of each item matches the top and bottom of the adjacent item, respectively. D. Items are arranged such that the left and right sides match the left and right sides of the adjacent item."
  },
  {
    "id": 1703,
    "db_id": "warehouse_1",
    "question": "Find all distinct locations of warehouses.",
    "answer": " \n   */\n  public function getAllWarehouse() {\n    return $this->warehouse->all();\n  }\n\n  /**\n   * Get a warehouse by its name.\n   * \n   * @param string $name The name of the warehouse.\n   * @return mixed Returns the warehouse model if found, or NULL otherwise.\n   */\n  public function findWarehouseByName($name)"
  },
  {
    "id": 1704,
    "db_id": "warehouse_1",
    "question": "What are the different locations of warehouses?",
    "answer": "\n You will also be able to view a map showing the location of your warehouses and other information. \n* Search for products by name or category. \n* Add and manage products with photos and videos. \n* View product details. \n\n### User Interface: \n\n** Registered users can use their account to view and manage orders, products, reviews and warehouses.\n * Guests have limited features but can browse products and"
  },
  {
    "id": 1705,
    "db_id": "warehouse_1",
    "question": "Find the code of boxes that are stored at the warehouses located at Chicago or New York.",
    "answer": " \n *   <p>\n *    Use the {@link #where} method to filter down further, for example: <code>Box.find(Box.where(\"warehouse_location = 'Chicago'\"))</code>\n * @see WhereParser\n */\npublic class Box extends Resource<Box> {\n    \n    public static final String INDEX_PATH = \"boxes/index.yml\";\n    private static Map<String, Box> boxes"
  },
  {
    "id": 1706,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes stored in warehouses in either Chicago or New York?",
    "answer": "\n A) If the code is stored in a box in Chicago, it must be of the form 57617 or 57637.\n B) If the code is stored in a box in New York, it must be of the form 57618 or 57638."
  },
  {
    "id": 1707,
    "db_id": "warehouse_1",
    "question": "Find the total value of boxes in the warehouses located at Chicago or New York.",
    "answer": " \n\t// If a box is found in either warehouse, add its cost to totalCost variable.\n\ttotalCost = 0;\n\tfor (int i = 0; i < 10; i++) {\n\t    if (isInChicago(i)) {\n\t        totalCost += boxValue(i);\n\t    } else if (isInNewYork(i)) {\n\t        totalCost += boxValue(i"
  },
  {
    "id": 1708,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes located in Chicago or New York?",
    "answer": "\n  The query returns a single value, the sum of all box values in either location. If there are no boxes in either location, the result is null.\n*/\n SELECT SUM(b.value) AS total_value FROM Box b WHERE (SELECT COUNT(*) FROM Box b WHERE b.location = 'Chicago') OR (SELECT COUNT(*) FROM Box b WHERE b.location = 'New York');"
  },
  {
    "id": 1709,
    "db_id": "warehouse_1",
    "question": "Find all contents present in warehouses located in Chicago and those located in New York.",
    "answer": " The search result is not filtered by the warehouse's state, only by their city (Chicago or New York).\nI want to filter my results based on both city and state. So for example a query for \"Warehouse\" would show me all results present in Chicago AND New York. How do I do that? I am using the ElasticSearch search API with Python, I have read some of their docs but still can't find a solution.\n\nAnswer"
  },
  {
    "id": 1710,
    "db_id": "warehouse_1",
    "question": "Find the contents that are stored in both Chicago and New York.",
    "answer": "  If there are no matches, return an empty list.\n\t */\n\t@Override\n\tpublic List<String> find(String searchWord) {\n\t\tList<String> result = new LinkedList<>();\n\t\tfor (int i = 0; i < CHICAGO_LIST.size(); i++) {\n\t\t\tif (CHICAGO_LIST.get(i).toLowerCase().contains(searchWord.toLowerCase"
  },
  {
    "id": 1711,
    "db_id": "warehouse_1",
    "question": "Find the type of contents that are not in the warehouses located at New York.",
    "answer": " 2)Find the warehouse with the most items. 3)Find a warehouse's location by name.\n\nComment: 1) SELECT c.name FROM Content c JOIN Warehouse w ON c.warehouse_id = w.id WHERE w.location NOT ILIKE '%New York%' ;"
  },
  {
    "id": 1712,
    "db_id": "warehouse_1",
    "question": "What types of contents cannot be found in warehouses in New York?",
    "answer": "\n In a few words, the answer is \"luxury items\". But that is not what we're after. We want to know more about this question. So let's continue. "
  },
  {
    "id": 1713,
    "db_id": "warehouse_1",
    "question": "Find the location of the warehouses which have contents Rocks but not Scissors.",
    "answer": " 7. What is the probability that a randomly selected warehouse contains Scissors?"
  },
  {
    "id": 1714,
    "db_id": "warehouse_1",
    "question": "What are the locations of warehouses that have boxes containing Rocks but not Scissors?",
    "answer": "\n  \\item Find all the locations of warehouses where there is a Rock, and not a Scissor.\n  \\item Find all the locations of warehouses where there is a Box containing a Rock, but not a Box containing a Scissor.\n  \\item Find all the locations of warehouses that have a Box containing both a Rock and a Scissor.\n\n\\end{itemize}\n\\end{blockquote}"
  },
  {
    "id": 1715,
    "db_id": "warehouse_1",
    "question": "Find the warehouses which store contents Rocks or Scissors.",
    "answer": "  */\n\n SELECT w.name FROM Warehouse w WHERE EXISTS (SELECT c.content_type FROM Contents c WHERE c.warehouse = w.id AND c.item IN ('Rocks', 'Scissors'));"
  },
  {
    "id": 1716,
    "db_id": "warehouse_1",
    "question": "What are the distinct warehouses that have boxes with Rocks or Scissors as contents?",
    "answer": "\n  SELECT DISTINCT w.name FROM Warehouse w JOIN Box b ON w.id = b.warehouse_id WHERE b.contents IN ('Rocks', 'Scissors')\n\n SELECT DISTINCT w.name, COUNT(DISTINCT b.id) AS num_boxes FROM Warehouse w JOIN Box b ON w.id = b.warehouse_id WHERE b.contents IN ('Rocks', 'Scissors"
  },
  {
    "id": 1717,
    "db_id": "warehouse_1",
    "question": "Find the location of the warehouses which store contents Rocks and Scissors.",
    "answer": " 1: You are given a list of words and for each word you need to determine whether it is in the warehouse that stores rocks or scissors.\n2: You can only use two warehouses, so if you have to keep track of what is stored in each one, you may choose to store the same content (rocks) in both locations. However, there's no point in doing this for scissors since we know that it will be in"
  },
  {
    "id": 1718,
    "db_id": "warehouse_1",
    "question": "What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?",
    "answer": "\n  Include a description of each warehouse.\n*/\nSELECT warehouse_name, COUNT(*) AS number_of_boxes FROM warehouse JOIN box ON warehouse.id = box.warehouse_id WHERE box.contents IN (SELECT id FROM contents WHERE name IN ('Rocks', 'Scissors')) GROUP BY warehouse_name ORDER BY number_of_boxes DESC NULLS LAST;"
  },
  {
    "id": 1719,
    "db_id": "warehouse_1",
    "question": "List the code and contents of all boxes sorted by their values.",
    "answer": "  */\n\tint (*compare_boxes) (const struct box *, const struct box *);\n\t/** Return the name of the box's type.  */\n\tchar *(*get_name) (struct box *);\n} BoxType;\n\n/** Get a list of all types of boxes known to GST.  */\nBoxTypes *gst_get_box_types(void);\n\n#define MAX_BOX_TYPE_"
  },
  {
    "id": 1720,
    "db_id": "warehouse_1",
    "question": "What are the codes and corresponding contents of all the boxes, ordered by their values?",
    "answer": "\n Tags: sort, array, box, boxed-content\n "
  },
  {
    "id": 1721,
    "db_id": "warehouse_1",
    "question": "Find the code and contents of the box with the lowest value.",
    "answer": "  This will work as long as the values are in a single dimension array.\n        /// </summary>\n        /// <returns>The index of the box with the lowest value.</returns>\n        public static int GetIndexOfLowestValue(double[] x)\n        {\n            double minVal = double.MaxValue;\n            int minIndx = 0;\n            for (int i = 0; i < x.Length; i++)\n"
  },
  {
    "id": 1722,
    "db_id": "warehouse_1",
    "question": "What is the code and contents for the box that has the smallest value?",
    "answer": "\n  my @min_box = $sdb->select('SELECT * FROM boxes WHERE length(data) = (SELECT MIN(length(data)) FROM boxes)');"
  },
  {
    "id": 1723,
    "db_id": "warehouse_1",
    "question": "Find the unique contents of all boxes whose value is higher than the average value of all boxes.",
    "answer": " \n\t */\n\tpublic static List<T> findAllGreaterThanAverage(List<T> list) {\n\t\t// TODO: Implement this method!\n\t}\n\t\n\t/**\n\t * Find the sum of all the values in a list.\n\t * \n\t * @return The total value of all elements.\n\t */\n\tpublic static T add(List<T> list) {\n\t\t// TODO:"
  },
  {
    "id": 1724,
    "db_id": "warehouse_1",
    "question": "What are the different contents of boxes for which the value is higher than the average value across all boxes?",
    "answer": "\n  \\item A list of the number of distinct values in each box, and a list of the distinct values themselves.\n\n\\end{itemize}\n\\end{blockquote}\n\nHere's a solution that does all three things:\n\n\\begin{code}\nSELECT b.id AS box_id, v.value, COUNT(DISTINCT v.value) OVER (PARTITION BY b.id ORDER BY v.value ROWS BETWE"
  },
  {
    "id": 1725,
    "db_id": "warehouse_1",
    "question": "List all different types of contents ordered by contents.",
    "answer": " 2) Ordering by the number of comments for each content (within that content type). 3) Ordering by the date a comment was added to a content (within that content type)\n More details on the exact syntax can be found below in the sample code.\n */\n\n$comments = array();\n$posts_with_no_comments = array();\n\nif ($post_type) {\n    $content = new WP_Query(array"
  },
  {
    "id": 1726,
    "db_id": "warehouse_1",
    "question": "What are the different contents of boxes, ordered alphabetically?",
    "answer": "\n The `*` means that the box is not included in the search.\n */\nexport interface BoxNames {\n    '*': string[];\n    'all': string[];\n    'bbox': string[];\n    'bookmark-browser' : string[];\n    'crypto-dashboard': string[];\n    'cryptocurrency-trade-view': string[];\n    'currency-dashboard': string[];\n"
  },
  {
    "id": 1727,
    "db_id": "warehouse_1",
    "question": "Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.",
    "answer": " \n   in the list. If there are no such boxes, return a list with the elements 'no value found'. *)\n\nlet rec find_higher_than_rocks l = match l with\n| [] -> [\"no value found\"]\n| a :: b when a = \"Rocks\" -> [\"no value found\"]\n| a :: b -> a :: (find_higher_than_rocks b)"
  },
  {
    "id": 1728,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?",
    "answer": "\n  // and also, if there is a code that contains Rock, return that too.\n  return { ...this.codeSet, [this.code]: this.value + 1 };\n};"
  },
  {
    "id": 1729,
    "db_id": "warehouse_1",
    "question": "Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.",
    "answer": " \n   */\n  public static List<Integer> getListOfHigherValueBoxes(int value) {\n    List<Integer> list = new ArrayList<>();\n    for (int i = value + 1; i <= MAX_BOX_CONTENT; i++) {\n      list.add(i);\n    }\n    return list;\n  }"
  },
  {
    "id": 1730,
    "db_id": "warehouse_1",
    "question": "What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?",
    "answer": "\n  \"Better than\" means that it comes after in a sorted array. The order must be determined by comparing each box's value to see if it is greater; if so, then add its code and content to the list.\n\n\\end{blockquote}\n\n\\begin{code}\n const p = boxes.sort((a, b) => { return a.value - b.value }); // Sort the array in ascending order by value.\n for ("
  },
  {
    "id": 1731,
    "db_id": "warehouse_1",
    "question": "Find the total value of boxes stored in the warehouse with the largest capacity.",
    "answer": "  */\npublic class WarehouseCapacity {\n    public static int max = 0;\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        while (sc.hasNext()) {\n            int capacity = sc.nextInt();\n            if (capacity > max) {\n                max = capacity;\n            }\n        }\n        System.out.println(max);\n   "
  },
  {
    "id": 1732,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes kept in the warehouse with the greatest capacity?",
    "answer": "\n 2. The number of boxes that can fit in a given warehouse?\n\\end{code}\n\nThe data structure for the warehouses and their capacities are:\n\n\\begin{code}\nstruct Warehouse {\n   int capacity;\n};\n\\end{code}\n\nTo store the warehouses you can use an array, a vector or a map depending on your needs. The values of the capacity field will be"
  },
  {
    "id": 1733,
    "db_id": "warehouse_1",
    "question": "Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.",
    "answer": " ').show()\n\\end{code}"
  },
  {
    "id": 1734,
    "db_id": "warehouse_1",
    "question": "What are the average values of boxes for each warehouse than has an average value greater than 150?",
    "answer": "\n ' SELECT w.name, AVG(w.value) AS avg_value FROM warehouses w WHERE w.value > 150 GROUP BY w.name ORDER BY avg_value DESC NULLS LAST;"
  },
  {
    "id": 1735,
    "db_id": "warehouse_1",
    "question": "Find the total value and number of boxes for each content type.",
    "answer": " \n\nThe total value is the sum of the values of all the boxes in the category. The number of boxes is the total number of boxes in the category.\n\nFor example:\n```python\nd = {'a': [1,2], 'b' : [3,4], 'c': [5,6]}\n```\nwould result in:\n```json\n{'a' : 10, 'b' : 7, 'c'"
  },
  {
    "id": 1736,
    "db_id": "warehouse_1",
    "question": "For each content, what is the total value and number of boxes?",
    "answer": "\n  $total_value = 0;\n # Total boxes to be shipped.\n  $total_boxes = 0;\n\n  foreach ($products as $product) {\n    # Get the product data.\n    $p = Product::getByID($product->id);\n\n    # Calculate total value and number of boxes shipped.\n    $total_value += $p->price * $product->quantity;\n    $total"
  },
  {
    "id": 1737,
    "db_id": "warehouse_1",
    "question": "Find the total, average, and maximum capacity for different locations.",
    "answer": " \n     * @param locationIds List of Location IDs to check capacity for. \n     */\n    public function getCapacity(array $locationIds) : array;\n\n    /**\n     * Returns a list of all available locations with capacity.\n     * @return array List of locations, which have capacity and are active (status = 'A'). \n     */\n    public function findLocationsWithCapacity() : array;\n}"
  },
  {
    "id": 1738,
    "db_id": "warehouse_1",
    "question": "For each location, what are the total, average, and maximum capacities of warehouses?",
    "answer": "\n  \"\"\"\nfor l in locations:\n    print(l.name)\n    w = Warehouse(l)\n    total_capacity = 0\n    avg_capacity = 0\n    max_capacity = 0\n    for c in w.containers:\n      total_capacity += c.capacity\n      avg_capacity += c.capacity / len(w.containers)\n     "
  },
  {
    "id": 1739,
    "db_id": "warehouse_1",
    "question": "Find the total capacity of all warehouse locations.",
    "answer": " \n\n### Parameters:\nNone\n\n### Return Value: \n * int64_t - Total capacity of all warehouse locations."
  },
  {
    "id": 1740,
    "db_id": "warehouse_1",
    "question": "What is the total capacity of all warehouses?",
    "answer": "\n 10. How many warehouses are there in total?\n*/\nfunction warehouseInfo() {\n  return {\n    totalCapacity: 5500,\n    numberOfWarehouses: 5,\n    averageCapacityPerWarehouse: 1100 / 5,\n    capacityLessThanMax: (w) => w < 5500,\n    capacityGreaterTh"
  },
  {
    "id": 1741,
    "db_id": "warehouse_1",
    "question": "Find the value of the most expensive boxes saved in each warehouse location.",
    "answer": " 17/05/2017\n * \n * @return array(string, string) an array with two elements: the name of the warehouse and its maximum cost of a box\n */\npublic function getMaxBoxesCost()\n{\n    $maxBoxesCost = array();\n    $sql = \" SELECT w.location, MAX(b.cost) AS max_box_cost FROM warehouses w JOIN boxes b ON"
  },
  {
    "id": 1742,
    "db_id": "warehouse_1",
    "question": "For each warehouse location, what is the value of the most expensive box?",
    "answer": "\n  w.warehouse_location, MAX(b.box_price) AS max_box_price FROM warehouses w JOIN boxes b ON w.id = b.warehouse_id GROUP BY w.warehouse_location;"
  },
  {
    "id": 1743,
    "db_id": "warehouse_1",
    "question": "Select the warehouse codes along with the number of boxes in each warehouse.",
    "answer": "  I need to use a loop to iterate over each warehouse code and print a message if there is no boxes for that warehouse.\n\n\\begin{code}\nDim warehouses(4) As String\nwarehouses(0) = \"W1\"\nwarehouses(1) = \"W2\"\nwarehouses(2) = \"W3\"\nwarehouses(3) = \"W4\"\nwarehouses"
  },
  {
    "id": 1744,
    "db_id": "warehouse_1",
    "question": "How many boxes are there with each warehouse ?",
    "answer": "\n The data of the boxes is stored in a csv file. There is a box on every line, but only one row contains information for a single box (the other rows are empty). Each line contains:\nBox name, Box weight, Box length, Box width, Box height, Warehouse number, Product, Customer, and some additional data.\n\nI need to create a function that given the warehouse number it returns the total boxes in this warehouse. I can"
  },
  {
    "id": 1745,
    "db_id": "warehouse_1",
    "question": "Find the number of different locations where Rocks are stored.",
    "answer": " \n   */\n  public int getNumRockLocations() {\n    return rockLocations.size();\n  }\n\n  /**\n   * Get the number of rocks at each location, for all locations.\n   * @return An array where each element is a pair of integers representing\n   * (numberOfRocks, locationIndex), where locationIndex points into the list of\n   * rockLocations returned by getRockLocations().\n"
  },
  {
    "id": 1746,
    "db_id": "warehouse_1",
    "question": "In how many different warehouses are Rocks stored within boxes?",
    "answer": "\n  def boxes_with_rocks = Box.where('contents like ?', '%Rock%')\nend"
  },
  {
    "id": 1747,
    "db_id": "warehouse_1",
    "question": "Select the code of each box, along with the name of the city the box is located in.",
    "answer": "  This data comes from a CSV file that I am importing into MySQL.\n\nFor example, my current output looks like this:\n\n\\begin{code}\nBox Code    City Name\n347076     MONTROLITO CASTELLANO DELEGUEZIO\n207075     BETAHUNA PAMPERNEROS AZUEN\n71076      CORDO"
  },
  {
    "id": 1748,
    "db_id": "warehouse_1",
    "question": "What are the codes of all boxes, as well as the locations of the warehouses they are in?",
    "answer": "\n  */\n/*\n  SELECT b.box_code, b.location_id FROM boxes b;"
  },
  {
    "id": 1749,
    "db_id": "warehouse_1",
    "question": "Select the codes of all the boxes located in Chicago.",
    "answer": "  I don't want to use a loop or anything like that, just a method that does it directly.\n\n\\begin{code}\nselect b.box_id, b.box_name from chicago_city c JOIN box_code b ON c.city_code = b.city_code;\n\\end{code}"
  },
  {
    "id": 1750,
    "db_id": "warehouse_1",
    "question": "What are the codes of boxes stored in warehouses in Chicago?",
    "answer": "\n Cities that I have visited: Chicago, Illinois, USA; Los Angeles, California, USA; San Francisco, California, USA.\nWhat is your favorite place to visit in Chicago, Illinois, USA? Pizza!\nWhere would you like to be when the bombs are falling? In my office with my laptop and my coffee - no running out of the building and no panic!\nWhat is the best advice you have ever received or given to someone else? Always listen to"
  },
  {
    "id": 1751,
    "db_id": "warehouse_1",
    "question": "Find the number of boxes saved in each warehouse.",
    "answer": " \n\n- Add a new feature to add products to the database (add_to_database.py) \n- Update an existing product in the database (update_product.py) \n- Query for all products with a certain name (search_products_by_name.py) "
  },
  {
    "id": 1752,
    "db_id": "warehouse_1",
    "question": "How many boxes are stored in each warehouse?",
    "answer": "\n The amount of space that is available for storing items in a single warehouse, measured as the maximum capacity of a single warehouse.\n What is the average number of boxes stored in a single warehouse?\n 450\n */"
  },
  {
    "id": 1753,
    "db_id": "warehouse_1",
    "question": "Find the number of distinct types of contents in each warehouse.",
    "answer": " \n\n  1. For each warehouse, find all the distinct types of contents. \n  2. Display the type of content and the number of times it appears in the warehouse."
  },
  {
    "id": 1754,
    "db_id": "warehouse_1",
    "question": "How many different types of contents are stored in each warehouse?",
    "answer": "\n  <li>What is the total number of products stored in all warehouses?\n ' +\n    '(Select SUM(COUNT) AS total_products FROM WAREHOUSES);"
  },
  {
    "id": 1755,
    "db_id": "warehouse_1",
    "question": "Select the codes of all warehouses that are above capacity.",
    "answer": "  If none specified, then select all warehouses.\n     * @param {array} warehouseIds - List of warehouse ids to check.\n     * @returns {object[]} Array of objects containing warehouse information, and whether they're over or under capacity.\n     */\n    static isWarehouseOverCapacity = (warehouseIds?: number[]) => {\n        const warehouses: Warehouse[] = [];"
  },
  {
    "id": 1756,
    "db_id": "warehouse_1",
    "question": "What are the codes of warehouses that have more boxes than their capacity?",
    "answer": "\n  (A) Warehouse with a box-count above its capacity.\n  (B) Warehouse with a capacity higher than the number of boxes it has.\n*/\nselect w.code, w.capacity, COUNT(b.code) AS num_boxes FROM warehouse w JOIN boxes b ON w.code = b.warehouse_code GROUP BY w.code, w.capacity HAVING COUNT(b.code) >"
  },
  {
    "id": 1757,
    "db_id": "warehouse_1",
    "question": "Find the total values of boxes that are not in the warehouses located at Chicago.",
    "answer": " 75707, USA.\n        /// </summary>\n        /// <param name=\"warehouse\">Warehouse to which the boxes should be delivered.</param>\n        /// <returns></returns>\n        public IEnumerable<Box> FindNotDeliveredTo(Warehouse warehouse) => FindDeliveredTo(warehouse.Id).Where(box => !FindWarehouse(box.DestinationCity, box.DestinationState"
  },
  {
    "id": 1758,
    "db_id": "warehouse_1",
    "question": "What is the total value of boxes contained in any location but Chicago?",
    "answer": "\n The problem can be solved by using a `location` filter that excludes Chicago and then a `count` aggregation.\n\n\\begin{code}\n SELECT COUNT(DISTINCT b.id) AS total_boxes FROM Box b WHERE b.location != 'Chicago';"
  },
  {
    "id": 1759,
    "db_id": "university_rank",
    "question": "Show name, city, and state for all universities in  alphabetical order of university name.",
    "answer": " \" +\n    \"If no universities are found, display 'No Universities Found'\")\n  def find_universities(name = nil, city = nil, state = nil)\n    if !name.nil? || !city.nil? || !state.nil?\n      University.all.select { |univ| univ.name =~ /#{name}/i && univ.city =~ /#{city}/i && univ.state =~ /"
  },
  {
    "id": 1760,
    "db_id": "university_rank",
    "question": "What are the names, cities, and states of all universities in alphabetical order (by name of the university).",
    "answer": "\n  \"\"\"\nlet uni_list =\n    [ { name: 'Carleton University', city: 'Ottawa', state: 'Ontario' },\n      { name: 'McGill University', city: 'Montr\u00e9al', state: 'Quebec' },\n      { name: 'Universit\u00e9 Laval', city: 'Sct. Jean', state: 'Qu\u00e9bec' },\n      { name: 'Western University', city: '"
  },
  {
    "id": 1761,
    "db_id": "university_rank",
    "question": "How many universities are in Illinois or Ohio?",
    "answer": "\n How would a company that is based in Illinois be able to legally incorporate into Ohio, and how can it be registered as a corporation in the state of Ohio?\n What happens if I decide to go out of business but have a contract with one of my suppliers? Should I notify them before or after dissolving the partnership? What are the requirements for this to happen legally, and how can I re-register my company under a different name in a new state?"
  },
  {
    "id": 1762,
    "db_id": "university_rank",
    "question": "What is the total number of universities located in Illinois or Ohio?",
    "answer": "\n You have a list of all the universities, but you do not know how many there are. You want to know how many total universities there are.\n\nAnswer: There are 16 universities in Illinois and 8 universities in Ohio. So there are 24 universities in total."
  },
  {
    "id": 1763,
    "db_id": "university_rank",
    "question": "What is the maximum, average, and minimum enrollment for universities?",
    "answer": "\n Home > Graduate Schools > College Navigator > Programs and Degrees > How do I find out what the maximum, average, and minimum enrollment for a degree program?\nThe answer to this question may vary depending on the college or university and the type of degree. Here are some steps you can take to answer these questions:\nMaximum and minimum enrollment are not available for all degrees but you can find information about them in the catalogs of colleg"
  },
  {
    "id": 1764,
    "db_id": "university_rank",
    "question": "What is the maximum, average, and minimum enrollment for all universities?",
    "answer": "\n  For a university to be considered \"selective\", it must have a maximum ratio of no more than 5 students to every available seat in its classrooms. This means that the proportion of selected students (of whom there are 20) cannot be greater than the proportion of available seats (of which there are 160) for any university.\n\\item What is the proportion of universities with a ratio between 5 and 10 students to every available seat?"
  },
  {
    "id": 1765,
    "db_id": "university_rank",
    "question": "List team name for all universities with enrollments above the average.",
    "answer": " \n    \n    # Add a new column to the dataframe for the team name using the index of the row\n    teams_df['team_name'] = teams_df.index\n    \n    return teams_df\n\ndef get_university_ranking(teams_df):\n    \n    # Create an empty dataframe with columns 'university', 'rank', 'team_name' and 'enrollment' \n    university_ranking ="
  },
  {
    "id": 1766,
    "db_id": "university_rank",
    "question": "What are the names of all teams from universities that have more people enrolled than average ?",
    "answer": "\n  - Team.where('enrollment_count > ?', Team.average(:enrollment_count))\n  - SELECT t.name FROM team t WHERE t.enrollment_count > (SELECT AVG(t2.enrollment_count) FROM team t2);"
  },
  {
    "id": 1767,
    "db_id": "university_rank",
    "question": "Show all home conferences.",
    "answer": " Aaron Snyder, the head of the research department at Northeastern, said the project has a number of goals and will be conducted over two years.\n\"The goal of this project is to produce an open-source data science platform that enables machine learning in a variety of environments,\" he said.\nNortheastern student John Haley, who came up with the project name \"Gizmo\", explained that the project has the ability to be used on a variety"
  },
  {
    "id": 1768,
    "db_id": "university_rank",
    "question": "What are the different home conferences from the university table?",
    "answer": "\n Home Conferences\n A conference is a group of universities that share a common agenda. There is one conference for each university in the university table, and all universities in a particular conference have to agree with one another on an agenda. Each home conference has the following members: the home conference's universities, all the neighboring home conferences, and a representative of the Home Conference Committee. The Home Conference Committee is responsible for managing the home conferences.\nThe"
  },
  {
    "id": 1769,
    "db_id": "university_rank",
    "question": "Show all home conferences and the number of universities in each conference.",
    "answer": " \n\t\t// The number of conferences will be equal to the number of Universities \n\t\tint numberOfConferences = 0;\n\t\tfor (int i = 1; i <= numberOfUniversities; i++) {\n\t\t\tnumberOfConferences++;\n\t}\n\t\treturn numberOfConferences;\n\t}\n}"
  },
  {
    "id": 1770,
    "db_id": "university_rank",
    "question": "For every home conference, how many universities attended that conference?",
    "answer": "\n In order to do this, I need to have a list of all the conferences that any university attended. The conferences are not necessarily the same in each year, so I can't just check for all conferences in the current year. I have a table where I store all the conferences, and an event table that stores whether a conference was attended by a certain university. But the events table only shows which conference and which year it occurred. I need to find out how many"
  },
  {
    "id": 1771,
    "db_id": "university_rank",
    "question": "Which state has most number of universities?",
    "answer": "\n My current plan is to go to the state with the highest percentage of graduates receiving a Bachelor\u2019s degree in computer science. I\u2019m guessing that would be California, but what if they are not guaranteed to have the highest percentage? What would I do next? Go to the state with the second highest percentage?\n\nComment: It's worth noting that there is no universality of a Bachelor's degree in computer science. While it is very common for a"
  },
  {
    "id": 1772,
    "db_id": "university_rank",
    "question": "What is the state with the most universities?",
    "answer": "\n My question was about the state with the most institutions.\nIn 2015, Texas had more publicly and privately funded institutions than any other state in the US, according to an analysis conducted by the National Center for Education Statistics (NCES). Of the 64 institutions that received Title IV funds from Congress, Texas had 37 of them, followed closely by California.\nIn total, NCES found that there were 128 publicly and"
  },
  {
    "id": 1773,
    "db_id": "university_rank",
    "question": "Show all home conferences with average enrollment of universities above 2000.",
    "answer": " CPA/CEA, FPA, AEA, or PCA members must provide the following information:\n \u2022 A list of the universities where you are registered to teach. The University's name should be included in the list. \u2022 The location of your university on a map (e.g., GPS coordinates). \u2022 Information on how to contact you for reimbursement requests and other matters. Please also check the \"I certify that I am...\" box below."
  },
  {
    "id": 1774,
    "db_id": "university_rank",
    "question": "What are the home conferences that have an average university enrollment above 2000?",
    "answer": "\n \n"
  },
  {
    "id": 1775,
    "db_id": "university_rank",
    "question": "Which conference has the least number of total enrollment?",
    "answer": "\n C) A university that has the highest average GPA."
  },
  {
    "id": 1776,
    "db_id": "university_rank",
    "question": "What are the home conferences with the fewest number of people enrolled?",
    "answer": "\n FINAL_STATES = ['IL','IA','MO','NE','OK']  # OHIO and IOWA are in the same conference, but we don't want to group them.\nCONFERENCE_WEIGHTS = {}\nfor state in FINAL_STATES:\n    members = [member for member in US_MEMBERS if member['state'] == state]\n    weight = 1 / len(members)"
  },
  {
    "id": 1777,
    "db_id": "university_rank",
    "question": "List all major name and major code in the order of their major code",
    "answer": ". \n * \n * @param majors The list of majors to sort\n * @return A sorted array of majors\n */\nexport function sortMajors(majors: Major[]) {\n    return majors.sort((a, b) => a.majorCode - b.majorCode);\n}"
  },
  {
    "id": 1778,
    "db_id": "university_rank",
    "question": "What are the names and codes for all majors ordered by their code?",
    "answer": "\n  Major[] result = new Major[Major.MAJOR_MAP.size()];\n  int i = 0;\n  for (Map.Entry<String, Integer> entry : Major.MAJOR_MAP.entrySet()) {\n    result[i] = new Major(entry.getKey(), entry.getValue());\n    i++;\n  }\n  return result;\n}"
  },
  {
    "id": 1779,
    "db_id": "university_rank",
    "question": "Show all majors and major ranks for the university with name Augustana College.",
    "answer": " A variety of fields, including the following, are within the purview of the Board:\nAnnual Fund Development (AFD)\nGiving is a vital part of our mission. We recognize that giving as a group enables us to fulfill our responsibilities toward the Lord and the University, and that together we can achieve more for Augustana College than we could as individuals. Giving opportunities are provided for men, women, and unmarried couples in all majors"
  },
  {
    "id": 1780,
    "db_id": "university_rank",
    "question": "What are the ranks and names of all majors at Augustana College?",
    "answer": "\n Want to know more about a specific major or minor? Let us know!"
  },
  {
    "id": 1781,
    "db_id": "university_rank",
    "question": "What is the name, city, state of the university with a rank 1 on Accounting major?",
    "answer": "\n In other words, I want to know which school in the world has the highest Accounting Major rank.\nI would like to know the name, city, state and country of the University with the highest Accounting Major rank.\nI have tried several Google search methods including \"Accounting Rank\" and \"Best Ranked Universities\", but it only gives me a list of universities ranked based on their overall rankings rather than their majors' rankings.\nCan anyone help me"
  },
  {
    "id": 1782,
    "db_id": "university_rank",
    "question": "What is the name, city, and state of the university with number 1 ranked Accounting major?",
    "answer": "\n By University, City, State: University of Oklahoma, Norman, OK."
  },
  {
    "id": 1783,
    "db_id": "university_rank",
    "question": "What is the name of the university that has most number of majors with rank 1?",
    "answer": "\n 'Fourth' in the name means the University of St. Francis, and it was ranked #1 for having the most number of majors among all universities in the world with a total of 8479625 majors! Congratulations to them.\n\nI am so confused because I thought the list had more than 10,0000 elements and the only reason for not getting the full result was the time limit of the API call"
  },
  {
    "id": 1784,
    "db_id": "university_rank",
    "question": "What is the name of the university with the most majors ranked number 1?",
    "answer": "\n MIT - Massachusetts Institute of Technology.\nHow many students attend college full time while working a job part-time? The percentage is 20%.\nWhat is the average age of the population in the state of California? The average age is 35.1 years old.\nWhat is the most efficient way to get from point A to point B? The best method is by road, which takes 67.4 minutes.\nHow much does a pound of fe"
  },
  {
    "id": 1785,
    "db_id": "university_rank",
    "question": "Show all university names without a major with rank 1?",
    "answer": "\n (inspired by the question at http://stackoverflow.com/questions/8507869/how-to-select-rows-with-max-value)\n SELECT u.university_name, r.rank FROM rankings r JOIN universities u ON r.university = u.id WHERE r.rank = 1;"
  },
  {
    "id": 1786,
    "db_id": "university_rank",
    "question": "What are the names of all universities without any majors ranked number 1?",
    "answer": "\n BUT there are no universities with no major that rank number 1. This is what I would like to achieve:\n\n\\begin{code}\nUniversity Name    Rank Major Name     Rank Ranked Major Name     Rank\nHarvard            1   Business        1   Business Science   2\nCornell            2   Physics         2   Physics Engineering     3\nStanford           3   Computer Science 3   Computer Science Engineering  4\nMIT                4  "
  },
  {
    "id": 1787,
    "db_id": "university_rank",
    "question": "Show all university names with both major Accounting and major Urban Education.",
    "answer": " 2) It shows the number of students enrolled in each of these universities in the given year, grouped by major and university. 3) The total number of students enrolled across all majors and years in the given year.\n\nThe report should be well-formatted and easy to read for anyone who is not a technical person."
  },
  {
    "id": 1788,
    "db_id": "university_rank",
    "question": "What are the names of all universities that have both Accounting and Urban Education majors?",
    "answer": "\n I know a university with an accounting major but not one with an urban education major. Are there any other universities with both majors?\n\\end{blockquote}\n\n\\strong{No.} The information you're looking for is not publicly available and is therefore unavailable to the general public, which is why I have to tell you that there are no universities with both an accounting major and a urban education major."
  },
  {
    "id": 1789,
    "db_id": "university_rank",
    "question": "What is the name and overall ranking of universities in Wisconsin state?",
    "answer": "\n On November 1, 2015, the NACA released their rankings for 2016. Here are the top five universities in Wisconsin:\nNorthwestern University (ranked #1)\nUniversity of Wisconsin-Madison (ranked #2)\nMarquette University (ranked #3)\nUniversity of Wisconsin-Milwaukee (ranked #4)\nUniversity of Wisconsin-Eau Claire ("
  },
  {
    "id": 1790,
    "db_id": "university_rank",
    "question": "What is the name and rank of every university in Wisconsin?",
    "answer": "\n There is a lot of information available online, including data from U.S. News & World Report's annual ranking of universities. This data is based on surveys of students and alumni, but also includes other relevant factors such as financial support, research resources, and the overall quality of the institution.\nHow do I make my voice heard in a university administration? There are many ways to make your voice heard by a university administration, including contacting them directly, writing letters"
  },
  {
    "id": 1791,
    "db_id": "university_rank",
    "question": "What is the university name with highest research point?",
    "answer": "\n The 70 best universities in the world, according to Times Higher Education's (THE) rankings. THE ranks universities based on their research performance, as measured by the impact of their scholarly publications. Here are the top 25 ranked research-intensive institutions in the world:1. University of California, Los Angeles (UCLA) University of California, San Diego (UCSD)University of California, Berkeley (UCB)Harvard University"
  },
  {
    "id": 1792,
    "db_id": "university_rank",
    "question": "What is the name of the university with the most research points?",
    "answer": "\n  [/i]  The University of Texas at Austin holds the record for highest number of research points, with a total of 1,097,258.\n\\end{blockquote}"
  },
  {
    "id": 1793,
    "db_id": "university_rank",
    "question": "List all university names in ascending order of their reputation points.",
    "answer": " \n\n\t@param: None\n\t@return: List of universities as a dictionary with key=name and value=reputation_points\"\"\"\n\tuniversity_data = UniversityData.get_all()\n\tuniversity_names = [data['name'] for data in university_data]\n\tuniversity_reputation_points = {name: data['reputation_points'] for name, data in university_data.items()}\n\treturn"
  },
  {
    "id": 1794,
    "db_id": "university_rank",
    "question": "What are the names of all universities in ascending order of reputation points?",
    "answer": "\n  # Get the university with the highest reputation points.\n  def get_top_university(reputation_points) do\n    reputation_points |> Enum.max() |> (&(Map.get(reputation_points, &1))).() |> (&String.split(&1, \";\")).() |> (&hd).() |> (&%{rank: 1, name: &1}).()\n  end"
  },
  {
    "id": 1795,
    "db_id": "university_rank",
    "question": "What is the name of university with major Accounting ranked 3 or above?",
    "answer": "\n B. The average GPA of students at universities with majors ranked 2 or lower?\n C. The number of hours required to complete a degree in accounting at universities with majors ranked higher than 4?\n D. The maximum credit hours awarded for completing a degree in accounting at universities with majors ranked higher than 4?\n E. The percentage of students from universities with major Accounting ranked higher than 4 who graduated within the past"
  },
  {
    "id": 1796,
    "db_id": "university_rank",
    "question": "What are the names of the university with an Accounting major ranked 3 or higher?",
    "answer": "\n In order to answer this question, we will use a subquery. The subquery will retrieve all universities with an accounting major. We will then join this subquery to the larger table and retrieve the universities' names that are in the subquery result set: SELECT u.name FROM University u JOIN (SELECT name FROM University WHERE major = 'accounting') AS a ON u.name = a.name;"
  },
  {
    "id": 1797,
    "db_id": "university_rank",
    "question": "What is the total enrollment of universities with a overall rank 5 or below?",
    "answer": "\n In order to determine this, we need to use the \"University Rank\" variable. Let's take the minimum value in the \"University Rank\" column and add it to the total number of universities (which is equal to the number of rows in the \"University\" table). The result should be 12924, which is the total number of universities with a rank of 5 or below.\n\n SELECT MIN(u.University_"
  },
  {
    "id": 1798,
    "db_id": "university_rank",
    "question": "What is the total number of students enrolled in an university with a rank of 5 or below?",
    "answer": "\n Tags: uk, university, student, ranking\n By: Sarah Sutcliffe\nIt is now possible to get a full list of all universities in the UK that have a student population of more than one thousand. This includes all universities which currently hold less than 1000 students, but where it is likely that at some point in the past there was more than 1000.\nI also found a list of universities with a total student population of"
  },
  {
    "id": 1799,
    "db_id": "university_rank",
    "question": "Find the name and Citation point of the universities whose reputation points are top 3 and above.",
    "answer": " \"http://reputation-point.com/reputation-rankings/\"\n2. Improve the University rankings to have a more accurate and relevant ranking system.\n3. Implement the ability to search for universities by name, location (state), size, and reputation points.\n4. Give users the ability to \"follow\" universities and receive emails when the university's reputation points change."
  },
  {
    "id": 1800,
    "db_id": "university_rank",
    "question": "What is the name and citation point of the unversities with the top 3 reputation points?",
    "answer": "\n In a 2019 ranking, Princeton was ranked as the world's most prestigious university. It was also ranked as one of the top three universities in the US in terms of research productivity, according to the National Science Foundation. (Source: Princeton University)\nPurdue is the home of the world's largest botanical garden and has been ranked among the top universities in the US in terms of research productivity. (Source"
  },
  {
    "id": 1801,
    "db_id": "university_rank",
    "question": "which states do have more than two universities with enrollment smaller than 3000?",
    "answer": "\n (Their university is not listed in the `university` table, but that's not relevant to the question.)\n5. Which states do not have any universities with a student population below 2000?\n(Again, not relevant.)"
  },
  {
    "id": 1802,
    "db_id": "university_rank",
    "question": "What are the states that have more than 2 universities with an enrollment less than 3000?",
    "answer": "\n [How can I do this in SQL?]\n  SELECT state FROM (SELECT u.state, COUNT(u.id) AS university_count FROM University u GROUP BY u.state HAVING SUM(CASE WHEN u.enrollment < 3000 THEN 1 ELSE 0 END) > 2 ORDER BY state NULLS LAST);"
  },
  {
    "id": 1803,
    "db_id": "movie_2",
    "question": "Find the titles of movies that don\u2019t have any rating.",
    "answer": " \n  ```python\n  SELECT m.title FROM movie m WHERE m.rating IS NULL;"
  },
  {
    "id": 1804,
    "db_id": "movie_2",
    "question": "What are the names of movies that do not have any ratings?",
    "answer": "\n  # TODO: Use a SELECT statement to return all movie titles for which no ratings exist.\n  def self.movies_without_ratings\n    Movie.select(:title) unless Rating.exists?\n  end\nend"
  },
  {
    "id": 1805,
    "db_id": "movie_2",
    "question": "Find the names of movies whose rating is \u2018G\u2019.",
    "answer": " \n(Use SELECT title FROM movie WHERE rating = 'G';)"
  },
  {
    "id": 1806,
    "db_id": "movie_2",
    "question": "What are names of movies that have a 'G' ratings?",
    "answer": "\n Certainly, there are many films with higher ratings than that.\n\nAnswer: In the United States, all movies are rated by the Motion Picture Association of America (MPAA), which then gives a rating from G to RX and has several restrictions on what can be said or done in some of those movies, based on the rating. However, it is not up to the MPAA to define \"G\" as an acceptable rating.\n\nComment: I"
  },
  {
    "id": 1807,
    "db_id": "movie_2",
    "question": "Find the title of the movie that is played in the Odeon theater.",
    "answer": " The theater also has a cinema, which is run by a Chinese company, and this is what they use to promote their business.\nThe Chinese company will not be able to sell any product to you (or the Chinese government) as it is illegal for a company to import products from another country into China. The reason why the Odeon was built in 1987 is that there are no more state-owned buildings in London, so it can't be used as a"
  },
  {
    "id": 1808,
    "db_id": "movie_2",
    "question": "What are the movie titles for ones that are played in the Odeon theater?",
    "answer": "\n What a funny title!\n A good thing to do would be to make them available in a format like \"Movie Title (Theatrical Version)\".\n\nComment: @Evgeny - Yeah, I've had similar thoughts. This is just part of the reason why I was looking for suggestions.\n\nAnswer: For a movie that has been made available on DVD as Theatrical Cut with optional Extras, it might be best to simply call it \""
  },
  {
    "id": 1809,
    "db_id": "movie_2",
    "question": "Find the names of movies that are played in any theater and the name of the corresponding theater.",
    "answer": "  I would like to know how to do this?\n\nAnswer: This is possible using `pandas`. Here's an example, which should get you started:\n\n\\begin{code}\nimport pandas as pd\n\nmovies = pd.read_csv('movies.csv', sep=',')\ntheaters = pd.read_csv('theaters.csv', sep=',')\ndf = pd.merge(movies, theaters)\nprint"
  },
  {
    "id": 1810,
    "db_id": "movie_2",
    "question": "What are the names of the movies that are played in any theater and the name of the corresponding theater?",
    "answer": "\n Tags: Theater, Movie, Movies, Name, Played, Playing"
  },
  {
    "id": 1811,
    "db_id": "movie_2",
    "question": "Find the number of movies whose rating is \u2018G\u2019.",
    "answer": " \n//    SELECT COUNT(*) FROM Movies WHERE m.rating = 'G';"
  },
  {
    "id": 1812,
    "db_id": "movie_2",
    "question": "How many movies had a 'G' rating?",
    "answer": "\n Writer, Producer, Director, Actor, and Photographer. If you\u2019re in the business, what do you think of the 'G' rating?\nA 'G' Rating? A 'G' Rating? A 'G' Rating?\nG-rated content on YouTube is getting more attention than ever before. The Federal Government has given its seal of approval to an application for a 'G' rating, and the Internet Movie Database"
  },
  {
    "id": 1813,
    "db_id": "movie_2",
    "question": "How many movies are playing across all theaters?",
    "answer": "\n Are there any upcoming releases that you\u2019re looking forward to?\n What kind of movies do you like? Do you have a favorite movie?\nI am a huge fan of horror, mystery and drama. I love a good twist or turns in a plot. My favorite movie is \u201cThe Oath\u201d by James A. Michener. I also enjoy movies from the 50\u2019s and 60\u2019s such as \u201cRebel Without a C"
  },
  {
    "id": 1814,
    "db_id": "movie_2",
    "question": "How many movies are playing in theaters?",
    "answer": "\n One movie is playing in 1000 screens. This means that one person can see it 1000 times, but you can\u2019t watch it more than once in a single theater! If you want to know how many people see the movie overall, you have to divide the number of theaters by the number of seats in each theater. The average number of viewers is (number of screens)/(seats in theater) = 100"
  },
  {
    "id": 1815,
    "db_id": "movie_2",
    "question": "How many distinct movies are on in theaters?",
    "answer": "\n You can't have a movie without a cinema. But without a theater, you cannot watch it. Cinema and theater go hand in hand, like peanut butter and jelly go hand in hand. They both complete each other. Think about it -- what would you do if you couldn't watch a movie? How can you enjoy a movie without the theater?"
  },
  {
    "id": 1816,
    "db_id": "movie_2",
    "question": "How many different movies are playing?",
    "answer": "\n It\u2019s the first time I\u2019ve ever seen a movie with this much screen time in my life. The second time is in the trailer.\nI\u2019m not sure that it will last, but it\u2019s nice to have something to watch for a couple of hours."
  },
  {
    "id": 1817,
    "db_id": "movie_2",
    "question": "How many distinct movie theaters are there?",
    "answer": "\n A. There is one theater in each city. B. There is one movie theater in each city and each city has multiple theaters. C. Each city has only one theater that can show many movies. D. Each city has two or more movie theaters."
  },
  {
    "id": 1818,
    "db_id": "movie_2",
    "question": "How many different movie theaters exist?",
    "answer": "\n In other words, how many different theaters do you have?\n 123456789101111213141516171819202122232425262728293031323334353637383940414243444546"
  },
  {
    "id": 1819,
    "db_id": "movie_2",
    "question": "Find the rating of the movie whose name includes the word \u2018Citizen\u2019.",
    "answer": " \nmovie_rating = Movie.find_by_name(\"Citizen's\")\np \"Rating: #{movie_rating.rating}\"\n"
  },
  {
    "id": 1820,
    "db_id": "movie_2",
    "question": "What is the rating of the movie what has a name including a word like 'Citizen'?",
    "answer": "\n  The search will be performed using the ILIKE operator which means that the words in front and after 'Citizen' do not matter. For example, 'Citizen Kane' or 'Citizen Kane Citizen Kane' would match.\"\n  (ILIKE '%Citizen%Kane') )\n\\end{code}"
  },
  {
    "id": 1821,
    "db_id": "movie_2",
    "question": "Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019.",
    "answer": " A cinema with both ratings is not included in the result.\n    SELECT DISTINCT c.name FROM cinema c JOIN movie m ON c.id = m.cinema_id WHERE (m.rating ilike '%G%' OR m.rating ilike '%PG%') AND NOT EXISTS (SELECT 1 FROM movie n WHERE n.cinema_id = c.id AND (n.rating ilike '%R%' OR n.rating ilike '%MA%'));"
  },
  {
    "id": 1822,
    "db_id": "movie_2",
    "question": "What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?",
    "answer": "\n A) 75% of the time, B) 80% of the time, C) 90% of the time.\nA) 75% of the time (375/500) = 1.25. B) 80% of the time (400/500) = 0.8. C) 90% of the time (500/500) ="
  },
  {
    "id": 1823,
    "db_id": "movie_2",
    "question": "Find the name of the movies that are played in either cinema Odeon or Imperial.",
    "answer": "  I tried with:\n\n\n\\begin{code}\nSELECT m.movie_name FROM movie m JOIN (SELECT o.movie_id FROM odeon_cinema o) AS a ON a.movie_id = m.movie_id JOIN (SELECT i.movie_id FROM imperial_theatre i) AS b ON b.movie_id = m.movie_id;\n\\end{code}\n\nBut it doesn't work, I"
  },
  {
    "id": 1824,
    "db_id": "movie_2",
    "question": "What are the titles of all the movies that played at the Odeon or Imperial theater?",
    "answer": "\n Posted By: A.J. Bisson on May 16, 2019\nHere is a list of all the movies that played at the Odeon or Imperial theaters over the years. These are not just any random movies either, but some of the most popular ones!"
  },
  {
    "id": 1825,
    "db_id": "movie_2",
    "question": "Find the name of the movie that is on in both Odeon and Imperial theaters.",
    "answer": " A small man (Cleaver) goes to an art exhibition in a big city to find the missing part of a famous painting, only to discover that the two exhibits are actually one.\n10:07:34 PM 29/12/15: \"The movie is about an Englishman who has made his fortune in the diamond market and returns to his old home to settle down there for good.\" (Dial)\n10:0"
  },
  {
    "id": 1826,
    "db_id": "movie_2",
    "question": "What movie is playing at both the Odeon and Imperial theater?",
    "answer": "\n WHODNEY: I don't know. Have you heard of that? They're playing the same film there at the same time, but in different theaters. How can they possibly do that?\nI was at the Odeon this morning on my way to the Imperial and saw it posted up on a big sign saying \"The Odeon / Imperial Theater.\" So they're running both shows together. I don't know how they're doing it"
  },
  {
    "id": 1827,
    "db_id": "movie_2",
    "question": "Find the name of all movies that are not played in Odeon theater.",
    "answer": " 2018-09-03\nMovies to be seen at other theaters than Odeon: 2018-09-03, 747265, 757071, 760100, 871110.\nOdeon Theater was opened in 1905 as a small, intimate theater for silent films. In 19"
  },
  {
    "id": 1828,
    "db_id": "movie_2",
    "question": "What are the names of every movie that is not playing at the Odeon theater?",
    "answer": "\n Certainly not! The Odeon Theater in downtown Toronto has 18 screens. You can watch any movie there, and it\u2019s a great place to go see a film, especially one that you\u2019ve been wanting to see but have forgotten for some reason. Just give them a call today.\nPrevious Article Is there a difference between a film and a video? No, there isn\u2019t!"
  },
  {
    "id": 1829,
    "db_id": "movie_2",
    "question": "List in alphabetical order the titles of all movies.",
    "answer": " \n* Make a list of movies that contain 'The' in their title (in alphabetical order)\n* Make a list of movies with '2014' in their title\n* Extract the year from the title of 'Hulk 2014'\n* Check if a movie is already on your personal watchlist, and add/remove it\n\"\"\""
  },
  {
    "id": 1830,
    "db_id": "movie_2",
    "question": "What are the movie names in alphabetical order?",
    "answer": "\n A)\nCasablanca B)The Godfather C)The Man with the Gun D)The Searchers E)The Third Man F)The Treasure of the Sierra Madre G)Gone With The Wind H)House of Strangers I)I Walked With A Zombie J)Jeremy's Family K)Killer in the Sun L)Little Big Horn M)Mary, Mary, Maidenq N)Night"
  },
  {
    "id": 1831,
    "db_id": "movie_2",
    "question": "Find the titles of all movies sorted by their ratings.",
    "answer": " \n- title, rating\n- SELECT m.title, AVG(mr.rating) AS average_rating FROM Movie m JOIN MovieRating mr ON m.id = mr.movie_id GROUP BY m.title ORDER BY average_rating DESC NULLS LAST;"
  },
  {
    "id": 1832,
    "db_id": "movie_2",
    "question": "What are the movie names sorted by rating?",
    "answer": "\n The MovieDB::Movies.new('the-matrix', 'the-lord-of-the-rings', 'star-wars').movies_by_rating(0) => [[\"the-lord-of-the-rings\", 7.9], [\"star-wars\", 8.2]]\n\n If the rating is above a certain threshold, it will not be included in the array:\n The MovieDB::M"
  },
  {
    "id": 1833,
    "db_id": "movie_2",
    "question": "Find the name of the theater that is playing the most number of movies.",
    "answer": " \n* Use the following query to find the theater that has played the most movies in a year. The name of the theater is stored in the variable `theater_name`.\n */\n SELECT theater_name FROM (SELECT t.name AS theater_name, COUNT(*) AS num_movies FROM movies m JOIN theaters t ON m.theater = t.id GROUP BY t.name ORDER BY num_movies DESC LIMIT 1)"
  },
  {
    "id": 1834,
    "db_id": "movie_2",
    "question": "What is the name of the theater playing the most movies?",
    "answer": "\n Homepage for The Most Movies Theater, LLC."
  },
  {
    "id": 1835,
    "db_id": "movie_2",
    "question": "Find the name of the movie that is played in the most number of theaters.",
    "answer": " 2) Display the name of the movie that earned the highest profit.\n\nSo far, I've gotten as far as finding the total revenue from all movies and calculating the average revenue for each movie. How do I find the answers to questions #1 and #2?\n\nComment: Do you have any other table than `Movies` in your schema? Please post the relevant `CREATE TABLE` statements for the other tables as well.\n\nAnswer"
  },
  {
    "id": 1836,
    "db_id": "movie_2",
    "question": "What is the name of the film playing at the most number of theaters?",
    "answer": "\n  (A) \"The Matrix\" (B) \"Star Wars\" (C) \"The Dark Knight\" (D) \"Titanic\" (E) \"Finding Nemo\")"
  },
  {
    "id": 1837,
    "db_id": "movie_2",
    "question": "Find the number of movies in each rating.",
    "answer": " \n\tpublic List<Rating> ratings;\n}"
  },
  {
    "id": 1838,
    "db_id": "movie_2",
    "question": "How many movies exist for each rating?",
    "answer": "\n The most recent 20 movies rated R are listed below. To show more movies rated R, please add a filter constraint to your query and specify a higher value for the parameter 'count'. Or, try one of the following ratings: G, PG, PG-13, or NC.\n\n     http://content.api.xxxxx.com/movie_ratings/r\n\\end{code}\n\nAnswer: I don'"
  },
  {
    "id": 1839,
    "db_id": "movie_2",
    "question": "Find the number of movies whose rating is not null.",
    "answer": "  I get the error:\n\n\\begin{code}\nSELECT COUNT(m.title) FROM movie m WHERE m.rating IS NOT NULL;\n\\end{code}\n\nError at line 1: Unknown column 'm.rating' in field list\n\nComment: PostgreSQL requires that you reference the `column` name when using it. Try this instead: `SELECT COUNT(m.title) FROM movie m WHERE m.rating IS NOT NULL;`"
  },
  {
    "id": 1840,
    "db_id": "movie_2",
    "question": "How many movies have a rating that is not null?",
    "answer": "\n Tags: SQL, postgresql, null, sql-like, postgres-9.5, pgadmin\n\nQuestion: Postgres 9.5 - SELECT WHERE LIKE '%' throws error NULL value in full text search condition\n\nI am running a query on postgres 9.5 that has to ignore all the movies where the rating is null. I know this is possible in mySQL but it doesn't work in postgres:\n\n\\begin{code}"
  },
  {
    "id": 1841,
    "db_id": "movie_2",
    "question": "Find the name of theaters that has at least one movie playing.",
    "answer": " \n   */\n  public static List<String> getMovieTheaters(Set<Integer> movies) {\n    // TODO: Implement this method and return a list with the names of the movie theaters that have at least one movie in the list \n    // passed as an argument to this method.\n    HashMap<String, HashSet<Integer>> movieTheaters = new HashMap<>();\n    \n    for (Integer m : movies) {\n     "
  },
  {
    "id": 1842,
    "db_id": "movie_2",
    "question": "What are the names of every theater with at least one movie playing?",
    "answer": "\n Actor or actress.\n\nI am using this query to get all the names of actors and actresses in movies that have a release date set. I am getting an error because of the lack of the movie_id field, but I can't seem to find a way to add it without joining with another table. Here's my query:\n SELECT a.\"first name\", a.\"last name\" FROM ACTOR a JOIN MOVIE m ON a.actor"
  },
  {
    "id": 1843,
    "db_id": "movie_2",
    "question": "Select the name of all movie theaters that are not currently showing a movie.",
    "answer": "  */\npublic class TheaterList {\n    private static final Logger LOG = Logger.getLogger(TheaterList.class);\n    public static List<String> theaterNames;\n\n    /** Find all movie theaters that are not currently showing a movie  */\n    public static List<String> getTheaterNames() throws Exception {\n        if (theaterNames != null) {\n            return theaterNames;\n        }\n        theaterNames ="
  },
  {
    "id": 1844,
    "db_id": "movie_2",
    "question": "What are the names of all cinemas not showing any movies?",
    "answer": "\n  return all_cinemas.select { |c| c.movies_played.count == 0 }.map(&:name)\nend\n\ndef all_cinemas\n  Cinemas.all.sort_by(&:name) # all cinemas sorted alphabetically by name (in the DB)\nend"
  },
  {
    "id": 1845,
    "db_id": "movie_2",
    "question": "Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019.",
    "answer": " The first few results are:\n\n\\begin{code}\nSELECT m.movie_title, c.city, t.name AS theater_name FROM ratings r JOIN movies m ON r.item_id = m.movie_id JOIN cities c ON m.city_id = c.id JOIN theaters t ON m.theater_id = t.id WHERE rating = 'G' LIMIT 5;\n\\end{code}"
  },
  {
    "id": 1846,
    "db_id": "movie_2",
    "question": "What are the names of theaters playing 'G' rated movies?",
    "answer": "\n It was also known as the \"G-Rating\" before 1995.\n This rating system was introduced by the Motion Picture Association of America (MPAA) and was designed to distinguish G-rated movies from other types of films. Before 1995, it was sometimes referred to as the \"Motion Picture Rating System - G\" or simply the \"G Rating\"."
  },
  {
    "id": 1847,
    "db_id": "movie_2",
    "question": "Select the title of all movies.",
    "answer": "  */\n        // SELECT m.title FROM Movie m;"
  },
  {
    "id": 1848,
    "db_id": "movie_2",
    "question": "What are all of the movie names?",
    "answer": "\n I want to do a list of all the movies in this category.\n */\n\\end{code}"
  },
  {
    "id": 1849,
    "db_id": "movie_2",
    "question": "Show all the distinct ratings in the database.",
    "answer": "  For example, if there are 10 different ratings, it will show \"Good\", \"Excellent\", \"Very Good\", etc. up to \"Terrible\".\n\n\\begin{code}\n SELECT DISTINCT r.Rating FROM Ratings r ORDER BY r.Rating ASC;\n\\end{code}"
  },
  {
    "id": 1850,
    "db_id": "movie_2",
    "question": "What are the different movie ratings?",
    "answer": "\n It\u2019s important to note that there is a difference between what is \u201crecommended\u201d and \u201cguaranteed.\u201d While you can expect to find a certain level of quality in many of the films on any given day, you should not assume that any one film or studio will always be the best. As we know from our own research and experience, the ratings are meant to give an overall rating of the product. So a 4.5-star review does not mean that the"
  },
  {
    "id": 1851,
    "db_id": "movie_2",
    "question": "Show all information of all unrated movies.",
    "answer": " \n  # The user can then rate the movie by clicking a star, and be taken to the movie's review page to write a review. \n  # The average rating will update automatically with the current user's vote. \n  class Movie < ActiveRecord::Base\n    has_many :ratings, dependent: :destroy\n    has_many :reviews, dependent: :destroy\n    \n    validates :title, presence: true\n    validates"
  },
  {
    "id": 1852,
    "db_id": "movie_2",
    "question": "What is all the information about the unrated movies?",
    "answer": "\n A: You can use the following code to retrieve the unrated movies in a movie database.\n SELECT m.title, m.year FROM movie m WHERE m.rating = 'unrated';"
  },
  {
    "id": 1853,
    "db_id": "movie_2",
    "question": "Show the titles of movies not currently being shown in any theaters.",
    "answer": " \n */\nfunction getMovieTitles() {\n    return new Promise(resolve => {\n        resolve([ 'The Matrix', 'The Matrix Reloaded', 'The Matrix Revolutions' ]);\n    });\n}"
  },
  {
    "id": 1854,
    "db_id": "movie_2",
    "question": "What are the names of the movies not being shown in any theaters?",
    "answer": "\n A list of all the movies that have a zero value in the 'count_theatres' column.\n SELECT m.title FROM movie m WHERE m.count_theatres = 0 ORDER BY m.title NULLS LAST;"
  },
  {
    "id": 1855,
    "db_id": "planet_1",
    "question": "Who receieved the heaviest package?",
    "answer": "\n Mistah gully, you are correct. I don't know any of them, so can't comment on the weight. But in general, it is not a good idea to ask for 'the heaviest', because there might be an even heavier one that hasn't been found yet, or it might have never occurred to anyone to look for such a package. It is better to specify a name so you can get information about that particular package.\n\nComment"
  },
  {
    "id": 1856,
    "db_id": "planet_1",
    "question": "What is the name of the client who received the heaviest package?",
    "answer": "\n  <hr />\n  <p>Name: {name}</p>\n  `;"
  },
  {
    "id": 1857,
    "db_id": "planet_1",
    "question": "What is the total weight of all the packages that customer Leo Wong sent?",
    "answer": "\n  return warehouse.total_weight;"
  },
  {
    "id": 1858,
    "db_id": "planet_1",
    "question": "What is the total weight for all packages that Leo Wong sent?",
    "answer": "\n  let totalWeight = 0;\n // for each package, add its weight to the totalWeight variable.\n  for (let i = 0; i < packages.length; i++) {\n    totalWeight += packages[i].weight;\n  }\n  return totalWeight;\n};"
  },
  {
    "id": 1859,
    "db_id": "planet_1",
    "question": "What is the position of Amy Wong?",
    "answer": "\n Cynthia L. Rice, Executive Director, Association for Supervision & Training International (ASTI) 757077 Telephone: 757-077 Fax: 757-071 E-Mail: cynthia@asti-usa.org http://www.asti-usa.org\nWHO I AM: What is the position of Amy Wong? I am a researcher and writer"
  },
  {
    "id": 1860,
    "db_id": "planet_1",
    "question": "What position does Amy Wong have?",
    "answer": "\n It\u2019s important to note that the number of positions available can vary depending on factors such as the team\u2019s needs, the player\u2019s skill level, and the competition.\nIf you\u2019re a U17 girl in Australia, you can still play in some high-level leagues in Australia and there are also leagues with just U16 players. I\u2019m not sure which age group your daughter will be in when she is 9 years old but it might be"
  },
  {
    "id": 1861,
    "db_id": "planet_1",
    "question": "What is Turanga Leela's salary and position?",
    "answer": "\n Cause: 2017-18, NPET, Team: Shakti, POSITION: Goalkeeper."
  },
  {
    "id": 1862,
    "db_id": "planet_1",
    "question": "What is the salary and position of the employee named Turanga Leela?",
    "answer": "\n  select s.salary, p.position_name from staff s JOIN position p ON s.position_id = p.position_id WHERE s.staff_first_name = 'Turanga' AND s.staff_last_name = 'Leela';"
  },
  {
    "id": 1863,
    "db_id": "planet_1",
    "question": "What is the average salary of all intern jobs?",
    "answer": "\n I want to know how much the average salary for an internship in the field of software engineering.\n \nI can provide you with a general answer, but not a specific number.\nThe average pay for an internship in the field of software engineering can vary greatly depending on factors such as the company size, the location, the length of the internship, etc. For example: A small startup with an average annual revenue of 10 million dollars may offer interns"
  },
  {
    "id": 1864,
    "db_id": "planet_1",
    "question": "What is the average salary of an intern?",
    "answer": "\n My colleagues are making more than me. \n\n* How many hours should I be working this week? \n    - I'm going to work 8 hours this week."
  },
  {
    "id": 1865,
    "db_id": "planet_1",
    "question": "What level is Physician?",
    "answer": "\n W. R. S. B. D. A. R. N. V. D. R. C. L. O. I. D. E. M. I. A. H. K. T. Y. I. S. G. (C) 2019\" id=\"34\" /></p>\n                        <p class=\"mb-0\"><img src=\"/img/logo_easystep.png\" alt=\"\""
  },
  {
    "id": 1866,
    "db_id": "planet_1",
    "question": "What is the clearance level of a physician?",
    "answer": "\n On a scale from 0 to 1, where 1 means the physician has all the required knowledge and experience, and 0 means the physician has no knowledge or experience.\n */\n@property (nonatomic) double clearanceLevel;\n\n/*!\n @brief The date this person was created on.\n */\n@property (nonatomic) NSDate* createdAt;\n\n/*!\n @brief A user-friendly description of the"
  },
  {
    "id": 1867,
    "db_id": "planet_1",
    "question": "List Package Number of all package sent by Leo Wong?",
    "answer": "\n  I would like to know how many packages were sent by Leo Wong. Please provide me with a list of the number of packages he has sent in each year.\n\\end{blockquote}\n\nSo far, I have managed to get the dates and volumes but not the years:\n\n\\begin{code}\n SELECT COUNT(DISTINCT p.package_id) AS total_packages FROM package p JOIN shipment s ON p.shipment_id = s"
  },
  {
    "id": 1868,
    "db_id": "planet_1",
    "question": "What is the number of all packages that Leo Wong sent?",
    "answer": "\n  const allPackages = await Package.find({\n    where: { creator_id: leo.id },\n  });\n\n  // How many packages does Leo Wong still need to send?\n  const remainingPackages = totalPackages - allPackages.length;\n  console.log(allPackages, remainingPackages);\n});\n```\n"
  },
  {
    "id": 1869,
    "db_id": "planet_1",
    "question": "List all package numbers received by Leo Wong ?",
    "answer": "\n The data of Leo Wong is not public information, and only he/she themselves can share it with you. However, if you are allowed to know his/her phone number(s), please leave a comment below, and I will do my best to find the missing information.\nLeo Wong's Phone Number:"
  },
  {
    "id": 1870,
    "db_id": "planet_1",
    "question": "What are all of the package numbers received by Leo Wong?",
    "answer": "\n In other words, how many packages have been delivered to Leo's doorstep, and when was each one delivered?\n By looking at the data below, you can see that Leo Wong has had 6 packages delivered in total. The first package came to his house on March 27th, 2015. He then received a second package on November 3rd of this year. Then, Leo's third package arrived on June 18th, "
  },
  {
    "id": 1871,
    "db_id": "planet_1",
    "question": "List all package sent or received by Leo Wong.",
    "answer": "  */\n/******************************************************************************/\n\n#ifndef LEO_INCLUDED\n#define LEO_INCLUDED\n\n#include \"leo_defs.h\"\n\nint leoGetLine(char *line, int size, FILE *stream);\nchar *leoTrimTrailingWhitespace(char *string);\n\n#endif /* LEO_INCLUDED */"
  },
  {
    "id": 1872,
    "db_id": "planet_1",
    "question": "What are all the different package numbers that Leo Wong sent or received?",
    "answer": "\n  if (!empty($leo_wong->sentPackages)) {\n  // loop through the array of packages and extract the package number for each one\n    foreach ($leo_wong->sentPackages as $package) {\n      echo \"\\nPackage Number: \" . $package['number'];\n    }\n} else {\n  print 'No packages were sent';\n}\n"
  },
  {
    "id": 1873,
    "db_id": "planet_1",
    "question": "Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.",
    "answer": " \n   This is a lower bound on the total number of messages sent between the two nodes */\n  int num_messages_sent = ogden_count + leo_count;\n  printf(\"number of messages sent = %d\\n\", num_messages_sent);\n}"
  },
  {
    "id": 1874,
    "db_id": "planet_1",
    "question": "How many packages sent by Ogden Wernstrom and received by Leo Wong?",
    "answer": "\n Maintaining the integrity of the system is one of the important features. The goal is to make sure that no single user can interfere with others, and that all users can reach their destinations without having to go through other users. This can be done by dividing the users into groups (or subnetworks) so that when one group is sending a package it does not collide with another group in the network.\n\nComment: How can I set up a routing table"
  },
  {
    "id": 1875,
    "db_id": "planet_1",
    "question": "What are the contents of package sent by John Zoidfarb?",
    "answer": "\n The text I received is: \"Hello, how are you?\"."
  },
  {
    "id": 1876,
    "db_id": "planet_1",
    "question": "What are the package contents of all those sent by John Zoidfarb?",
    "answer": "\n You could write a program to do that, but I'd rather you didn't."
  },
  {
    "id": 1877,
    "db_id": "planet_1",
    "question": "What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.",
    "answer": "  (2450)\nSELECT p.package_number, p.weight FROM Packages p JOIN Members m ON p.member_id = m.member_id WHERE m.name ilike '%John%' ORDER BY p.package_number NULLS LAST;"
  },
  {
    "id": 1878,
    "db_id": "planet_1",
    "question": "What is the package number and weight of the heaviest package that was sent by a client named John or something similar?",
    "answer": "\n  * Do I know the total amount of packages shipped to a specific address on a given day or at a certain time of the day?\n \"\n\\end{blockquote}"
  },
  {
    "id": 1879,
    "db_id": "planet_1",
    "question": "List package number and weight of top 3 lightest packages.",
    "answer": " \" << std::endl;\n    for (size_t i = 0; i < 3; ++i) {\n        auto p = packages[i];\n        std::cout << \"package \" << p.name << \", weight \" << p.weight << std::endl;\n    }\n}"
  },
  {
    "id": 1880,
    "db_id": "planet_1",
    "question": "What is the package number and weight of the 3 lightest packages?",
    "answer": "\n [The total weight of the 3 lightest packages is: 75.0 kilograms]"
  },
  {
    "id": 1881,
    "db_id": "planet_1",
    "question": "Who sent most number of packages? List client name and number of packages sent by that client.",
    "answer": " 15987654321\n#client_name: 30\n#total_packages_sent: 15987654321"
  },
  {
    "id": 1882,
    "db_id": "planet_1",
    "question": "What is the name of the client who sent the most packages and how many were there?",
    "answer": "\n  The package was sent by the client with the most packages, and the number of packages.\n    SELECT c.client_name, COUNT(p.package_id) AS count FROM Clients c JOIN Packages p ON c.client_id = CAST(p.client_id AS integer) GROUP BY c.client_name ORDER BY count DESC LIMIT 1;"
  },
  {
    "id": 1883,
    "db_id": "planet_1",
    "question": "Who received least number of packages ? List client name and number of packages received by that client .",
    "answer": "\n  */\n        public static void main(String[] args) {\n            Package p1 = new Package(\"ABC\", \"50000\");\n            Package p2 = new Package(\"XYZ\", \"50001\");\n            Package p3 = new Package(\"CDE\", \"50002\");\n            Package p4 = new Package(\"AEC\", \"50003\");\n            Package p5 = new Package(\"B"
  },
  {
    "id": 1884,
    "db_id": "planet_1",
    "question": "What is the smallest number of packages received and by whom ?",
    "answer": "\n 4) Who are the most active users on the site, and what are they doing there?"
  },
  {
    "id": 1885,
    "db_id": "planet_1",
    "question": "Who sent more than one packages? List the client's name.",
    "answer": " \n                        <br />\n                        And their address as well as the shipping company they are using. \n                        <br />\n                        (If none, that's fine too, just let me know)\n                    </p>"
  },
  {
    "id": 1886,
    "db_id": "planet_1",
    "question": "What is the name of all clients who sent more than one package?",
    "answer": "\n  SELECT DISTINCT c.name FROM clients c JOIN orders o ON c.id = o.client_id GROUP BY c.name HAVING COUNT(o.id) > 1;"
  },
  {
    "id": 1887,
    "db_id": "planet_1",
    "question": "What are the Coordinates of planet Mars?",
    "answer": "\n In which form is the coordinate system used to describe the position and motion of a planet?\n  Answer: Rectangular coordinates."
  },
  {
    "id": 1888,
    "db_id": "planet_1",
    "question": "What are the coordinates of the planet named Mars?",
    "answer": "\n The planet's coordinates are 186.5\u00b0 E longitude and -4.84377298056\u00b0 N latitude.\n\n How long is the average distance between the Earth and the Sun?\n The average distance between the Earth and the Sun is 1.384 AU, or 149.5 million kilometers (km)."
  },
  {
    "id": 1889,
    "db_id": "planet_1",
    "question": "List all Planets' names and coordinates in alphabetical order of name.",
    "answer": " \n  planet_names = list(map(lambda p: (p['name'], p['coordinates']), planets))\nsort_by_name(planet_names)\nprint(f\"The sorted planets are: {', '.join('{0} at ({1})'.format(*p) for p in planet_names)}\") "
  },
  {
    "id": 1890,
    "db_id": "planet_1",
    "question": "What are the names and coordinates of all planets in alphabetical order by name?",
    "answer": "\n  Planets.all.sort_by{|p| p.name}\nend\n\ndef self.search(query)\n  # Find all planets whose name or description includes the given query (case-insensitive)\n  where(\"name ILIKE '%#{query}%' OR descr ILIKE '%#{query}%'\")\n end\nend"
  },
  {
    "id": 1891,
    "db_id": "planet_1",
    "question": "List all shipment id under Phillip J. Fry's management.",
    "answer": "\n15/02/2013 10:30 a.m. Phillip J. Fry and his wife, Susan, are on the shipment list.\n07/02/2013 7:00 p.m. The shipment of \"Fry\" has left from New York.\n04/02/2013 7:00 a.m. Phillip J. Fry"
  },
  {
    "id": 1892,
    "db_id": "planet_1",
    "question": "What are the shipment IDs of every delivery managed by Phillip J Fry?",
    "answer": "\n  public function getDeliveryShipmentIds(int $deliveryId, int $page = 1, int $limit = 25) : array {\n # code...\n   return $this->getPaginatedArrayResults('SELECT s.shipment_id FROM shipments s WHERE s.delivery_id = ' . $deliveryId, $page, $limit);\n  }\n}"
  },
  {
    "id": 1893,
    "db_id": "planet_1",
    "question": "List the dates of all shipments.",
    "answer": " \n   * @return array\n   */\n  public function getAllShipmentDates() {\n    $shipments = Shipment::all();\n    $shipment_dates = array();\n    foreach ($shipments as $shipment) {\n      $shipment_dates[] = $shipment->created_at;\n    }\n    return $shipment_dates;\n  }\n  \n  /**\n   * Get the dates"
  },
  {
    "id": 1894,
    "db_id": "planet_1",
    "question": "What are the dates of every shipment in the database?",
    "answer": "\n  * How many times a shipment has been shipped, and when was that last shipment?\n \"shipped\" means any status code (3000-3999), not only the codes 3000-3002.\n  */\n SELECT s.id AS shipment_number, COUNT(s.id) OVER (PARTITION BY s.id) AS num_shipments, MAX(s.date_sh"
  },
  {
    "id": 1895,
    "db_id": "planet_1",
    "question": "List all shipment ids for the planet Mars.",
    "answer": " \n   (if it exists) and a list of shipments for Earth. \n*/\nShipmentPlanetList planets = new ShipmentPlanetList();\nplanets.addEarthShipment(new Shipment());\nfor (int i = 0; i < 5; i++) {\n    planets.addMarsShipment(new Shipment());\n}"
  },
  {
    "id": 1896,
    "db_id": "planet_1",
    "question": "What are the shipment ids for the planet Mars?",
    "answer": "\n I mean, that's what it says in the article, right?\n Dude. You have to write your own code, not just copy-paste a bunch of lines from someone else's code!\n\nComment: I don't have an answer yet but I am still looking into this issue and I will update this page once I find a solution. But thanks for the down vote.\n\nAnswer: After some researching, I found that the following code works to"
  },
  {
    "id": 1897,
    "db_id": "planet_1",
    "question": "List all shipment ids for the planet Mars and under the management of Turanga Leela.",
    "answer": " 311501.\n\n![alt text](https://github.com/adam-sarka/Scraper-Mars-Shipments/blob/main/images/mars_shipments_list.PNG)\n"
  },
  {
    "id": 1898,
    "db_id": "planet_1",
    "question": "What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?",
    "answer": "\n  ```elasticsearch_query(index: \"shipment-tracker\", body: '{ \"query\": { \"term\": { \"manager\": \"Turanga Leela\" } } }')```"
  },
  {
    "id": 1899,
    "db_id": "planet_1",
    "question": "List all shipment ids on the planet Mars or under the management of Turanga Leela.",
    "answer": " 396,720,104. The planetary system containing the Martian settlements is also home to numerous other alien races and civilizations, including the mysterious Xhosa clan.\nIn 2023, a number of human colonies were established on Mars with the help of Turanga Leela 396,720,104's resources, but they are facing significant challenges in their early years."
  },
  {
    "id": 1900,
    "db_id": "planet_1",
    "question": "What are the ids for all shipments on the planet Mars that Turanga Leela manages?",
    "answer": "\n  std::vector<int> shipmentIds = turangaLeela.GetShipmentIds();\n\n  // Display the list of shipment ids.\n  for (auto shipmentId : shipmentIds) {\n    std::cout << shipmentId << ' ';\n  }\n  std::cout << std::endl;\n} catch (const std::exception& e) {\n  std::cerr << \"Exception: \" << e."
  },
  {
    "id": 1901,
    "db_id": "planet_1",
    "question": "What is the total shipments in each planet? List the planet name and total shipments.",
    "answer": " \nfor planet, shipments in total_shipments.items():\n    print(planet, shipments)"
  },
  {
    "id": 1902,
    "db_id": "planet_1",
    "question": "How many shipments take place on each planet?",
    "answer": "\n In other words, how many times does a given planet receive an asteroid impact on average.\n  * Averaging the number of asteroid collisions per planet would be too high because there's only one collision per asteroid.\n  * However, using the total number of asteroids and dividing it by the number of planets is not a good answer either because some planets have many more asteroids than others.\n  * This is an underestimate because"
  },
  {
    "id": 1903,
    "db_id": "planet_1",
    "question": "Which planet has most shipments? List the planet name.",
    "answer": " \nprint('Most shipments on Planet Xylokrypton:')\nx = int(input('Enter number of shipments: '))\nplanet_shipments(x, 'Xylokrypton')"
  },
  {
    "id": 1904,
    "db_id": "planet_1",
    "question": "What is the name of the planet with the most shipments?",
    "answer": "\n The name of the planet with the most shipments is Venus. Venus receives the largest number of shipments (271) from Earth, which is 95% of all shipments to or from the planet. This is because the United States is one of the countries that has the most influence and is able to control its borders, allowing for a large population and resources. Venus also receives shipments from Europe, China, Canada, Brazil, and India.\nWhat"
  },
  {
    "id": 1905,
    "db_id": "planet_1",
    "question": "List the manger's name and number of shipments under his management.",
    "answer": " \n\n  2. List the manager's name, shipment id, the shipment's weight and destination country for all shipments under his management."
  },
  {
    "id": 1906,
    "db_id": "planet_1",
    "question": "What are the number of shipments managed and names of each manager?",
    "answer": "\n  var $shipment_count = array();\n  foreach ($managers AS $manager) {\n    $shipment_count[$manager['name']] = count($manager['shipments']);\n  }\n?>\n<table>\n  <tbody>\n    <?php foreach ($shipment_count AS $name => $count) { ?>\n      <tr><th><?=$name?> <span class=\"label label-info\"><?=$count?"
  },
  {
    "id": 1907,
    "db_id": "planet_1",
    "question": "Calculate total weight of package shipped on Mars.",
    "answer": " 25.37 kg\n\\end{code}\n\nSo I used the `awk` command:\n\n\\begin{code}\nawk '{print $1}' /tmp/foo.csv > /tmp/bar.txt\ncat /tmp/bar.txt\n\\end{code}\n\nOutput is `total weight of package shipped on Mars`."
  },
  {
    "id": 1908,
    "db_id": "planet_1",
    "question": "what is the total weight of all packages shipped on Mars?",
    "answer": "\n I\u2019d like to know how much the rover has to carry in order for it to be able to deliver all of these packages.\n\nHint: The rover can only ship 5 pounds at a time."
  },
  {
    "id": 1909,
    "db_id": "planet_1",
    "question": "Calculate total weight of package shipped in each planet . show the name of each planet .",
    "answer": " and then sum the total weight. \n        Planet[] planets = { new Planet(\"Earth\", 5.9), new Planet(\"Mars\", 6.3) };\n        System.Console.WriteLine(string.Join(\", \", from p in planets select p.Name));\n        Console.WriteLine();\n\n        double totalWeight = (from p in planets select p.Weight).Sum();\n        Console.WriteLine($\"Total weight: {total"
  },
  {
    "id": 1910,
    "db_id": "planet_1",
    "question": "what is the total package weight for each planet, list its name ?",
    "answer": "\n  println(\"Planet Name, Total Weight\")\n <?php foreach ($data as $row) { ?>\n    printf(\"%s, %f\\n\", $row['name'], $row['total_weight']); <?php } ?>"
  },
  {
    "id": 1911,
    "db_id": "planet_1",
    "question": "Which planet has total weight of shipment greater than 30? List planet name.",
    "answer": " \"Mercury\"\n    if (shipment.total_weight > 30) {\n      puts shipment.to_s + \", \" + shipment.planet_name.to_s\n    }\n  end\nend"
  },
  {
    "id": 1912,
    "db_id": "planet_1",
    "question": "What are the names of all planets tjat have a total shipment weight greater than 30?",
    "answer": "\n '(SELECT p.name FROM planet p WHERE p.total_shipment_weight > 30)';"
  },
  {
    "id": 1913,
    "db_id": "planet_1",
    "question": "List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.",
    "answer": " Cepheus to the Milky Way galaxy, and 1971-10-23 was the date when the Milky Way galaxy was created.\nThe package arrived in the Galactic Empire on October 23rd 1971. The date is the same as that of the creation of the Milky Way galaxy. However, it does not match the exact arrival date mentioned by Zapp Brannigan Cepheus. It is"
  },
  {
    "id": 1914,
    "db_id": "planet_1",
    "question": "What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?",
    "answer": "\n How does the shipment of the packages differ from the previous case? Does it count as one or more shipments? Is there any difference in the shipment method (e.g., air, rail, mail)?\n\nAnswer: The number of shipments depends on how many packages were sent and received on Zapp Brannigan, which is 10. Assuming that all the packages sent by Zapp Brannigan are shipped as a single shipment, then there will"
  },
  {
    "id": 1915,
    "db_id": "planet_1",
    "question": "List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.",
    "answer": " Cutoff time is 12:00 noon GMT\n\treturn 3779000;\n}\n\nfunction get_total_shipped() {\n    return number_of_packages();\n}"
  },
  {
    "id": 1916,
    "db_id": "planet_1",
    "question": "What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?",
    "answer": "\n Fuck knows, but I'm sure they're both in the same range."
  },
  {
    "id": 1917,
    "db_id": "planet_1",
    "question": "Which packages have weight between 10 and 30? List the package number and weight.",
    "answer": " #59000-75000.\n\nComment: @user748669 I don't think that is possible, but I can provide an answer to show you a query that will do that."
  },
  {
    "id": 1918,
    "db_id": "planet_1",
    "question": "What are the package numbers and weights that are between 10 and 30?",
    "answer": "\n 'b'\n The number of packages with these weights is: 7. 'a' What are the package numbers and weights that are greater than 30? 'c' The number of packages with these weights is: 2."
  },
  {
    "id": 1919,
    "db_id": "planet_1",
    "question": "Which employees do not have clearance in Mars? List employee's name.",
    "answer": " 2nd Approach\n SELECT e.name FROM Employee e JOIN Clearance c ON e.employeeId = c.employeeId;"
  },
  {
    "id": 1920,
    "db_id": "planet_1",
    "question": "What are the names of all employees who don't have clearance on Mars?",
    "answer": "\n  return _.filter(this.employees, function (employee) {\n    return !employee.clearances.includes('Mars');\n  });\n};"
  },
  {
    "id": 1921,
    "db_id": "planet_1",
    "question": "Which employees have clearance in Omega III? List employees' name.",
    "answer": " The only time that a person is fired from the company is when he/she has completed his contract, so the information can be used for the resume of the employee.\n\nComment: I would have to create an Employee class and use it as a value object to carry all the information of the employee. So my question is: should the list of employees be stored in an array or in some sort of collection (List) within the Employee class? Or even in a database?\n\n"
  },
  {
    "id": 1922,
    "db_id": "planet_1",
    "question": "What are the names of all employees with clearance on Omega III?",
    "answer": "\n Nosceology, 2013-04-15: The Disease and Disability Center at Omega III is pleased to announce that we have updated our website and now display all employee names with clearance on the web site."
  },
  {
    "id": 1923,
    "db_id": "planet_1",
    "question": "Which planets that have exact one employee has clearance? List planets' name.",
    "answer": " \n            public static IEnumerable<string> GetNamesOfPlanetsWithOneEmployee(IEnumerable<IPlanet> planets)\n            {\n                var planetNames = new HashSet<string>();\n                foreach (var planet in planets)\n                {\n                    if (planet.HasOneEmployee())\n                        planetNames.Add(planet.Name);\n                }\n                return planetNames;\n            }\n        }\n    }"
  },
  {
    "id": 1924,
    "db_id": "planet_1",
    "question": "What are the names of all planets with one employee that has clearance?",
    "answer": "\n  (set-difference (all-employees) (clearance))\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <query xmlns=\"urn:xmlapi:marklogic:poc:2\" xmlns:esco=\"http://www.esco.com/\">\n    <employee>\n      <employee-id>{list_of_planets}</employee-id>\n    </employee>\n </query>"
  },
  {
    "id": 1925,
    "db_id": "planet_1",
    "question": "Which employees have salaries between 5000 and 10000? List employees' name.",
    "answer": " \"Sales\" and their salary in descending order.\nSELECT e.name, s.salary FROM employees e JOIN sales_and_commission sa ON e.employee_id = sa.seller_id JOIN salaries s ON s.employee_id = e.employee_id WHERE s.salary BETWEEN 5000 AND 10000 ORDER BY s.salary DESC;"
  },
  {
    "id": 1926,
    "db_id": "planet_1",
    "question": "What are the employees's names for those that have salaries between 5000 and 10000?",
    "answer": "\n ').replace(/\\n/g, '')\n  }\n]"
  },
  {
    "id": 1927,
    "db_id": "planet_1",
    "question": "Find the name of employees whose salary is above the average salary or more than 5000.",
    "answer": " #=> [\"Jim\", \"John\"]\nemployees = Employee.where(salary: avg_salary + 1)\nputs employees.map(&:name) # => [\"Jim\", \"John\"]\n\\end{code}\n\nAnswer: You can do this in Ruby like so:\n\n\\begin{code}\n# Get the average salary from the Employee model's table.\navg_salary = Employee.aver"
  },
  {
    "id": 1928,
    "db_id": "planet_1",
    "question": "What are the names of all employees who have a salary greater than average or more than 5000?",
    "answer": "\n # SELECT e.name FROM employee e WHERE e.salary > (SELECT AVG(s.salary) FROM employee s);"
  },
  {
    "id": 1929,
    "db_id": "planet_1",
    "question": "Find the number of employees who do not have clearance in Mars .",
    "answer": "\n  # Returns a list of employee names.\n  def unapproved_emails\n    User.all.select { |u| u.email && !u.email_approved? }.map(&:name)\n  end\nend"
  },
  {
    "id": 1930,
    "db_id": "planet_1",
    "question": "What is the number of employees that do not have clearance on Mars ?",
    "answer": "\n  # return count(e.id) AS number_of_employees FROM Employee e LEFT JOIN EmployeeAccess ea ON e.id = ea.employee_id WHERE ea.accesslevel IS NULL;"
  },
  {
    "id": 1931,
    "db_id": "video_game",
    "question": "How many games are there?",
    "answer": "\n \u201cGive me a break!\u201d I thought to myself. This was not the answer I wanted, but it was all I could manage at this point.\nI went back to my bedroom and wrote down exactly what I had said. I then went on the internet, searched for information about the phrase, but could find nothing.\nIf I am wrong in any of that, please let me know."
  },
  {
    "id": 1932,
    "db_id": "video_game",
    "question": "Count the number of games.",
    "answer": "  If I could just get a list of all games in the array, I can simply use an array to loop through them and add each game to the schedule.\n\nComment: @Ethan You have to run your code in the Playground or in Xcode (on iPhone/iPad) for this to work. In the simulator or on the Mac it will not be able to read data from the web service. Also, you can't do what you want with a single array"
  },
  {
    "id": 1933,
    "db_id": "video_game",
    "question": "List the Title and Developers of all games ordered by units sold from large to small.",
    "answer": " \n        return view('admin.games.sales-ranking', [\n            'title' => $this->getTitle(),\n            'games' => Game::orderByDesc('sold_units')->get()\n        ]);\n    }\n}"
  },
  {
    "id": 1934,
    "db_id": "video_game",
    "question": "What are the titles and developers of all games, sorted by units sold descending?",
    "answer": "\n  SELECT t.title, d.name FROM sales s JOIN games g ON s.game_id = g.id JOIN title_prices tp ON g.id = tp.games_id JOIN developers d ON tp.devel_ids = d.id ORDER BY s.count DESC;"
  },
  {
    "id": 1935,
    "db_id": "video_game",
    "question": "What is the average units sold in millions of the games that are not developed by Nintendo?",
    "answer": "\n Home, by far, is the most popular platform for games like this. The sales figures I have seen for Home have been higher than those of any other platform.\nI'm wondering if you're being sarcastic. Because if you are then your comment just proves that you're not a Nintendo fan.\nThis doesn't mean the Switch is no longer a good game in handheld form.\nIt's the best option for games like this, and"
  },
  {
    "id": 1936,
    "db_id": "video_game",
    "question": "Return the average number of units sold in millions for games not developed by Nintendo.",
    "answer": " 4) How many units were sold in total across all platforms 5) The sales figures as a percentage of the total sales from Nintendo's games (excluding Wii U).\nNintendo has the largest market share among the gaming consoles, but has had a decline in market share due to the rise of other competing systems. The average number of units sold is 6.31 million units in millions for games not developed by Nintendo. The total sales"
  },
  {
    "id": 1937,
    "db_id": "video_game",
    "question": "What are the names and market districts of all platforms?",
    "answer": "\n A. I can\u2019t think of any at the moment.\n B. MySpace, Facebook, Twitter, Tumblr, LinkedIn, Instagram, YouTube, Foursquare, SoundCloud\n C. Wikipedia, Wikipedia, Wikipedia, Wikipedia, Wikipedia, Wikipedia, Wikipedia, Wikipedia, Wikipedia, Wikipedia\n D. MyFavouriteThings, Flickr, Myspace, Pinterest, Stack Overflow, Tumblr, Wikipedia, Wikipedia, Wikipedia"
  },
  {
    "id": 1938,
    "db_id": "video_game",
    "question": "Return all platform names and corresponding market districts.",
    "answer": " \n   * @return array of PlatformMarketDistrict\n   */\n  public function getAllPlatformMarkets() {\n    $platform_market_districts = new ArrayObject();\n\n    foreach ($this->getAllPlatformNames() as $platform_name) {\n      foreach($this->getMarketsByPlatformName($platform_name) as $market_id) {\n        // get market name for market id\n        $market_name"
  },
  {
    "id": 1939,
    "db_id": "video_game",
    "question": "What are the names and id of platforms whose download rank is 1?",
    "answer": "\n Cool. So I can do a SELECT DISTINCT(p.name) AS name, p.id FROM Platforms p WHERE p.download_rank = 1;"
  },
  {
    "id": 1940,
    "db_id": "video_game",
    "question": "Return the names and ids of all platforms with the download rank of 1.",
    "answer": " #\"https://api.opensea.io/api/v3/collection/exclusive-dogs#1.0.0/platforms?ordering=rank&limit=5\"\n    \"\"\"\n    return jsonify({\"platforms\": [{\"name\": p.get('name'), \"id\": p.get('id')} for p in rank_data['data']]}))"
  },
  {
    "id": 1941,
    "db_id": "video_game",
    "question": "What are the maximum and minimum rank of the year of players.",
    "answer": " \n    \n    :param player_data: A list of dictionaries containing all the relevant information for each player, as obtained from the API call.\n    :return: A dictionary with the rank of each player in terms of their performance in that particular year. For example, {\"player1\": 32, \"player2\": 54} would mean player1 was ranked 32nd in his performance and player2 was ranked 54th.\n    \"\"\""
  },
  {
    "id": 1942,
    "db_id": "video_game",
    "question": "Give the maximum and minimum rank of the year across all players.",
    "answer": " \n        public int MaxRank { get; set; } = -1;\n        public int MinRank { get; set; } = -1;\n\n        /// <summary>\n        /// The number of years in the range\n        /// </summary>\n        public int YearsRangeSize { get; set; } = 0;\n        \n        /// <summary>\n        /// Create a new instance of this class\n        /// </summary>\n"
  },
  {
    "id": 1943,
    "db_id": "video_game",
    "question": "How many players have rank of the year smaller than 3?",
    "answer": "\n P1, P2, P3, P4, P5, P6, P7, P8, P9, P10.\n\nI'm trying to write a program that would generate all possible combinations of these numbers, i.e:\n\n\\begin{code}\n1 2 3 - rank 1\n1 2 4 - rank 2\n1 3 4 - rank 3\n2 3 4 -"
  },
  {
    "id": 1944,
    "db_id": "video_game",
    "question": "Count the number of players that have a rank of year of at most 3.",
    "answer": " \"years_to_rank\" is the rank to be\n    // compared.\n    public int GetCountPlayersWithRank(int years_to_rank) {\n        return 0;\n    }\n}"
  },
  {
    "id": 1945,
    "db_id": "video_game",
    "question": "List all player names in ascending alphabetical order.",
    "answer": " \n// Write the results to a file \"sorted_players.txt\" that is next to your original players.txt file. \n// Replace the original players.txt with the sorted players.txt when you are done."
  },
  {
    "id": 1946,
    "db_id": "video_game",
    "question": "What are the names of all players in alphabetical order?",
    "answer": "\n The name of each player is followed by their nationality and any relevant titles they possess (e.g. \"French National Champion\").\n\\end{itemize}\n\nAnswer: \\begin{code}\n SELECT p.first_name, p.last_name, p.nationality, c.title FROM players AS p JOIN countries AS co ON CAST(p.country AS INTEGER) = co.id JOIN titles AS t ON p.id ="
  },
  {
    "id": 1947,
    "db_id": "video_game",
    "question": "List names and colleges of all players in descending order of rank of the year.",
    "answer": " 2018, 2017, 2016 and 2015\n5th February, 2019 - 10:45pm: The Belfast Giants and Dublin Wolves faced off in this year's first game of the 2019-2020 season. The Wolves won 82-70. 7th February, 2019 - 10"
  },
  {
    "id": 1948,
    "db_id": "video_game",
    "question": "What are the names and colleges of all players, ordered by rank of year descending?",
    "answer": "\n  return @players.sort_by{|p| [p.year, p.name]}.reverse.map do |p|\n    \"#{p.name} #{p.college}\"\n  end\nend"
  },
  {
    "id": 1949,
    "db_id": "video_game",
    "question": "Please show the names and rank of players that have played the game titled \"Super Mario World\".",
    "answer": "\n "
  },
  {
    "id": 1950,
    "db_id": "video_game",
    "question": "What are the names and ranks of players who have played the game with the title \"Super Mario World\"?",
    "answer": "\n When is Super Mario World released?\n By whom was it released? For what system(s) was it released for? How many players were there? What is the story behind the creation of Super Mario World? More questions, and more answers!\nHi, I\u2019m a huge fan of Super Mario games and this game in particular. As I\u2019ve been searching information about it online, I found that you guys might not know much about the game Super Mario World. So here are"
  },
  {
    "id": 1951,
    "db_id": "video_game",
    "question": "Show the distinct developer of games played by players that go to college \"Auburn\".",
    "answer": "\n A player that plays for a team that has no college affiliation is considered to play for Auburn.\n A player that goes to college at a university other than Auburn's is not considered an Auburn player.\n\n Examples include:\n\n * \"Tiger Aubry\" - Correct, since Aubry plays for Auburn.\n * \"Aubry Tiger\" - Incorrect, since Aubry does not play for A"
  },
  {
    "id": 1952,
    "db_id": "video_game",
    "question": "What are the different developers of games that are played by players that attend Auburn college?",
    "answer": "\n WR, PH, and QB, respectively. Auburn is in the Southeastern Conference, which has 10 teams total. The conference is made up of 4 divisions, and each division has 5 teams. There's no \"safety\" in the conference; in other words, a player cannot play for two different teams.\nI have 12 games I want to make predictions for. They are:\n1) Auburn"
  },
  {
    "id": 1953,
    "db_id": "video_game",
    "question": "What is the average number of units sold in millions of games played by players with position \"Guard\"?",
    "answer": "\n  I don't know how to write the query.  I can do SELECT AVG(units_sold) FROM player_stats WHERE position = 'Guard'; but that gives an average units_sold per game, not overall avg units_sold.  I can't just multiply by the number of games played because some players have only played a few games, and some players have played a lot of games, so their average units_sold is"
  },
  {
    "id": 1954,
    "db_id": "video_game",
    "question": "Return the average number of units sold in millions among games played by players who have the position Guard.",
    "answer": " 3\n  Average_Units_Sold_Per_Million = (Guard_3_Total_Units_Sold * 1000000) / Total_Games_Played\n  Return Avg_Units_Sold_Per_Million"
  },
  {
    "id": 1955,
    "db_id": "video_game",
    "question": "Please list the title and platform name of games.",
    "answer": "  For example:\n\n\\begin{code}\n\"game_name\": \"The Witcher\",\n\"platform_name\": \"PC\",\n\\end{code}"
  },
  {
    "id": 1956,
    "db_id": "video_game",
    "question": "What are the titles and platform names of all games?",
    "answer": "\n  SELECT DISTINCT g.title, p.name AS platform_name FROM game g JOIN platforms p ON g.platform = p.id ORDER BY g.title NULLS LAST;"
  },
  {
    "id": 1957,
    "db_id": "video_game",
    "question": "Please list the title of games with platforms that have market district in Asia or USA.",
    "answer": "  I have no problem if it is a little outdated.\n\nAnswer: Some popular examples are [Brawler](http://www.brawler.com/), [Call of Duty](https://www.callofduty.com/) (notably the latest game), and [Minecraft](https://minecraft.net/)."
  },
  {
    "id": 1958,
    "db_id": "video_game",
    "question": "What are the titles of games that have platforms in the market districts of Asia or the USA?",
    "answer": "\n What does a platform do for a game to be considered \"multi-platform\"? What is multi-platform gaming, and how has it evolved over time?\n2. What types of platforms (e.g. PCs, consoles, smartphones, tablets) are used for multi-platform games? How have platforms like Steam, the App Store, and Google Play developed to accommodate different platforms in the market?"
  },
  {
    "id": 1959,
    "db_id": "video_game",
    "question": "List the name of each franchise and the number of games belonging to that franchise.",
    "answer": " \n   */\n  public static void displayFranchises() {\n    Set<String> set = new TreeSet<>();\n    for (int i = 0; i < GAMES.size(); i++) {\n      String key = GAMES.get(i).getFranchise();\n      if (set.contains(key)) continue;\n      else set.add(key);\n      System.out.printf(\"%s %d%n"
  },
  {
    "id": 1960,
    "db_id": "video_game",
    "question": "How many games are there from each Franchise?",
    "answer": "\n You should use a `Franchise` table, with one row per franchise.\n\nAnswer: Yes, it is a good practice to use a separate table for the franchise data, which will enable you to have multiple games per franchise without having to use sub-tables."
  },
  {
    "id": 1961,
    "db_id": "video_game",
    "question": "List the name of franchise that have the most number of games.",
    "answer": " \ndef print_franchise_with_most_games(league):\n    team_count = {}\n    for team in league:\n        if team['franchise'] not in team_count:\n            team_count[team['franchise']] = 1\n        else:\n            team_count[team['franchise']] += 1\n    return team_count\n    \ndef print_league(le"
  },
  {
    "id": 1962,
    "db_id": "video_game",
    "question": "Which franchise has the most games?",
    "answer": "\n Nigel Manse and his wife, Pamela, own a 7-year-old boy named Aiden. He's got a passion for football, but he'd rather play video games on his Xbox 360 than be outside to learn how to throw a ball. His mum and dad have decided it's time for him to start playing outdoors, so he'll either have to find new games to play or join a team."
  },
  {
    "id": 1963,
    "db_id": "video_game",
    "question": "List the names of franchises that have at least two games.",
    "answer": " 2021-07-04T13:15:06.175905+00:00\n\nimport pandas as pd\nfrom yahoo_fantasy_baseball import player\nfrom yahoo_fantasy_baseball import league\nfrom yahoo_fantasy_baseball.league import LeagueList\nfrom yahoo_fantasy_baseball.team import Team\nfrom y"
  },
  {
    "id": 1964,
    "db_id": "video_game",
    "question": "What are the names of franchises that have two or more games?",
    "answer": "\n The name of a franchise is considered unique, if it only appears in one row. For example:\n\n    SELECT f.name FROM franchise f WHERE f.name IN (SELECT f2.franchise FROM game g2 JOIN team_games g3 ON g2.team = g3.team GROUP BY f2.franchise HAVING COUNT(g2.team) >= 1) ORDER BY f.name NULLS LAST;"
  },
  {
    "id": 1965,
    "db_id": "video_game",
    "question": "List the name of players that do not play any game.",
    "answer": "  */\n  if (players_without_game) {\n    players_without_game = players_without_game.join(', ')\n    players_without_game = 'The following players were found without a game: ' + players_without_game;\n    return players_without_game;\n  }"
  },
  {
    "id": 1966,
    "db_id": "video_game",
    "question": "What are the names of players who do not play any games?",
    "answer": "\n  $no_games = array();\n \"SELECT p.name FROM Player p LEFT JOIN Participation pr ON p.id = pr.player_id WHERE pr.player_id IS NULL;\"\n  $statement = $this->database->prepare( $query );\n  $statement->execute();\n  while( $row = $statement->fetch() ) {\n    $no_games[] = $row[ 'name' ];\n  }\n"
  },
  {
    "id": 1967,
    "db_id": "video_game",
    "question": "Show the title of games that are played by both players from college \"Oklahoma\" and players from college \"Auburn\".",
    "answer": "\n The teams of these two colleges have a friendly rivalry, so the query will return both games.\n SELECT g.game_date, g.home_team, g.away_team FROM game_data g JOIN team_data t ON (g.home_team = t.team_name OR g.away_team = t.team_name) WHERE t.school like '%Oklahoma%' AND (t.school not ilike '%Auburn%')"
  },
  {
    "id": 1968,
    "db_id": "video_game",
    "question": "What are the titles of games that are played by players from Oklahoma college or Auburn college?",
    "answer": "\n It would be a list of games, not necessarily the names of the players. Here is the list:\nhttp://www.gamesplayedbynok.com/\nYou can check for yourself what kind of games were played by players from Northeastern State University (Northwestern Oklahoma), Southwestern State University (Eastern Oklahoma) and Auburn University (Western Auburn) in 1920-1935."
  },
  {
    "id": 1969,
    "db_id": "video_game",
    "question": "Show all distinct franchises of games.",
    "answer": " 2) That each franchise has a unique logo and color scheme. 3) That each franchise is associated with one or more teams, which have their own unique logos and colors.\nThe NFL will continue to be a huge part of the world of sports as long as there are people out there that like to play football, cheer it on, and pay money for it. As a team owner, you've got to make sure you can effectively communicate with your players, fans"
  },
  {
    "id": 1970,
    "db_id": "video_game",
    "question": "What are all the distinct franchises?",
    "answer": "\n For now I have a list of 250+, but there are less than that. So, if you can find out how to get all the distinct franchises in one list, it will be super helpful.\n\nAnswer: \\begin{code}\n SELECT DISTINCT f.franchise FROM Franchise f;"
  },
  {
    "id": 1971,
    "db_id": "video_game",
    "question": "Show the title of games that are not played by any player who is in the Guard position.",
    "answer": " \n* All other players, including those who play for a different team than the current team. \n* All players on the Guard position. \n* Players who have been assigned to a bench that does not match the team's benched players.  \n\nThe player is shown in red:  \n![alt tag](https://raw.githubusercontent.com/NickMKLR/ShowMeTheScore-XD/master/images/player"
  },
  {
    "id": 1972,
    "db_id": "video_game",
    "question": "What are the titles of games not played by any players who play the Guard position?",
    "answer": "\n  * How many players have played in at least one game that was not played against a player with a title.\n  * Who are the players not playing the Guard position?\n\nAnswering the first two questions is easy:\n\n\\begin{code}\n SELECT g.title, COUNT(DISTINCT p.player_id) AS num_players FROM game_titles g JOIN games gm ON g.game_id = gm.game_id"
  },
  {
    "id": 1973,
    "db_id": "book_press",
    "question": "list all the names of press in descending order of the profit of the year.",
    "answer": " \n```php\n SELECT p.name, SUM(p.profit) AS total_profit FROM press p GROUP BY p.name ORDER BY total_profit DESC;"
  },
  {
    "id": 1974,
    "db_id": "book_press",
    "question": "Sorted all the press by year profits in descending order, and return press names.",
    "answer": " \ndef most_profitable_press(presses):\n    # TODO: Your code here...\n    if not presses:\n        return []\n    else:\n        return sorted(presses, key=lambda x: x.total_profit(), reverse=True)"
  },
  {
    "id": 1975,
    "db_id": "book_press",
    "question": "What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?",
    "answer": "\n \u201cPublishers who make more than $1.5 billion in a year:\u201d I don\u2019t know any, but here is a list of publishers who made more than one billion in a month, from the New York Times:\n\u201cOne publisher making over $1 billion in a month is worth $10 million. Multiply that by 45 and you have about 170 million potential publishers. And those are just the ones who made over"
  },
  {
    "id": 1976,
    "db_id": "book_press",
    "question": "Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.",
    "answer": "\n    \"\"\"\n    return [p.name for p in Press.objects.all() if (p.yearly_profit > 150000000 or p.monthly_profit > 1000000) and p.yearly_profit >= 150000000 and p.monthly_profit >= 1000000]\n"
  },
  {
    "id": 1977,
    "db_id": "book_press",
    "question": "what are the average and maximum profit of a year for all presses?",
    "answer": "\n  # p.average_profit = p.sales.sum(100)/p.cost_price\n  # p.max_profit = p.sales.max_of(100)/p.cost_price\nend\n\\end{code}"
  },
  {
    "id": 1978,
    "db_id": "book_press",
    "question": "Find the average and maximum yearly profit for each press.",
    "answer": " \n\n# Compute the average and maximum profit per year \npress_profits = pd.DataFrame(profit_by_year) # Convert to DataFrame\navg_profit = pd.Series(press_profits['total_profit'].mean(), index=['Average']) # Create a series object \nmax_profit = pd.Series(profit_by_year[year].max(), index=[year]) # Create a series"
  },
  {
    "id": 1979,
    "db_id": "book_press",
    "question": "Find the name of the publisher whose monthly profit is the highest.",
    "answer": " \n * The name should be in the format: \"Publisher Name, Max Profit\" (e.g., \"XYZ Publishers, $10000\")\n */\npublic class PublisherProfit {\n    public static String findHighestProfit(List<Book> bookDatabase) {\n        double maxProfit = 0;\n        String publisherName = \"\";\n        \n        for (Publisher p : Publisher."
  },
  {
    "id": 1980,
    "db_id": "book_press",
    "question": "Which press has the largest monthly profit? Give me the press name.",
    "answer": " \n        //  and the average profit. \n        Console.WriteLine(\"Press with highest monthly profit: {0} with average profit of {1}\", \n            maxMonthlyProfit.First.Key, maxMonthlyProfit.First.Value);\n    }\n}"
  },
  {
    "id": 1981,
    "db_id": "book_press",
    "question": "Find the name of the publisher whose monthly profit is the highest or the lowest.",
    "answer": " \n```java\n SELECT p.name, SUM(s.price) AS total_revenue FROM Publisher p JOIN Book b ON p.id = b.publisher_id JOIN AuthorBook ab ON b.id = ab.book_id JOIN Sales s ON ab.id = s.authorbook_id GROUP BY p.name ORDER BY total_revenue DESC NULLS LAST LIMIT 1;"
  },
  {
    "id": 1982,
    "db_id": "book_press",
    "question": "What are the names of the press that makes the highest monthly profit or the lowest monthly profit?",
    "answer": "\n  You may have to do some research on your own to figure out which one works best.\n- How does the company's financial performance change from year to year?"
  },
  {
    "id": 1983,
    "db_id": "book_press",
    "question": "how many authors are under age 30?",
    "answer": "\n \u201cAge\u201d is a relative term. In order to get a more accurate answer we need to know what you mean by \u201cage.\u201d If you mean years, then the answer is no; if you mean years at which a person is considered old, then it depends on which age group that falls under.\nAge can be used in two other ways:\n1) As an adjective, ageing means growing older or being old.\n2) Ageing can also refer to the process"
  },
  {
    "id": 1984,
    "db_id": "book_press",
    "question": "Count the number of authors of age below 30.",
    "answer": " A new list with all the authors is created and then compared to the original list. If an author appears in both lists, that means the author has written at least one book for a publisher that has also published other books by the author.\n\nAnswer: This query creates a new list of authors with the names only from the first list; the list is sorted alphabetically:\n\n SELECT a.\"first name\", a.\"last name\" FROM author a WHERE a.age < 3"
  },
  {
    "id": 1985,
    "db_id": "book_press",
    "question": "find the average age of authors for each gender.",
    "answer": "  I want to show that the average age is different between male and female authors.  I do not have any other data to show the correlation, so this is a simple example.\n\n\\begin{code}\n SELECT g.gender, AVG(EXTRACT(YEAR FROM AGE(CURRENT_DATE, a.dob))) AS average_age FROM author a JOIN gender_author ga ON a.id = ga.author_id JOIN gender g ON ga."
  },
  {
    "id": 1986,
    "db_id": "book_press",
    "question": "For each gender, return gender and the average age of authors.",
    "answer": " \n   for gender in ['M', 'F']:\n      authors = session.query(Author).filter_by(gender=gender)\n      average_age = authors.with_session(session).average_age()\n      print(f'Average age for {gender} authors: {average_age:.2f}') "
  },
  {
    "id": 1987,
    "db_id": "book_press",
    "question": "find the number of authors who are older than 30 for each gender.",
    "answer": " \"\nselect g.gender, COUNT(*) filter (WHERE a.age > 30) AS age_over_30_count FROM author a JOIN gender g ON a.gender_id = g.id GROUP BY g.gender;"
  },
  {
    "id": 1988,
    "db_id": "book_press",
    "question": "How many authors are of age above 30 for each gender?",
    "answer": "\n In this question, we will use the following SQL query to create a table called AuthorAgeSummary:\n # SELECT g.gender_name, COUNT(*) AS total_authors FROM Author a JOIN Person p ON a.person_id = p.id JOIN Gender g ON p.gender_id = g.gender_id WHERE a.age > 30 GROUP BY g.gender_name;"
  },
  {
    "id": 1989,
    "db_id": "book_press",
    "question": "List all book titles in the order of their release date from the most recent to the past.",
    "answer": " 1960s.\n\nI tried using the `ORDER BY` clause with no success, as I couldn't figure out how to put the `DESC` keyword on the right side of the clause.\n\nComment: What did you try? Give us a sample query that we can fix to make it work. Also give us the table definitions and keys.\n\nComment: SELECT b.title, b.release_date FROM books b ORDER BY b.release"
  },
  {
    "id": 1990,
    "db_id": "book_press",
    "question": "Sort all the books in descending order of release date, and return the book titles.",
    "answer": " \n   */\n  public List<String> getBooksSortedByReleaseDateDesc() {\n    // TODO: Implement this method.\n    return null;\n  }\n\n  /**\n   * Returns a list of all books in ascending order of release date, and return the book titles \n   */\n  public List<String> getBooksSortedByReleaseDateAsc() {\n    // TODO: Implement this method.\n"
  },
  {
    "id": 1991,
    "db_id": "book_press",
    "question": "Find the number of books for each series.",
    "answer": " \n   #     book_count = Book.objects.filter(series=ser).count()\n   \n   #     # Add the number of books to the series object. \n   #     ser.book_count = book_count \n   #     return ser\n   # except: \n   #     print \"Series not found\"\n# def get_book(request, name):\n   # try:\n   #     b = Book.objects"
  },
  {
    "id": 1992,
    "db_id": "book_press",
    "question": "How many books does each book series have? Return the counts and book series.",
    "answer": " 1 and 2 only have one book. Book series 3 has two books.\n\\end{blockquote}\n\nComment: I don't understand the question. What is your answer to that?\n\nAnswer: Each book series has one, two or three books. If a book series has no book then it is not mentioned.\n\nSo the output looks like this:\n\n\\begin{code}\nSeries 1 - Book 1\nSeries 2 -"
  },
  {
    "id": 1993,
    "db_id": "book_press",
    "question": "Find the titles and publish dates of the top 5 best sale books.",
    "answer": " Cut-off date for sales is December 1st, 2014.\nThe Best Sale Books in the UK (as ranked by Amazon)\n1. The Dangerous Dreams of Malcolm Grant by Ian Rush \u2013 2 copies sold on December 1st, 2014, number 5 in sales rank. Price: \u00a311.99 (US$2.37)\n2. The Fallen World by"
  },
  {
    "id": 1994,
    "db_id": "book_press",
    "question": "What are the 5 best books in terms of sale amount? Give me their titles and release dates.",
    "answer": " C++ can sort the array in ascending order but I am having trouble figuring out how to do so.\n\nComment: The question is not a duplicate, as it asks for specific information (e.g. title and release date) that are missing from the existing answer.\n\nAnswer: You've tagged this C++. In C++, you can simply use `std::sort` with an appropriate lambda:\n\n\\begin{code}\nstd::sort("
  },
  {
    "id": 1995,
    "db_id": "book_press",
    "question": "Find the book series that have some book selling more than 1000 and some book less 500.",
    "answer": " Avoid duplicates (the same book) in the array.\n\\end{blockquote}\n\n\\begin{code}\n$filtered = array();\nforeach ($books as $b) {\n    $already_in_array = false;\n    for ($i = 0; $i < count($filtered); $i++) {\n        if ($filtered[$i]['id'] == $b['id']) {\n            $already_in_"
  },
  {
    "id": 1996,
    "db_id": "book_press",
    "question": "Which book series contain both books with sale amount above 1000 and books with sale amount below 500?",
    "answer": "\n PERFORMANCE OF AND INTERMEDIATE MATHEMATICS?\n By doing so, you will not only save time but also avoid any confusion.\nI have no time to waste on this question, I'll answer in a hurry:\nYou can use the following SQL query: SELECT b.name, b.sale_amount FROM books b WHERE b.sale_amount > 1000 ORDER BY b.sale_"
  },
  {
    "id": 1997,
    "db_id": "book_press",
    "question": "Find the name of authors who publish their books in both \"MM\" and \"LT\" series.",
    "answer": "  I tried:\n\n\n\\begin{code}\n SELECT a.\"Author Last Name\", COUNT(*) AS book_count FROM authors a JOIN books b ON a.id = b.author JOIN (SELECT series_name FROM books WHERE series_name like '%\"%') c ON c.series_name LIKE '%\"%' GROUP BY a.\"Author Last Name\" ORDER BY book_count DESC NULLS LAST;\n\\end{code}\n\nBut I get the error"
  },
  {
    "id": 1998,
    "db_id": "book_press",
    "question": "Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names.",
    "answer": " AGEP does not know what to do with it, so they have no way to tell what to call the author's name (or any other field).\n\nComment: @JohnL757217 I added an example of how it could work - it's not a pretty solution, but it works.\n\nComment: Thanks for your help so far. It turns out that there are more problems to the AGEP output than just the authors. There is"
  },
  {
    "id": 1999,
    "db_id": "book_press",
    "question": "Find the name and age of the authors who do not have any book in the record.",
    "answer": " \n     * @return A list of the author's name and age\n     */\n    public List<String> getNamesAndAges() {\n        return this.dataAccessObject.getAuthorList().stream().filter(a -> !this.record.containsKey(a.getName())).map(a -> String.format(\"%s, %s\", a.getName(), a.getAge().toString()))\n                .collect(Collectors.toList());"
  },
  {
    "id": 2000,
    "db_id": "book_press",
    "question": "Which authors in the record have not published any books ? Give me their names .",
    "answer": "\n A . List all the authors who have written at least one book .\n You are given a list of author names. Return only those authors who have a book with that title in the given list . Note : Case insensitive .\n A . Find authors whose first name starts with the given string and return a list of authors with that prefix . For example , if the first name is 'Steven' then return authors with first names 'Steven' , 'Stan' or '"
  },
  {
    "id": 2001,
    "db_id": "book_press",
    "question": "Find the names of authors who have more than one book in the database.",
    "answer": " \n   Author_has_more_than_one_book = Authors.select { |a| a.books.count > 1 }\n   puts \"Authors with more than one book: #{Author_has_more_than_one_book}\"\n   \n   # Find the number of books written by any author in the database. "
  },
  {
    "id": 2002,
    "db_id": "book_press",
    "question": "Which authors have published more than 1 book according to the database? Give me their names.",
    "answer": " Cool!\nSELECT a.\"author name\", COUNT(a.title) AS books FROM authors a JOIN books b ON a.id = b.id GROUP BY a.\"author name\" HAVING COUNT(b.id) > 1 ORDER BY books DESC;"
  },
  {
    "id": 2003,
    "db_id": "book_press",
    "question": "Find the title, author name, and publisher name for the top 3 best sales books.",
    "answer": " A query similar to this is:\n SELECT b.title, a.\"author_first_name\", p.name AS publisher_name, rank() OVER (ORDER BY s.book_sales_rank DESC) AS rank FROM book_sales s JOIN books b ON s.book_id = b.book_id JOIN authors a ON b.authors_id = a.id JOIN publishers p ON b.publisher_id = p.id;"
  },
  {
    "id": 2004,
    "db_id": "book_press",
    "question": "What are the 3 best selling books? Show their titles, author names, and press names.",
    "answer": " 2018-07-17\n\n> The following is the list of the 3 most popular books in the US last year.\n\n| Title | Author | Publisher |\n| --- | --- | --- |\n| A New York Christmas | Joyce Carol Oates | Nautical Press |\n| My Brilliant Friend | Oscar Wilde | Hodder & Starr |"
  },
  {
    "id": 2005,
    "db_id": "book_press",
    "question": "Find the name and total book sale amount of each press.",
    "answer": " \n\nSELECT p.name, SUM(s.amount) AS total_amount FROM sales s JOIN products p ON s.product_id = p.id GROUP BY p.name;"
  },
  {
    "id": 2006,
    "db_id": "book_press",
    "question": "What are the name and total book sale amount of each press?",
    "answer": "\n  I can get the name of the press and the total sales amount using the code below:\n DISTINCT p.name, SUM(s.amount) AS total_sales FROM Press p JOIN Shop s ON CAST(p.id AS varchar) = s.shop GROUP BY p.name;"
  },
  {
    "id": 2007,
    "db_id": "book_press",
    "question": "Find the number of books that are sold more than 1000 for each publisher. List the press name as well.",
    "answer": "\n\\item Show the total sales amount for each book publisher (in US dollars) and display it in a list with the press name.\n\\end{itemize}\n\nI tried to do it but my output is not what I expected. My query only shows books published by the same publisher, I am missing the part that I don't know how to create a subquery. What should I change? I use MySQL 5.7.24.\n\n\\"
  },
  {
    "id": 2008,
    "db_id": "book_press",
    "question": "For each press, return its name and the number of books that have sale amount above 1000.",
    "answer": " \"Sold Out\"\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String line = null;\n        while ((line = br.readLine()) != null) {\n            System.out.println(parseInput(line));\n        }\n    }\n    \n    private static List<String> parseInput(String input) throws Exception {\n"
  },
  {
    "id": 2009,
    "db_id": "book_press",
    "question": "What is the name of the author of best selling book?",
    "answer": "\n The answer is: Stephen King.\n\\end{blockquote}"
  },
  {
    "id": 2010,
    "db_id": "book_press",
    "question": "Who wrote the best selling book? Give me the author name.",
    "answer": " A: JRR Tolkien B: The Lord of the Rings C: The Return of the King D: 1950 E: 2000 P: 42742767 S: 757075 L: 15700 Length: 948325 Words: 7135767 Ratings: 4.94/5 Stars: 5"
  },
  {
    "id": 2011,
    "db_id": "book_press",
    "question": "find the name and gender of the author who published the most books.",
    "answer": " \n\t// Note: this is a simplified solution, it only works for authors whose names and genders are known to the system (i.e. it will not work if the list of authors or their attributes is incomplete)\n\tpublic function findAuthorWithMostBooks() {\n\t\t$authors = $this->loadAuthors();\n\t\t$max_books = 0;\n\t\t$author_name = null;\n\t\t$gender"
  },
  {
    "id": 2012,
    "db_id": "book_press",
    "question": "Who wrote the largest number of books? Give me the author name and gender.",
    "answer": " 3. Find the average age of the authors, round to 2 decimals.\n4. List the top 5 authors with the most books written by them."
  },
  {
    "id": 2013,
    "db_id": "book_press",
    "question": "Find the names of the authors who did not have any book with the \"Accor\" press.",
    "answer": " 2018-07-03\n"
  },
  {
    "id": 2014,
    "db_id": "book_press",
    "question": "Which authors have never published under the \"Accor\" press? Give me their names.",
    "answer": " I want to thank them for their contributions to the literary world.\nI don't know about the author you mentioned, but I can tell you that Accor is a company that owns several hotels in different parts of the world, including the Hotel del Prado (in Madrid) and the Grand Pariser Etoile (in Nice).\nI think it's possible that some writers or journalists may have contributed to newspapers or magazines published by Accor. But"
  },
  {
    "id": 2015,
    "db_id": "book_press",
    "question": "Find the name and the yearly profit in billion for press that published more than two books.",
    "answer": " 2018-2019-2020, but with less than 15 million sales in 2020\n"
  },
  {
    "id": 2016,
    "db_id": "book_press",
    "question": "Find the press that published more than two books, and return its name and yearly profit in billion.",
    "answer": " ounces, with a total of 24 books published over the course of my career, I\u2019m only a fraction as profitable as the first book I wrote.\n\n\u201cProfitable\u201d in this context means to make money from the sales of a single book. My book was the first one that sold more than two books in a year, so I cannot be considered \u201cprofitable\u201d by my own measure.\n\nI would like to know how many books I have"
  },
  {
    "id": 2017,
    "db_id": "cre_Doc_Workflow",
    "question": "How many authors do we have?",
    "answer": "\n By default, a new book is created with a single author. You can add as many authors as you like using the Add Author button. Each author must be entered separately and in order of priority. So if the first author is the main author, then the second author must be co-author, etc. The system will automatically adjust the list for you to make sure that every author has a lower rank than the next one, unless you specifically set them all to the same rank.\nHow"
  },
  {
    "id": 2018,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all author names.",
    "answer": " 1835762076590720450099897989892123456789123456789\n        authors = set([a['name'] for a in all_data])\n    authors_with_no_articles = authors - authors_with_articles\n    print 'Authors without articles: %s' % ', '.join"
  },
  {
    "id": 2019,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names and other details for all authors.",
    "answer": " \n// You can then use this information to fill in the text boxes with the corresponding data from the list of authors, and then you can add a new author by clicking on the \"Add\" button below the textboxes.\n\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;"
  },
  {
    "id": 2020,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the other details for the author Addison Denesik.",
    "answer": " Posts a picture of his newborn daughter, Daisy Jane.\nDemocrats' Problems in a Nutshell: The 5 Things You Need to Know About Voting in November\nHey, I\u2019m not saying you\u2019re wrong if you don\u2019t like this article or my point of view. It just might be helpful to know these things before voting next Thursday, and so are the other Democrats running for office.\n1) The"
  },
  {
    "id": 2021,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of documents.",
    "answer": "  The client application should then be able to get an updated list from the server, using a method like \"GetDocumentList\".\n    /// </summary>\n    public class DocumentCount\n    {\n        // NOTE: Do not add any properties, only methods which are used for serialization and deserialization.\n        // A document count is a simple DTO, no need to define additional members here.\n        public int Count { get; set; }\n    }"
  },
  {
    "id": 2022,
    "db_id": "cre_Doc_Workflow",
    "question": "Who is the author of the document with id 4?",
    "answer": "\n Tags: 'Danny', 'Song', 'Music'\n  Author_id: 3\n```"
  },
  {
    "id": 2023,
    "db_id": "cre_Doc_Workflow",
    "question": "Who is the author of the document \"Travel to Brazil\"?",
    "answer": "\n Category: Geography, Culture, and History. 2008-15-10 04:06:37 -0400\nThe author is a retired Canadian diplomat and historian who spent three years in Brazil and was one of the first foreigners to live in Rio.\nHe is a senior member of the Brazilian Academy of Sciences, Honorary Professor at the Federal University of Minas Gerais, and has received numerous awards for his"
  },
  {
    "id": 2024,
    "db_id": "cre_Doc_Workflow",
    "question": "How many documents does has the author Era Kerluke written?",
    "answer": "\n How can you read a book by Era Kerluke? What are some popular books written by Era Kerluke? E-books by Era Kerluke.\nEra Kerluke is the name of several authors, including:\nEra A. Kerluke (1874\u20131935)\nF. L. Kerluke\nH. L. Kerluke\nL. S. Kerluke\nA. J. Kerluke"
  },
  {
    "id": 2025,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names and descriptions for all documents.",
    "answer": " \n* You can view the document details by clicking on a single document. "
  },
  {
    "id": 2026,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the ids and names for all documents by author Bianka Cummings.",
    "answer": " 166 results\nBianka Cummings: Search Results (17)"
  },
  {
    "id": 2027,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the author name and details for the document \"Travel to China\".",
    "answer": "\n  Document: \"Travel to China\"\n  Author: \"Alice Blue\"\n  Description: \"Explore China's culture, history, and landscapes. Discover Beijing's Forbidden City, Tianjin's ancient walls, and the Great Wall of Gobi.\"\n```"
  },
  {
    "id": 2028,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all author names and number of documents corresponding to each.",
    "answer": " \n\t\t */\n\t\tpublic static Map<String, Integer> getMostCitedAuthors(Map<String, List<Document>> docs) {\n\t\t\tMap<String, Integer> authors = new HashMap<>();\n\t\t\tfor (String author : docs.keySet()) {\n\t\t\t\tint count = 0;\n\t\t\t\tList<Document> d = docs.get(author);\n\t\t\t\tfor ("
  },
  {
    "id": 2029,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the name of the author with most number of documents?",
    "answer": "\n  return \"There are no authors.\";\n package com.googlecode.concurrent;\n import java.util.concurrent.atomic.AtomicInteger;\n public class Author {\n private String name;\n private AtomicInteger documentCount = new AtomicInteger();\n public Author(String name) {\n this.name = name;\n }\n public void writeDocument() {\n this.documentCount.getAndIncrement();\n }\n public int getDocumentCount()"
  },
  {
    "id": 2030,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the names for authors with at least two documents.",
    "answer": " \n  (let [authors-with-two-or-more-docs (author/select-all-authors-with-at-least-two-documents)]\n    (prn \"Authors with at least two or more documents are:\")\n    (doseq [a authors-with-two-or-more-docs] (println a)))))"
  },
  {
    "id": 2031,
    "db_id": "cre_Doc_Workflow",
    "question": "How many business processes do we have?",
    "answer": "\n BUSINESS PROCESS MANAGEMENT (BPM) IS A BRANCH OF OPERATIONS RESEARCH (OR) AND IT IS A SPECIALIZED SUBJECT THAT HELPS US TO UNDERSTAND HOW TO ORGANIZE WELL-COORDINATED PROCESSES.\nWHAT DOES BPM OVERLAP WITH OTHER OPERATION RESEARCH"
  },
  {
    "id": 2032,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the next process id, process name, process description for process with id 9.",
    "answer": " # Process_Show_Process\n    $process_id = '9';\n    $this->load->model('process_show_process');\n    $data['process_show_process'] = $this->process_show_process->show_process($process_id);\n    $data['title'] = $data['process_show_process']->name;\n    $data['description'] = $data['process_show_process']->description;"
  },
  {
    "id": 2033,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process name for the next process of the process with id 9?",
    "answer": "\n [/usr/bin/python3]  987654.next()  \n>  987654.prev()  \n>  987654.parent()  \n>  987654.children()  \n>  987654.siblings()  \n```"
  },
  {
    "id": 2034,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of process outcomes.",
    "answer": "  For this case, I am using a 40% sample size, but a 30% sample size is also acceptable.\n\nI would like to know if there are any references or guidelines for determining the appropriate sample size when studying a single factor.\n\nComment: I'm afraid I don't think it's possible to answer that without more information, and I don't want to make an assumption without data.  What is the purpose of"
  },
  {
    "id": 2035,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all process outcomes.",
    "answer": "  */\npublic class ProcessOutcome {\n\n    public static final String COD_INVALID_PARAMETER = \"C001\";\n    public static final String DSC_INVALID_PARAMETER = \"Invalid parameter\";\n    public static final String COD_FILE_NOT_FOUND = \"F001\";\n    public static final String DSC_FILE_NOT_FOUND = \"File not found\";\n    public static final"
  },
  {
    "id": 2036,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for the process outcome code working?",
    "answer": "\n  (status, exit_code) = (1, 0) if status == \"successful\" else (2, 1)\n # TODO: add more error codes, or return the actual reason of failure.\n  return status, exit_code, out, err\n"
  },
  {
    "id": 2037,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of process status.",
    "answer": " 125 is a valid value for this field, but there are other values as well that you may encounter.  The list of possible values is:\n\\begin{itemize}\n\\item \\strong{\\em{0}} - Process is running fine\n\\item \\strong{\\em{64}} - Process has stopped responding.\n\\item \\strong{\\em{128}} - Process has a syntax error in its configuration file (e.g. invalid XML"
  },
  {
    "id": 2038,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all process status.",
    "answer": " \n */\npublic enum ProcessStatus {\n\t\n\tUNKNOWN(-1, \"Unknown\"), INACTIVE(0, \"Inactive\"), ACTIVE(1, \"Active\");\n    public final int code;\n    public final String description;\n    \n    private ProcessStatus(int code, String description) {\n        this.code = code;\n        this.description = description;\n    }\n\n    public static ProcessStatus fromCode("
  },
  {
    "id": 2039,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for process status code ct?",
    "answer": "\n  var response = await client.GetAsync(url);\n  string resultContent = await response.Content.ReadAsStringAsync();\n  JObject jsonResult = JObject.Parse(resultContent);\n  return (string)jsonResult[\"description\"];\n}"
  },
  {
    "id": 2040,
    "db_id": "cre_Doc_Workflow",
    "question": "How many staff do we have?",
    "answer": "\n By default, this is 1. However, if you increase the number of processes, there will be more processes than CPUs and the performance will be worse.\n\n### Can I use SMP/SMPP to scale my application horizontally?\n Yes, but only if your application can scale up or down based on user requests.\n\n### How do I do a rolling update in SMP?\n SMP doesn't support rolling updates. You need"
  },
  {
    "id": 2041,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the ids and details for all staff.",
    "answer": " \n   * @return array of Staff objects \n   */\n  public static function showAll() {\n    $staff = array();\n    foreach (self::$db->query(\"SELECT * FROM staff\") as $row) {\n      $id = $row['id'];\n      $name = $row['first_name'] . ' ' . $row['last_name'];\n      $email = $row['email'];\n      $phone ="
  },
  {
    "id": 2042,
    "db_id": "cre_Doc_Workflow",
    "question": "What are the details for the staff member with id 100.",
    "answer": " \" + person.getDetails(100));\n        System.out.println(\"What is the name of the department? \" + person.getName());\n    }\n}"
  },
  {
    "id": 2043,
    "db_id": "cre_Doc_Workflow",
    "question": "Show the number of staff roles.",
    "answer": " 16985076 is not a valid answer.\n\nAnswer: Try this,\n\n\\begin{code}\n SELECT COUNT(DISTINCT r.role_id) AS role_count FROM roles r;"
  },
  {
    "id": 2044,
    "db_id": "cre_Doc_Workflow",
    "question": "List the codes and descriptions for all staff roles.",
    "answer": " \n   */\n  public static function getStaffRoles() {\n    return [\n      '1' => 'Head of Staff',\n      '2' => 'Clerk',\n      '3' => 'Administrative Officer',\n    ];\n  }\n\n  /**\n   * Get a list the codes and descriptions for all staff categories. \n   */\n  public static function getStaffCategories() {\n    return ["
  },
  {
    "id": 2045,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the description for staff role code HR?",
    "answer": "\n A.\tHuman Resources (HR) refers to the people and procedures responsible for managing and directing an organization's personnel, including recruitment, training, and development. HR personnel are in charge of maintaining the organizational structure of a company or institution, including their roles and responsibilities within that structure."
  },
  {
    "id": 2046,
    "db_id": "cre_Doc_Workflow",
    "question": "How many documents have a process?",
    "answer": "\n Home > Topics > How to get rid of unwanted PDFs?\n Suggested Documents\nThe best way to find and remove unwanted PDFs from your computer is with the help of a dedicated program.\nTop 5 Best Tools For Removing PDFs From Your Computer\nRemoving unwanted PDFs can be as easy or as difficult as you choose to make it, depending on the method you employ to do so. It may not be necessary to remove all of"
  },
  {
    "id": 2047,
    "db_id": "cre_Doc_Workflow",
    "question": "List all process ids with a document.",
    "answer": " \n   * @param {string} doc_id - Document id of the interest\n   * @returns {Array} Array of process ids\n   */\n  getProcessesOfDocument(doc_id) {\n    return this.db_interactions['get_processes_of_document'].run(doc_id).toArray();\n  },\n\n  /**\n   * Add a document to the database\n   * @param {string} doc_"
  },
  {
    "id": 2048,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all document ids without a process.",
    "answer": "  */\n  std::vector<int> m_allDocumentIds;\n  \n};"
  },
  {
    "id": 2049,
    "db_id": "cre_Doc_Workflow",
    "question": "List all process ids with no document.",
    "answer": " 1.60.2\n\nI have a list of process IDs and I want to know the number of documents they are associated with.\n\n\\begin{code}\n[59979] => 4\n[59850] => 3\n[59706] => 4\n[59676] => 3\n[59636] => 3\n[59612]"
  },
  {
    "id": 2050,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process outcome description and process status description for the document with id 0?",
    "answer": "\n [0-9]\n \n  process_outcome_description = document.get_process_outcome_description(0)\n  process_status_description = document.get_process_status_description(0)\n  "
  },
  {
    "id": 2051,
    "db_id": "cre_Doc_Workflow",
    "question": "What is the process name for the document \"Travel to Brazil\"?",
    "answer": "\n The text should be \"Travel to Brazil\" in all lowercase letters. I've tried `text.lower()` but that doesn't seem to work.\n\nComment: Can you explain why this question is being downvoted?\n\nAnswer: The following code will give you the desired output\n\n\\begin{code}\ntext = \"Travel to Brazil\"\nresult = text.lower()\nprint(result)\n\\end{code}"
  },
  {
    "id": 2052,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all process ids and the number of documents in each process.",
    "answer": " \n\nThe data is stored in a dictionary format: {process_id : count} \n'''\ndef get_counts(data):\n    counts = {}\n    for row in data:\n        if row[0] not in counts:\n            counts[row[0]] = 1\n        else:\n            counts[row[0]] += 1\n    return counts"
  },
  {
    "id": 2053,
    "db_id": "cre_Doc_Workflow",
    "question": "How many staff are the document with id 0 and process with id 9.",
    "answer": " #663175\n    * */\n    @Test(expected=IllegalArgumentException.class)\n    public void testGetDocumentWithInvalidId() {\n        this.project.getDocument(0);\n    }\n    \n    // TODO: Tests for DocumentsController, DocumentsModel and the whole project model\n}"
  },
  {
    "id": 2054,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all staff ids and the number of document processes for each staff.",
    "answer": " \n\n<div class=\"table-responsive\">\n <table class=\"table table-bordered table-hover\" style=\"text-align: center; background-color:white;\">\n <thead>\n <tr>\n <th rowspan=\"2\"></th>\n <th colspan=\"6\" style=\"background-color:#007bff; color:white; text-align:center\">Staff</th>\n </tr>\n <tr"
  },
  {
    "id": 2055,
    "db_id": "cre_Doc_Workflow",
    "question": "Show all staff role codes and the number of document processes for each role.",
    "answer": " \n- If you want to know more about this feature, go to [Staff Roles]({{< relref \"staff_roles.md\" >}}) page. "
  },
  {
    "id": 2056,
    "db_id": "cre_Doc_Workflow",
    "question": "How many different roles does the staff with id 3 have?",
    "answer": "\n Tags: 'admin', 'manager'\n \"admin\", \"manager\"\n # What is the manager's first name?\n First_name: 'John'\n # What is the manager's last name?\n Last_name: 'Doe'"
  },
  {
    "id": 2057,
    "db_id": "advertising_agencies",
    "question": "How many agencies do we have?",
    "answer": "\n Home \u2192 Agency \u2192 Blog \u2192 The A-Z of Businesses and Organizations \u2192 I\n My Company\u2019s Brand is Its People \u2013 Why the Best Brands are Not Just Good, They\u2019re Fabulous!\nThis article was originally posted on http://www.a-zofbusinessesandorganizations.com/the-a-z-of-businesses-and-organizations/i-my-companys-brand-is-"
  },
  {
    "id": 2058,
    "db_id": "advertising_agencies",
    "question": "Count the number of agencies.",
    "answer": "  The \"main\" agency is the one with the highest level of influence and in some cases it can be more influential than others.\n\n\\begin{code}\n SELECT a.name AS agency_name, SUM(CASE WHEN v.level = 'main' THEN 1 ELSE 0 END) AS main_level FROM agencies a JOIN vendors v ON a.id = v.agency_id GROUP BY a.name;\n\\end{code"
  },
  {
    "id": 2059,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids and details.",
    "answer": " \n   */\n  public function getAllAgencies() {\n    return $this->agencies;\n  }\n}"
  },
  {
    "id": 2060,
    "db_id": "advertising_agencies",
    "question": "What are all the agency ids and details?",
    "answer": "\n A.\tRetrieve the agency details for each agency.\nB.\tFor each agency, list the total number of employees working in that agency.\nC.\tAlso, give a list of all the cities where the head office is situated.\nD.\tShow the list of cities with their corresponding counties and states.\nE.\tGive a list of all the employees. Each employee should have first name, last name, gender, age"
  },
  {
    "id": 2061,
    "db_id": "advertising_agencies",
    "question": "Show the number of clients.",
    "answer": "  The other client-facing methods are also not a problem as they're already thread-safe (or will be once we move to using a non-blocking API).\n\n\nAnswer: I was able to get rid of the deadlocks by using two separate locks. One for the list itself and one for each list element. The list is only read-locked during a single-threaded pass, while the elements are rwlocked."
  },
  {
    "id": 2062,
    "db_id": "advertising_agencies",
    "question": "How many clients are there?",
    "answer": "\n Clients.length = 0;\n}\nClients.add(new Client(name: 'Jane Doe', age: 25));\nClients.add(new Client(name: 'John Smith', age: 26));\n\\end{code}\n\nComment: The last one is the best answer. In general, if you need to create an array or any other collection, don't use `length` and `"
  },
  {
    "id": 2063,
    "db_id": "advertising_agencies",
    "question": "List all client ids and client details.",
    "answer": " \n            return response()->json(['clients'=>$clients]);\n        } catch(Exception $e){\n            return response()->json(['message'=>'failed to get clients list'],400);\n        }\n    }\n}\n"
  },
  {
    "id": 2064,
    "db_id": "advertising_agencies",
    "question": "What are all the client ids and details?",
    "answer": "\n The Client_id's and their corresponding Client_details should be displayed in the following format:\n 1.Client_id, First_name, Last_name, Email_address, Mobile_no, Address, Gender, Marital status, City.\n\\end{code}\n\nCan someone please help me on how to do this? I don't have a table for client details, instead, I have a client id which is the primary key in the"
  },
  {
    "id": 2065,
    "db_id": "advertising_agencies",
    "question": "Show agency ids and the number of clients for each agency.",
    "answer": " \n   */\n  public function getAgenciesWithNumberOfClients() {\n    $agencies = array();\n    foreach (Agency::getAll() as $agency) {\n      $agencies[$agency->id] = array('name' => $agency->name, 'clients_count' => 0);\n    }\n    \n    // get number of clients for each agency\n    foreach (Client::get"
  },
  {
    "id": 2066,
    "db_id": "advertising_agencies",
    "question": "How many clients does each agency have?",
    "answer": "\n The average client base for a single agency is 150 clients. With the addition of additional offices, that number increases exponentially.\n\n What are the most common services provided by your agencies?\n We provide a wide range of services in-house: legal, accounting, marketing, web development, customer service. Each office has its own specialities and can focus on their strengths to help increase the overall value of each client's portfolio.\n\n"
  },
  {
    "id": 2067,
    "db_id": "advertising_agencies",
    "question": "What is the agency id and details with most number of clients?",
    "answer": "\n  print(\"The agency id and details with most number of clients:\")\n  print(Agency.max_clients)\nend\n"
  },
  {
    "id": 2068,
    "db_id": "advertising_agencies",
    "question": "Return the agency id and details for the agency with the greatest number of clients.",
    "answer": "  */\nAgency * get_max_agency(Database * db) {\n\treturn (Agency *) database_get_max_item(db, AGENCY);\n}"
  },
  {
    "id": 2069,
    "db_id": "advertising_agencies",
    "question": "Show agency ids and details with at least 2 clients.",
    "answer": " \" +\n        \"The agency id must not be used for any other client\",\n        () => {\n            var clientIds = new HashSet<string>();\n            foreach (var c in Clients) {\n                if (!clientIds.Add(c.AgencyId)) return false;\n            }\n            return true;\n        });"
  },
  {
    "id": 2070,
    "db_id": "advertising_agencies",
    "question": "What are the agency ids and details agencies with at least 2 clients?",
    "answer": "\n \"agency_id\", \"agency_name\", COUNT(DISTINCT client_id) AS number_of_clients FROM agency JOIN client ON agency.agency_id = client.agency_id GROUP BY agency_id, agency_name HAVING COUNT(DISTINCT client_id) >= 2;"
  },
  {
    "id": 2071,
    "db_id": "advertising_agencies",
    "question": "Show agency details for client with detail 'Mac'.",
    "answer": "\n  client.agency_details = AgencyDetails.new(name: 'Wayne Enterprises', street_address: '12345 Main Street')\n\n  # Update the name of the client's agency.\n  client.agency_details.name = 'Our Way'\n\n  # Save the changes to both the client and the agency details objects.\n  client.save!\n  client.agency_details"
  },
  {
    "id": 2072,
    "db_id": "advertising_agencies",
    "question": "What are the agency details for clients with the detail Mac?",
    "answer": "\n Clients with the detail Mac can have the following agency details:\n Members, Family and Friends, Others.\n\nComment: I'm not sure how this is related to programming in any way. This question is more appropriate at [Superuser](http://superuser.com/) but I'll answer anyway because it's a valid programming question. The only relevant part of your question is \"How do I store agency details for clients with the detail"
  },
  {
    "id": 2073,
    "db_id": "advertising_agencies",
    "question": "Show details for all clients and the details of their corresponding agents.",
    "answer": " \n   * @param {string} clientName - name of the client to filter by \n   * @return {Promise<object[]>} array of objects with client data and agent info\n   */\n  getClientDetails(clientName) {\n    return this.getClient(clientName).then((client)=> {\n      return this.getAgentForClient(client.name);\n    });\n  }\n  \n  /**\n   *"
  },
  {
    "id": 2074,
    "db_id": "advertising_agencies",
    "question": "What are the client details for each client and the corresponding details of their agencies?",
    "answer": "\n  \"\"\"\n  def get_client_agency_details(self, clients):\n    if not isinstance(clients, list): clients = [clients]\n    client_agency_map = {}\n    for client in clients:\n      client_agency_map[client['id']] = client.get('agency', {'name': 'N/A'})\n    return client_agency_map\n\n  def get_"
  },
  {
    "id": 2075,
    "db_id": "advertising_agencies",
    "question": "Show all sic codes and the number of clients with each code.",
    "answer": "  */\n            var clientCodes = new List<ClientCode>();\n            int totalCount = 0;\n            foreach (var c in Clients)\n            {\n                ClientCode cc = clientCodes.FirstOrDefault(m => m.Code == c.Code);\n                if (cc != null)\n                {\n                    cc.Count += 1;\n                    totalCount++;\n                }\n                else\n                {\n                "
  },
  {
    "id": 2076,
    "db_id": "advertising_agencies",
    "question": "How many clients are there for each sic code?",
    "answer": "\n  return new Promise((resolve, reject) => {\n const client = new DynamoDB.DocumentClient()\n  var params = {\n    TableName: 'client_data',\n    IndexName: 'sic_code-index'\n  };\n  client.query(params, function (err, data) {\n    if (err) {\n      return reject(err);\n    } else {\n      resolve(data.Count);\n   "
  },
  {
    "id": 2077,
    "db_id": "advertising_agencies",
    "question": "Show all client ids and details with sic code \"Bad\".",
    "answer": "\n  This should return the following:\n  [{ id: '123', name: 'Client 1', address: 'Address 1', city: 'City 1' }, { id: '456', name: 'Client 2', address: 'Address 2', city: 'City 2' }]\n*/\nfunction getClientDetails(clients) {\n    return clients.filter((client) => client.sicCode === \""
  },
  {
    "id": 2078,
    "db_id": "advertising_agencies",
    "question": "What are the client ideas and details for clients with the sic code Bad?",
    "answer": "\n You should never make a decision without knowing all of the facts about the situation. But in most cases, the information is not available unless you know the person.\nIt's important to keep in mind that clients who have a bad credit score may have fewer options for paying bills on time. It is often difficult to find good payment options when you are in debt. You can find many more options and make more educated decisions if you have an excellent credit score.\nIf"
  },
  {
    "id": 2079,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids and details for agencies with a client.",
    "answer": " \n *\n * @param {string} agencyId - The agency ID to fetch clients for.\n */\nfunction showAgencyClients(agencyId) {\n    if (client !== null && client.isLoggedIn()) {\n        var url = '/agency/showclients/' + encodeURIComponent(agencyId);\n        client.serviceInvoke(url, client.getContext(), {\n            method: 'GET',\n"
  },
  {
    "id": 2080,
    "db_id": "advertising_agencies",
    "question": "What are the agency ids and agency details for all agencies who have a client?",
    "answer": "\n  # This is used to generate the list of agencies for the user to pick from in the New Client page.\n  def self.agencies_with_clients(current_user)\n    Agency.joins(:clients).select('DISTINCT a.id, a.name')\n  end\n\n  # What is the client name and agency id for all clients that belong to an agency?\n  # This is used to generate the"
  },
  {
    "id": 2081,
    "db_id": "advertising_agencies",
    "question": "Show all agency ids without any client.",
    "answer": " \n   * @return array of agency id's with no client\n   */\n  public function getAgencyIdsWithNoClient() {\n    $agencyIds = [];\n    foreach (Agency::whereNull('client_id') as $agency) {\n      $agencyIds[] = $agency->id;\n    }\n    return $agencyIds;\n  }\n}"
  },
  {
    "id": 2082,
    "db_id": "advertising_agencies",
    "question": "What are ids of agencies that do not have any clients?",
    "answer": "\n  - (SELECT a.id FROM agency a WHERE NOT EXISTS (SELECT c.client_id FROM client c JOIN agency_client ac ON c.id = ac.client_id)) AS orphaned_agencies;"
  },
  {
    "id": 2083,
    "db_id": "advertising_agencies",
    "question": "How many invoices do we have?",
    "answer": "\n  # Note: this is a very simple query that just counts the number of records. For more information, see below.\n  def count_invoices(self):\n    return self.query().count()\n```\n\n### Reading Invoices from the Database\n\nWe can now use our `InvoiceStore` to read invoices from the database:\n\n```python\n# Retrieve all invoices and print them to the console."
  },
  {
    "id": 2084,
    "db_id": "advertising_agencies",
    "question": "Count the number of invoices.",
    "answer": "  The last thing you want to do is generate an invoice that will have a lengthy signature at the bottom.  It's better to just set the `signature` property, and let it be calculated from that.\n\n\\begin{code}\n  \"invoice\": {\n    \"amount\": 50.5,\n    \"currency_code\": \"EUR\",\n    \"created\": \"2018-03-19T"
  },
  {
    "id": 2085,
    "db_id": "advertising_agencies",
    "question": "Show ids, status codes, and details for all invoices for clients.",
    "answer": " \n* Show client information, including name, phone number, and email address.  \n* Show order information, including product, quantity, and price for each order.  \n* Provide a mechanism to remove an order from the client's account without deleting the whole order.  \n* Show invoices, including the total price for all orders on the invoice, the date created, and the customer name associated with the invoice.  \n* Show status codes and their"
  },
  {
    "id": 2086,
    "db_id": "advertising_agencies",
    "question": "What are the ids, statuses, and details for all invoices?",
    "answer": "\n  */\n    public function getAllInvoiceData() {\n        $sql = ' SELECT i.id AS invoice_id, s.status_name, d.description FROM invoice i JOIN invoice_status s ON i.invoice_status_id = s.id JOIN invoice_details d ON i.id = d.invoice_id;';\n        $rs = self::$db->query($sql);\n        return $rs"
  },
  {
    "id": 2087,
    "db_id": "advertising_agencies",
    "question": "Show all client ids and the number of invoices for each client.",
    "answer": " \n   */\n  public function getClientsWithCountOfInvoices() {\n    $clientIds = array_column($this->getAll(), 'id');\n    return Client::query()->whereIn('id', $clientIds)->with(['invoices' => function ($q) {\n      $q->select('client_id');\n    }])->get();\n  }\n}"
  },
  {
    "id": 2088,
    "db_id": "advertising_agencies",
    "question": "How many invoices are there for each client id?",
    "answer": "\n Tags: Invoice, Count, Client_id\n 1054075697031842102, 1054075697031842104, 1054075697031842106, 1054075697031842108, 105"
  },
  {
    "id": 2089,
    "db_id": "advertising_agencies",
    "question": "List the client id and detail with most number of invoices.",
    "answer": " \n            // (i.e. clients who have more than one invoice)\n            var uniqueClients = new List<Client>();\n            foreach (var invoice in invoices) {\n                if (invoice.Client.Id != default(Guid)) {\n                    // If the client id exists and is not null, add the client to the list \n                    var found = uniqueClients.Find(c => c.Id"
  },
  {
    "id": 2090,
    "db_id": "advertising_agencies",
    "question": "What are the client id and details for the client with the most invoices?",
    "answer": "\n  */\n\n  public function getMostInvoicedClient() {\n    return $this->clientService->getMostInvoicedClient();\n  }\n\n  /**\n   * What is the total value of all invoices issued over a certain date range?\n   *\n   * @param date string The start date for the search.\n   * @param end_date string The end date for the search.\n   */\n  public"
  },
  {
    "id": 2091,
    "db_id": "advertising_agencies",
    "question": "What are client ids for clients with at least 2 invoices.",
    "answer": " # TODO: Use a subquery\n    SELECT DISTINCT c.client_id FROM invoice i JOIN client_invoice ci ON i.client_id = ci.client_id GROUP BY i.client_id HAVING COUNT(i.client_id) >= 2;"
  },
  {
    "id": 2092,
    "db_id": "advertising_agencies",
    "question": "Return the client ids for clients with two or more invoices?",
    "answer": "\n  Client.joins(:invoices).group_by('clients.id').having('COUNT(DISTINCT invoices.id) >= 2')\nend\n\\end{code}"
  },
  {
    "id": 2093,
    "db_id": "advertising_agencies",
    "question": "Show all invoice status codes and the number of invoices with each status.",
    "answer": " \n   * @return {Promise} a promise that resolves to an object containing a map from status code to count of invoices with that status code\n   */\n  async getStatusCounts() {\n    const invoiceData = await this._db.all(this.INVOICES_SELECT);\n    return invoiceData.map((invoice) => invoice.statusCode).countBy();\n  }\n}"
  },
  {
    "id": 2094,
    "db_id": "advertising_agencies",
    "question": "How many invoices are there for each status code?",
    "answer": "\n 500: 1\n 404: 1 502: 1 304: 1 503: 1 307: 2 409: 1 2048: 1 400: 1 509: 1 413: 1\n```"
  },
  {
    "id": 2095,
    "db_id": "advertising_agencies",
    "question": "What is the invoice status code with most number of invoices.",
    "answer": " \n     */\n    public function getStatusWithMostInvoices() : string\n    {\n        $statuses = array_count_values(array_column($this->invoices, 'status'));\n        return array_key_first(array_max($statuses));\n    }\n}"
  },
  {
    "id": 2096,
    "db_id": "advertising_agencies",
    "question": "Return the invoice status that has the most invoices.",
    "answer": "  If you do not want to return a list, but only the single instance of an invoice with the maximum number of invoices, set this to true.\n     * @param string $currency The three-letter currency code (ISO 4217). Defaults to 'USD' if null.\n     *\n     * @return array|mixed Returns an array of invoices or the first invoice with the max invoices.\n     */"
  },
  {
    "id": 2097,
    "db_id": "advertising_agencies",
    "question": "Show all invoice status codes and details and the corresponding client id and details and agency id and details.",
    "answer": " \n   * @param {string} clientId - Client ID of the client you want to see invoices for\n   * @param {string} agencyId - Agency Id of the Agency you want to see invoices for\n   * @returns Promise that resolves to an array of all Invoice objects \n   */\n  async getAll(clientId, agencyId) {\n    if (clientId === 'undefined' || clientId === '')"
  },
  {
    "id": 2098,
    "db_id": "advertising_agencies",
    "question": "What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?",
    "answer": "\n The reason is that I want to create a query which will be able to show a list of all invoices and their related data.\n\n\\begin{code}\n SELECT i.id, c.first_name, c.last_name, a.name AS agency_name, i.invoice_date FROM invoices i JOIN clients c ON i.client_id = c.id AND c.agency_id = a.id WHERE i"
  },
  {
    "id": 2099,
    "db_id": "advertising_agencies",
    "question": "List all meeting type codes and details.",
    "answer": " \n- View a list of all meetings and their associated tags, notes, attachments and participants (if any) \n- Add/edit/delete meetings, tags, notes, attachments and participants as needed \n- Filter the meeting list by date (past, ongoing, future)\n- Filter the meeting list by type (e.g., weekly, bi-weekly, monthly, etc.)\n"
  },
  {
    "id": 2100,
    "db_id": "advertising_agencies",
    "question": "What are all meeting types and other details?",
    "answer": "\n On this page you can find the list of meeting types, such as \u201cregular,\u201d \u201ce-meeting\u201d and \u201cad hoc.\u201d You also find information about the meeting\u2019s status (like \u201cActive\u201d or \u201cArchived\u201d) and how to change your attendance status. Additionally, you will have a link to the online calendar where you can view all scheduled meetings.\n5. What are the upcoming meetings? In this section you can see all upcoming"
  },
  {
    "id": 2101,
    "db_id": "advertising_agencies",
    "question": "Show all meeting outcomes and purposes.",
    "answer": " The MWAA has a number of members, ranging from professional athletes to students, members of the public and others involved in the sporting community.\nThe MWAA is managed by an executive committee with responsibilities including organising events, coordinating with regional bodies, and representing the league at meetings with other organisations such as the International Olympic Committee (IOC) and World Sport Associations (WSAs). The MWAA is supported by a network of volunteers"
  },
  {
    "id": 2102,
    "db_id": "advertising_agencies",
    "question": "What are all meeting outcomes and purposes?",
    "answer": "\n On a single-player game, the outcome is not just to win, but it's also to get points for achieving your goals. The most important goal is to be able to achieve these points. How can you do this? Well, first things first: if you're in a position where you cannot win, then you don't have any other choice except to lose. And this is what will happen: your opponent will beat you by winning the game. So,"
  },
  {
    "id": 2103,
    "db_id": "advertising_agencies",
    "question": "Show all payment ids and details for invoices whose status is 'Working'.",
    "answer": "\n \n     * @return array of invoice_id and payment_id's\n     */\n    public function getAllInvoicesAndPayments() {\n        return $this->db->query(\"SELECT i.invoice_id, p.payment_id FROM invoices i JOIN payments p ON i.invoice_id = CAST(p.invoice_id AS INT) WHERE i.status = 'Working'\")->result"
  },
  {
    "id": 2104,
    "db_id": "advertising_agencies",
    "question": "What are all payment ids and payment details for invoices with status Working?",
    "answer": "\n  * @return array of Payment objects, or empty array if none found\n  */\n  public static function getPaymentsForInvoiceWorking($invoice_id) {\n    $invoice = Invoice::getById($invoice_id);\n    if ($invoice->status != 'Working') {\n      return [];\n    }\n    return self::getPayments('payment_id IN (SELECT payment_id FROM invoices"
  },
  {
    "id": 2105,
    "db_id": "advertising_agencies",
    "question": "Show all invoice ids and statuses without a payment.",
    "answer": " \n            if ($invoices->count() > 0) {\n                $unpaid_invoices = Invoice::where('status', '=', 'SENT')->orWhere('status', '=', 'PAID UNVERIFIED')->get();\n                foreach($invoices as $i){\n                    if (!$unpaid_invoices->contains('id', $i->id)){\n                        $i->"
  },
  {
    "id": 2106,
    "db_id": "advertising_agencies",
    "question": "What are the invoice ids and statuses for invoices without a payment?",
    "answer": "\n  *\n\n  * @return array<int> invoice_ids - The ids of all invoices that have no payments.\n  * @return array<string> invoice_statuses - The statuses of all invoices that have no payments.\n  */\npublic static function getInvoiceIdsAndStatusesWithNoPayment() {\n\t$invoice_ids = array();\n\t$invoice_statuses = array"
  },
  {
    "id": 2107,
    "db_id": "advertising_agencies",
    "question": "How many payments do we have?",
    "answer": "\n In total, 70% of the transactions are paid within 14 days. So in 2020, this means that 35% of all transactions were made within 14 days.\n The number of payments is $25% higher than it was in 2019."
  },
  {
    "id": 2108,
    "db_id": "advertising_agencies",
    "question": "Count the number of payments.",
    "answer": "  For example, a payment that is due on day 15 would be considered due in two months, not one.\n * @property {number} daysInArrears The total number of days late all the payments are in arrears (in other words, the difference between the due date and today's date) for each payment.  For example, a payment that is due on day 15 would be considered late by 7 days if it is made on"
  },
  {
    "id": 2109,
    "db_id": "advertising_agencies",
    "question": "List all payment ids and its corresponding invoice ids and details.",
    "answer": " \n * \n * @author Dhruv Gohil (dhrugil@intellectechgroup.com)\n */\npublic class PaymentInvoiceDetails implements Serializable {\n    private static final long serialVersionUID = 1L;\n    \n    private Long paymentId;\n    private Long invoiceId;\n    private List<PaymentGatewayDetail> paymentGatewayDetails;\n    private InvoiceDetail invoiceDetail"
  },
  {
    "id": 2110,
    "db_id": "advertising_agencies",
    "question": "What are the payment ids, invoice ids, and payment details for all payments?",
    "answer": "\n  # (for a given user)\n 'payments_info' => '{\"p123\": {\"invoice_id\": \"i123\", \"payment_details\": \"...\"}, ...}'\n4. What is the latest transaction date?"
  },
  {
    "id": 2111,
    "db_id": "advertising_agencies",
    "question": "Show all the different invoice ids and statuses of the payments",
    "answer": " made from your account. \n\n### Payment History for a Specific Invoice\nIf you need to see more details about a specific payment, just click on the invoice id from the previous table. That will take you to the payment history page with more information including the payment date, amount, and status."
  },
  {
    "id": 2112,
    "db_id": "advertising_agencies",
    "question": "What are the distinct invoice ids and statuses for all payments?",
    "answer": "\n  public static function get_all_invoices() {\n \"SELECT DISTINCT i.id, p.status FROM payments p JOIN invoices i ON CAST(p.invoice AS integer) = i.id ORDER BY i.id NULLS LAST;\"; }\n  public static function get_payments_for_invoices(array $invoice_ids) { \" SELECT p.invoice, p.status FROM payments"
  },
  {
    "id": 2113,
    "db_id": "advertising_agencies",
    "question": "Show all invoice ids and the number of payments for each invoice.",
    "answer": " \n *\n * @author jkohlguessal\n */\npublic class InvoicesPayments implements Serializable {\n    private static final long serialVersionUID = -8043709560521138239L;\n    \n    private Integer[] invoiceIds = new Integer[0];\n    \n    private Map<Integer, Long> numberOfPaymentsPerInvoice = new HashMap<>();\n    \n"
  },
  {
    "id": 2114,
    "db_id": "advertising_agencies",
    "question": "How many payments are there for each invoice?",
    "answer": "\n The payments for the invoices can be made as soon as they are due. A payment may be made with cash, check or credit card.\n Can I get a copy of the invoice if I don't have one? We would be happy to provide you with a copy of your invoice upon request. Please provide us with your name and address (as written on the invoice) and we will contact you shortly.\n Do you offer any guarantees or war"
  },
  {
    "id": 2115,
    "db_id": "advertising_agencies",
    "question": "What is the invoice id, status code, and details for the invoice with most number of payments.",
    "answer": "  */\n  var invoice = Invoices.findOne(invoice_id);\n  var invoice_details = {\n    'invoice_id': invoice_id,\n    'status_code': invoice.status_code,\n    'payments': invoice.payments,\n  };\n  return invoice_details;\n}\n"
  },
  {
    "id": 2116,
    "db_id": "advertising_agencies",
    "question": "Return the invoice ids, statuses, and details for invoices with the most payments?",
    "answer": "\n \n Invoice.all_with_payment_info.order(:payed_on DESC)\n    .select('i.id, i.status, p.id AS payment_id, row_number() OVER(PARTITION BY i.status ORDER BY p.id DESC) AS payed_on_rank')\nend\n\\end{code}"
  },
  {
    "id": 2117,
    "db_id": "advertising_agencies",
    "question": "How many staff do we have?",
    "answer": "\n By default, this is 1. However, if you increase the number of processes, there will be more processes than CPUs and the performance will be worse.\n\n### Can I use SMP/SMPP to scale my application horizontally?\n Yes, but only if your application can scale up or down based on user requests.\n\n### How do I do a rolling update in SMP?\n SMP doesn't support rolling updates. You need"
  },
  {
    "id": 2118,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff.",
    "answer": "  The user enters a number, and the program then prints out how many years it would take for that amount to double in value.\n\n\\begin{code}\n#include <stdio.h>\n#include <math.h>\nint main() {\n    int start = 1;\n    double current = 2;\n    double next = start * current;\n    int years = 0;\n    while (next != start) {\n        years"
  },
  {
    "id": 2119,
    "db_id": "advertising_agencies",
    "question": "Show the agency ids and the number of staff in each agent?",
    "answer": "\n  print(\"Agents:\")\n # for i in range(1,9):\n  for i in range(1, 4):\n    agent = agents[i - 1]\n    id = agent['id']\n    name = agent['name']\n    staff_count = 0\n    for service_staff in agent['staff']:\n      staff_count += int(service_staff['count'])\n    print(\"Agent"
  },
  {
    "id": 2120,
    "db_id": "advertising_agencies",
    "question": "Return the agency ids and number of staff in each.",
    "answer": "  I want to know how many staff are in the agencies in a given region and country, so I can show the top agencies in that region with the most staff.\n\nSo far I've written code that gets the number of staff for every agency like this:\n\n\\begin{code}\n SELECT agency_id, COUNT(staff_id) AS total_staff FROM staff_agencies GROUP BY agency_id ORDER BY total_st"
  },
  {
    "id": 2121,
    "db_id": "advertising_agencies",
    "question": "What is the agent id and details for the agency with most staff?",
    "answer": "\n  \"\"\"\n        SELECT a.agent_id, a.first_name, a.last_name FROM agents a JOIN agencies ab ON a.agency_id = ab.agency_id WHERE ab.staff_count = (SELECT MAX(ab.staff_count) FROM agencies);"
  },
  {
    "id": 2122,
    "db_id": "advertising_agencies",
    "question": "Return the id and detail for the agency with the most staff.",
    "answer": " \n     * @return array\n     */\n    public static function getAgencyWithMostStaff() {\n        return [\n            'id' => 1,\n            'name' => 'Agency',\n            'staff_count' => 500,\n            'details' => ['The best agency']\n        ];\n    }\n    \n    /**\n     * Return the id and name of the agency with the most"
  },
  {
    "id": 2123,
    "db_id": "advertising_agencies",
    "question": "Show meeting outcome codes and the number of meeting in each outcome.",
    "answer": " \n- 50% of the time, the outcome will be 'yes'. 50% of the time, the outcome will be 'no'. \n- 75% of the time, the outcome will be 'maybe'. 75% of the time, the outcome will be 'definitely not'.\n\"\"\"\n\nimport random\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\nn_exper"
  },
  {
    "id": 2124,
    "db_id": "advertising_agencies",
    "question": "How many meetings had each meeting outcome?",
    "answer": "\n This will provide the ability to view the number of times a given meeting was attended in a time period, such as day or week.\n * @method static int get_meeting_outcome_count()\n */\nclass Meeting extends Model\n{\n\t/**\n\t * Get all meetings which are not closed and where at least one participant has no availability during the given time period (day or week).\n\t *\n\t * @param string $time"
  },
  {
    "id": 2125,
    "db_id": "advertising_agencies",
    "question": "List the client ids and the number of meeting for each client.",
    "answer": " \n\t */\n\tpublic function getClientIdAndMeetingCount() {\n\t\t$sql = \"SELECT c.client_id, COUNT(m.meeting_id) AS num_meetings FROM clients c JOIN meetings m ON c.client_id = m.client_id GROUP BY c.client_id ORDER BY num_meetings DESC NULLS LAST;\";\n\t\t$result = $this->db->query($sql"
  },
  {
    "id": 2126,
    "db_id": "advertising_agencies",
    "question": "How many meetings are there for each client id?",
    "answer": "\n Tags: one-to-many, jpa, eclipselink\n \n Author: chris.pahle\n */\n@Entity\npublic class Client {\n    @Id\n    private Long id;\n    private String firstName;\n    private String lastName;\n    \n    @OneToMany(mappedBy = \"client\")\n    private Set<Meeting> meetings;\n    \n    public Client() {}\n    \n"
  },
  {
    "id": 2127,
    "db_id": "advertising_agencies",
    "question": "Show the meeting type codes and the number of meeting for each client.",
    "answer": " \n# For this, we will use a dict to store the information\nmeetings_per_client = {}\nfor m in meetings:\n    if m['client_id'] not in meetings_per_client:\n        meetings_per_client[m['client_id']] = 1 # Create an entry for this client id, with value = 1 (count) of meetings\n    else:\n        meetings_per_"
  },
  {
    "id": 2128,
    "db_id": "advertising_agencies",
    "question": "How many meetings are there for each meeting type?",
    "answer": "\n  for (let i = 0; i < meetingTypes.length; ++i) {\n    let currentType = meetingTypes[i];\n    let numMeetings = 0;\n    for (let j = 0; j < calendar.length; ++j) {\n      if (calendar[j] === currentType) {\n        ++numMeetings;\n      }\n    }\n    result[currentType] = numMe"
  },
  {
    "id": 2129,
    "db_id": "advertising_agencies",
    "question": "Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.",
    "answer": " \n- Added a new page to view the meetings in an agenda format for the current day with filtering by tags and date\n- Added a feature to filter the agenda by time slots, tags or speakers\n- Improved the accessibility of all components and features, especially for users using VoiceOver and Switch control \n- Fixed several issues related to data saving (e.g. adding and removing clients) and handling empty fields in the form\n-"
  },
  {
    "id": 2130,
    "db_id": "advertising_agencies",
    "question": "What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?",
    "answer": "\n  public async getAllMeetings(): Promise<any[]> {\n const meetings = await this.getAllMeetingIds();\n  return Promise.all(meetings.map((meetingId) => this.getMeeting(meetingId))); }\n\n// Returns a map of meeting id to user id for all users in the meetings\npublic async getUserMap(): Promise<{ [key: string]: number[] }> { const meet"
  },
  {
    "id": 2131,
    "db_id": "advertising_agencies",
    "question": "Show the meeting ids and the number of staff in each meeting.",
    "answer": " \n *\n * @author G.A.Teunissen, TU Delft, gavin.a.teunissen@tudelft.nl, g.a.teunissen@dds.tudelft.nl\n * @author M.P.Vroomen, TU Delft, mark.p.vroomen@tudelft.nl, m.p.vroomen@dds.tudel"
  },
  {
    "id": 2132,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff in each meeting by meeting id.",
    "answer": " \n\tpublic function count_staffs( $meeting_id ) {\n\t\treturn StaffMeeting::where('meeting_id', '=', $meeting_id)\n                 ->count();\n\t}\n\n}"
  },
  {
    "id": 2133,
    "db_id": "advertising_agencies",
    "question": "Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.",
    "answer": " 519067\n SELECT s.staff_id, COUNT(*) AS number_of_meetings FROM staff_attended_meeting sm JOIN staff s ON sm.staff_id = s.staff_id WHERE sm.attendance_status = 'Attended' GROUP BY s.staff_id ORDER BY number_of_meetings DESC LIMIT 1;"
  },
  {
    "id": 2134,
    "db_id": "advertising_agencies",
    "question": "What is the staff id of the staff who attended the least meetings but attended some meeting?",
    "answer": "\n  SELECT m.staff_id FROM MINIMAL_MEETINGS AS m JOIN MEETING_ATTENDANCE AS a ON m.meeting_id = a.meeting_id GROUP BY m.staff_id ORDER BY COUNT(a.attendance_id) DESC LIMIT 1;"
  },
  {
    "id": 2135,
    "db_id": "advertising_agencies",
    "question": "How many staff have attended a meeting?",
    "answer": "\n  </p>\n  <p>\n   <img src=\"https://i1.wp.com/cdn.nodebb.io/images/smileys/2019-10-04_15:28:26.png\" alt=\"Smiley icon\" width=\"22\" height=\"22\"> How many staff have attended a meeting?\n  </p>\n  <p>\n   <img src=\""
  },
  {
    "id": 2136,
    "db_id": "advertising_agencies",
    "question": "Return the number of distinct staff who have attended a meeting?",
    "answer": "\n  var meetingAttendees = new Set()\n \"meeting-attendees\": [staff] (s) -> { s.participateIn(m) for m in meetings };\n\n  // Compute the average attendee count per meeting\n  avgAttendeesPerMeeting: average(countAttendeesInMeetings(m)) for m in meetings;"
  },
  {
    "id": 2137,
    "db_id": "advertising_agencies",
    "question": "How many staff did not attend any meeting?",
    "answer": "\n MANAGEMENT: We have a great team, but they are very busy and do not have the time to meet.\nREPORTS: Our reports are excellent, but we can improve.\nPROCESS: We have an efficient process, but room for improvement in all areas.\nQUALITY: The quality of our work has never been higher.\nTIMING: We were ahead of schedule throughout the project, but we could be more consistent with that.\nTEAM"
  },
  {
    "id": 2138,
    "db_id": "advertising_agencies",
    "question": "Count the number of staff who did not attend any meeting.",
    "answer": "  I also used the \"not in\" operator to remove all records that have a 0 or null value for \"Attended\".\n\n\n\\begin{code}\n SELECT COUNT(DISTINCT s.StaffID) AS total_staff FROM StaffMeetingAttendance s WHERE s.Attended IS NOT IN (NULL, 0);"
  },
  {
    "id": 2139,
    "db_id": "advertising_agencies",
    "question": "What are the ids and details of the clients who have attended any meeting or have any invoice?",
    "answer": "\n 1. How do I get a list of all the clients who have ever sent an invoice, no matter if they're currently active or not?\n 2. How can I find all the clients that have a particular meeting scheduled for them (I don't care about their current status)?\n3. How do I retrieve the client details and ids of any clients that have attended meetings in the past (and are still active, if relevant)\n4. How do"
  },
  {
    "id": 2140,
    "db_id": "advertising_agencies",
    "question": "Return the ids and details of clients who have attended a meeting or had an invoice.",
    "answer": " \n *\n * @author Ntwari, Emmanuel\n * @since  2020-05-13\n */\n@Repository\npublic interface ClientRepository extends JpaRepository<Client, Long> {\n    List<Client> findClientsByName(String name);\n}"
  },
  {
    "id": 2141,
    "db_id": "advertising_agencies",
    "question": "What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?",
    "answer": "\n The id of the staff member, first name, last name and the number of times they attended a meeting.\n */\n SELECT s.id AS staff_id, s.first_name, s.last_name, COUNT(m.id) AS times_attended FROM Staff s JOIN MeetingStaff ms ON s.id = ms.staff_id JOIN Meetings m ON ms.meeting_id = m.id WHERE s.first_name"
  },
  {
    "id": 2142,
    "db_id": "advertising_agencies",
    "question": "Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?",
    "answer": "\n 'staff_id', 'first_name', 'last_name', 'staff_details' FROM staff WHERE staff_details ilike '%s%' GROUP BY staff_id, first_name, last_name HAVING COUNT(staff_details) >= 1;"
  },
  {
    "id": 2143,
    "db_id": "advertising_agencies",
    "question": "What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.",
    "answer": " #030207\n    SELECT c.id, c.sic_code, c.agency_id FROM clients c JOIN client_meetings cm ON c.id = cm.client_id JOIN invoices i ON c.id = i.client_id WHERE c.id IN (SELECT c.id FROM clients c GROUP BY c.id HAVING COUNT(c.sic_code) > 0 AND COUNT(c."
  },
  {
    "id": 2144,
    "db_id": "advertising_agencies",
    "question": "Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.",
    "answer": " #s.\n\nI'm using a temporary table to hold the results from one query to use as input for another query. The first query is this:\n\n\\begin{code}\n SELECT c.client_id, c.sic_code, m.agency_id FROM clients AS c JOIN meetings AS m ON c.client_id = m.client_id;\n\\end{code}\n\nThis gives me the client ids, sic codes"
  },
  {
    "id": 2145,
    "db_id": "advertising_agencies",
    "question": "List the start time, end time of each meeting, and the corresponding client detail and staff detail.",
    "answer": " \n   - If a new meeting is added or removed, all the relevant data for that change should be sent to the client\n   - If a meeting's start/end times are changed, the client will need to know this in order to make its own schedule (the client may have other events going on during these time periods) \n   - The client will not be able to know all the details of each meeting but only the start/end time and the name of the staff"
  },
  {
    "id": 2146,
    "db_id": "advertising_agencies",
    "question": "What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?",
    "answer": "\n The full name, email address, phone number, and mobile phone number of the client, the first name, last name, and email address of the staff member, and the date and time of the appointment. I have a list of clients and staff members from my database to perform this query.\n\nI have successfully written the query to output all the meeting times for each week in a particular month but I'm not sure how to add the other information needed.\n\n\\begin{"
  }
]