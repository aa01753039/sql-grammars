[
  {
    "id": 0,
    "db_id": "soccer_3",
    "question": {
      "id": 0,
      "db_id": "soccer_3",
      "question": "How many clubs are there?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many clubs are there?[SQL]\\nSELECT count(*) FROM club"
  },
  {
    "id": 1,
    "db_id": "soccer_3",
    "question": {
      "id": 1,
      "db_id": "soccer_3",
      "question": "Count the number of clubs."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of clubs.[SQL]\\nSELECT count(*) FROM club"
  },
  {
    "id": 2,
    "db_id": "soccer_3",
    "question": {
      "id": 2,
      "db_id": "soccer_3",
      "question": "List the name of clubs in ascending alphabetical order."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the name of clubs in ascending alphabetical order.[SQL]\\nSELECT Name FROM club ORDER BY Name ASC"
  },
  {
    "id": 3,
    "db_id": "soccer_3",
    "question": {
      "id": 3,
      "db_id": "soccer_3",
      "question": "What are the names of clubs, ordered alphabetically?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of clubs, ordered alphabetically?[SQL]\\nSELECT Name FROM club ORDER BY Name ASC\\n\\n### Task \\n\\nBased on the provided database schema information, How many players are there in each club?[SQL]\\nSELECT T1.Name ,  count(*) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY count(*) DESC\\n\\n### Task \\n\\nBased on the provided database schema information, Which club has the most number of players?[SQL]\\nSELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY count(*) DESC LIMIT 1\\n\\n### Task \\n\\nBased on the provided database schema information, Which club has the least"
  },
  {
    "id": 4,
    "db_id": "soccer_3",
    "question": {
      "id": 4,
      "db_id": "soccer_3",
      "question": "What are the managers and captains of clubs?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the managers and captains of clubs?[SQL]\\nSELECT Manager ,  Captain FROM club"
  },
  {
    "id": 5,
    "db_id": "soccer_3",
    "question": {
      "id": 5,
      "db_id": "soccer_3",
      "question": "Return the managers and captains of all clubs."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the managers and captains of all clubs.[SQL]\\nSELECT DISTINCT manager ,  captain FROM club"
  },
  {
    "id": 6,
    "db_id": "soccer_3",
    "question": {
      "id": 6,
      "db_id": "soccer_3",
      "question": "List the name of clubs whose manufacturer is not \"Nike\""
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the name of clubs whose manufacturer is not \"Nike\"[SQL]\\n\\nSELECT Name FROM club WHERE Manufacturer != 'Nike'"
  },
  {
    "id": 7,
    "db_id": "soccer_3",
    "question": {
      "id": 7,
      "db_id": "soccer_3",
      "question": "What are the names of clubs who do not have the manufacturer Nike?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of clubs who do not have the manufacturer Nike?[SQL]\\nSELECT Name FROM club WHERE Manufacturer != 'Nike'"
  },
  {
    "id": 8,
    "db_id": "soccer_3",
    "question": {
      "id": 8,
      "db_id": "soccer_3",
      "question": "What are the names of players in ascending order of wins count?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of players in ascending order of wins count?[SQL]\\nSELECT Name FROM player ORDER BY Wins_count ASC"
  },
  {
    "id": 9,
    "db_id": "soccer_3",
    "question": {
      "id": 9,
      "db_id": "soccer_3",
      "question": "Return the names of players in order of count of wins, ascending."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the names of players in order of count of wins, ascending.[SQL]\\nSELECT Name FROM player ORDER BY Wins_count ASC"
  },
  {
    "id": 10,
    "db_id": "soccer_3",
    "question": {
      "id": 10,
      "db_id": "soccer_3",
      "question": "What is the name of the player with the highest earnings?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the player with the highest earnings?[SQL]\\nSELECT Name FROM player ORDER BY Earnings DESC LIMIT 1"
  },
  {
    "id": 11,
    "db_id": "soccer_3",
    "question": {
      "id": 11,
      "db_id": "soccer_3",
      "question": "Return the name of the player who earns the most money."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the name of the player who earns the most money.[SQL]\\nSELECT Name FROM Player ORDER BY Earnings DESC LIMIT 1"
  },
  {
    "id": 12,
    "db_id": "soccer_3",
    "question": {
      "id": 12,
      "db_id": "soccer_3",
      "question": "What are the distinct countries of players with earnings higher than 1200000?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct countries of players with earnings higher than 1200000?[SQL]\\nSELECT DISTINCT Country FROM player WHERE Earnings  >  1200000"
  },
  {
    "id": 13,
    "db_id": "soccer_3",
    "question": {
      "id": 13,
      "db_id": "soccer_3",
      "question": "From which countries are players who make more than 1200000 from?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, From which countries are players who make more than 1200000 from?[SQL]\\nSELECT Country FROM player WHERE Earnings  >  1200000"
  },
  {
    "id": 14,
    "db_id": "soccer_3",
    "question": {
      "id": 14,
      "db_id": "soccer_3",
      "question": "What is the country of the player with the highest earnings among players that have more than 2 win counts?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the country of the player with the highest earnings among players that have more than 2 win counts?[SQL]\\nSELECT Country FROM player WHERE Events_number  >  2 AND Earnings  =  (SELECT max(Earnings) FROM player)"
  },
  {
    "id": 15,
    "db_id": "soccer_3",
    "question": {
      "id": 15,
      "db_id": "soccer_3",
      "question": "Of players who have more than 2 wins, what is the country of the player who makes the most?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Of players who have more than 2 wins, what is the country of the player who makes the most?[SQL]\\nSELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1\\n\""
  },
  {
    "id": 16,
    "db_id": "soccer_3",
    "question": {
      "id": 16,
      "db_id": "soccer_3",
      "question": "Show names of players and names of clubs they are in."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show names of players and names of clubs they are in.[SQL]\\nSELECT T1.Name ,  T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID"
  },
  {
    "id": 17,
    "db_id": "soccer_3",
    "question": {
      "id": 17,
      "db_id": "soccer_3",
      "question": "What are the names of players and the corresponding clubs that they are in?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of players and the corresponding clubs that they are in?[SQL]\\nSELECT T1.Name ,  T2.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID"
  },
  {
    "id": 18,
    "db_id": "soccer_3",
    "question": {
      "id": 18,
      "db_id": "soccer_3",
      "question": "Show names of clubs that have players with more than 2 win counts."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show names of clubs that have players with more than 2 win counts.[SQL]\\nSELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id HAVING count(T2.Name)  >  2"
  },
  {
    "id": 19,
    "db_id": "soccer_3",
    "question": {
      "id": 19,
      "db_id": "soccer_3",
      "question": "What are the names of clubs that have players who have won more than twice?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of clubs that have players who have won more than twice?[SQL]\\nSELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_id WHERE T2.Wins_count  >  2"
  },
  {
    "id": 20,
    "db_id": "soccer_3",
    "question": {
      "id": 20,
      "db_id": "soccer_3",
      "question": "Show names of players from the club with manager \"Sam Allardyce\"."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show names of players from the club with manager \"Sam Allardyce\".[SQL]\\nSELECT T1.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Manager  =  \"Sam Allardyce\""
  },
  {
    "id": 21,
    "db_id": "soccer_3",
    "question": {
      "id": 21,
      "db_id": "soccer_3",
      "question": "What are the names of players from the club managed by Sam Allardyce?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of players from the club managed by Sam Allardyce?[SQL]\\nSELECT T1.Name FROM player AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Manager  =  \"Sam Allardyce\""
  },
  {
    "id": 22,
    "db_id": "soccer_3",
    "question": {
      "id": 22,
      "db_id": "soccer_3",
      "question": "Show names of clubs in descending order of average earnings of players belonging."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show names of clubs in descending order of average earnings of players belonging.[SQL]\\nSELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY avg(T2.earnings) DESC"
  },
  {
    "id": 23,
    "db_id": "soccer_3",
    "question": {
      "id": 23,
      "db_id": "soccer_3",
      "question": "What are the names of clubs, ordered descending by the average earnings of players within each?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of clubs, ordered descending by the average earnings of players within each?[SQL]\\nSELECT t1.name FROM club AS t1 JOIN player AS t2 ON t1.club_id  =  t2.club_id GROUP BY t1.club_id ORDER BY avg(t2.earnings) DESC"
  },
  {
    "id": 24,
    "db_id": "soccer_3",
    "question": {
      "id": 24,
      "db_id": "soccer_3",
      "question": "Show different manufacturers and the number of clubs they are associated with."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show different manufacturers and the number of clubs they are associated with.[SQL]\\nSELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer"
  },
  {
    "id": 25,
    "db_id": "soccer_3",
    "question": {
      "id": 25,
      "db_id": "soccer_3",
      "question": "How many clubs use each manufacturer?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many clubs use each manufacturer?[SQL]\\n\\nSELECT count(*) ,  Manufacturer FROM club GROUP BY Manufacturer"
  },
  {
    "id": 26,
    "db_id": "soccer_3",
    "question": {
      "id": 26,
      "db_id": "soccer_3",
      "question": "Please show the most common manufacturer of clubs."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the most common manufacturer of clubs.[SQL]\\nSELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "id": 27,
    "db_id": "soccer_3",
    "question": {
      "id": 27,
      "db_id": "soccer_3",
      "question": "Which manufacturer is most common among clubs?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which manufacturer is most common among clubs?[SQL]\\n\\nSELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "id": 28,
    "db_id": "soccer_3",
    "question": {
      "id": 28,
      "db_id": "soccer_3",
      "question": "List the manufacturers that are associated with more than one club."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the manufacturers that are associated with more than one club.[SQL]\\nSELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1"
  },
  {
    "id": 29,
    "db_id": "soccer_3",
    "question": {
      "id": 29,
      "db_id": "soccer_3",
      "question": "Which manufacturers work for more than 1 club?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which manufacturers work for more than 1 club?[SQL]\\nSELECT Manufacturer FROM club GROUP BY Manufacturer HAVING count(*)  >  1"
  },
  {
    "id": 30,
    "db_id": "soccer_3",
    "question": {
      "id": 30,
      "db_id": "soccer_3",
      "question": "List the country that have more than one player."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the country that have more than one player.[SQL]\\nSELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1"
  },
  {
    "id": 31,
    "db_id": "soccer_3",
    "question": {
      "id": 31,
      "db_id": "soccer_3",
      "question": "Which countries have produced more than one player?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which countries have produced more than one player?[SQL]\\nSELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1"
  },
  {
    "id": 32,
    "db_id": "soccer_3",
    "question": {
      "id": 32,
      "db_id": "soccer_3",
      "question": "List the name of clubs that do not have players."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the name of clubs that do not have players.[SQL]\\nSELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
  },
  {
    "id": 33,
    "db_id": "soccer_3",
    "question": {
      "id": 33,
      "db_id": "soccer_3",
      "question": "What are the names of clubs that do not have any players?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of clubs that do not have any players?[SQL]\\nSELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)"
  },
  {
    "id": 34,
    "db_id": "soccer_3",
    "question": {
      "id": 34,
      "db_id": "soccer_3",
      "question": "Show the country of players with earnings more than 1400000 and players with earnings less than 1100000."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.[SQL]\\nSELECT Country FROM player WHERE Earnings  >  1400000 UNION SELECT Country FROM player WHERE Earnings  <  1100000"
  },
  {
    "id": 35,
    "db_id": "soccer_3",
    "question": {
      "id": 35,
      "db_id": "soccer_3",
      "question": "Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?[SQL]\\nSELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  11000000"
  },
  {
    "id": 36,
    "db_id": "soccer_3",
    "question": {
      "id": 36,
      "db_id": "soccer_3",
      "question": "What is the number of distinct countries of all players?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the number of distinct countries of all players?[SQL]\\nSELECT count(DISTINCT Country) FROM player"
  },
  {
    "id": 37,
    "db_id": "soccer_3",
    "question": {
      "id": 37,
      "db_id": "soccer_3",
      "question": "How many different countries are players from?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different countries are players from?[SQL]\\nSELECT COUNT(DISTINCT Country) FROM player"
  },
  {
    "id": 38,
    "db_id": "soccer_3",
    "question": {
      "id": 38,
      "db_id": "soccer_3",
      "question": "Show the earnings of players from country \"Australia\" or \"Zimbabwe\"."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the earnings of players from country \"Australia\" or \"Zimbabwe\".[SQL]\\nSELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\""
  },
  {
    "id": 39,
    "db_id": "soccer_3",
    "question": {
      "id": 39,
      "db_id": "soccer_3",
      "question": "What are the earnings of players from either of the countries of Australia or Zimbabwe?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"club\" (\n\"Club_ID\" int,\n\"Name\" text,\n\"Manager\" text,\n\"Captain\" text,\n\"Manufacturer\" text,\n\"Sponsor\" text,\nPRIMARY KEY (\"Club_ID\")\n)\nCREATE TABLE \"player\" (\n\"Player_ID\" real,\n\"Name\" text,\n\"Country\" text,\n\"Earnings\" real,\n\"Events_number\" int,\n\"Wins_count\" int,\n\"Club_ID\" int,\nPRIMARY KEY (\"Player_ID\"),\nFOREIGN KEY (\"Club_ID\") REFERENCES \"club\"(\"Club_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the earnings of players from either of the countries of Australia or Zimbabwe?[SQL]\\nSELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\""
  },
  {
    "id": 40,
    "db_id": "e_commerce",
    "question": {
      "id": 40,
      "db_id": "e_commerce",
      "question": "List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.[SQL]\\nSELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 JOIN order_items AS T3 JOIN orders AS T4 ON T3.order_id = T4.order_id GROUP BY T4.customer_id HAVING count(*)  >  3"
  },
  {
    "id": 41,
    "db_id": "e_commerce",
    "question": {
      "id": 41,
      "db_id": "e_commerce",
      "question": "What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?[SQL]\\nSELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >=  3 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >  2"
  },
  {
    "id": 42,
    "db_id": "e_commerce",
    "question": {
      "id": 42,
      "db_id": "e_commerce",
      "question": "For the orders with any produts, how many products does each orders contain ? List the order id, status and the number."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.[SQL]\\nSELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id"
  },
  {
    "id": 43,
    "db_id": "e_commerce",
    "question": {
      "id": 43,
      "db_id": "e_commerce",
      "question": "For every order, how many products does it contain, and what are the orders' statuses and ids?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For every order, how many products does it contain, and what are the orders' statuses and ids?[SQL]\\nSELECT count(*) ,  T1.order_status_code ,  T1.order_id FROM Orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_status_code"
  },
  {
    "id": 44,
    "db_id": "e_commerce",
    "question": {
      "id": 44,
      "db_id": "e_commerce",
      "question": "List the dates of the orders which were placed at the earliest time or have more than 1 items."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the dates of the orders which were placed at the earliest time or have more than 1 items.[SQL]\\nSELECT T1.date_order_placed FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.date_order_placed HAVING count(*)  >  1 UNION SELECT min(date_order_placed) FROM orders"
  },
  {
    "id": 45,
    "db_id": "e_commerce",
    "question": {
      "id": 45,
      "db_id": "e_commerce",
      "question": "What are the dates of the earliest order and the dates of all orders with more than 1 item?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the dates of the earliest order and the dates of all orders with more than 1 item?[SQL]\\nSELECT T1.date_order_placed FROM Orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1 ORDER BY T1.date_order_placed ASC LIMIT 1"
  },
  {
    "id": 46,
    "db_id": "e_commerce",
    "question": {
      "id": 46,
      "db_id": "e_commerce",
      "question": "Which customers did not make any orders? List the first name, middle initial and last name."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which customers did not make any orders? List the first name, middle initial and last name.[SQL]\\nSELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id"
  },
  {
    "id": 47,
    "db_id": "e_commerce",
    "question": {
      "id": 47,
      "db_id": "e_commerce",
      "question": "WHat are the first and last names, and middle initials of all customers who did not make any orders?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, WHat are the first and last names, and middle initials of all customers who did not make any orders?[SQL]\\nSELECT customer_first_name ,  customer_last_name ,  customer_middle_initial FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name ,  T1.customer_middle_initial FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id"
  },
  {
    "id": 48,
    "db_id": "e_commerce",
    "question": {
      "id": 48,
      "db_id": "e_commerce",
      "question": "What are the id, name, price and color of the products which have not been ordered for at least twice?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the id, name, price and color of the products which have not been ordered for at least twice?[SQL]\\nSELECT product_id ,  product_name ,  product_price ,  product_color FROM products WHERE product_id NOT IN ( SELECT product_id FROM order_items GROUP BY product_id HAVING count(*)  >=  2 )"
  },
  {
    "id": 49,
    "db_id": "e_commerce",
    "question": {
      "id": 49,
      "db_id": "e_commerce",
      "question": "What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?[SQL]\\nSELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  <  2"
  },
  {
    "id": 50,
    "db_id": "e_commerce",
    "question": {
      "id": 50,
      "db_id": "e_commerce",
      "question": "Which orders have at least 2 products on it? List the order id and date."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which orders have at least 2 products on it? List the order id and date.[SQL]\\nSELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2"
  },
  {
    "id": 51,
    "db_id": "e_commerce",
    "question": {
      "id": 51,
      "db_id": "e_commerce",
      "question": "What are the ids and dates of the orders with at least two products?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids and dates of the orders with at least two products?[SQL]\\nSELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2"
  },
  {
    "id": 52,
    "db_id": "e_commerce",
    "question": {
      "id": 52,
      "db_id": "e_commerce",
      "question": "Which product are listed in orders most frequently? List the id, product name and price."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which product are listed in orders most frequently? List the id, product name and price.[SQL]\\nSELECT T1.product_id ,  T3.product_name ,  T3.product_price FROM orders AS T2 JOIN order_items AS T1 ON T2.order_id = T1.order_id JOIN products AS T3 ON T3.product_id = T1.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "id": 53,
    "db_id": "e_commerce",
    "question": {
      "id": 53,
      "db_id": "e_commerce",
      "question": "What are the ids, names, and prices of all products that are ordered most frequently?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids, names, and prices of all products that are ordered most frequently?[SQL]\\nSELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "id": 54,
    "db_id": "e_commerce",
    "question": {
      "id": 54,
      "db_id": "e_commerce",
      "question": "Which order have the least sum of the product prices. List the order id and sum."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which order have the least sum of the product prices. List the order id and sum.[SQL]\\nSELECT order_id ,  sum(T1.product_price) FROM order_items AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id GROUP BY order_id ORDER BY sum(T1.product_price) LIMIT 1"
  },
  {
    "id": 55,
    "db_id": "e_commerce",
    "question": {
      "id": 55,
      "db_id": "e_commerce",
      "question": "What is the order that total cost the least , and how much is the total cost ?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the order that total cost the least , and how much is the total cost ?[SQL]\\nSELECT sum(T1.order_item_price) FROM order_items AS T1 JOIN orders AS T2 ON T1.order_id = T2.order_id ORDER BY sum(T1.order_item_price) LIMIT 1"
  },
  {
    "id": 56,
    "db_id": "e_commerce",
    "question": {
      "id": 56,
      "db_id": "e_commerce",
      "question": "What is the most popular payment method?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the most popular payment method?[SQL]\\nSELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "id": 57,
    "db_id": "e_commerce",
    "question": {
      "id": 57,
      "db_id": "e_commerce",
      "question": "What is the payment method that most customers use?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the payment method that most customers use?[SQL]\\nSELECT T1.payment_method_code FROM Customer_Payment_Methods AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.payment_method_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "id": 58,
    "db_id": "e_commerce",
    "question": {
      "id": 58,
      "db_id": "e_commerce",
      "question": "How many number of products does each gender of customers buy? List the gender and the number"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many number of products does each gender of customers buy? List the gender and the number[SQL]\\nSELECT T1.gender_code ,  COUNT(*) FROM Customers AS T1 JOIN Order_Items AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code"
  },
  {
    "id": 59,
    "db_id": "e_commerce",
    "question": {
      "id": 59,
      "db_id": "e_commerce",
      "question": "How many products does each gender buy?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many products does each gender buy?[SQL]\\nSELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code"
  },
  {
    "id": 60,
    "db_id": "e_commerce",
    "question": {
      "id": 60,
      "db_id": "e_commerce",
      "question": "How many orders has each gender of customers placed?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many orders has each gender of customers placed?[SQL]\\nSELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code"
  },
  {
    "id": 61,
    "db_id": "e_commerce",
    "question": {
      "id": 61,
      "db_id": "e_commerce",
      "question": "How many orders has each gender placed?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many orders has each gender placed?[SQL]\\nSELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code"
  },
  {
    "id": 62,
    "db_id": "e_commerce",
    "question": {
      "id": 62,
      "db_id": "e_commerce",
      "question": "List the customers' first name, middle initial, last name and payment methods."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the customers' first name, middle initial, last name and payment methods.[SQL]\\nSELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id"
  },
  {
    "id": 63,
    "db_id": "e_commerce",
    "question": {
      "id": 63,
      "db_id": "e_commerce",
      "question": "What are the first names, middle initials, last names, and payment methods of all customers?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the first names, middle initials, last names, and payment methods of all customers?[SQL]\\nSELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id"
  },
  {
    "id": 64,
    "db_id": "e_commerce",
    "question": {
      "id": 64,
      "db_id": "e_commerce",
      "question": "List the invoices' status, date and the date of shipment."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the invoices' status, date and the date of shipment.[SQL]\\nSELECT T1.invoice_status_code ,  T1.invoice_date ,  min(T2.shipment_date) FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_status_code ,  T1.invoice_date"
  },
  {
    "id": 65,
    "db_id": "e_commerce",
    "question": {
      "id": 65,
      "db_id": "e_commerce",
      "question": "What are the statuses, dates, and shipment dates for all invoices?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the statuses, dates, and shipment dates for all invoices?[SQL]\\nSELECT invoice_status_code ,  date_order_placed ,  invoice_date FROM Invoices"
  },
  {
    "id": 66,
    "db_id": "e_commerce",
    "question": {
      "id": 66,
      "db_id": "e_commerce",
      "question": "List the names of the products being shipped and the corresponding shipment date."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the names of the products being shipped and the corresponding shipment date.[SQL]\\nSELECT T1.product_name ,  T3.shipment_date FROM products AS T1 JOIN order_items AS T2 JOIN shipments AS T3 ON T1.product_id = T2.product_id AND T2.order_item_id = T3.order_item_id"
  },
  {
    "id": 67,
    "db_id": "e_commerce",
    "question": {
      "id": 67,
      "db_id": "e_commerce",
      "question": "What are the names of the products tht have been shipped, and on what days were they shipped?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the products tht have been shipped, and on what days were they shipped?[SQL]\\nSELECT T1.product_name ,  T3.date_order_placed FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id JOIN orders AS T3 ON T2.order_id = T3.order_id"
  },
  {
    "id": 68,
    "db_id": "e_commerce",
    "question": {
      "id": 68,
      "db_id": "e_commerce",
      "question": "What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?[SQL]\\nSELECT T1.order_item_status_code ,  T2.shipment_tracking_number FROM Order_Items AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id"
  },
  {
    "id": 69,
    "db_id": "e_commerce",
    "question": {
      "id": 69,
      "db_id": "e_commerce",
      "question": "What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?[SQL]\\nSELECT T1.order_item_status_code ,  T2.shipment_tracking_number FROM Order_Items AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id'"
  },
  {
    "id": 70,
    "db_id": "e_commerce",
    "question": {
      "id": 70,
      "db_id": "e_commerce",
      "question": "What is the product name and the color of the ordered items which have been shipped?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the product name and the color of the ordered items which have been shipped?[SQL]\\nSELECT T1.product_name ,  T1.product_color FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id JOIN shipments AS T3 ON T2.shipment_id = T3.shipment_id"
  },
  {
    "id": 71,
    "db_id": "e_commerce",
    "question": {
      "id": 71,
      "db_id": "e_commerce",
      "question": "What are the names and colors of all products that have been shipped?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and colors of all products that have been shipped?[SQL]\\nSELECT T1.product_name ,  T1.product_color FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id JOIN shipments AS T3 ON T2.order_id  =  T3.order_id"
  },
  {
    "id": 72,
    "db_id": "e_commerce",
    "question": {
      "id": 72,
      "db_id": "e_commerce",
      "question": "List all the distinct product names, price and descriptions which are bought by female customers."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all the distinct product names, price and descriptions which are bought by female customers.[SQL]\\nSELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id JOIN orders AS T3 ON T2.order_id  =  T3.order_id JOIN customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'F'"
  },
  {
    "id": 73,
    "db_id": "e_commerce",
    "question": {
      "id": 73,
      "db_id": "e_commerce",
      "question": "What are the different names, prices, and descriptions for all products bought by female customers?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the different names, prices, and descriptions for all products bought by female customers?[SQL]\\nSELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM products AS T1 JOIN orders AS T2 JOIN customer_payment_methods AS T3 ON T1.product_id = T2.order_id AND T2.customer_id = T3.customer_id WHERE T3.gender_code  =  'F'"
  },
  {
    "id": 74,
    "db_id": "e_commerce",
    "question": {
      "id": 74,
      "db_id": "e_commerce",
      "question": "What are invoices status of all the orders which have not been shipped?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are invoices status of all the orders which have not been shipped?[SQL]\\nSELECT T1.invoice_status_code FROM Invoices AS T1 JOIN Orders AS T2 ON T1.invoice_number = T2.invoice_number WHERE T2.order_status_code != \"Shipped\""
  },
  {
    "id": 75,
    "db_id": "e_commerce",
    "question": {
      "id": 75,
      "db_id": "e_commerce",
      "question": "What are the invoice statuses for all orderes that have not been shipped out yet?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the invoice statuses for all orderes that have not been shipped out yet?[SQL]\\nSELECT T1.invoice_status_code FROM invoices AS T1 JOIN orders AS T2 ON T1.invoice_number = T2.invoice_number WHERE T2.order_status_code != \"Shipped\""
  },
  {
    "id": 76,
    "db_id": "e_commerce",
    "question": {
      "id": 76,
      "db_id": "e_commerce",
      "question": "What are the total cost of all the orders ? List the order id , date , and total cost ."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the total cost of all the orders ? List the order id , date , and total cost .[SQL]\\nSELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.product_price) FROM Orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T1.order_id"
  },
  {
    "id": 77,
    "db_id": "e_commerce",
    "question": {
      "id": 77,
      "db_id": "e_commerce",
      "question": "For each order, what is its id, date, and total amount paid?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each order, what is its id, date, and total amount paid?[SQL]\\nSELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.order_item_price) FROM orders AS T1 JOIN order_items AS T2 JOIN customer_payment_methods AS T3 ON T1.order_id = T2.order_id AND T2.order_item_id = T3.order_item_id GROUP BY T1.order_id"
  },
  {
    "id": 78,
    "db_id": "e_commerce",
    "question": {
      "id": 78,
      "db_id": "e_commerce",
      "question": "How many customers have placed any order?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many customers have placed any order?[SQL]\\nSELECT count(DISTINCT customer_id) FROM orders"
  },
  {
    "id": 79,
    "db_id": "e_commerce",
    "question": {
      "id": 79,
      "db_id": "e_commerce",
      "question": "How many different customers have ordered things?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different customers have ordered things?[SQL]\\nSELECT count(DISTINCT customer_id) FROM orders"
  },
  {
    "id": 80,
    "db_id": "e_commerce",
    "question": {
      "id": 80,
      "db_id": "e_commerce",
      "question": "How many item states are there in the orders?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many item states are there in the orders?[SQL]\\nSELECT count(DISTINCT order_item_status_code) FROM order_items"
  },
  {
    "id": 81,
    "db_id": "e_commerce",
    "question": {
      "id": 81,
      "db_id": "e_commerce",
      "question": "How many different item status codes are there listed in ordered items?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different item status codes are there listed in ordered items?[SQL]\\nSELECT count(DISTINCT order_item_status_code) FROM order_items"
  },
  {
    "id": 82,
    "db_id": "e_commerce",
    "question": {
      "id": 82,
      "db_id": "e_commerce",
      "question": "How many different payment methods are there?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different payment methods are there?[SQL]\\nSELECT count(DISTINCT payment_method_code) FROM Customer_Payment_Methods"
  },
  {
    "id": 83,
    "db_id": "e_commerce",
    "question": {
      "id": 83,
      "db_id": "e_commerce",
      "question": "How many different payment methods can customers choose from?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different payment methods can customers choose from?[SQL]\\nSELECT count(DISTINCT payment_method_code) FROM Customer_Payment_Methods"
  },
  {
    "id": 84,
    "db_id": "e_commerce",
    "question": {
      "id": 84,
      "db_id": "e_commerce",
      "question": "What are the login names and passwords of the customers whose phone number have the prefix '+12'?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the login names and passwords of the customers whose phone number have the prefix '+12'?[SQL]\\nSELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'"
  },
  {
    "id": 85,
    "db_id": "e_commerce",
    "question": {
      "id": 85,
      "db_id": "e_commerce",
      "question": "What are the usernames and passwords of all customers whose phone number starts with '+12'?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the usernames and passwords of all customers whose phone number starts with '+12'?[SQL]\\nSELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'"
  },
  {
    "id": 86,
    "db_id": "e_commerce",
    "question": {
      "id": 86,
      "db_id": "e_commerce",
      "question": "What are the product sizes of the products whose name has the substring 'Dell'?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the product sizes of the products whose name has the substring 'Dell'?[SQL]\\nSELECT product_size FROM products WHERE product_name LIKE '%Dell%'"
  },
  {
    "id": 87,
    "db_id": "e_commerce",
    "question": {
      "id": 87,
      "db_id": "e_commerce",
      "question": "What are the sizes of all products whose name includes the word 'Dell'?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the sizes of all products whose name includes the word 'Dell'?[SQL]\\nSELECT product_size FROM products WHERE product_name LIKE '%Dell%'"
  },
  {
    "id": 88,
    "db_id": "e_commerce",
    "question": {
      "id": 88,
      "db_id": "e_commerce",
      "question": "What are the product price and the product size of the products whose price is above average?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the product price and the product size of the products whose price is above average?[SQL]\\nSELECT product_price ,  product_size FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)"
  },
  {
    "id": 89,
    "db_id": "e_commerce",
    "question": {
      "id": 89,
      "db_id": "e_commerce",
      "question": "What are the prices and sizes of all products whose price is above the mean?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the prices and sizes of all products whose price is above the mean?[SQL]\\nSELECT product_price ,  product_size FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)"
  },
  {
    "id": 90,
    "db_id": "e_commerce",
    "question": {
      "id": 90,
      "db_id": "e_commerce",
      "question": "How many kinds of products have not been sold?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many kinds of products have not been sold?[SQL]\\nSELECT count(DISTINCT product_name) FROM products WHERE product_id NOT IN ( SELECT product_id FROM order_items )"
  },
  {
    "id": 91,
    "db_id": "e_commerce",
    "question": {
      "id": 91,
      "db_id": "e_commerce",
      "question": "What is the number of products that have not been ordered yet?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the number of products that have not been ordered yet?[SQL]\\nSELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM order_items )"
  },
  {
    "id": 92,
    "db_id": "e_commerce",
    "question": {
      "id": 92,
      "db_id": "e_commerce",
      "question": "How many customers do not have any payment method?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many customers do not have any payment method?[SQL]\\nSELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_payment_methods)"
  },
  {
    "id": 93,
    "db_id": "e_commerce",
    "question": {
      "id": 93,
      "db_id": "e_commerce",
      "question": "How many customers do not have a listed payment method?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many customers do not have a listed payment method?[SQL]\\nSELECT count(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_payment_methods)"
  },
  {
    "id": 94,
    "db_id": "e_commerce",
    "question": {
      "id": 94,
      "db_id": "e_commerce",
      "question": "What are all the order status and all the dates of orders?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all the order status and all the dates of orders?[SQL]\\nSELECT order_status_code ,  date_order_placed FROM Orders"
  },
  {
    "id": 95,
    "db_id": "e_commerce",
    "question": {
      "id": 95,
      "db_id": "e_commerce",
      "question": "What are the status codes and dates placed for all of the orders?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the status codes and dates placed for all of the orders?[SQL]\\nSELECT date_order_placed ,  order_status_code FROM Orders"
  },
  {
    "id": 96,
    "db_id": "e_commerce",
    "question": {
      "id": 96,
      "db_id": "e_commerce",
      "question": "List the address, town and county information of the customers who live in the USA."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the address, town and county information of the customers who live in the USA.[SQL]\\nSELECT address_line_1 ,  town_city ,  county FROM Customers WHERE country  =  'USA'"
  },
  {
    "id": 97,
    "db_id": "e_commerce",
    "question": {
      "id": 97,
      "db_id": "e_commerce",
      "question": "What are the addresses, towns, and county information for all customers who live in the United States?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the addresses, towns, and county information for all customers who live in the United States?[SQL]\\nSELECT address_line_1 ,  town_city ,  county FROM Customers WHERE country  =  'United States'"
  },
  {
    "id": 98,
    "db_id": "e_commerce",
    "question": {
      "id": 98,
      "db_id": "e_commerce",
      "question": "List all the pairs of buyer first names and product names."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all the pairs of buyer first names and product names.[SQL]\\nSELECT T1.customer_first_name ,  T2.product_name FROM customers AS T1 JOIN order_items AS T2 ON T1.customer_id = T2.customer_id"
  },
  {
    "id": 99,
    "db_id": "e_commerce",
    "question": {
      "id": 99,
      "db_id": "e_commerce",
      "question": "What are the first names of all buyers and what products did they buy? List them in pairs."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the first names of all buyers and what products did they buy? List them in pairs.[SQL]\\nSELECT T1.customer_first_name ,  T3.product_name FROM customers AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.customer_id = T2.customer_id AND T2.product_id = T3.product_id"
  },
  {
    "id": 100,
    "db_id": "e_commerce",
    "question": {
      "id": 100,
      "db_id": "e_commerce",
      "question": "How many items are shipped?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many items are shipped?[SQL]\\nSELECT count(*) FROM shipment_items"
  },
  {
    "id": 101,
    "db_id": "e_commerce",
    "question": {
      "id": 101,
      "db_id": "e_commerce",
      "question": "How many products have been shipped?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many products have been shipped?[SQL]\\nSELECT count(*) FROM order_items WHERE order_item_status_code = 'Shipped'"
  },
  {
    "id": 102,
    "db_id": "e_commerce",
    "question": {
      "id": 102,
      "db_id": "e_commerce",
      "question": "What is the product average price?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the product average price?[SQL]\\nSELECT avg(product_price) FROM products"
  },
  {
    "id": 103,
    "db_id": "e_commerce",
    "question": {
      "id": 103,
      "db_id": "e_commerce",
      "question": "How much do the products cost on average?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How much do the products cost on average?[SQL]\\nSELECT avg(product_price) FROM products"
  },
  {
    "id": 104,
    "db_id": "e_commerce",
    "question": {
      "id": 104,
      "db_id": "e_commerce",
      "question": "What is the average price of the products being ordered?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average price of the products being ordered?[SQL]\\nSELECT avg(product_price) FROM products"
  },
  {
    "id": 105,
    "db_id": "e_commerce",
    "question": {
      "id": 105,
      "db_id": "e_commerce",
      "question": "What is the price of all products being ordered on average?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the price of all products being ordered on average?[SQL]\\nSELECT avg(product_price) FROM products"
  },
  {
    "id": 106,
    "db_id": "e_commerce",
    "question": {
      "id": 106,
      "db_id": "e_commerce",
      "question": "What are the email address, town and county of the customers who are of the least common gender?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the email address, town and county of the customers who are of the least common gender?[SQL]\\nSELECT email_address ,  town_city ,  county FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "id": 107,
    "db_id": "e_commerce",
    "question": {
      "id": 107,
      "db_id": "e_commerce",
      "question": "What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?[SQL]\\nSELECT email_address ,  town_city ,  county FROM customers WHERE gender_code  =  (SELECT gender_code FROM customers GROUP BY gender_code ORDER BY count(*) LIMIT 1) EXCEPT SELECT T1.email_address ,  T1.town_city ,  T1.county FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code HAVING count(*)  <  (SELECT count(*) FROM customers GROUP BY gender_code ORDER BY count(*) LIMIT 1)"
  },
  {
    "id": 108,
    "db_id": "e_commerce",
    "question": {
      "id": 108,
      "db_id": "e_commerce",
      "question": "List the order date of the orders who are placed by customers with at least 2 payment methods."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the order date of the orders who are placed by customers with at least 2 payment methods.[SQL]\\nSELECT T1.date_order_placed FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN customer_payment_methods AS T3 ON T2.customer_id = T3.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2'"
  },
  {
    "id": 109,
    "db_id": "e_commerce",
    "question": {
      "id": 109,
      "db_id": "e_commerce",
      "question": "What is the date of all orders that have been placed by customers with at least 2 payment methods?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the date of all orders that have been placed by customers with at least 2 payment methods?[SQL]\\nSELECT T1.date_order_placed FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN customer_payment_methods AS T3 ON T2.customer_id = T3.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2'"
  },
  {
    "id": 110,
    "db_id": "e_commerce",
    "question": {
      "id": 110,
      "db_id": "e_commerce",
      "question": "What is the most uncommon order status?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the most uncommon order status?[SQL]\\nSELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "id": 111,
    "db_id": "e_commerce",
    "question": {
      "id": 111,
      "db_id": "e_commerce",
      "question": "What is the least common order status?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the least common order status?[SQL]\\nSELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "id": 112,
    "db_id": "e_commerce",
    "question": {
      "id": 112,
      "db_id": "e_commerce",
      "question": "For all the products sold for more than 3 times, list their id and description."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For all the products sold for more than 3 times, list their id and description.[SQL]\\nSELECT T1.product_id ,  T1.product_description FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3"
  },
  {
    "id": 113,
    "db_id": "e_commerce",
    "question": {
      "id": 113,
      "db_id": "e_commerce",
      "question": "For all products sold more than 3 times, what are their ids and descriptions?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For all products sold more than 3 times, what are their ids and descriptions?[SQL]\\nSELECT DISTINCT T1.product_id ,  T1.product_description FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3"
  },
  {
    "id": 114,
    "db_id": "e_commerce",
    "question": {
      "id": 114,
      "db_id": "e_commerce",
      "question": "List the invoice dates and ids of the invoices causing at least 2 shipments."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the invoice dates and ids of the invoices causing at least 2 shipments.[SQL]\\nSELECT T1.invoice_date ,  T1.invoice_number FROM INVOICES AS T1 JOIN SHIPMENTS AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2"
  },
  {
    "id": 115,
    "db_id": "e_commerce",
    "question": {
      "id": 115,
      "db_id": "e_commerce",
      "question": "What are the dates and ids of the invoices that are related to at least 2 shipments?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the dates and ids of the invoices that are related to at least 2 shipments?[SQL]\\nSELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2"
  },
  {
    "id": 116,
    "db_id": "e_commerce",
    "question": {
      "id": 116,
      "db_id": "e_commerce",
      "question": "what are all shipment tracking numbers and shipment dates?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, what are all shipment tracking numbers and shipment dates?[SQL]\\nSELECT shipment_tracking_number ,  shipment_date FROM Shipments"
  },
  {
    "id": 117,
    "db_id": "e_commerce",
    "question": {
      "id": 117,
      "db_id": "e_commerce",
      "question": "What are the tracking numbers and dates for all shipments listed?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the tracking numbers and dates for all shipments listed?[SQL]\\nSELECT shipment_tracking_number ,  shipment_date FROM Shipments"
  },
  {
    "id": 118,
    "db_id": "e_commerce",
    "question": {
      "id": 118,
      "db_id": "e_commerce",
      "question": "What are the color, description and size of the products priced below the maximum price."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the color, description and size of the products priced below the maximum price.[SQL]\\nSELECT product_color ,  product_description ,  product_size FROM products WHERE product_price  <  (SELECT max(product_price) FROM products)"
  },
  {
    "id": 119,
    "db_id": "e_commerce",
    "question": {
      "id": 119,
      "db_id": "e_commerce",
      "question": "What are the colors , descriptions , and sizes for all products that are not at the maximum price ?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n)\nCREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n)\nCREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n)\nCREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the colors , descriptions , and sizes for all products that are not at the maximum price ?[SQL]\\nSELECT product_color ,  product_description ,  product_size FROM products WHERE product_price != (SELECT max(product_price) FROM products)"
  },
  {
    "id": 120,
    "db_id": "bbc_channels",
    "question": {
      "id": 120,
      "db_id": "bbc_channels",
      "question": "Return the names of directors who are older than the average age."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the names of directors who are older than the average age.[SQL]\\nSELECT name FROM director WHERE age  >  (SELECT avg(age) FROM director)"
  },
  {
    "id": 121,
    "db_id": "bbc_channels",
    "question": {
      "id": 121,
      "db_id": "bbc_channels",
      "question": "Find the the name of the oldest director."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the the name of the oldest director.[SQL]\\n\\nSELECT name FROM director ORDER BY age LIMIT 1"
  },
  {
    "id": 122,
    "db_id": "bbc_channels",
    "question": {
      "id": 122,
      "db_id": "bbc_channels",
      "question": "How many channels have the word 'bbc' in their internet link?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many channels have the word 'bbc' in their internet link?[SQL]\\nSELECT count(*) FROM channel WHERE internet LIKE '%bbc%'"
  },
  {
    "id": 123,
    "db_id": "bbc_channels",
    "question": {
      "id": 123,
      "db_id": "bbc_channels",
      "question": "How many different digital terrestrial channels are there?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different digital terrestrial channels are there?[SQL]\\nSELECT count(DISTINCT digital_terrestrial_channel) FROM channel"
  },
  {
    "id": 124,
    "db_id": "bbc_channels",
    "question": {
      "id": 124,
      "db_id": "bbc_channels",
      "question": "List all program titles in the order of starting year. List the most recent one first."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all program titles in the order of starting year. List the most recent one first.[SQL]\\nSELECT title FROM program ORDER BY start_year DESC"
  },
  {
    "id": 125,
    "db_id": "bbc_channels",
    "question": {
      "id": 125,
      "db_id": "bbc_channels",
      "question": "Which director is in charge of the most programs?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which director is in charge of the most programs?[SQL]\\nSELECT T1.name FROM director AS T1 JOIN program AS T2 ON T1.director_id  =  T2.director_id GROUP BY T1.director_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "id": 126,
    "db_id": "bbc_channels",
    "question": {
      "id": 126,
      "db_id": "bbc_channels",
      "question": "Find the name and age of the director who is in charge of the most programs?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and age of the director who is in charge of the most programs?[SQL]\\nSELECT t1.name ,  t1.age FROM director AS t1 JOIN program AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "id": 127,
    "db_id": "bbc_channels",
    "question": {
      "id": 127,
      "db_id": "bbc_channels",
      "question": "Return the title of the program that began most recently."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the title of the program that began most recently.[SQL]\\nSELECT title FROM program ORDER BY start_year DESC LIMIT 1"
  },
  {
    "id": 128,
    "db_id": "bbc_channels",
    "question": {
      "id": 128,
      "db_id": "bbc_channels",
      "question": "Find the name and website link of the channels that have more than one program."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and website link of the channels that have more than one program.[SQL]\\nSELECT t1.name ,  t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id HAVING count(*)  >  1"
  },
  {
    "id": 129,
    "db_id": "bbc_channels",
    "question": {
      "id": 129,
      "db_id": "bbc_channels",
      "question": "Find the number of programs for each channel. Return the name of each channel as well."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of programs for each channel. Return the name of each channel as well.[SQL]\\nSELECT count(*) ,  T1.name FROM channel AS T1 JOIN program AS T2 ON T1.channel_id  =  T2.channel_id GROUP BY T1.name"
  },
  {
    "id": 130,
    "db_id": "bbc_channels",
    "question": {
      "id": 130,
      "db_id": "bbc_channels",
      "question": "Find the number of channels that do not run any program."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the number of channels that do not run any program.[SQL]\\nSELECT count(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)"
  },
  {
    "id": 131,
    "db_id": "bbc_channels",
    "question": {
      "id": 131,
      "db_id": "bbc_channels",
      "question": "What is the name of the director who is in the \"Dracula\" program?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the director who is in the \"Dracula\" program?[SQL]\\nSELECT T1.name FROM director AS T1 JOIN program AS T2 ON T1.director_id  =  T2.director_id WHERE T2.title  =  'Dracula'"
  },
  {
    "id": 132,
    "db_id": "bbc_channels",
    "question": {
      "id": 132,
      "db_id": "bbc_channels",
      "question": "Find the name and internet web of the channel that is directed by the most directors."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name and internet web of the channel that is directed by the most directors.[SQL]\\nSELECT t1.name ,  t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "id": 133,
    "db_id": "bbc_channels",
    "question": {
      "id": 133,
      "db_id": "bbc_channels",
      "question": "Find the name of the directors whose age is between 30 and 60."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the name of the directors whose age is between 30 and 60.[SQL]\\nSELECT name FROM director WHERE age BETWEEN 30 AND 60"
  },
  {
    "id": 134,
    "db_id": "bbc_channels",
    "question": {
      "id": 134,
      "db_id": "bbc_channels",
      "question": "give me the name of channels that have both a director younger than 40 and a director older than 60."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, give me the name of channels that have both a director younger than 40 and a director older than 60.[SQL]\\nSELECT t1.name FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  <  40 INTERSECT SELECT t1.name FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  >  60"
  },
  {
    "id": 135,
    "db_id": "bbc_channels",
    "question": {
      "id": 135,
      "db_id": "bbc_channels",
      "question": "Find the id and name of the channel that is not directed by Hank Baskett."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"channel\" (\n\"Channel_ID\" int,\n\"Name\" text,\n\"Analogue_terrestrial_channel\" text,\n\"Digital_terrestrial_channel\" text,\n\"Internet\" text,\nPRIMARY KEY (\"Channel_ID\")\n)\nCREATE TABLE \"director\" (\n\"Director_ID\" int,\n\"Name\" text,\n\"Age\" int,\nPRIMARY KEY (\"Director_ID\")\n)\nCREATE TABLE \"program\" (\n\"Program_ID\" int,\n\"Start_Year\" real,\n\"Title\" text,\n\"Director_ID\" int,\n\"Channel_ID\" int,\nPRIMARY KEY (\"Program_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\nCREATE TABLE \"director_admin\" (\n\"Director_ID\" int,\n\"Channel_ID\" int,\n\"Is_first_director\" bool,\nPRIMARY KEY (\"Director_ID\",\"Channel_ID\"),\nFOREIGN KEY (\"Director_ID\") REFERENCES \"director\"(\"Director_ID\"),\nFOREIGN KEY (\"Channel_ID\") REFERENCES \"channel\"(\"Channel_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the id and name of the channel that is not directed by Hank Baskett.[SQL]\\nSELECT t1.channel_id ,  t2.name FROM director_admin AS t1 JOIN channel AS t2 ON t1.channel_id  =  t2.channel_id WHERE t1.director_id NOT IN (SELECT director_id FROM director WHERE name  =  'Hank Baskett')"
  },
  {
    "id": 136,
    "db_id": "tv_shows",
    "question": {
      "id": 136,
      "db_id": "tv_shows",
      "question": "How many radios are there?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many radios are there?[SQL]\\nSELECT count(*) FROM radio"
  },
  {
    "id": 137,
    "db_id": "tv_shows",
    "question": {
      "id": 137,
      "db_id": "tv_shows",
      "question": "List the transmitters of radios in ascending order of erp kw ."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the transmitters of radios in ascending order of erp kw .[SQL]\\nSELECT transmitter FROM radio ORDER BY ERP_kW ASC"
  },
  {
    "id": 138,
    "db_id": "tv_shows",
    "question": {
      "id": 138,
      "db_id": "tv_shows",
      "question": "What are the names and original air dates of tv shows?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and original air dates of tv shows?[SQL]\\nSELECT tv_show_name ,  Original_Airdate FROM tv_show"
  },
  {
    "id": 139,
    "db_id": "tv_shows",
    "question": {
      "id": 139,
      "db_id": "tv_shows",
      "question": "List the station names of city channels whose affiliation is not \"ABC\"."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the station names of city channels whose affiliation is not \"ABC\".[SQL]\\nSELECT station_name FROM city_channel WHERE affiliation != 'ABC'"
  },
  {
    "id": 140,
    "db_id": "tv_shows",
    "question": {
      "id": 140,
      "db_id": "tv_shows",
      "question": "Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.[SQL]\\nSELECT transmitter FROM radio WHERE ERP_kW  >  150 OR ERP_kW  <  30"
  },
  {
    "id": 141,
    "db_id": "tv_shows",
    "question": {
      "id": 141,
      "db_id": "tv_shows",
      "question": "What is the transmitter of the radio with the largest ERP_kW?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the transmitter of the radio with the largest ERP_kW?[SQL]\\nSELECT transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1"
  },
  {
    "id": 142,
    "db_id": "tv_shows",
    "question": {
      "id": 142,
      "db_id": "tv_shows",
      "question": "What is the average ERP across all radios?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average ERP across all radios?[SQL]\\nSELECT avg(ERP_kW) FROM radio"
  },
  {
    "id": 143,
    "db_id": "tv_shows",
    "question": {
      "id": 143,
      "db_id": "tv_shows",
      "question": "Show the different affiliations of city channels and the number of city channels with each affiliation."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the different affiliations of city channels and the number of city channels with each affiliation.[SQL]\\nSELECT affiliation ,  count(*) FROM city_channel GROUP BY affiliation"
  },
  {
    "id": 144,
    "db_id": "tv_shows",
    "question": {
      "id": 144,
      "db_id": "tv_shows",
      "question": "Please show the most common affiliation for city channels."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the most common affiliation for city channels.[SQL]\\nSELECT affiliation FROM city_channel GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "id": 145,
    "db_id": "tv_shows",
    "question": {
      "id": 145,
      "db_id": "tv_shows",
      "question": "List the affiliations shared by more than three city channels."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the affiliations shared by more than three city channels.[SQL]\\nSELECT affiliation FROM city_channel GROUP BY affiliation HAVING count(*)  >  3"
  },
  {
    "id": 146,
    "db_id": "tv_shows",
    "question": {
      "id": 146,
      "db_id": "tv_shows",
      "question": "Show the cities and station names of city channels in ascending alphabetical order of station name."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the cities and station names of city channels in ascending alphabetical order of station name.[SQL]\\nSELECT city ,  station_name FROM city_channel ORDER BY station_name ASC"
  },
  {
    "id": 147,
    "db_id": "tv_shows",
    "question": {
      "id": 147,
      "db_id": "tv_shows",
      "question": "Show the transmitters of radios and the cities of the channels they are associated with."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the transmitters of radios and the cities of the channels they are associated with.[SQL]\\nSELECT T1.transmitter ,  T2.city FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID"
  },
  {
    "id": 148,
    "db_id": "tv_shows",
    "question": {
      "id": 148,
      "db_id": "tv_shows",
      "question": "Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.[SQL]\\nSELECT t1.transmitter ,  t2.station_name FROM radio AS t1 JOIN city_channel_radio AS t2 ON t1.radio_id  =  t2.radio_id ORDER BY t1.ERP_kW DESC"
  },
  {
    "id": 149,
    "db_id": "tv_shows",
    "question": {
      "id": 149,
      "db_id": "tv_shows",
      "question": "Show the transmitters of the radios and the number of city channels they are associated with."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the transmitters of the radios and the number of city channels they are associated with.[SQL]\\nSELECT T1.Transmitter ,  count(*) FROM radio AS T1 JOIN city_channel_radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T1.Transmitter"
  },
  {
    "id": 150,
    "db_id": "tv_shows",
    "question": {
      "id": 150,
      "db_id": "tv_shows",
      "question": "Show the distinct transmitters of radios that are not associated with any city channel."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"city_channel\" (\n\"ID\" int,\n\"City\" text,\n\"Station_name\" text,\n\"Owned_Since\" real,\n\"Affiliation\" text,\nPRIMARY KEY (\"ID\")\n)\nCREATE TABLE \"radio\" (\n\"Radio_ID\" int,\n\"Transmitter\" text,\n\"Radio_MHz\" text,\n\"2FM_MHz\" text,\n\"RnaG_MHz\" text,\n\"Lyric_FM_MHz\" text,\n\"ERP_kW\" text,\nPRIMARY KEY (\"Radio_ID\")\n)\nCREATE TABLE \"tv_show\" (\n\"tv_show_ID\" int,\n\"tv_show_name\" text,\n\"Sub_tittle\" text,\n\"Next_show_name\" text,\n\"Original_Airdate\" text,\nPRIMARY KEY (\"tv_show_ID\")\n)\nCREATE TABLE \"city_channel_radio\" (\n\"City_channel_ID\" int,\n\"Radio_ID\" int,\n\"Is_online\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"Radio_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n)\nCREATE TABLE \"city_channel_tv_show\" (\n\"City_channel_ID\" int,\n\"tv_show_ID\" int,\n\"Is_online\" bool,\n\"Is_free\" bool,\nPRIMARY KEY (\"City_channel_ID\",\"tv_show_ID\"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the distinct transmitters of radios that are not associated with any city channel.[SQL]\\nSELECT DISTINCT transmitter FROM radio WHERE radio_id NOT IN (SELECT radio_id FROM city_channel_radio)"
  },
  {
    "id": 151,
    "db_id": "vehicle_driver",
    "question": {
      "id": 151,
      "db_id": "vehicle_driver",
      "question": "What is the model of the vehicle with maximum top speed whose power is higher than 6000?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the model of the vehicle with maximum top speed whose power is higher than 6000?[SQL]\\nSELECT Model FROM vehicle WHERE Top_Speed  =  ( SELECT max(Top_Speed) FROM vehicle WHERE Power  >  6000 )"
  },
  {
    "id": 152,
    "db_id": "vehicle_driver",
    "question": {
      "id": 152,
      "db_id": "vehicle_driver",
      "question": "Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.[SQL]\\nSELECT Model FROM vehicle WHERE Power  >  6000 ORDER BY Top_Speed DESC LIMIT 1"
  },
  {
    "id": 153,
    "db_id": "vehicle_driver",
    "question": {
      "id": 153,
      "db_id": "vehicle_driver",
      "question": "What are the names of the drivers who are citizens of the 'United States'?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the drivers who are citizens of the 'United States'?[SQL]\\nSELECT Name FROM driver WHERE Citizenship  =  'United States'"
  },
  {
    "id": 154,
    "db_id": "vehicle_driver",
    "question": {
      "id": 154,
      "db_id": "vehicle_driver",
      "question": "Return the names of drivers with citizenship from the United States."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the names of drivers with citizenship from the United States.[SQL]\\n\\nSELECT Name FROM driver WHERE Citizenship  =  'United States'"
  },
  {
    "id": 155,
    "db_id": "vehicle_driver",
    "question": {
      "id": 155,
      "db_id": "vehicle_driver",
      "question": "How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?[SQL]\\nSELECT T1.driver_id ,  COUNT(*) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.driver_id ORDER BY COUNT(*) DESC LIMIT 1"
  },
  {
    "id": 156,
    "db_id": "vehicle_driver",
    "question": {
      "id": 156,
      "db_id": "vehicle_driver",
      "question": "What is the id of the driver who has driven the most vehicles, and how many vehicles is this?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the id of the driver who has driven the most vehicles, and how many vehicles is this?[SQL]\\nSELECT T1.driver_id ,  COUNT(*) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.driver_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "id": 157,
    "db_id": "vehicle_driver",
    "question": {
      "id": 157,
      "db_id": "vehicle_driver",
      "question": "What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?[SQL]\\nSELECT max(Power) ,  avg(Power) FROM vehicle WHERE Builder  =  'Zhuzhou'"
  },
  {
    "id": 158,
    "db_id": "vehicle_driver",
    "question": {
      "id": 158,
      "db_id": "vehicle_driver",
      "question": "Return the maximum and average power for the vehicles built by Zhuzhou."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the maximum and average power for the vehicles built by Zhuzhou.[SQL]\\nSELECT max(Power) ,  avg(Power) FROM vehicle WHERE Builder  =  'Zhuzhou'"
  },
  {
    "id": 159,
    "db_id": "vehicle_driver",
    "question": {
      "id": 159,
      "db_id": "vehicle_driver",
      "question": "What is the id of the vehicle driven for the least times for the vehicles ever used?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the id of the vehicle driven for the least times for the vehicles ever used?[SQL]\\nSELECT T1.vehicle_id FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "id": 160,
    "db_id": "vehicle_driver",
    "question": {
      "id": 160,
      "db_id": "vehicle_driver",
      "question": "Return the id of the vehicle that has been driven the fewest times."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the id of the vehicle that has been driven the fewest times.[SQL]\\nSELECT T1.vehicle_id FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "id": 161,
    "db_id": "vehicle_driver",
    "question": {
      "id": 161,
      "db_id": "vehicle_driver",
      "question": "What is the top speed and power of the vehicle manufactured in the year of 1996?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the top speed and power of the vehicle manufactured in the year of 1996?[SQL]\\nSELECT Top_Speed ,  Power FROM vehicle WHERE Builder  =  1996"
  },
  {
    "id": 162,
    "db_id": "vehicle_driver",
    "question": {
      "id": 162,
      "db_id": "vehicle_driver",
      "question": "Return the top speed and power of the vehicle that was built in the year 1996."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the top speed and power of the vehicle that was built in the year 1996.[SQL]\\nSELECT Top_Speed ,  Power FROM vehicle WHERE Build_Year  =  1996"
  },
  {
    "id": 163,
    "db_id": "vehicle_driver",
    "question": {
      "id": 163,
      "db_id": "vehicle_driver",
      "question": "What are the build year, model name and builder of the vehicles?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the build year, model name and builder of the vehicles?[SQL]\\nSELECT Build_Year ,  Model ,  Builder FROM vehicle"
  },
  {
    "id": 164,
    "db_id": "vehicle_driver",
    "question": {
      "id": 164,
      "db_id": "vehicle_driver",
      "question": "Give the build year, model, and builder of each vehicle."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the build year, model, and builder of each vehicle.[SQL]\\nSELECT Build_Year ,  Model ,  Builder FROM vehicle"
  },
  {
    "id": 165,
    "db_id": "vehicle_driver",
    "question": {
      "id": 165,
      "db_id": "vehicle_driver",
      "question": "How many drivers have driven vehicles built in 2012?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many drivers have driven vehicles built in 2012?[SQL]\\nSELECT count(*) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012"
  },
  {
    "id": 166,
    "db_id": "vehicle_driver",
    "question": {
      "id": 166,
      "db_id": "vehicle_driver",
      "question": "Count the number of different drivers who have driven vehicles built in 2012."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of different drivers who have driven vehicles built in 2012.[SQL]\\nSELECT count(DISTINCT T1.name) FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id = T3.vehicle_id WHERE T3.build_year = 2012"
  },
  {
    "id": 167,
    "db_id": "vehicle_driver",
    "question": {
      "id": 167,
      "db_id": "vehicle_driver",
      "question": "How many drivers have raced in 'NASCAR'?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many drivers have raced in 'NASCAR'?[SQL]\\nSELECT count(*) FROM driver WHERE Racing_Series = 'NASCAR'"
  },
  {
    "id": 168,
    "db_id": "vehicle_driver",
    "question": {
      "id": 168,
      "db_id": "vehicle_driver",
      "question": "Count the number of drivers who have raced in NASCAR."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of drivers who have raced in NASCAR.[SQL]\\n\\nSELECT count(*) FROM driver WHERE Racing_Series = 'NASCAR'"
  },
  {
    "id": 169,
    "db_id": "vehicle_driver",
    "question": {
      "id": 169,
      "db_id": "vehicle_driver",
      "question": "What is the average top speed of vehicles?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average top speed of vehicles?[SQL]\\nSELECT avg(top_speed) FROM vehicle"
  },
  {
    "id": 170,
    "db_id": "vehicle_driver",
    "question": {
      "id": 170,
      "db_id": "vehicle_driver",
      "question": "Return the average top speed across all vehicles."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the average top speed across all vehicles.[SQL]\\nSELECT avg(top_speed) FROM vehicle"
  },
  {
    "id": 171,
    "db_id": "vehicle_driver",
    "question": {
      "id": 171,
      "db_id": "vehicle_driver",
      "question": "What are the distinct driver names who have driven vehicles with power more than 5000 ?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct driver names who have driven vehicles with power more than 5000 ?[SQL]\\n\\nSELECT DISTINCT T1.name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id = T3.vehicle_id WHERE T3.power > 5000"
  },
  {
    "id": 172,
    "db_id": "vehicle_driver",
    "question": {
      "id": 172,
      "db_id": "vehicle_driver",
      "question": "Return the names of drivers who have driven vehicles with power over 5000."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the names of drivers who have driven vehicles with power over 5000.[SQL]\\n\\nSELECT T1.name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id = T3.vehicle_id WHERE T3.power > 5000"
  },
  {
    "id": 173,
    "db_id": "vehicle_driver",
    "question": {
      "id": 173,
      "db_id": "vehicle_driver",
      "question": "Which car models have total production larger than 100 or top speed higher than 150?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which car models have total production larger than 100 or top speed higher than 150?[SQL]\\nSELECT Model FROM vehicle WHERE Total_Production  >  100 OR Top_Speed  >  150"
  },
  {
    "id": 174,
    "db_id": "vehicle_driver",
    "question": {
      "id": 174,
      "db_id": "vehicle_driver",
      "question": "Give the models of cars that have a total production of over 100 or a top speed over 150."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the models of cars that have a total production of over 100 or a top speed over 150.[SQL]\\nSELECT Model FROM vehicle WHERE Total_Production  >  100 OR Top_Speed  >  150"
  },
  {
    "id": 175,
    "db_id": "vehicle_driver",
    "question": {
      "id": 175,
      "db_id": "vehicle_driver",
      "question": "What are the model names and build year of the cars with 'DJ' in its model name?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the model names and build year of the cars with 'DJ' in its model name?[SQL]\\nSELECT Model ,  Build_Year FROM vehicle WHERE Model LIKE '%DJ%'"
  },
  {
    "id": 176,
    "db_id": "vehicle_driver",
    "question": {
      "id": 176,
      "db_id": "vehicle_driver",
      "question": "Return the model and build year of cars that include \"DJ\" in their model names."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the model and build year of cars that include \"DJ\" in their model names.[SQL]\\nSELECT Model ,  Build_Year FROM vehicle WHERE Model LIKE \"%DJ%\""
  },
  {
    "id": 177,
    "db_id": "vehicle_driver",
    "question": {
      "id": 177,
      "db_id": "vehicle_driver",
      "question": "What are the models which have not been driven by any drivers?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the models which have not been driven by any drivers?[SQL]\\nSELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)"
  },
  {
    "id": 178,
    "db_id": "vehicle_driver",
    "question": {
      "id": 178,
      "db_id": "vehicle_driver",
      "question": "Return the models of vehicles that have never been driven."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the models of vehicles that have never been driven.[SQL]\\nSELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)"
  },
  {
    "id": 179,
    "db_id": "vehicle_driver",
    "question": {
      "id": 179,
      "db_id": "vehicle_driver",
      "question": "What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.[SQL]\\nSELECT T2.vehicle_id ,  T3.model FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id WHERE T3.Citizenship  =  'Ziyang' GROUP BY T2.vehicle_id HAVING count(*)  >=  2 UNION SELECT model FROM vehicle WHERE Builder  =  'Ziyang'"
  },
  {
    "id": 180,
    "db_id": "vehicle_driver",
    "question": {
      "id": 180,
      "db_id": "vehicle_driver",
      "question": "Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.[SQL]\\nSELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id HAVING count(*)  =  2 UNION SELECT vehicle_id ,  model FROM vehicle WHERE Builder  =  'Ziyang'"
  },
  {
    "id": 181,
    "db_id": "vehicle_driver",
    "question": {
      "id": 181,
      "db_id": "vehicle_driver",
      "question": "What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?[SQL]\\nSELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id HAVING count(*)  >  2 UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.driver_id  =  35406"
  },
  {
    "id": 182,
    "db_id": "vehicle_driver",
    "question": {
      "id": 182,
      "db_id": "vehicle_driver",
      "question": "Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.[SQL]\\nSELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id HAVING count(*)  >  2 UNION SELECT T1.vehicle_id ,  T1.model FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id WHERE T1.Name  =  'Jeff Gordon'"
  },
  {
    "id": 183,
    "db_id": "vehicle_driver",
    "question": {
      "id": 183,
      "db_id": "vehicle_driver",
      "question": "How many vehicles have maximum top speed?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many vehicles have maximum top speed?[SQL]\\nSELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)"
  },
  {
    "id": 184,
    "db_id": "vehicle_driver",
    "question": {
      "id": 184,
      "db_id": "vehicle_driver",
      "question": "Count the number of vehicles that have a top speed equal to the maximum across all vehicles."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of vehicles that have a top speed equal to the maximum across all vehicles.[SQL]\\nSELECT count(*) FROM vehicle WHERE Top_Speed  =  (SELECT max(Top_Speed) FROM vehicle)"
  },
  {
    "id": 185,
    "db_id": "vehicle_driver",
    "question": {
      "id": 185,
      "db_id": "vehicle_driver",
      "question": "Show all driver names in the alphabetical order."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all driver names in the alphabetical order.[SQL]\\nSELECT Name FROM Driver ORDER BY Name ASC"
  },
  {
    "id": 186,
    "db_id": "vehicle_driver",
    "question": {
      "id": 186,
      "db_id": "vehicle_driver",
      "question": "What are the names of drivers, returned in alphbetical order?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of drivers, returned in alphbetical order?[SQL]\\nSELECT Name FROM driver ORDER BY Name ASC"
  },
  {
    "id": 187,
    "db_id": "vehicle_driver",
    "question": {
      "id": 187,
      "db_id": "vehicle_driver",
      "question": "How many drivers have been racing in each racing series?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many drivers have been racing in each racing series?[SQL]\\nSELECT Racing_Series ,  COUNT(*) FROM driver GROUP BY Racing_Series"
  },
  {
    "id": 188,
    "db_id": "vehicle_driver",
    "question": {
      "id": 188,
      "db_id": "vehicle_driver",
      "question": "Count the number of drivers that have raced in each series."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of drivers that have raced in each series.[SQL]\\nSELECT Racing_Series ,  COUNT(*) FROM driver GROUP BY Racing_Series"
  },
  {
    "id": 189,
    "db_id": "vehicle_driver",
    "question": {
      "id": 189,
      "db_id": "vehicle_driver",
      "question": "What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?[SQL]\\nSELECT t2.Name ,  t2.Citizenship FROM vehicle AS t1 JOIN vehicle_driver AS t2 ON t1.Vehicle_ID  =  t2.Vehicle_ID WHERE t1.Model  =  \"DJ1\""
  },
  {
    "id": 190,
    "db_id": "vehicle_driver",
    "question": {
      "id": 190,
      "db_id": "vehicle_driver",
      "question": "Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.[SQL]\\n\\nSELECT T2.Name ,  T2.Citizenship FROM vehicle_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Vehicle_ID  =  (SELECT Vehicle_ID FROM vehicle WHERE Model  =  'DJ1')"
  },
  {
    "id": 191,
    "db_id": "vehicle_driver",
    "question": {
      "id": 191,
      "db_id": "vehicle_driver",
      "question": "How many drivers have not driven any cars?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many drivers have not driven any cars?[SQL]\\nSELECT count(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver)"
  },
  {
    "id": 192,
    "db_id": "vehicle_driver",
    "question": {
      "id": 192,
      "db_id": "vehicle_driver",
      "question": "Count the number of drivers who have not driven any vehicles."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE \"vehicle\" (\n\"Vehicle_ID\" int,\n\"Model\" text,\n\"Build_Year\" text,\n\"Top_Speed\" int,\n\"Power\" int,\n\"Builder\" text,\n\"Total_Production\" text,\nPRIMARY KEY (\"Vehicle_ID\")\n)\nCREATE TABLE \"driver\" (\n\"Driver_ID\" int,\n\"Name\" text,\n\"Citizenship\" text,\n\"Racing_Series\" text,\nPRIMARY KEY (\"Driver_ID\")\n)\nCREATE TABLE \"vehicle_driver\" (\n\"Driver_ID\" int,\n\"Vehicle_ID\" int,\nPRIMARY KEY (\"Driver_ID\",\"Vehicle_ID\"),\nFOREIGN KEY (\"Driver_ID\") REFERENCES \"driver\"(\"Driver_ID\"),\nFOREIGN KEY (\"Vehicle_ID\") REFERENCES \"vehicle\"(\"Vehicle_ID\")\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of drivers who have not driven any vehicles.[SQL]\\nSELECT count(*) FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM vehicle_driver)"
  },
  {
    "id": 193,
    "db_id": "online_exams",
    "question": {
      "id": 193,
      "db_id": "online_exams",
      "question": "How many exams are there?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many exams are there?[SQL]\\nSELECT count(*) FROM EXAMS"
  },
  {
    "id": 194,
    "db_id": "online_exams",
    "question": {
      "id": 194,
      "db_id": "online_exams",
      "question": "Count the number of exams."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of exams.[SQL]\\nSELECT count(*) FROM EXAMS"
  },
  {
    "id": 195,
    "db_id": "online_exams",
    "question": {
      "id": 195,
      "db_id": "online_exams",
      "question": "List the distinct subject code of exams in ascending alphabetical order ."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the distinct subject code of exams in ascending alphabetical order .[SQL]\\nSELECT DISTINCT subjecT_code FROM exams ORDER BY subjecT_code ASC"
  },
  {
    "id": 196,
    "db_id": "online_exams",
    "question": {
      "id": 196,
      "db_id": "online_exams",
      "question": "Give me an alphabetically ordered list of the distinct subject code for exams."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give me an alphabetically ordered list of the distinct subject code for exams.[SQL]\\nSELECT DISTINCT Subject_Code FROM EXAMS ORDER BY Subject_Code ASC\""
  },
  {
    "id": 197,
    "db_id": "online_exams",
    "question": {
      "id": 197,
      "db_id": "online_exams",
      "question": "What are the names and dates of the exams with subject code that is not \"Database\"?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names and dates of the exams with subject code that is not \"Database\"?[SQL]\\nSELECT exam_name ,  exam_date FROM EXAMS WHERE subject_code != 'Database'"
  },
  {
    "id": 198,
    "db_id": "online_exams",
    "question": {
      "id": 198,
      "db_id": "online_exams",
      "question": "Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?[SQL]\\nSELECT exam_date ,  exam_name FROM EXAMS WHERE subject_code != 'Database'"
  },
  {
    "id": 199,
    "db_id": "online_exams",
    "question": {
      "id": 199,
      "db_id": "online_exams",
      "question": "List the dates of the exams with subject code containing the word \"data\", in descending order of dates."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the dates of the exams with subject code containing the word \"data\", in descending order of dates.[SQL]\\nSELECT exam_date FROM exams WHERE subject_code LIKE '%data%' ORDER BY exam_date DESC"
  },
  {
    "id": 200,
    "db_id": "online_exams",
    "question": {
      "id": 200,
      "db_id": "online_exams",
      "question": "What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.[SQL]\\nSELECT exam_date FROM exams WHERE subject_code LIKE '%data%' ORDER BY exam_date DESC"
  },
  {
    "id": 201,
    "db_id": "online_exams",
    "question": {
      "id": 201,
      "db_id": "online_exams",
      "question": "What are the type of questions and their counts?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the type of questions and their counts?[SQL]\\nSELECT TYPE_OF_QUESTION_CODE ,  count(*) FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE"
  },
  {
    "id": 202,
    "db_id": "online_exams",
    "question": {
      "id": 202,
      "db_id": "online_exams",
      "question": "For each question type, return its type code and its count of occurrence."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each question type, return its type code and its count of occurrence.[SQL]\\nSELECT TYPE_OF_QUESTION_CODE ,  COUNT(*) FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE"
  },
  {
    "id": 203,
    "db_id": "online_exams",
    "question": {
      "id": 203,
      "db_id": "online_exams",
      "question": "What are the distinct student answer texts that received comments \"Normal\"?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct student answer texts that received comments \"Normal\"?[SQL]\\nSELECT student_answer_text FROM student_answers WHERE Comments  =  \"Normal\""
  },
  {
    "id": 204,
    "db_id": "online_exams",
    "question": {
      "id": 204,
      "db_id": "online_exams",
      "question": "List all the distinct student answer texts to which comments \"Normal\" were given?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all the distinct student answer texts to which comments \"Normal\" were given?[SQL]\\nSELECT T1.student_answer_text FROM student_answers AS T1 JOIN Student_Assessments AS T2 ON T1.student_answer_id  =  T2.student_answer_id WHERE T2.comments  =  \"Normal\"'"
  },
  {
    "id": 205,
    "db_id": "online_exams",
    "question": {
      "id": 205,
      "db_id": "online_exams",
      "question": "How many different comments are there for student answers?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many different comments are there for student answers?[SQL]\\nSELECT count(DISTINCT Comments) FROM Student_Answers"
  },
  {
    "id": 206,
    "db_id": "online_exams",
    "question": {
      "id": 206,
      "db_id": "online_exams",
      "question": "Count the number of different comments for student answers."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of different comments for student answers.[SQL]\\nSELECT count(DISTINCT Date_of_Answer) FROM Student_Answers"
  },
  {
    "id": 207,
    "db_id": "online_exams",
    "question": {
      "id": 207,
      "db_id": "online_exams",
      "question": "List all the student answer texts in descending order of count."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all the student answer texts in descending order of count.[SQL]\\nSELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY count(*) DESC\""
  },
  {
    "id": 208,
    "db_id": "online_exams",
    "question": {
      "id": 208,
      "db_id": "online_exams",
      "question": "Sort the student answer texts in descending order of their frequency of occurrence."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Sort the student answer texts in descending order of their frequency of occurrence.[SQL]\\nSELECT student_answer_text FROM student_answers GROUP BY student_answer_text ORDER BY count(*) DESC\""
  },
  {
    "id": 209,
    "db_id": "online_exams",
    "question": {
      "id": 209,
      "db_id": "online_exams",
      "question": "Please show the first names of students and the dates of their answers."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the first names of students and the dates of their answers.[SQL]\\nSELECT T1.first_name ,  T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.student_id  =  T2.student_id"
  },
  {
    "id": 210,
    "db_id": "online_exams",
    "question": {
      "id": 210,
      "db_id": "online_exams",
      "question": "For each student answer, find the first name of the student and the date of the answer."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each student answer, find the first name of the student and the date of the answer.[SQL]\\nSELECT T1.first_name ,  T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID  =  T2.Student_ID"
  },
  {
    "id": 211,
    "db_id": "online_exams",
    "question": {
      "id": 211,
      "db_id": "online_exams",
      "question": "Please show the email addresses of students and the dates of their answers in descending order of dates."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the email addresses of students and the dates of their answers in descending order of dates.[SQL]\\nSELECT T1.Email_Adress ,  T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T2.Date_of_Answer DESC"
  },
  {
    "id": 212,
    "db_id": "online_exams",
    "question": {
      "id": 212,
      "db_id": "online_exams",
      "question": "For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.[SQL]\\nSELECT T1.Email_Adress ,  T2.Date_of_Answer FROM Students AS T1 JOIN Student_Answers AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T2.Date_of_Answer DESC\""
  },
  {
    "id": 213,
    "db_id": "online_exams",
    "question": {
      "id": 213,
      "db_id": "online_exams",
      "question": "Please show the least common assessment for students."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the least common assessment for students.[SQL]\\nSELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "id": 214,
    "db_id": "online_exams",
    "question": {
      "id": 214,
      "db_id": "online_exams",
      "question": "Which assessment has the smallest frequency count?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which assessment has the smallest frequency count?[SQL]\\nSELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "id": 215,
    "db_id": "online_exams",
    "question": {
      "id": 215,
      "db_id": "online_exams",
      "question": "Please show the first names of the students that have at least two answer records."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Please show the first names of the students that have at least two answer records.[SQL]\\nSELECT T1.first_name FROM students AS T1 JOIN student_answers AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2"
  },
  {
    "id": 216,
    "db_id": "online_exams",
    "question": {
      "id": 216,
      "db_id": "online_exams",
      "question": "Which students have 2 or more answer records? Give me their first names."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which students have 2 or more answer records? Give me their first names.[SQL]\\nSELECT T1.first_name FROM students AS T1 JOIN student_answers AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2"
  },
  {
    "id": 217,
    "db_id": "online_exams",
    "question": {
      "id": 217,
      "db_id": "online_exams",
      "question": "What is the most common valid answer text?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the most common valid answer text?[SQL]\\nSELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "id": 218,
    "db_id": "online_exams",
    "question": {
      "id": 218,
      "db_id": "online_exams",
      "question": "Find the valid answer text that appeared most frequently."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Find the valid answer text that appeared most frequently.[SQL]\\nSELECT T1.valid_answer_text FROM questions AS T1 JOIN valid_answers AS T2 ON T1.question_id  =  T2.question_id GROUP BY T2.valid_answer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "id": 219,
    "db_id": "online_exams",
    "question": {
      "id": 219,
      "db_id": "online_exams",
      "question": "List the last names of the students whose gender is not \"M\"."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the last names of the students whose gender is not \"M\".[SQL]\\nSELECT Last_Name FROM Students WHERE Gender_MFU != 'M'"
  },
  {
    "id": 220,
    "db_id": "online_exams",
    "question": {
      "id": 220,
      "db_id": "online_exams",
      "question": "What are the last names of the students with gender other than \"M\"?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the last names of the students with gender other than \"M\"?[SQL]\\nSELECT Last_Name FROM Students WHERE Gender_MFU  !=  'M'"
  },
  {
    "id": 221,
    "db_id": "online_exams",
    "question": {
      "id": 221,
      "db_id": "online_exams",
      "question": "List each gender and the corresponding number of students."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List each gender and the corresponding number of students.[SQL]\\nSELECT Gender_MFU ,  count(*) FROM Students GROUP BY Gender_MFU"
  },
  {
    "id": 222,
    "db_id": "online_exams",
    "question": {
      "id": 222,
      "db_id": "online_exams",
      "question": "For each gender, return the gender code and the number of students who identify as that gender."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, For each gender, return the gender code and the number of students who identify as that gender.[SQL]\\nSELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU"
  },
  {
    "id": 223,
    "db_id": "online_exams",
    "question": {
      "id": 223,
      "db_id": "online_exams",
      "question": "List the last names of the students whose gender is \"F\" or \"M\"."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the last names of the students whose gender is \"F\" or \"M\".[SQL]\\nSELECT Last_Name FROM Students WHERE Gender  =  'F' OR Gender  =  'M'"
  },
  {
    "id": 224,
    "db_id": "online_exams",
    "question": {
      "id": 224,
      "db_id": "online_exams",
      "question": "Which students identify their gender as \"F\" or \"M\"? Give me their last names."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which students identify their gender as \"F\" or \"M\"? Give me their last names.[SQL]\\nSELECT Last_Name FROM Students WHERE Gender_MFU  =  'F' OR Gender_MFU  =  'M'"
  },
  {
    "id": 225,
    "db_id": "online_exams",
    "question": {
      "id": 225,
      "db_id": "online_exams",
      "question": "List the first names of the students who do not have any answers."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List the first names of the students who do not have any answers.[SQL]\\nSELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)"
  },
  {
    "id": 226,
    "db_id": "online_exams",
    "question": {
      "id": 226,
      "db_id": "online_exams",
      "question": "Which students do not have any answers? Find their first names."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which students do not have any answers? Find their first names.[SQL]\\nSELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)"
  },
  {
    "id": 227,
    "db_id": "online_exams",
    "question": {
      "id": 227,
      "db_id": "online_exams",
      "question": "Show the student answer texts that received both \"Normal\" and \"Absent\" as comments."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.[SQL]\\nSELECT T1.student_answer_text FROM student_answers AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.Cell_Mobile_Phone  =  \"0544773194\" AND T1.Comments  =  \"Normal\" INTERSECT SELECT T1.student_answer_text FROM student_answers AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.Cell_Mobile_Phone  =  \"0544773194\" AND T1.Comments  =  \"Absent\""
  },
  {
    "id": 228,
    "db_id": "online_exams",
    "question": {
      "id": 228,
      "db_id": "online_exams",
      "question": "Which student answer texts were given both \"Normal\" and \"Absent\" as comments?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which student answer texts were given both \"Normal\" and \"Absent\" as comments?[SQL]\\nSELECT T1.student_answer_text FROM student_answers AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.Cell_Mobile_Phone  =  \"Normal\" INTERSECT SELECT T1.student_answer_text FROM student_answers AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.Cell_Mobile_Phone  =  \"Absent\""
  },
  {
    "id": 229,
    "db_id": "online_exams",
    "question": {
      "id": 229,
      "db_id": "online_exams",
      "question": "Show the types of questions that have at least three questions."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the types of questions that have at least three questions.[SQL]\\nSELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE HAVING COUNT(*)  >=  3"
  },
  {
    "id": 230,
    "db_id": "online_exams",
    "question": {
      "id": 230,
      "db_id": "online_exams",
      "question": "Which types of questions have 3 or more questions? Return the questions type code."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Which types of questions have 3 or more questions? Return the questions type code.[SQL]\\nSELECT TYPE_OF_QUESTION_CODE FROM QUESTIONS GROUP BY TYPE_OF_QUESTION_CODE HAVING count(*)  >=  3"
  },
  {
    "id": 231,
    "db_id": "online_exams",
    "question": {
      "id": 231,
      "db_id": "online_exams",
      "question": "Show all information on students."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all information on students.[SQL]\\nSELECT * FROM Students"
  },
  {
    "id": 232,
    "db_id": "online_exams",
    "question": {
      "id": 232,
      "db_id": "online_exams",
      "question": "What is al the available information of each student?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n)\nCREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n)\nCREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n)\nCREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n)\nCREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n)\nCREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n)\nCREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is al the available information of each student?[SQL]\\nSELECT * FROM Students"
  },
  {
    "id": 233,
    "db_id": "customers_and_orders",
    "question": {
      "id": 233,
      "db_id": "customers_and_orders",
      "question": "How many addresses do we have?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many addresses do we have?[SQL]\\nSELECT count(*) FROM addresses"
  },
  {
    "id": 234,
    "db_id": "customers_and_orders",
    "question": {
      "id": 234,
      "db_id": "customers_and_orders",
      "question": "Count the number of addresses."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of addresses.[SQL]\\nSELECT count(*) FROM addresses"
  },
  {
    "id": 235,
    "db_id": "customers_and_orders",
    "question": {
      "id": 235,
      "db_id": "customers_and_orders",
      "question": "List all address ids and address details."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all address ids and address details.[SQL]\\nSELECT address_id ,  address_details FROM addresses"
  },
  {
    "id": 236,
    "db_id": "customers_and_orders",
    "question": {
      "id": 236,
      "db_id": "customers_and_orders",
      "question": "What are all the address ids and address details?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are all the address ids and address details?[SQL]\\nSELECT address_id ,  address_details FROM Addresses"
  },
  {
    "id": 237,
    "db_id": "customers_and_orders",
    "question": {
      "id": 237,
      "db_id": "customers_and_orders",
      "question": "How many products do we have?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many products do we have?[SQL]\\nSELECT count(*) FROM products"
  },
  {
    "id": 238,
    "db_id": "customers_and_orders",
    "question": {
      "id": 238,
      "db_id": "customers_and_orders",
      "question": "Count the number of products."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of products.[SQL]\\nSELECT count(*) FROM products"
  },
  {
    "id": 239,
    "db_id": "customers_and_orders",
    "question": {
      "id": 239,
      "db_id": "customers_and_orders",
      "question": "Show all product ids, product type codes, and product name."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all product ids, product type codes, and product name.[SQL]\\nSELECT product_id ,  product_type_code ,  product_name FROM products"
  },
  {
    "id": 240,
    "db_id": "customers_and_orders",
    "question": {
      "id": 240,
      "db_id": "customers_and_orders",
      "question": "What are the ids, type codes, and names for all products?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids, type codes, and names for all products?[SQL]\\nSELECT product_id ,  product_type_code ,  product_name FROM products"
  },
  {
    "id": 241,
    "db_id": "customers_and_orders",
    "question": {
      "id": 241,
      "db_id": "customers_and_orders",
      "question": "What is the price for the product with name Monitor?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the price for the product with name Monitor?[SQL]\\nSELECT product_price FROM products WHERE product_name  =  'Monitor'"
  },
  {
    "id": 242,
    "db_id": "customers_and_orders",
    "question": {
      "id": 242,
      "db_id": "customers_and_orders",
      "question": "Give the price of the Monitor product."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the price of the Monitor product.[SQL]\\nSELECT product_price FROM products WHERE product_name  =  'Monitor'"
  },
  {
    "id": 243,
    "db_id": "customers_and_orders",
    "question": {
      "id": 243,
      "db_id": "customers_and_orders",
      "question": "Show the minimum, average, maximum price for all products."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the minimum, average, maximum price for all products.[SQL]\\nSELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM products"
  },
  {
    "id": 244,
    "db_id": "customers_and_orders",
    "question": {
      "id": 244,
      "db_id": "customers_and_orders",
      "question": "What are the minimum, average, and maximum prices across all products?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the minimum, average, and maximum prices across all products?[SQL]\\nSELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM products"
  },
  {
    "id": 245,
    "db_id": "customers_and_orders",
    "question": {
      "id": 245,
      "db_id": "customers_and_orders",
      "question": "What is the average price for products with type Clothes?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average price for products with type Clothes?[SQL]\\nSELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'"
  },
  {
    "id": 246,
    "db_id": "customers_and_orders",
    "question": {
      "id": 246,
      "db_id": "customers_and_orders",
      "question": "Return the average price of Clothes."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Return the average price of Clothes.[SQL]\\nSELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'"
  },
  {
    "id": 247,
    "db_id": "customers_and_orders",
    "question": {
      "id": 247,
      "db_id": "customers_and_orders",
      "question": "How many hardware type products do we have?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many hardware type products do we have?[SQL]\\nSELECT count(*) FROM products WHERE product_type_code  =  'Hardware'"
  },
  {
    "id": 248,
    "db_id": "customers_and_orders",
    "question": {
      "id": 248,
      "db_id": "customers_and_orders",
      "question": "Count the number of products of the type Hardware."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of products of the type Hardware.[SQL]\\nSELECT count(*) FROM products WHERE product_type_code  =  'Hardware'"
  },
  {
    "id": 249,
    "db_id": "customers_and_orders",
    "question": {
      "id": 249,
      "db_id": "customers_and_orders",
      "question": "Show all product names with price higher than the average."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all product names with price higher than the average.[SQL]\\nSELECT product_name FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)"
  },
  {
    "id": 250,
    "db_id": "customers_and_orders",
    "question": {
      "id": 250,
      "db_id": "customers_and_orders",
      "question": "What are the names of products that have a price above the average for all products."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of products that have a price above the average for all products.[SQL]\\nSELECT product_name FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)"
  },
  {
    "id": 251,
    "db_id": "customers_and_orders",
    "question": {
      "id": 251,
      "db_id": "customers_and_orders",
      "question": "Show all hardware product names with price higher than the average price of hardware type products."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all hardware product names with price higher than the average price of hardware type products.[SQL]\\nSELECT product_name FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products WHERE product_type_code  =  'hardware')"
  },
  {
    "id": 252,
    "db_id": "customers_and_orders",
    "question": {
      "id": 252,
      "db_id": "customers_and_orders",
      "question": "What are the names of Hardware product with prices above the average price of Hardware products."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of Hardware product with prices above the average price of Hardware products.[SQL]\\nSELECT product_name FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products WHERE product_type_code  =  'Hardware')"
  },
  {
    "id": 253,
    "db_id": "customers_and_orders",
    "question": {
      "id": 253,
      "db_id": "customers_and_orders",
      "question": "What is the name of the most expensive product with type Clothes?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the name of the most expensive product with type Clothes?[SQL]\\nSELECT product_name FROM products WHERE product_type_code  =  \"Clothes\" ORDER BY product_price DESC LIMIT 1"
  },
  {
    "id": 254,
    "db_id": "customers_and_orders",
    "question": {
      "id": 254,
      "db_id": "customers_and_orders",
      "question": "Give the name of the most expensive Clothes product."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the name of the most expensive Clothes product.[SQL]\\nSELECT product_name FROM products WHERE product_type_code  =  \"Clothes\" ORDER BY product_price DESC LIMIT 1"
  },
  {
    "id": 255,
    "db_id": "customers_and_orders",
    "question": {
      "id": 255,
      "db_id": "customers_and_orders",
      "question": "What is the product id and product name for the cheapest Hardware type product?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the product id and product name for the cheapest Hardware type product?[SQL]\\nSELECT product_id ,  product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price LIMIT 1"
  },
  {
    "id": 256,
    "db_id": "customers_and_orders",
    "question": {
      "id": 256,
      "db_id": "customers_and_orders",
      "question": "Give the id and name of the cheapest Hardware product."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the id and name of the cheapest Hardware product.[SQL]\\nSELECT product_id ,  product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price LIMIT 1"
  },
  {
    "id": 257,
    "db_id": "customers_and_orders",
    "question": {
      "id": 257,
      "db_id": "customers_and_orders",
      "question": "List all product names in descending order of price."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all product names in descending order of price.[SQL]\\nSELECT product_name FROM products ORDER BY product_price DESC"
  },
  {
    "id": 258,
    "db_id": "customers_and_orders",
    "question": {
      "id": 258,
      "db_id": "customers_and_orders",
      "question": "What are the names of the products, sorted by descending price?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of the products, sorted by descending price?[SQL]\\nSELECT product_name FROM products ORDER BY product_price DESC"
  },
  {
    "id": 259,
    "db_id": "customers_and_orders",
    "question": {
      "id": 259,
      "db_id": "customers_and_orders",
      "question": "Show all hardware type products in ascending order of price."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all hardware type products in ascending order of price.[SQL]\\nSELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price ASC"
  },
  {
    "id": 260,
    "db_id": "customers_and_orders",
    "question": {
      "id": 260,
      "db_id": "customers_and_orders",
      "question": "What are the names of all Hardware products, sorted by price ascending?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of all Hardware products, sorted by price ascending?[SQL]\\nSELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price ASC"
  },
  {
    "id": 261,
    "db_id": "customers_and_orders",
    "question": {
      "id": 261,
      "db_id": "customers_and_orders",
      "question": "List all product type codes and the number of products in each type."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, List all product type codes and the number of products in each type.[SQL]\\nSELECT product_type_code ,  count(*) FROM products GROUP BY product_type_code"
  },
  {
    "id": 262,
    "db_id": "customers_and_orders",
    "question": {
      "id": 262,
      "db_id": "customers_and_orders",
      "question": "How many products are there for each product type?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many products are there for each product type?[SQL]\\nSELECT product_type_code ,  count(*) FROM products GROUP BY product_type_code"
  },
  {
    "id": 263,
    "db_id": "customers_and_orders",
    "question": {
      "id": 263,
      "db_id": "customers_and_orders",
      "question": "Show all product type codes and the average price for each type."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all product type codes and the average price for each type.[SQL]\\nSELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code"
  },
  {
    "id": 264,
    "db_id": "customers_and_orders",
    "question": {
      "id": 264,
      "db_id": "customers_and_orders",
      "question": "What is the average price of products for each product type?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the average price of products for each product type?[SQL]\\nSELECT avg(product_price) ,  product_type_code FROM products GROUP BY product_type_code"
  },
  {
    "id": 265,
    "db_id": "customers_and_orders",
    "question": {
      "id": 265,
      "db_id": "customers_and_orders",
      "question": "What are the product type code with at least two products?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the product type code with at least two products?[SQL]\\nSELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2"
  },
  {
    "id": 266,
    "db_id": "customers_and_orders",
    "question": {
      "id": 266,
      "db_id": "customers_and_orders",
      "question": "Give the product type codes of product types that have two or more products."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the product type codes of product types that have two or more products.[SQL]\\nSELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2"
  },
  {
    "id": 267,
    "db_id": "customers_and_orders",
    "question": {
      "id": 267,
      "db_id": "customers_and_orders",
      "question": "What is the product type code with most number of products?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the product type code with most number of products?[SQL]\\nSELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "id": 268,
    "db_id": "customers_and_orders",
    "question": {
      "id": 268,
      "db_id": "customers_and_orders",
      "question": "What is the most frequent product type code?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the most frequent product type code?[SQL]\\nSELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "id": 269,
    "db_id": "customers_and_orders",
    "question": {
      "id": 269,
      "db_id": "customers_and_orders",
      "question": "How many customers do we have?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many customers do we have?[SQL]\\nSELECT count(*) FROM Customers"
  },
  {
    "id": 270,
    "db_id": "customers_and_orders",
    "question": {
      "id": 270,
      "db_id": "customers_and_orders",
      "question": "Count the number of customers."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of customers.[SQL]\\nSELECT count(*) FROM Customers"
  },
  {
    "id": 271,
    "db_id": "customers_and_orders",
    "question": {
      "id": 271,
      "db_id": "customers_and_orders",
      "question": "Show all customer ids and customer names."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all customer ids and customer names.[SQL]\\nSELECT customer_id ,  customer_name FROM Customers"
  },
  {
    "id": 272,
    "db_id": "customers_and_orders",
    "question": {
      "id": 272,
      "db_id": "customers_and_orders",
      "question": "What are the ids and names of all customers?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids and names of all customers?[SQL]\\nSELECT customer_id ,  customer_name FROM Customers"
  },
  {
    "id": 273,
    "db_id": "customers_and_orders",
    "question": {
      "id": 273,
      "db_id": "customers_and_orders",
      "question": "What is the customer address, customer phone, and customer email for Jeromy?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the customer address, customer phone, and customer email for Jeromy?[SQL]\\nSELECT address_details ,  customer_phone ,  customer_email FROM Addresses AS T1 JOIN Customers AS T2 ON T1.address_id  =  T2.address_id WHERE customer_name  =  'Jeromy'"
  },
  {
    "id": 274,
    "db_id": "customers_and_orders",
    "question": {
      "id": 274,
      "db_id": "customers_and_orders",
      "question": "Give the address, phone, and email for customers with the name Jeromy."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the address, phone, and email for customers with the name Jeromy.[SQL]\\nSELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  'Jeromy'"
  },
  {
    "id": 275,
    "db_id": "customers_and_orders",
    "question": {
      "id": 275,
      "db_id": "customers_and_orders",
      "question": "Show all payment method codes and the number of customers in each code."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all payment method codes and the number of customers in each code.[SQL]\\nSELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code"
  },
  {
    "id": 276,
    "db_id": "customers_and_orders",
    "question": {
      "id": 276,
      "db_id": "customers_and_orders",
      "question": "How many customers use each payment method?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many customers use each payment method?[SQL]\\nSELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code"
  },
  {
    "id": 277,
    "db_id": "customers_and_orders",
    "question": {
      "id": 277,
      "db_id": "customers_and_orders",
      "question": "What is the payment method code used by most number of customers?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the payment method code used by most number of customers?[SQL]\\nSELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "id": 278,
    "db_id": "customers_and_orders",
    "question": {
      "id": 278,
      "db_id": "customers_and_orders",
      "question": "Give the code of the payment method that is most commonly used."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the code of the payment method that is most commonly used.[SQL]\\nSELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "id": 279,
    "db_id": "customers_and_orders",
    "question": {
      "id": 279,
      "db_id": "customers_and_orders",
      "question": "Show all customer names with the  payment method code used by least number of customers."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all customer names with the  payment method code used by least number of customers.[SQL]\\nSELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Customer_Orders WHERE payment_method_code  =  (SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1))"
  },
  {
    "id": 280,
    "db_id": "customers_and_orders",
    "question": {
      "id": 280,
      "db_id": "customers_and_orders",
      "question": "What are the names of customers who use the least common payment method?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names of customers who use the least common payment method?[SQL]\\nSELECT customer_name FROM customers WHERE payment_method_code  =  (SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)"
  },
  {
    "id": 281,
    "db_id": "customers_and_orders",
    "question": {
      "id": 281,
      "db_id": "customers_and_orders",
      "question": "What is the payment method and customer number for customer named Jeromy?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the payment method and customer number for customer named Jeromy?[SQL]\\nSELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  \"Jeromy\""
  },
  {
    "id": 282,
    "db_id": "customers_and_orders",
    "question": {
      "id": 282,
      "db_id": "customers_and_orders",
      "question": "Give the payment method code and customer number corresponding to the customer named Jeromy."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the payment method code and customer number corresponding to the customer named Jeromy.[SQL]\\nSELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  \"Jeromy\""
  },
  {
    "id": 283,
    "db_id": "customers_and_orders",
    "question": {
      "id": 283,
      "db_id": "customers_and_orders",
      "question": "What are the distinct payment methods used by customers?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the distinct payment methods used by customers?[SQL]\\nSELECT DISTINCT payment_method_code FROM Customers"
  },
  {
    "id": 284,
    "db_id": "customers_and_orders",
    "question": {
      "id": 284,
      "db_id": "customers_and_orders",
      "question": "Give the different payment method codes that customers use."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the different payment method codes that customers use.[SQL]\\nSELECT DISTINCT payment_method_code FROM Customers"
  },
  {
    "id": 285,
    "db_id": "customers_and_orders",
    "question": {
      "id": 285,
      "db_id": "customers_and_orders",
      "question": "Show the id and the product type for all products, order by product name."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the id and the product type for all products, order by product name.[SQL]\\nSELECT product_id ,  product_type_code FROM products ORDER BY product_name"
  },
  {
    "id": 286,
    "db_id": "customers_and_orders",
    "question": {
      "id": 286,
      "db_id": "customers_and_orders",
      "question": "What are the ids and product types for all products, sorted alphabetically by product name?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the ids and product types for all products, sorted alphabetically by product name?[SQL]\\nSELECT product_id ,  product_type_code FROM products ORDER BY product_name ASC"
  },
  {
    "id": 287,
    "db_id": "customers_and_orders",
    "question": {
      "id": 287,
      "db_id": "customers_and_orders",
      "question": "What is the product type with least number of products?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the product type with least number of products?[SQL]\\nSELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "id": 288,
    "db_id": "customers_and_orders",
    "question": {
      "id": 288,
      "db_id": "customers_and_orders",
      "question": "What is the code of the product type that is least common?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the code of the product type that is least common?[SQL]\\nSELECT product_type_code FROM products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1"
  },
  {
    "id": 289,
    "db_id": "customers_and_orders",
    "question": {
      "id": 289,
      "db_id": "customers_and_orders",
      "question": "How many customer orders do we have?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, How many customer orders do we have?[SQL]\\nSELECT count(*) FROM customer_orders"
  },
  {
    "id": 290,
    "db_id": "customers_and_orders",
    "question": {
      "id": 290,
      "db_id": "customers_and_orders",
      "question": "Count the number of customer orders."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Count the number of customer orders.[SQL]\\nSELECT count(*) FROM customer_orders"
  },
  {
    "id": 291,
    "db_id": "customers_and_orders",
    "question": {
      "id": 291,
      "db_id": "customers_and_orders",
      "question": "Show the order ids, order dates, and order status codes for all orders by customer Jeromy."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show the order ids, order dates, and order status codes for all orders by customer Jeromy.[SQL]\\nSELECT T1.order_id ,  T1.order_date ,  T1.order_status_code FROM Customer_Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  \"Jeromy\""
  },
  {
    "id": 292,
    "db_id": "customers_and_orders",
    "question": {
      "id": 292,
      "db_id": "customers_and_orders",
      "question": "What were the ids, dates, and status codes for orders made by Jeromy?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What were the ids, dates, and status codes for orders made by Jeromy?[SQL]\\nSELECT T1.order_id ,  T1.order_date ,  T1.order_status_code FROM customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  \"Jeromy\""
  },
  {
    "id": 293,
    "db_id": "customers_and_orders",
    "question": {
      "id": 293,
      "db_id": "customers_and_orders",
      "question": "Show all customer names, ids and the number of orders by each customer."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all customer names, ids and the number of orders by each customer.[SQL]\\nSELECT T1.customer_name ,  T1.customer_id ,  count(*) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC\""
  },
  {
    "id": 294,
    "db_id": "customers_and_orders",
    "question": {
      "id": 294,
      "db_id": "customers_and_orders",
      "question": "What are the names, ids, and number of orders made for each customer?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What are the names, ids, and number of orders made for each customer?[SQL]\\nSELECT T1.customer_name ,  T1.customer_id ,  count(*) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id"
  },
  {
    "id": 295,
    "db_id": "customers_and_orders",
    "question": {
      "id": 295,
      "db_id": "customers_and_orders",
      "question": "What is the customer id, name, phone, and email for the customer with most orders?"
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, What is the customer id, name, phone, and email for the customer with most orders?[SQL]\\nSELECT T1.customer_id ,  T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM Customers AS T1 JOIN Customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "id": 296,
    "db_id": "customers_and_orders",
    "question": {
      "id": 296,
      "db_id": "customers_and_orders",
      "question": "Give the id, name, phone, and email corresponding to the customer who made the most orders."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Give the id, name, phone, and email corresponding to the customer who made the most orders.[SQL]\\nSELECT T1.customer_id ,  T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1"
  },
  {
    "id": 297,
    "db_id": "customers_and_orders",
    "question": {
      "id": 297,
      "db_id": "customers_and_orders",
      "question": "Show all order status and the number of orders in each status."
    },
    "answer": "### Database Schema\\n\\n['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n)\nCREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n)\nCREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n)\nCREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n)\nCREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n)\n']\\n\\n\\n### Task \\n\\nBased on the provided database schema information, Show all order status and the number of orders in each status.[SQL]\\nSELECT order_status_code ,  count(*) FROM customer_orders GROUP BY order_status_code"
  }
]