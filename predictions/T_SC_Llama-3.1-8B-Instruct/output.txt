SELECT COUNT(Club_ID) FROM club
SELECT COUNT(Club_ID) FROM club
SELECT Name FROM club ORDER BY Name ASC
SELECT Name FROM club ORDER BY Name ASC
SELECT Manager, Captain FROM club
SELECT Manager, Captain FROM club
SELECT Name FROM club WHERE Manufacturer!= 'Nike'
SELECT Name FROM club WHERE Manufacturer!= 'Nike'
SELECT Name FROM player ORDER BY Wins_count ASC
SELECT Name FROM player ORDER BY Wins_count ASC
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000
SELECT Country FROM player WHERE Earnings > 1200000
 SELECT T1.Country FROM ( SELECT T1.Country, T1.Player_ID FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Wins_count > 2 ORDER BY T1.Earnings DESC LIMIT 1 ) AS T3
SELECT T2.Country FROM player AS T1 INNER JOIN player AS T2 ON T1.Earnings < T2.Earnings WHERE T1.Wins_count > 2 ORDER BY T2.Earnings DESC LIMIT 1
SELECT T1.Name, T2.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID
SELECT T1.Name, T2.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID
SELECT T1.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T2.Club_ID HAVING SUM(T2.Wins_count) > 2
SELECT T1.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T2.Club_ID HAVING SUM(T2.Wins_count) > 2
SELECT T2.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Manager = 'Sam Allardyce'
SELECT T2.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Manager = 'Sam Allardyce'
SELECT T1.Name FROM club AS T1 INNER JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.Club_ID ORDER BY AVG(T2.Earnings) DESC
SELECT Name FROM club ORDER BY ( SELECT AVG(Earnings) FROM player WHERE player.Club_ID = club.Club_ID ) DESC
SELECT Manufacturer, COUNT(Club_ID) FROM club GROUP BY Manufacturer
SELECT Manufacturer, COUNT(Club_ID) FROM club GROUP BY Manufacturer
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(Club_ID) DESC LIMIT 1
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(Manufacturer) DESC LIMIT 1
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Manufacturer) > 1
SELECT Country FROM player GROUP BY Country HAVING COUNT(Country) > 1
SELECT Country FROM player GROUP BY Country HAVING COUNT(Player_ID) > 1
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)
SELECT Country FROM player WHERE Earnings > 1400000 UNION SELECT Country FROM player WHERE Earnings < 1100000
 SELECT T2.Country  FROM player AS T1  INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID  WHERE T1.Earnings > 1400000  INTERSECT  SELECT T2.Country  FROM player AS T1  INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID  WHERE T1.Earnings < 1100000
SELECT COUNT(DISTINCT Country) FROM player
SELECT COUNT(DISTINCT Country) FROM player
SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'
SELECT Earnings FROM player WHERE Country = 'Australia' OR Country = 'Zimbabwe'
SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name  FROM Customers AS T1  JOIN Orders AS T2 ON T1.customer_id = T2.customer_id  JOIN Order_Items AS T3 ON T2.order_id = T3.order_id  GROUP BY T1.customer_id  HAVING COUNT(T2.order_id) > 2 AND COUNT(T3.order_item_id) > 3
SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name  FROM Customers AS T1  JOIN Orders AS T2 ON T1.customer_id = T2.customer_id  GROUP BY T1.customer_id  HAVING COUNT(T2.order_id) > 2 AND COUNT(DISTINCT T2.order_id) > 2
SELECT T1.order_id, T1.order_status_code, COUNT(T2.order_item_id) FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id
SELECT COUNT(T1.order_item_id) AS num_products, T2.order_status_code, T2.order_id  FROM Order_Items AS T1  JOIN Orders AS T2 ON T1.order_id = T2.order_id
SELECT DISTINCT T1.date_order_placed  FROM Orders AS T1  INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id
 SELECT MIN(T1.date_order_placed) AS earliest_order_date,         T2.order_id,         T1.date_order_placed  FROM Orders AS T1  JOIN Order_Items AS T2 ON T1.order_id = T2.order_id  GROUP BY T2.order_id  HAVING COUNT(T2.order_id) > 1
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders)
SELECT T1.product_id, T1.product_name, T1.product_price, T1.product_color  FROM Products AS T1  LEFT JOIN Order_Items AS T2 ON T1.product_id = T2.product_id  GROUP BY T1.product_id  HAVING COUNT(T2.order_id) < 2
SELECT T1.product_id, T1.product_name, T1.product_price, T1.product_color  FROM Products AS T1  WHERE T1.product_id NOT IN ( SELECT T2.product_id                               FROM Order_Items AS T2                               GROUP BY T2.product_id                               HAVING COUNT(T2.product_id) >= 2 );
SELECT T1.order_id, T1.`date_order_placed`  FROM Orders AS T1  JOIN Order_Items AS T2 ON T1.order_id = T2.order_id  GROUP BY T1.order_id  HAVING COUNT(T2.order_item_id) >= 2
SELECT T1.order_id, T1.date_order_placed  FROM Orders AS T1  JOIN Order_Items AS T2 ON T1.order_id = T2.order_id  GROUP BY T1.order_id  HAVING COUNT(T2.order_id) >= 2
SELECT T1.product_id, T1.product_name, T1.product_price  FROM Products AS T1  JOIN Order_Items AS T2 ON T1.product_id = T2.product_id  GROUP BY T1.product_id  ORDER BY COUNT(T2.order_id) DESC
SELECT T1.product_id, T1.product_name, T1.product_price  FROM Products AS T1  JOIN ( SELECT product_id, COUNT(order_id) AS order_count         FROM Order_Items         GROUP BY product_id         ORDER BY order_count DESC         LIMIT 1 ) AS T2  ON T1.product_id = T2.product_id
 SELECT T1.order_id, SUM(T2.product_price) FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY SUM(T2.product_price) ASC LIMIT 1
 SELECT T1.order_id, SUM(T1.product_price) AS total_cost FROM ( SELECT O.order_id, SUM(P.product_price) AS product_price FROM Orders O INNER JOIN Order_Items I ON O.order_id = I.order_id INNER JOIN Products P ON I.product_id = P.product_id GROUP BY O.order_id ) AS T1 GROUP BY T1.order_id ORDER BY T1.product_price ASC LIMIT 1
SELECT T1.payment_method_code FROM Customer_Payment_Methods AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.payment_method_code ORDER BY COUNT(T1.payment_method_code) DESC LIMIT 1
SELECT T1.payment_method_code FROM Customer_Payment_Methods AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.payment_method_code ORDER BY COUNT(T1.payment_method_code) DESC LIMIT 1
 SELECT T1.gender_code, COUNT(T2.order_id) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Order_Items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.gender_code
 SELECT T1.gender_code, COUNT(T2.product_id) FROM Customers AS T1 INNER JOIN Orders AS T3 ON T1.customer_id = T3.customer_id INNER JOIN Order_Items AS T2 ON T3.order_id = T2.order_id GROUP BY T1.gender_code
SELECT T1.gender_code, COUNT(T2.order_id) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.gender_code
SELECT T1.gender_code, COUNT(T2.order_id) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.gender_code
 SELECT C.customer_first_name, C.customer_middle_initial, C.customer_last_name, PM.payment_method_code  FROM Customers C  JOIN Customer_Payment_Methods CMPM ON C.customer_id = CMPM.customer_id  JOIN Customer_Payment_Methods PM ON C.customer_id = PM.customer_id
SELECT T1.customer_first_name, T1.customer_middle_initial, T1.customer_last_name, T2.payment_method_code FROM Customers AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id
SELECT T1.invoice_status_code, T1.invoice_date, T3.shipment_date  FROM Invoices AS T1  LEFT JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number  LEFT JOIN Shipments AS T3 ON T3.invoice_number = T1.invoice_number
SELECT invoice_status_code, invoice_date, shipment_date FROM Invoices LEFT JOIN Shipments ON Invoices.invoice_number = Shipments.invoice_number
SELECT T1.product_name, T3.shipment_date  FROM Products AS T1  JOIN Order_Items AS T2 ON T1.product_id = T2.product_id  JOIN Shipments AS T3 ON T2.order_id = T3.order_id
SELECT T1.product_name, T2.shipment_date  FROM Products AS T1  INNER JOIN Shipment_Items AS T3 ON T1.product_id = T3.order_item_id  INNER JOIN Shipments AS T2 ON T3.shipment_id = T2.shipment_id
 SELECT T1.order_item_status_code, T3.shipment_tracking_number  FROM Order_Items AS T1  INNER JOIN Shipment_Items AS T2 ON T1.order_item_id = T2.order_item_id  INNER JOIN Shipments AS T3 ON T2.shipment_id = T3.shipment_id
 SELECT T1.order_item_status_code, T3.shipment_tracking_number  FROM Order_Items AS T1  JOIN Shipment_Items AS T2 ON T1.order_item_id = T2.order_item_id  JOIN Shipments AS T3 ON T2.shipment_id = T3.shipment_id
SELECT T1.product_name, T1.product_color  FROM Products AS T1  INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id  INNER JOIN Shipment_Items AS T3 ON T2.order_item_id = T3.order_item_id
SELECT T1.product_name, T1.product_color  FROM Products AS T1  INNER JOIN Shipment_Items AS T2 ON T1.product_id = T2.order_item_id
SELECT DISTINCT T1.product_name, T1.product_price, T1.product_description  FROM Products AS T1  JOIN Order_Items AS T2 ON T1.product_id = T2.product_id  JOIN Orders AS T3 ON T2.order_id = T3.order_id  JOIN Customers AS T4 ON T3.customer_id = T4.customer_id  WHERE T4.gender_code = 'F'
SELECT DISTINCT T1.product_name, T1.product_price, T1.product_description  FROM Products AS T1  JOIN Order_Items AS T2 ON T1.product_id = T2.product_id  JOIN Orders AS T3 ON T2.order_id = T3.order_id  JOIN Customers AS T4 ON T3.customer_id = T4.customer_id  WHERE T4.gender_code = 'F'
SELECT DISTINCT T1.invoice_status_code FROM Invoices AS T1 INNER JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number WHERE T2.shipment_id IS NULL
SELECT DISTINCT T1.invoice_status_code  FROM Invoices AS T1  INNER JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number
 SELECT T1.order_id, T1.`date_order_placed`, SUM(T2.product_price * T3.quantity) AS total_cost  FROM Orders AS T1  JOIN Order_Items AS T2 ON T1.order_id = T2.order_id  JOIN Products AS T3 ON T2.product_id = T3.product_id  GROUP BY T1.order_id, T1.`date_order_placed`
 SELECT O.order_id, O.date_order_placed, SUM(OP.product_price) FROM Orders O INNER JOIN Order_Items OP ON O.order_id = OP.order_id GROUP BY O.order_id
SELECT COUNT(DISTINCT T1.customer_id) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id
SELECT COUNT(DISTINCT T1.customer_id) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods
SELECT T1.login_name, T1.login_password FROM Customers AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id WHERE T1.phone_number LIKE '+12%'
SELECT T1.login_name, T1.login_password FROM Customers AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id WHERE T1.phone_number LIKE '+12%'
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'
SELECT T1.product_price, T1.product_size FROM Products AS T1 INNER JOIN ( SELECT product_id, AVG(product_price) AS avg_price FROM Products GROUP BY product_id ) AS T2 ON T1.product_id = T2.product_id WHERE T2.avg_price < T1.product_price
SELECT product_price, product_size FROM Products WHERE product_price > ( SELECT AVG(product_price) FROM Products )
SELECT COUNT(DISTINCT T1.product_id) FROM Products AS T1 LEFT JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T2.product_id IS NULL
SELECT COUNT(*) FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)
SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)
SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Payment_Methods)
SELECT DISTINCT order_status_code, date_order_placed FROM Orders
SELECT order_status_code, date_order_placed FROM Orders
SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA'
SELECT T1.address_line_1, T1.town_city, T1.county FROM Customers AS T1 INNER JOIN Shipments AS T2 ON T1.customer_id = T2.order_id INNER JOIN Invoices AS T3 ON T2.invoice_number = T3.invoice_number WHERE T1.country = 'United States'
SELECT T1.customer_first_name, T3.product_name  FROM Customers AS T1  INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id  INNER JOIN Order_Items AS T4 ON T2.order_id = T4.order_id  INNER JOIN Products AS T3 ON T4.product_id = T3.product_id
 SELECT T1.customer_first_name, T4.product_name  FROM Customers AS T1  INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id  INNER JOIN Order_Items AS T3 ON T2.order_id = T3.order_id  INNER JOIN Products AS T4 ON T3.product_id = T4.product_id
SELECT COUNT(DISTINCT shipment_id) FROM Shipments
SELECT COUNT(DISTINCT T1.product_id)  FROM Products AS T1  INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id  INNER JOIN Shipment_Items AS T3 ON T2.order_item_id = T3.order_item_id
SELECT AVG(product_price) FROM Products
SELECT AVG(product_price) FROM Products
SELECT AVG(T1.product_price) FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id
SELECT AVG(T1.product_price) FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id
SELECT T1.email_address, T1.town_city, T1.county FROM Customers AS T1 INNER JOIN ( SELECT gender_code, COUNT(*) AS num FROM Customers GROUP BY gender_code ORDER BY num LIMIT 1 ) AS T2 ON T1.gender_code = T2.gender_code
 SELECT T1.email_address, T1.town_city, T1.county  FROM Customers AS T1  JOIN ( SELECT gender_code, COUNT(order_id) AS order_count         FROM Orders         GROUP BY gender_code       ) AS T2  ON T1.gender_code = T2.gender_code  WHERE T2.order_count = ( SELECT MIN(order_count)                           FROM ( SELECT gender_code, COUNT(order_id) AS order_count                                  FROM Orders                                  GROUP BY gender_code                                ) AS T3                         )
SELECT T1.date_order_placed  FROM Orders AS T1  JOIN Customers AS T2 ON T1.customer_id = T2.customer_id  JOIN Customer_Payment_Methods AS T3 ON T2.customer_id = T3.customer_id  GROUP BY T1.customer_id  HAVING COUNT(T3.customer_id) >= 2
SELECT T1.date_order_placed FROM Orders AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(T2.customer_id) >= 2
SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) ASC LIMIT 1
SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) ASC LIMIT 1
SELECT T1.product_id, T1.product_description  FROM Products AS T1  JOIN Order_Items AS T2 ON T1.product_id = T2.product_id  GROUP BY T1.product_id  HAVING COUNT(T2.order_id) > 3
SELECT T1.product_id, T1.product_description  FROM Products AS T1  JOIN Order_Items AS T2 ON T1.product_id = T2.product_id  GROUP BY T1.product_id  HAVING COUNT(T2.order_id) > 3
SELECT T1.invoice_date, T1.invoice_number  FROM Invoices AS T1  JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number  GROUP BY T1.invoice_number  HAVING COUNT(T2.shipment_id) >= 2
SELECT T1.invoice_date, T1.invoice_number  FROM Invoices AS T1  JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number  GROUP BY T1.invoice_number  HAVING COUNT(T2.shipment_id) >= 2
SELECT shipment_tracking_number, shipment_date FROM Shipments
SELECT shipment_tracking_number, shipment_date FROM Shipments
SELECT product_color, product_description, product_size FROM Products WHERE product_price < ( SELECT MAX(product_price) FROM Products )
SELECT product_color, product_description, product_size FROM Products WHERE product_price < ( SELECT MAX(product_price) FROM Products );
SELECT Name FROM director WHERE Age > ( SELECT AVG(Age) FROM director )
SELECT Name FROM director ORDER BY Age DESC LIMIT 1
SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc%'
SELECT COUNT(DISTINCT Digital_terrestrial_channel) FROM channel
SELECT Title FROM program ORDER BY Start_Year DESC
SELECT T1.Name FROM director AS T1 INNER JOIN program AS T2 ON T1.Director_ID = T2.Director_ID GROUP BY T1.Director_ID ORDER BY COUNT(T2.Program_ID) DESC LIMIT 1
SELECT T1.Name, T1.Age FROM director AS T1 INNER JOIN director_admin AS T2 ON T1.Director_ID = T2.Director_ID GROUP BY T2.Director_ID ORDER BY COUNT(T2.Director_ID) DESC LIMIT 1
SELECT Title FROM program ORDER BY Start_Year DESC LIMIT 1
SELECT T1.Name, T1.Internet FROM channel AS T1 INNER JOIN program AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T2.Channel_ID HAVING COUNT(T2.Program_ID) > 1
SELECT T1.Name, COUNT(T3.Program_ID) FROM channel AS T1 INNER JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID INNER JOIN program AS T3 ON T2.Channel_ID = T3.Channel_ID GROUP BY T1.Name
SELECT COUNT(Channel_ID) FROM channel WHERE Channel_ID NOT IN (SELECT Channel_ID FROM program)
SELECT T2.Name FROM program AS T1 INNER JOIN director AS T2 ON T1.Director_ID = T2.Director_ID WHERE T1.Title = 'Dracula'
SELECT T1.Name, T1.Internet FROM channel AS T1 INNER JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T2.Channel_ID ORDER BY COUNT(T2.Director_ID) DESC LIMIT 1
SELECT Name FROM director WHERE Age BETWEEN 30 AND 60
SELECT T1.Name FROM channel AS T1 INNER JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID INNER JOIN director AS T3 ON T2.Director_ID = T3.Director_ID WHERE T3.Age < 40 INTERSECT SELECT T1.Name FROM channel AS T1 INNER JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID INNER JOIN director AS T3 ON T2.Director_ID = T3.Director_ID WHERE T3.Age > 60
SELECT T1.Channel_ID, T1.Name  FROM channel AS T1  LEFT JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID  LEFT JOIN director AS T3 ON T2.Director_ID = T3.Director_ID  WHERE T3.Name!= 'Hank Baskett'
SELECT COUNT(*) FROM radio
SELECT T1.Transmitter FROM radio AS T1 INNER JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID ORDER BY T1.ERP_kW ASC
SELECT tv_show_name, Original_Airdate FROM tv_show
SELECT Station_name FROM city_channel WHERE Affiliation!= 'ABC'
 SELECT T1.Transmitter FROM radio AS T1 INNER JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID WHERE T1.ERP_kW < 30 OR T1.ERP_kW > 150
 SELECT T1.Transmitter FROM radio AS T1 INNER JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID ORDER BY T1.ERP_kW DESC LIMIT 1
SELECT AVG(CAST(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(`ERP_kW`, 'kW', ''), 'kW.', ''), 'kW', ''), 'kW.', ''), 'kW', ''), 'kW.', '') AS REAL)) FROM radio
SELECT Affiliation, COUNT(ID) FROM city_channel GROUP BY Affiliation
SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC LIMIT 1
SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(ID) > 3
SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC
SELECT T1.Transmitter, T3.City  FROM radio AS T1  INNER JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID  INNER JOIN city_channel AS T3 ON T2.City_channel_ID = T3.ID
SELECT T1.Transmitter, T3.Station_name FROM radio AS T1 INNER JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID INNER JOIN city_channel AS T3 ON T2.City_channel_ID = T3.ID ORDER BY T1.ERP_kW DESC
 SELECT T1.Transmitter, COUNT(T2.City_channel_ID) FROM radio AS T1 INNER JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID GROUP BY T1.Transmitter
SELECT DISTINCT T1.Transmitter FROM radio AS T1 LEFT JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID WHERE T2.Radio_ID IS NULL
SELECT T1.Model FROM vehicle AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T1.Top_Speed = ( SELECT MAX(T1.Top_Speed) FROM vehicle AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T1.Power > 6000 ) AND T1.Power > 6000
SELECT T1.Model FROM vehicle AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T1.Power > 6000 ORDER BY T1.Top_Speed DESC LIMIT 1
SELECT Name FROM driver WHERE Citizenship = 'United States'
SELECT Name FROM driver WHERE Citizenship = 'United States'
SELECT MAX(T1.Vehicle_ID),  T2.Driver_ID FROM vehicle_driver AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T2.Driver_ID ORDER BY COUNT(T1.Vehicle_ID) DESC LIMIT 1
SELECT Driver_ID, COUNT(Vehicle_ID) FROM vehicle_driver GROUP BY Driver_ID ORDER BY COUNT(Vehicle_ID) DESC LIMIT 1
 SELECT MAX(T1.Power), AVG(T1.Power) FROM vehicle AS T1 WHERE T1.Builder = 'Zhuzhou'
 SELECT MAX(T1.Power), AVG(T1.Power) FROM vehicle AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID INNER JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T3.Citizenship = 'Zhuzhou'
SELECT T1.Vehicle_ID FROM vehicle_driver AS T2 INNER JOIN vehicle AS T1 ON T2.Vehicle_ID = T1.Vehicle_ID GROUP BY T1.Vehicle_ID ORDER BY COUNT(T2.Driver_ID) ASC LIMIT 1
SELECT T1.Vehicle_ID FROM vehicle AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.Vehicle_ID ORDER BY COUNT(T2.Vehicle_ID) ASC LIMIT 1
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996'
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996'
SELECT Build_Year, Model, Builder FROM vehicle
SELECT Build_Year, Model, Builder FROM vehicle
SELECT COUNT(DISTINCT T1.Driver_ID) FROM vehicle_driver AS T1 INNER JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.Build_Year = '2012'
SELECT COUNT(DISTINCT T1.Driver_ID) FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Build_Year = '2012'
SELECT COUNT(Driver_ID) FROM driver WHERE Racing_Series = 'NASCAR'
SELECT COUNT(DISTINCT Driver_ID) FROM driver WHERE Racing_Series = 'NASCAR'
SELECT AVG(Top_Speed) FROM vehicle
SELECT AVG(Top_Speed) FROM vehicle
SELECT DISTINCT T1.Name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Power > 5000
SELECT T1.Name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Power > 5000
SELECT Model FROM vehicle WHERE Total_Production!= '100' AND Top_Speed > 150
SELECT Model FROM vehicle WHERE Total_Production = 'over 100' OR Top_Speed > 150
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle_driver)
SELECT T1.Model FROM vehicle AS T1 LEFT JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.Vehicle_ID IS NULL
SELECT T1.Vehicle_ID, T1.Model  FROM vehicle AS T1  INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID  GROUP BY T1.Vehicle_ID  HAVING COUNT(DISTINCT T2.Driver_ID) >= 2  UNION  SELECT Vehicle_ID, Model  FROM vehicle  WHERE Builder = 'Ziyang'
SELECT T1.Vehicle_ID, T1.Model  FROM vehicle AS T1  INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID  GROUP BY T1.Vehicle_ID  HAVING COUNT(DISTINCT T2.Driver_ID) = 2  UNION  SELECT Vehicle_ID, Model  FROM vehicle  WHERE Builder = 'Ziyang'
SELECT T1.Vehicle_ID, T1.Model  FROM vehicle AS T1  INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID  WHERE T2.Driver_ID IN ( SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon' )  OR T2.Driver_ID IN ( SELECT Driver_ID FROM vehicle_driver GROUP BY Driver_ID HAVING COUNT(Driver_ID) > 2 );
SELECT T1.Vehicle_ID, T1.Model  FROM vehicle AS T1  JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID  WHERE T2.Driver_ID IN ( SELECT Driver_ID FROM driver WHERE Name = 'Jeff Gordon' )  OR T2.Driver_ID IN ( SELECT Driver_ID FROM vehicle_driver GROUP BY Driver_ID HAVING COUNT(Driver_ID) > 2 );
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = ( SELECT MAX(Top_Speed) FROM vehicle )
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = ( SELECT MAX(Top_Speed) FROM vehicle )
SELECT Name FROM driver ORDER BY Name ASC
SELECT Name FROM driver ORDER BY Name ASC
SELECT Racing_Series, COUNT(Driver_ID) FROM driver GROUP BY Racing_Series
SELECT Racing_Series, COUNT(Driver_ID) FROM driver GROUP BY Racing_Series
SELECT T1.Name, T1.Citizenship  FROM driver AS T1  INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID  INNER JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID  WHERE T3.Model = 'DJ1';
SELECT T1.Name, T1.Citizenship  FROM driver AS T1  INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID  INNER JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID  WHERE T3.Model = 'DJ1'
SELECT COUNT(Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)
SELECT COUNT(Driver_ID) FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM vehicle_driver)
SELECT COUNT(Exam_ID) FROM Exams
SELECT COUNT(Exam_ID) FROM Exams
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code
SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code!= 'Database'
SELECT T2.Exam_Date, T2.Exam_Name FROM Questions_in_Exams AS T1 INNER JOIN Exams AS T2 ON T1.Exam_ID = T2.Exam_ID INNER JOIN Questions AS T3 ON T1.Question_ID = T3.Question_ID WHERE T3.Type_of_Question_Code!= 'Database'
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
SELECT Type_of_Question_Code, COUNT(Question_ID) FROM Questions GROUP BY Type_of_Question_Code
SELECT Type_of_Question_Code, COUNT(Question_ID) FROM Questions GROUP BY Type_of_Question_Code
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'
SELECT COUNT(DISTINCT Comments) FROM Student_Answers
SELECT COUNT(DISTINCT Comments) FROM Student_Answers
SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(Student_Answer_Text) DESC
SELECT Student_Answer_Text FROM ( SELECT Student_Answer_Text, COUNT(*) AS Frequency FROM Student_Answers GROUP BY Student_Answer_Text ) ORDER BY Frequency DESC
SELECT T1.First_Name, T2.Date_of_Answer  FROM Students AS T1  INNER JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID
SELECT T1.First_Name, T2.Date_of_Answer  FROM Students AS T1  INNER JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID
SELECT T1.Email_Adress, T2.Date_of_Answer  FROM Students AS T1  INNER JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID  ORDER BY T2.Date_of_Answer DESC
SELECT T1.Email_Adress, T2.Date_of_Answer  FROM Students AS T1  INNER JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID  ORDER BY T2.Date_of_Answer DESC
 SELECT DISTINCT Assessment FROM (SELECT Assessment, COUNT(*) AS count FROM Student_Assessments GROUP BY Assessment) ORDER BY count ASC LIMIT 1
SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(Assessment) ASC LIMIT 1
SELECT T1.First_Name FROM Students AS T1 INNER JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(T2.Student_ID) >= 2
SELECT T1.First_Name FROM Students AS T1 INNER JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(T2.Student_ID) >= 2
SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(Valid_Answer_ID) DESC LIMIT 1
SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(Valid_Answer_ID) DESC LIMIT 1
SELECT Last_Name FROM Students WHERE Gender_MFU!= 'M'
SELECT Last_Name FROM Students WHERE Gender_MFU!= 'M'
SELECT DISTINCT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU
SELECT Gender_MFU, COUNT(Student_ID) FROM Students GROUP BY Gender_MFU
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M')
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M')
SELECT T1.First_Name FROM Students AS T1 LEFT JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID WHERE T2.Student_ID IS NULL
SELECT DISTINCT T1.First_Name FROM Students AS T1 LEFT JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID WHERE T2.Student_ID IS NULL
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent'
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Absent'
SELECT DISTINCT T1.Type_of_Question_Code  FROM Questions AS T1  JOIN Questions_in_Exams AS T2 ON T1.Question_ID = T2.Question_ID  GROUP BY T1.Type_of_Question_Code  HAVING COUNT(T1.Question_ID) >= 3
SELECT DISTINCT T1.Type_of_Question_Code  FROM Questions T1  JOIN Questions_in_Exams T2 ON T1.Question_ID = T2.Question_ID  GROUP BY T1.Type_of_Question_Code  HAVING COUNT(T1.Question_ID) >= 3
SELECT * FROM Students
SELECT Student_ID, First_Name, Middle_Name, Last_Name, Gender_MFU, Student_Address, Email_Adress, Cell_Mobile_Phone, Home_Phone FROM Students
SELECT COUNT(*) FROM Addresses
SELECT COUNT(`address_id`) FROM Addresses
SELECT address_id, address_details FROM Addresses
SELECT address_id, address_details FROM Addresses
SELECT COUNT(*) FROM Products
SELECT COUNT(*) FROM Products
SELECT product_id, product_type_code, product_name FROM Products
SELECT product_id, product_type_code, product_name FROM Products
SELECT product_price FROM Products WHERE product_name = 'Monitor'
SELECT T1.product_price FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = 'Monitor'
SELECT MIN(product_price),  AVG(product_price),  MAX(product_price) FROM Products
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products
SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes'
SELECT AVG(T1.product_price) FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_type_code = 'Clothes'
SELECT COUNT(*) FROM Products WHERE product_type_code = 'Hardware'
SELECT COUNT(product_id) FROM Products WHERE product_type_code = 'Hardware'
SELECT T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id HAVING T1.product_price > ( SELECT AVG(product_price) FROM Products )
SELECT T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id HAVING T1.product_price > ( SELECT AVG(product_price) FROM Products )
SELECT T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id INNER JOIN Customer_Orders AS T3 ON T2.order_id = T3.order_id WHERE T1.product_type_code = 'Hardware' AND T1.product_price > ( SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware' );
SELECT T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_type_code = 'Hardware' AND T1.product_price > ( SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware' )
SELECT T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_type_code = 'Clothes' ORDER BY T1.product_price DESC LIMIT 1
SELECT T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_type_code = 'Clothes' ORDER BY T1.product_price DESC LIMIT 1
SELECT T1.product_id, T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T1.product_type_code = 'Hardware' ORDER BY T1.product_price LIMIT 1
SELECT T1.product_id, T1.product_name  FROM Products AS T1  JOIN Order_Items AS T2 ON T1.product_id = T2.product_id  WHERE T1.product_type_code = 'Hardware'  ORDER BY T1.product_price ASC  LIMIT 1
SELECT product_name FROM Products ORDER BY product_price DESC
SELECT product_name FROM Products ORDER BY product_price DESC
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC
SELECT product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC
SELECT T1.product_type_code, COUNT(T2.product_id) FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_type_code
SELECT product_type_code, COUNT(product_id) FROM Products GROUP BY product_type_code
SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code
SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2
SELECT DISTINCT T1.product_type_code FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_type_code HAVING COUNT(T1.product_id) >= 2
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_type_code) DESC LIMIT 1
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_type_code) DESC LIMIT 1
SELECT COUNT(customer_id) FROM Customers
SELECT COUNT(customer_id) FROM Customers
SELECT customer_id, customer_name FROM Customers
SELECT customer_id, customer_name FROM Customers
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy'
SELECT payment_method_code, COUNT(customer_id) FROM Customers GROUP BY payment_method_code
SELECT payment_method_code, COUNT(customer_id) FROM Customers GROUP BY payment_method_code
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) DESC LIMIT 1
SELECT customer_name FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) ASC LIMIT 1
 SELECT T1.customer_name FROM Customers AS T1 INNER JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.payment_method_code ORDER BY COUNT(T2.payment_method_code) ASC LIMIT 1
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'
SELECT T2.payment_method_code, T2.customer_number FROM Customers AS T1 INNER JOIN `Customer_Orders` AS T3 ON T1.customer_id = T3.customer_id INNER JOIN Order_Items AS T4 ON T3.order_id = T4.order_id INNER JOIN Products AS T5 ON T4.product_id = T5.product_id INNER JOIN Addresses AS T6 ON T1.address_id = T6.address_id INNER JOIN `Customer_Orders` AS T7 ON T1.customer_id = T7.customer_id INNER JOIN Customers AS T2 ON T7.customer_id = T2.customer_id WHERE T1.customer_name = 'Jeromy'
SELECT DISTINCT payment_method_code FROM Customers
SELECT DISTINCT payment_method_code FROM Customers
SELECT product_id, product_type_code FROM Products ORDER BY product_name
SELECT product_id, product_type_code FROM Products ORDER BY product_name
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) ASC LIMIT 1
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_type_code) ASC LIMIT 1
SELECT COUNT(order_id) FROM Customer_Orders
SELECT COUNT(order_id) FROM Customer_Orders
SELECT T1.order_id, T1.order_date, T1.order_status_code  FROM Customer_Orders AS T1  JOIN Customers AS T2 ON T1.customer_id = T2.customer_id  WHERE T2.customer_name = 'Jeromy';
SELECT T1.order_id, T1.order_date, T1.order_status_code  FROM Customer_Orders AS T1  JOIN Customers AS T2 ON T1.customer_id = T2.customer_id  WHERE T2.customer_name = 'Jeromy';
SELECT T1.customer_name, T1.customer_id, COUNT(T2.order_id) FROM Customers AS T1 INNER JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id
 SELECT c.customer_name, c.customer_id, COUNT(o.order_id)  FROM Customers c  JOIN Customer_Orders o ON c.customer_id = o.customer_id  GROUP BY c.customer_id
SELECT T1.customer_id, T1.customer_name, T1.customer_phone, T1.customer_email  FROM Customers AS T1  JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id  GROUP BY T1.customer_id  ORDER BY COUNT(T2.order_id) DESC  LIMIT 1
SELECT T1.customer_id, T1.customer_name, T1.customer_phone, T1.customer_email  FROM Customers AS T1  JOIN ( SELECT customer_id, COUNT(order_id) as order_count         FROM Customer_Orders         GROUP BY customer_id         ORDER BY order_count DESC         LIMIT 1 ) AS T2  ON T1.customer_id = T2.customer_id
SELECT order_status_code, COUNT(order_id) FROM Customer_Orders GROUP BY order_status_code
SELECT order_status_code, COUNT(order_id) FROM Customer_Orders GROUP BY order_status_code
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC LIMIT 1
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC LIMIT 1
SELECT COUNT(T1.customer_id) FROM Customers AS T1 LEFT JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_id IS NULL
SELECT COUNT(T1.customer_id) FROM Customers AS T1 LEFT JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_id IS NULL
SELECT T1.product_name FROM Products AS T1 LEFT JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T2.product_id IS NULL
SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items)
SELECT COUNT(T1.order_id)  FROM Order_Items AS T1  JOIN Products AS T2 ON T1.product_id = T2.product_id  WHERE T2.product_name = 'Monitor'
SELECT SUM(CASE WHEN T1.product_name = 'Monitor' THEN 1 ELSE 0 END) FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id
SELECT COUNT(DISTINCT T1.customer_id)  FROM Customer_Orders AS T1  JOIN Order_Items AS T2 ON T1.order_id = T2.order_id  JOIN Products AS T3 ON T2.product_id = T3.product_id  WHERE T3.product_name = 'Monitor';
SELECT COUNT(DISTINCT T1.customer_id)  FROM Customer_Orders AS T1  JOIN Order_Items AS T2 ON T1.order_id = T2.order_id  JOIN Products AS T3 ON T2.product_id = T3.product_id  WHERE T3.product_name = 'Monitor'
SELECT COUNT(DISTINCT T1.customer_id) FROM Customers AS T1 INNER JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)
SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Customer_Orders)
SELECT T1.order_date, T1.order_id  FROM Customer_Orders AS T1  JOIN Order_Items AS T2 ON T1.order_id = T2.order_id  WHERE T2.order_quantity > 6 OR T2.order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_id) > 3)
SELECT T1.order_id, T1.order_date  FROM Customer_Orders AS T1  JOIN Order_Items AS T2 ON T1.order_id = T2.order_id  WHERE T2.order_quantity > '6' OR T2.order_id IN ( SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_id) > 3 );
SELECT COUNT(Building_ID) FROM building
SELECT COUNT(Building_ID) FROM building
SELECT Name FROM building ORDER BY Number_of_Stories ASC
SELECT Name FROM building ORDER BY Number_of_Stories ASC
SELECT Address FROM building ORDER BY Completed_Year DESC
SELECT Address FROM building ORDER BY Completed_Year DESC
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year!= 1980
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year!= 1980
SELECT AVG(Population) FROM region
SELECT AVG(Population) FROM region
SELECT Name FROM region ORDER BY Name ASC
SELECT Name FROM region ORDER BY Name ASC
 SELECT T2.Capital FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID WHERE T2.Area > 10000
SELECT T2.Capital FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID WHERE T2.Area > 10000
 SELECT T1.Capital FROM region AS T1 ORDER BY T1.Population DESC LIMIT 1
SELECT T2.Capital FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID ORDER BY T2.Population DESC LIMIT 1
SELECT Name FROM region ORDER BY Area DESC LIMIT 5
SELECT Name FROM region ORDER BY Area DESC LIMIT 5
SELECT T1.Name, T2.Name FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T1.Name, T2.Name FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T2.Name FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T2.Region_ID HAVING COUNT(T1.Building_ID) > 1
SELECT T2.Name FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(T1.Building_ID) > 1
SELECT T2.Capital FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(T1.Building_ID) DESC LIMIT 1
SELECT T2.Capital FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(T1.Building_ID) DESC LIMIT 1
SELECT T1.Address, T2.Capital FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T1.Address, T2.Name FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T1.Number_of_Stories FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID WHERE T2.Name = 'Abruzzo'
SELECT T1.Number_of_Stories FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID WHERE T2.Name = 'Abruzzo'
SELECT Completed_Year, COUNT(Building_ID) FROM building GROUP BY Completed_Year
SELECT Completed_Year, COUNT(Building_ID) FROM building GROUP BY Completed_Year
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(Completed_Year) DESC LIMIT 1
SELECT Completed_Year FROM building ORDER BY Completed_Year DESC LIMIT 1
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
SELECT T1.Completed_Year FROM building AS T1 INNER JOIN building AS T2 ON T1.Completed_Year = T2.Completed_Year WHERE T1.Number_of_Stories > 20 AND T2.Number_of_Stories < 15
SELECT T1.Completed_Year FROM building AS T1 INNER JOIN building AS T2 ON T1.Completed_Year = T2.Completed_Year WHERE T1.Number_of_Stories > 20 AND T2.Number_of_Stories < 15
SELECT DISTINCT Address FROM building
SELECT DISTINCT Address FROM building
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC
SELECT Channel_Details FROM Channels ORDER BY Channel_Details ASC
SELECT COUNT(Service_ID) FROM Services
SELECT COUNT(Service_ID) FROM Services
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_Layer_Type_Code) DESC LIMIT 1
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_Layer_Type_Code) DESC LIMIT 1
SELECT T1.Service_ID FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customers AS T3 ON T2.Customer_ID = T3.Customer_ID WHERE T3.Customer_Details = 'Hardy Kutch'
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customers AS T3 ON T2.Customer_ID = T3.Customer_ID WHERE T3.Customer_Details = 'Hardy Kutch'
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID GROUP BY T2.Service_ID HAVING COUNT(T2.Service_ID) > 3
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID GROUP BY T2.Service_ID HAVING COUNT(T2.Customers_and_Services_ID) > 3
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T2.Customer_ID ORDER BY COUNT(T2.Customer_ID) DESC LIMIT 1
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T2.Customer_ID ORDER BY COUNT(T2.Service_ID) DESC LIMIT 1
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T2.Customer_ID ORDER BY COUNT(T2.Service_ID) DESC LIMIT 1
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T2.Customer_ID ORDER BY COUNT(T2.Service_ID) DESC LIMIT 1
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Customer_ID IS NULL
SELECT T1.Customer_Details FROM Customers AS T1 LEFT JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Customer_ID IS NULL
 SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID INNER JOIN Services AS T3 ON T2.Service_ID = T3.Service_ID WHERE T3.Service_ID = ( SELECT Service_ID FROM Services GROUP BY Service_ID ORDER BY COUNT(T2.Customers_and_Services_ID) ASC LIMIT 1 )
SELECT DISTINCT T1.Customer_Details  FROM Customers AS T1  JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID  JOIN ( SELECT Service_ID, COUNT(Service_ID) AS Count FROM Customers_and_Services GROUP BY Service_ID ORDER BY Count LIMIT 1 ) AS T3 ON T2.Service_ID = T3.Service_ID
SELECT COUNT(DISTINCT Customer_Details) FROM Customers UNION SELECT COUNT(DISTINCT Service_Details) FROM Services
SELECT COUNT(Customer_ID) FROM Customers UNION SELECT COUNT(Service_ID) FROM Services
SELECT T1.Customer_ID FROM Customers AS T1 WHERE T1.Customer_Details LIKE '%Kutch%'
SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'
SELECT DISTINCT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customers AS T3 ON T2.Customer_ID = T3.Customer_ID WHERE T3.Customer_Details = 'Hardy Kutch' UNION SELECT DISTINCT T1.Service_Details FROM Services AS T1 INNER JOIN Customer_Interactions AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Status_Code = 'good'
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customers AS T3 ON T2.Customer_ID = T3.Customer_ID WHERE T3.Customer_Details = 'Hardy Kutch' UNION SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customer_Interactions AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Status_Code = 'good'
SELECT T1.Service_Details  FROM Services AS T1  INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID  INNER JOIN Customer_Interactions AS T3 ON T2.Customer_ID = T3.Customer_ID  WHERE T3.Status_Code = 'bad' AND T2.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customer_Interactions AS T3 ON T2.Customer_ID = T3.Customer_ID WHERE T3.Status_Code = 'bad' AND T2.Customers_and_Services_Details LIKE '%Hardy Kutch%'
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customer_Interactions AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Services_and_Channels_Details = '15 ij'
SELECT T1.Service_Details  FROM Services AS T1  INNER JOIN Customer_Interactions AS T2  ON T1.Service_ID = T2.Service_ID  INNER JOIN Channels AS T3  ON T2.Channel_ID = T3.Channel_ID  WHERE T3.Channel_Details = '15 ij'
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Status_Code = 'Stuck' AND T2.Services_and_Channels_Details = 'bad'
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Status_Code = 'Stuck' AND T2.Services_and_Channels_Details = 'bad'
SELECT COUNT(Integration_Platform_ID) FROM Integration_Platform WHERE Integration_Platform_Details = 'Successful'
SELECT COUNT(Integration_Platform_ID) FROM Integration_Platform WHERE Integration_Platform_Details LIKE '%Success%'
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID INNER JOIN Integration_Platform AS T3 ON T2.Customer_Interaction_ID = T3.Customer_Interaction_ID WHERE T3.Integration_Platform_Details = 'Failed'
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID INNER JOIN Integration_Platform AS T3 ON T2.Customer_Interaction_ID = T3.Customer_Interaction_ID WHERE T3.Integration_Platform_Details = 'Fail'
SELECT Service_Details FROM Services WHERE Service_ID NOT IN ( SELECT Service_ID FROM Customers_and_Services )
SELECT T1.Service_Details FROM Services AS T1 LEFT JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_ID IS NULL
SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code
SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Customers_and_Services_Details = 'unsatisfied'
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Customers_and_Services_Details = 'unsatisfied'
SELECT COUNT(id) FROM Vehicles
SELECT COUNT(id) FROM Vehicles
SELECT name FROM Vehicles ORDER BY Model_year DESC
SELECT name FROM Vehicles ORDER BY Model_year DESC
SELECT DISTINCT Type_of_powertrain FROM Vehicles
SELECT DISTINCT Type_of_powertrain FROM Vehicles
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014
SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 INTERSECT SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013
SELECT DISTINCT T1.Type_of_powertrain FROM Vehicles AS T1 INNER JOIN Vehicles AS T2 ON T1.id = T2.id WHERE T1.Model_year = 2013 AND T2.Model_year = 2014
SELECT Type_of_powertrain, COUNT(id) FROM Vehicles GROUP BY Type_of_powertrain
SELECT Type_of_powertrain, COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(Type_of_powertrain) DESC LIMIT 1
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(Type_of_powertrain) DESC LIMIT 1
SELECT MIN(Annual_fuel_cost), MAX(Annual_fuel_cost), AVG(Annual_fuel_cost) FROM Vehicles
SELECT MIN(Annual_fuel_cost), MAX(Annual_fuel_cost), AVG(Annual_fuel_cost) FROM Vehicles
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate
SELECT T1.Type_of_powertrain, AVG(T2.Annual_fuel_cost) FROM Vehicles AS T1 INNER JOIN Renting_history AS T3 ON T1.id = T3.vehicles_id INNER JOIN Vehicles AS T2 ON T2.id = T3.vehicles_id GROUP BY T1.Type_of_powertrain HAVING COUNT(T1.id) >= 2
 SELECT T1.Type_of_powertrain, AVG(T1.Annual_fuel_cost) FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id GROUP BY T1.Type_of_powertrain HAVING COUNT(T1.id) >= 2
SELECT name, age, membership_credit FROM Customers
SELECT name, age, membership_credit FROM Customers
SELECT name, age FROM Customers WHERE id IN ( SELECT customer_id FROM Renting_history WHERE discount_id IN ( SELECT id FROM Discount WHERE membership_credit = ( SELECT MAX(membership_credit) FROM Discount ) ) )
SELECT name, age FROM Customers ORDER BY membership_credit DESC LIMIT 1
SELECT AVG(age) FROM Customers WHERE membership_credit > ( SELECT AVG(membership_credit) FROM Customers )
SELECT AVG(T1.age) FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.customer_id INNER JOIN Discount AS T3 ON T2.discount_id = T3.id WHERE T3.membership_credit > ( SELECT AVG(T4.membership_credit) FROM Discount AS T4 )
SELECT * FROM Discount
SELECT * FROM Discount
SELECT T1.name, T3.total_hours  FROM Vehicles AS T1  JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id  JOIN Renting_history AS T3 ON T1.id = T3.vehicles_id
SELECT T1.name, SUM(T2.total_hours) FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id GROUP BY T1.id
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)
SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)
SELECT T1.name FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.customer_id GROUP BY T1.id HAVING COUNT(T2.id) >= 2
SELECT T1.name FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.customer_id GROUP BY T2.customer_id HAVING COUNT(T2.customer_id) >= 2
SELECT T1.name, T1.Model_year  FROM Vehicles AS T1  JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id  GROUP BY T1.id  ORDER BY COUNT(T2.id) DESC  LIMIT 1
SELECT T1.name, T1.Model_year  FROM Vehicles AS T1  JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id  GROUP BY T1.id  ORDER BY COUNT(T2.id) DESC  LIMIT 1
SELECT T1.name FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id ORDER BY T2.total_hours DESC
SELECT T1.name FROM Vehicles AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id ORDER BY T2.total_hours DESC
SELECT T2.name FROM Renting_history AS T1 INNER JOIN Discount AS T2 ON T1.discount_id = T2.id GROUP BY T2.id ORDER BY COUNT(T1.id) DESC LIMIT 1
SELECT T2.name FROM Renting_history AS T1 INNER JOIN Discount AS T2 ON T1.discount_id = T2.id GROUP BY T2.name ORDER BY COUNT(T1.id) DESC LIMIT 1
SELECT T1.name, T1.Type_of_powertrain  FROM Vehicles AS T1  JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id  WHERE T2.total_hours > 30
SELECT T1.name, T1.Type_of_powertrain  FROM Vehicles AS T1  JOIN Renting_history AS T2 ON T1.id = T2.vehicles_id  WHERE T2.total_hours > 30
SELECT AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate), Type_of_powertrain FROM Vehicles WHERE Type_of_powertrain!= 'Electric' GROUP BY Type_of_powertrain
SELECT AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate), Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain
SELECT AVG(amount_of_loan) FROM Student_Loans
SELECT AVG(student_loan) FROM cre_Students_Information_Systems2
 SELECT T1.student_id, T1.first_name, T1.last_name, T1.grade_level, T1.date_of_birth  FROM Students AS T1  WHERE T1.student_id IN (SELECT student_id FROM (SELECT student_id, COUNT(class_id) as class_count FROM Student_Takes GROUP BY student_id) AS T2 WHERE class_count >= 2)  AND T1.student_id IN (SELECT student_id FROM Students WHERE detentions < 2);
SELECT T1.bio_data, T1.student_id FROM Students AS T1 INNER JOIN Classes AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(T2.class_id) >= 2 INTERSECT SELECT T1.bio_data, T1.student_id FROM Students AS T1 INNER JOIN Detention AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(T2.detention_id) < 2
SELECT T1.teacher_details FROM Teachers AS T1 INNER JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.class_details LIKE '%data%' AND T2.class_details NOT LIKE 'net%'
SELECT T2.teacher_details FROM Classes AS T1 INNER JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.class_details LIKE '%data%' AND T1.class_details NOT LIKE 'net%'
SELECT T1.bio_data FROM Students AS T1 LEFT JOIN Detention AS T2 ON T1.student_id = T2.student_id LEFT JOIN Student_Loans AS T3 ON T1.student_id = T3.student_id WHERE T2.student_id IS NULL AND T3.student_id IS NULL
SELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention UNION SELECT student_id FROM Student_Loans)
SELECT T1.Loan_Amount, T1.Loan_Date  FROM cre_Students_Information_Systems2 AS T1  JOIN cre_Students_Information_Systems2 AS T2  ON T1.Student_ID = T2.Student_ID  WHERE T2.Achievements >= 2
SELECT T1.amount_of_loan, T1.date_of_loan FROM Student_Loans AS T1 INNER JOIN Achievements AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(T2.achievement_id) >= 2
SELECT T1.id, T1.detail FROM Teachers AS T1 INNER JOIN Teacher_Courses AS T2 ON T1.id = T2.teacher_id GROUP BY T1.id ORDER BY COUNT(T2.course_id) DESC LIMIT 1
 SELECT T1.id, T1.detail FROM teachers AS T1 GROUP BY T1.id ORDER BY (SELECT COUNT(T2.course_id) FROM teaches AS T2 WHERE T2.teacher_id = T1.id) DESC LIMIT 1
 SELECT DISTINCT description FROM Detention
SELECT DISTINCT T2.detention_type_description FROM Detention AS T1 INNER JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code
SELECT Students.FirstName, Students.LastName, Students.Address, AddressTypes.Description  FROM Students  JOIN AddressTypes ON Students.AddressType = AddressTypes.AddressType;
SELECT Students.StudentID, Students.FirstName, Students.LastName, Students.DateOfBirth, Students.Email, Students.PhoneNumber, AddressTypes.AddressTypeDescription  FROM Students  JOIN AddressTypes ON Students.AddressTypeID = AddressTypes.AddressTypeID
SELECT T1.address_details, T2.bio_data FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.student_id
SELECT Address, StudentID, FirstName, LastName, DateOfBirth, Age, Gender, Nationality, Email, Phone, Country, City, PostalCode FROM Students
SELECT T1.bio_data, T2.date_of_transcript FROM Students AS T1 INNER JOIN Transcripts AS T2 ON T1.student_id = T2.student_id
 SELECT personal_info, transcript_issuance_date FROM Students
SELECT COUNT(*),  T1.behaviour_monitoring_details FROM Behaviour_Monitoring AS T1 INNER JOIN ( SELECT behaviour_monitoring_details,  COUNT(*) AS num FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY num DESC LIMIT 1 ) AS T2 ON T1.behaviour_monitoring_details = T2.behaviour_monitoring_details
SELECT behaviour_monitoring_details, COUNT(*) AS count FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1
SELECT * FROM Students  WHERE (StudentID, Result) IN (   SELECT StudentID, Result    FROM Students    GROUP BY StudentID, Result    HAVING COUNT(*) = (     SELECT COUNT(*)      FROM Students      GROUP BY Result      ORDER BY COUNT(*) DESC      LIMIT 1   ) AND COUNT(*) = (     SELECT COUNT(*)      FROM Students      WHERE Result IN (       SELECT Result        FROM Students        GROUP BY Result        HAVING COUNT(*) = 3     )   ) )
SELECT T1.bio_data, T1.student_details  FROM Students AS T1  JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id  GROUP BY T2.behaviour_monitoring_details  HAVING COUNT(T2.behaviour_monitoring_details) = 3
SELECT * FROM Students WHERE StudentID IN (SELECT StudentID FROM BehaviourMonitoring GROUP BY StudentID ORDER BY COUNT(*) DESC LIMIT 1)
SELECT T1.bio_data FROM Students AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.student_id = T2.student_id GROUP BY T2.behaviour_monitoring_details ORDER BY COUNT(T2.behaviour_monitoring_details) DESC LIMIT 1
SELECT s.student_id, s.first_name, s.last_name, s.date_of_birth, s.gender, e.event_date  FROM Students s  JOIN Events e ON s.student_id = e.student_id
SELECT biographical_data, event_date FROM Students WHERE student_id IN (SELECT student_id FROM Events)
SELECT COUNT(T1.student_id), T2.event_type_description, T1.event_type_code FROM Student_Events AS T1 INNER JOIN Ref_Event_Types AS T2 ON T1.event_type_code = T2.event_type_code GROUP BY T1.event_type_code ORDER BY COUNT(T1.student_id) DESC LIMIT 1
 SELECT T1.event_type_code, T1.event_type_description, COUNT(T2.student_id) FROM event_type AS T1 INNER JOIN student_event AS T2 ON T1.event_type_code = T2.event_type_code GROUP BY T1.event_type_code ORDER BY COUNT(T2.student_id) DESC LIMIT 1
SELECT T1.achievement_details, T2.achievement_type_description FROM Achievements AS T1 INNER JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code = T2.achievement_type_code
SELECT T1.achievement_details, T2.achievement_type_description FROM Achievements AS T1 INNER JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code = T2.achievement_type_code
 SELECT COUNT(T1.TeacherID) FROM Teachers AS T1 INNER JOIN Students AS T2 ON T1.TeacherID IN (SELECT TeacherID FROM Student_Teacher WHERE StudentID = T2.StudentID) WHERE T2.StudentID NOT IN (SELECT StudentID FROM Achievements)
SELECT COUNT(T1.teacher_id)  FROM Classes AS T1  JOIN Students AS T2 ON T1.student_id = T2.student_id  LEFT JOIN Achievements AS T3 ON T2.student_id = T3.student_id  WHERE T3.student_id IS NULL
SELECT date, transcript_details FROM transcripts
SELECT date_of_transcript, transcript_details FROM Transcripts
 SELECT achievement_type_code, achievement_details, achievement_date FROM Achievements
 SELECT achievement_type AS type_code, details, date FROM achievements
SELECT detention_start_time, detention_end_time FROM Detention
SELECT detention_start_time, detention_end_time FROM detention_records
SELECT * FROM cre_Students_Information_Systems2 WHERE name LIKE '%Suite%' OR address LIKE '%Suite%'
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'
SELECT T1.teacher_details, T2.student_details FROM Teachers AS T1 INNER JOIN Classes AS T3 ON T1.teacher_id = T3.teacher_id INNER JOIN Students AS T2 ON T2.student_id = T3.student_id
SELECT T1.teacher_details, T2.student_details FROM Teachers AS T1 INNER JOIN Classes AS T3 ON T1.teacher_id = T3.teacher_id INNER JOIN Students AS T2 ON T2.student_id = T3.student_id
SELECT teacher_id, COUNT(class_id) FROM Classes GROUP BY teacher_id ORDER BY COUNT(class_id) DESC LIMIT 1
 SELECT T1.id, COUNT(T2.id) FROM Teachers AS T1 INNER JOIN Course_Teachers AS T2 ON T1.id = T2.teacher_id GROUP BY T1.id ORDER BY COUNT(T2.id) DESC LIMIT 1
 SELECT MAX(T2.num_courses),  T1.id FROM Students AS T1 INNER JOIN ( SELECT student_id,  COUNT(course_id) AS num_courses FROM Courses GROUP BY student_id ) AS T2 ON T1.id = T2.student_id
SELECT s.id, COUNT(c.id) FROM Students s LEFT JOIN Courses c ON s.id = c.student_id GROUP BY s.id ORDER BY COUNT(c.id) DESC LIMIT 1
SELECT T1.student_id, T1.bio_data, T1.student_details FROM Students AS T1 INNER JOIN Classes AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(T2.class_id) = 2
SELECT T1.id, T1.name, T1.email, T2.course_id FROM Students AS T1 INNER JOIN Student_Courses AS T2 ON T1.id = T2.student_id GROUP BY T2.student_id HAVING COUNT(T2.course_id) = 2
SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type ORDER BY COUNT(detention_type_code) ASC LIMIT 1
SELECT type_code, description FROM Detention ORDER BY COUNT(type_code) ASC LIMIT 1
SELECT s.* FROM Students s JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.amount > ( SELECT AVG(amount) FROM Student_Loans )
SELECT * FROM Students WHERE student_loan > ( SELECT AVG(student_loan) FROM Students )
 SELECT MIN(T1.date) FROM cre_Students_Information_Systems2 AS T1
SELECT MIN(date_of_loan) FROM Student_Loans
SELECT T1.bio_data FROM Students AS T1 INNER JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1
SELECT T1.bio_data FROM Students AS T1 INNER JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1
SELECT T1.date_of_transcript FROM Transcripts AS T1 INNER JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1
SELECT T2.`date_of_transcript` FROM Student_Loans AS T1 INNER JOIN Transcripts AS T2 ON T1.student_id = T2.student_id ORDER BY T1.`amount_of_loan` DESC LIMIT 1
SELECT T2.* FROM Students AS T1 INNER JOIN Transcripts AS T2 ON T1.student_id = T2.student_id INNER JOIN Teachers AS T3 ON T2.teacher_id = T3.teacher_id WHERE T2.issuance_date = ( SELECT MIN(issuance_date) FROM Transcripts );
SELECT T1.teacher_details FROM Teachers AS T1 INNER JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id INNER JOIN Transcripts AS T3 ON T2.student_id = T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1
SELECT student_id, SUM(amount_of_loan) FROM Student_Loans GROUP BY student_id
SELECT T1.student_id, SUM(T2.amount_of_loan) FROM Students AS T1 INNER JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id
SELECT s.student_id, s.first_name, s.last_name, COUNT(DISTINCT c.course_id) FROM Students s LEFT JOIN Student_Courses sc ON s.student_id = sc.student_id LEFT JOIN Courses c ON sc.course_id = c.course_id GROUP BY s.student_id, s.first_name, s.last_name
SELECT S.student_id, S.bio_data, COUNT(C.class_id) FROM Students S LEFT JOIN Classes C ON S.student_id = C.student_id GROUP BY S.student_id
SELECT COUNT(*) FROM cre_Students_Information_Systems2 WHERE OperationalError = 'unable to open database file'
SELECT COUNT(DISTINCT T1.student_id) FROM Students AS T1 INNER JOIN Detention AS T2 ON T1.student_id = T2.student_id
 SELECT T1.code, T1.description  FROM Student_Address_Type T1  JOIN (SELECT code, COUNT(*) as cnt FROM Student_Address_Type GROUP BY code) T2  ON T1.code = T2.code  ORDER BY T2.cnt DESC LIMIT 1
SELECT T1.address_type_code, T1.address_type_description FROM Ref_Address_Types AS T1 INNER JOIN Students_Addresses AS T2 ON T1.address_type_code = T2.address_type_code GROUP BY T1.address_type_code ORDER BY COUNT(T1.address_type_code) DESC LIMIT 1
SELECT T1.bio_data FROM Students AS T1 INNER JOIN Student_Events AS T2 ON T1.student_id = T2.student_id LEFT JOIN Student_Loans AS T3 ON T1.student_id = T3.student_id WHERE T3.student_id IS NULL
SELECT * FROM Students WHERE StudentID NOT IN (SELECT StudentID FROM StudentLoans)
SELECT T1.start_time, T1.end_time  FROM Students AS T1  JOIN Transcripts AS T2 ON T1.student_id = T2.student_id  GROUP BY T1.student_id  HAVING COUNT(T2.student_id) = 2
SELECT T1.date_from, T1.date_to FROM Students_Addresses AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id INNER JOIN Transcripts AS T3 ON T2.student_id = T3.student_id GROUP BY T1.student_id HAVING COUNT(T3.transcript_id) = 2
SELECT MIN(date) FROM detentions
 SELECT t2.detention_start_date  FROM students AS t1  INNER JOIN detention_records AS t2 ON t1.student_id = t2.student_id
SELECT Name FROM Author
SELECT Name FROM Author
SELECT Name, Address FROM Client
SELECT Name, Address FROM Client
SELECT Title, ISBN, SalePrice FROM Book
SELECT Title, ISBN, SalePrice FROM Book
SELECT COUNT(*) FROM Book
SELECT COUNT(*) FROM Book
SELECT COUNT(idAuthor) FROM Author
SELECT COUNT(idAuthor) FROM Author
SELECT COUNT(IdClient) FROM Client
SELECT COUNT(IdClient) FROM Client
SELECT Name, Address FROM Client ORDER BY Name ASC
SELECT Name, Address FROM Client ORDER BY Name
 SELECT T1.Title, T3.Name FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor
SELECT T1.Title, T3.Name FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor
SELECT T1.IdOrder, T2.Name  FROM Orders AS T1  INNER JOIN Client AS T2 ON T1.IdClient = T2.IdClient
SELECT T1.IdOrder, T2.Name FROM Orders AS T1 INNER JOIN Client AS T2 ON T1.IdClient = T2.IdClient
SELECT T1.Name, COUNT(*) FROM Author AS T1 INNER JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author GROUP BY T1.idAuthor
SELECT T1.Name, COUNT(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author GROUP BY T1.idAuthor
SELECT T1.ISBN, COUNT(T2.IdOrder) FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN
SELECT T1.ISBN, T1.Title, T2.amount FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN
SELECT T1.ISBN, SUM(T2.amount) FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN
SELECT T1.ISBN, SUM(T2.amount) FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN
SELECT T1.Title FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN ORDER BY COUNT(T2.ISBN) DESC LIMIT 1
SELECT T1.Title FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Title, T1.PurchasePrice  FROM Book AS T1  JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN  GROUP BY T1.ISBN  ORDER BY SUM(T2.amount) DESC  LIMIT 1
SELECT T1.Title, T1.PurchasePrice FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN ORDER BY T2.amount DESC LIMIT 1
SELECT T1.Title  FROM Book AS T1  JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN
SELECT DISTINCT T1.Title FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T2.IdOrder IN (SELECT IdOrder FROM Orders WHERE DateExped < CURRENT_DATE)
SELECT DISTINCT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient
SELECT DISTINCT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient
SELECT T1.Name, COUNT(T2.IdOrder) FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient
SELECT T1.Name, COUNT(T2.IdOrder) FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient
SELECT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient ORDER BY COUNT(T2.IdOrder) DESC LIMIT 1
SELECT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient ORDER BY COUNT(T2.IdOrder) DESC LIMIT 1
SELECT T1.Name, SUM(T2.amount) FROM Client AS T1 INNER JOIN Books_Order AS T2 ON T1.IdClient = T2.IdOrder GROUP BY T1.IdClient
SELECT T1.Name, SUM(T2.amount) FROM Client AS T1 INNER JOIN Books_Order AS T2 ON T1.IdClient = T2.IdOrder GROUP BY T1.IdClient
SELECT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient INNER JOIN Books_Order AS T3 ON T2.IdOrder = T3.IdOrder GROUP BY T1.IdClient ORDER BY SUM(T3.amount) DESC LIMIT 1
SELECT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient INNER JOIN Books_Order AS T3 ON T2.IdOrder = T3.IdOrder GROUP BY T1.IdClient ORDER BY SUM(T3.amount) DESC LIMIT 1
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)
SELECT MAX(SalePrice), MIN(SalePrice) FROM Book
SELECT MAX(SalePrice),  MIN(SalePrice) FROM Book
SELECT AVG(PurchasePrice), AVG(SalePrice) FROM Book
SELECT AVG(PurchasePrice), AVG(SalePrice) FROM Book
SELECT MAX(SalePrice - PurchasePrice) FROM Book
SELECT MAX(SalePrice - PurchasePrice) FROM Book
SELECT Title FROM Book WHERE SalePrice > ( SELECT AVG(SalePrice) FROM Book )
SELECT Title FROM Book WHERE SalePrice > ( SELECT AVG(SalePrice) FROM Book )
SELECT Title FROM Book ORDER BY SalePrice ASC LIMIT 1
SELECT Title FROM Book WHERE SalePrice = ( SELECT MIN(SalePrice) FROM Book )
SELECT Title FROM Book ORDER BY PurchasePrice DESC LIMIT 1
SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN ORDER BY T1.PurchasePrice DESC LIMIT 1
SELECT AVG(T2.SalePrice) FROM Author AS T1 INNER JOIN Book AS T2 ON T1.idAuthor = T2.Author WHERE T1.Name = 'George Orwell'
 SELECT AVG(T3.SalePrice)  FROM Author AS T1  JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author  JOIN Book AS T3 ON T2.ISBN = T3.ISBN  WHERE T1.Name = 'George Orwell'
SELECT T1.SalePrice FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = 'Plato'
SELECT T1.SalePrice  FROM Book AS T1  JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN  JOIN Author AS T3 ON T2.Author = T3.idAuthor  WHERE T3.Name = 'Plato'
SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = 'George Orwell' ORDER BY T1.SalePrice LIMIT 1
SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = 'George Orwell' ORDER BY T1.SalePrice LIMIT 1
SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = 'Plato' AND T1.SalePrice < (SELECT AVG(SalePrice) FROM Book)
SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = 'Plato' AND T1.SalePrice < ( SELECT AVG(SalePrice) FROM Book );
 SELECT T3.Name FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T1.Title = 'Pride and Prejudice'
 SELECT T3.Name FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T1.Title = 'Pride and Prejudice'
SELECT T1.Title  FROM Book AS T1  JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN  JOIN Author AS T3 ON T2.Author = T3.idAuthor  WHERE T3.Name LIKE '%Plato%';
SELECT T1.Title FROM Book AS T1 INNER JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN INNER JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name LIKE '%Plato%'
SELECT COUNT(IdOrder) FROM Books_Order WHERE ISBN IN ( SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice' );
SELECT COUNT(IdOrder) FROM Books_Order WHERE ISBN IN ( SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice' )
SELECT IdOrder FROM Books_Order WHERE ISBN IN (SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice' OR Title = 'The Little Prince')
SELECT T2.IdOrder FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T1.Title = 'Pride and Prejudice' INTERSECT SELECT T2.IdOrder FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T1.Title = 'The Little Prince'
SELECT T1.ISBN  FROM Books_Order AS T1  JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder  JOIN Client AS T3 ON T2.IdClient = T3.IdClient  JOIN Books_Order AS T4 ON T1.ISBN = T4.ISBN  JOIN Orders AS T5 ON T4.IdOrder = T5.IdOrder  JOIN Client AS T6 ON T5.IdClient = T6.IdClient  WHERE T3.Name = 'Peter Doe' AND T6.Name = 'James Smith'
 SELECT DISTINCT T1.ISBN  FROM Books_Order AS T1  JOIN Orders AS T2 ON T1.IdOrder = T2.IdOrder  JOIN Client AS T3 ON T2.IdClient = T3.IdClient  JOIN Book AS T4 ON T1.ISBN = T4.ISBN  JOIN Author_Book AS T5 ON T4.ISBN = T5.ISBN  JOIN Author AS T6 ON T5.Author = T6.idAuthor  WHERE T3.Name = 'Peter Doe' AND T6.Name = 'John Smith'
SELECT T1.Title  FROM Book AS T1  JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN  JOIN Orders AS T3 ON T2.IdOrder = T3.IdOrder  JOIN Client AS T4 ON T3.IdClient = T4.IdClient  WHERE T4.Name = 'Peter Doe'  AND T4.Name!= 'James Smith'
SELECT T1.Title  FROM Book AS T1  JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN  JOIN Orders AS T3 ON T2.IdOrder = T3.IdOrder  JOIN Client AS T4 ON T3.IdClient = T4.IdClient  WHERE T4.Name = 'Peter Doe'  AND T4.Name!= 'James Smith'
SELECT T1.Name  FROM Client AS T1  JOIN Orders AS T2 ON T1.IdClient = T2.IdClient  JOIN Books_Order AS T3 ON T2.IdOrder = T3.IdOrder  JOIN Book AS T4 ON T3.ISBN = T4.ISBN  WHERE T4.Title = 'Pride and Prejudice';
SELECT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient INNER JOIN Books_Order AS T3 ON T2.IdOrder = T3.IdOrder INNER JOIN Book AS T4 ON T3.ISBN = T4.ISBN WHERE T4.Title = 'Pride and Prejudice'
SELECT COUNT(Book_ID) FROM book
SELECT Title FROM book ORDER BY Title ASC
SELECT Title FROM book ORDER BY Pages DESC
SELECT Type, Release FROM book
SELECT Book_ID, MAX(Chapters) AS max_chapters, MIN(Chapters) AS min_chapters FROM book GROUP BY Book_ID
SELECT Title FROM book WHERE Type!= 'Poet'
SELECT AVG(Rating) FROM review
SELECT T1.Title, T2.Rating FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID
SELECT T2.Rating FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.Chapters DESC LIMIT 1
SELECT T2.Rank FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.Pages ASC LIMIT 1
SELECT T1.Title FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Rank DESC LIMIT 1
SELECT AVG(Readers_in_Million) FROM review WHERE Book_ID IN ( SELECT Book_ID FROM book WHERE Type = 'Novel' )
SELECT Type, COUNT(Book_ID) FROM book GROUP BY Type
SELECT Type FROM book GROUP BY Type ORDER BY COUNT(Type) DESC LIMIT 1
SELECT Type FROM book GROUP BY Type HAVING COUNT(Book_ID) >= 3
SELECT T1.Title FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Rating ASC
SELECT T1.Title, T1.Audio FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Readers_in_Million DESC
SELECT COUNT(Book_ID) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)
SELECT DISTINCT Type FROM book WHERE Chapters > 75 INTERSECT SELECT DISTINCT Type FROM book WHERE Chapters < 50
SELECT COUNT(DISTINCT Type) FROM book
SELECT T1.Type, T1.Title FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Rating IS NULL
SELECT COUNT(Customer_ID) FROM customer
SELECT COUNT(Customer_ID) FROM customer
SELECT Name FROM customer ORDER BY Level_of_Membership ASC
SELECT Name FROM customer ORDER BY Level_of_Membership ASC
SELECT Nationality, Card_Credit FROM customer
SELECT Nationality, Card_Credit FROM customer
SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'
SELECT Name FROM customer WHERE Nationality = 'England' OR Nationality = 'Australia'
SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1
SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1
SELECT T1.Card_Credit FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Level_of_Membership = ( SELECT MAX(Level_of_Membership) FROM customer )
SELECT T1.Card_Credit FROM customer AS T1 INNER JOIN ( SELECT Customer_ID, MAX(Level_of_Membership) AS max_level FROM customer GROUP BY Customer_ID ) AS T2 ON T1.Customer_ID = T2.Customer_ID AND T1.Level_of_Membership = T2.max_level
SELECT Nationality, COUNT(Customer_ID) FROM customer GROUP BY Nationality
SELECT Nationality, COUNT(Customer_ID) FROM customer GROUP BY Nationality
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Customer_ID) DESC LIMIT 1
SELECT T1.Nationality FROM customer AS T1 INNER JOIN customer AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Card_Credit < 50 AND T2.Card_Credit > 75
SELECT T1.Nationality FROM customer AS T1 INNER JOIN customer AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Card_Credit > 50 AND T2.Card_Credit < 75
SELECT T1.Name, T3.Dish_Name FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID INNER JOIN customer_order AS T3 ON T1.Customer_ID = T3.Customer_ID
SELECT T1.Name, T3.Dish_Name FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID INNER JOIN customer_order AS T3 ON T2.Customer_ID = T3.Customer_ID
SELECT T1.Name, T3.Dish_Name FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID INNER JOIN customer_order AS T3 ON T2.Customer_ID = T3.Customer_ID AND T2.Branch_ID = T3.Branch_ID AND T2.Quantity < T3.Quantity ORDER BY T3.Quantity DESC
SELECT T1.Name, T3.Dish_Name, T2.Quantity FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID INNER JOIN customer_order AS T3 ON T2.Customer_ID = T3.Customer_ID AND T2.Branch_ID = T3.Branch_ID AND T2.Dish_Name = T3.Dish_Name ORDER BY T2.Quantity DESC
SELECT T1.Name, SUM(T3.Quantity) FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID INNER JOIN customer_order AS T3 ON T1.Customer_ID = T3.Customer_ID GROUP BY T1.Name
SELECT T1.Name, SUM(T3.Quantity) FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID INNER JOIN customer_order AS T3 ON T1.Customer_ID = T3.Customer_ID GROUP BY T1.Customer_ID
SELECT T1.Name FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID HAVING SUM(T2.Quantity) > 1
SELECT T1.Name FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID HAVING SUM(T2.Quantity) > 1
SELECT DISTINCT Manager FROM branch
SELECT DISTINCT Manager FROM branch
SELECT Name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)
SELECT T1.Name FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Customer_ID IS NULL
SELECT COUNT(Member_ID) FROM member
SELECT Name FROM member ORDER BY Age ASC
SELECT Name, Nationality FROM member
SELECT Name FROM member WHERE Nationality!= 'England'
SELECT Name FROM member WHERE Age = 19 OR Age = 20
SELECT Name FROM member ORDER BY Age DESC LIMIT 1
SELECT Nationality, COUNT(Member_ID) FROM member GROUP BY Nationality
SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1
SELECT T1.Nationality FROM member AS T1 INNER JOIN club_leader AS T2 ON T1.Member_ID = T2.Member_ID GROUP BY T1.Nationality HAVING COUNT(T1.Member_ID) >= 2
SELECT T1.Name, T2.Club_Name FROM club_leader AS T3 INNER JOIN member AS T1 ON T3.Member_ID = T1.Member_ID INNER JOIN club AS T2 ON T3.Club_ID = T2.Club_ID
SELECT T1.Name FROM member AS T1 INNER JOIN club_leader AS T2 ON T1.Member_ID = T2.Member_ID INNER JOIN club AS T3 ON T2.Club_ID = T3.Club_ID WHERE T3.Overall_Ranking > 100
SELECT T1.Name FROM member AS T1 INNER JOIN club_leader AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Year_Join < '2018'
SELECT T1.Team_Leader FROM club AS T1 INNER JOIN club_leader AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Club_Name = 'Houston'
SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)
SELECT T1.Nationality FROM member AS T1 INNER JOIN club_leader AS T2 ON T1.Member_ID = T2.Member_ID WHERE T1.Age > 22 INTERSECT SELECT T1.Nationality FROM member AS T1 INNER JOIN club_leader AS T2 ON T1.Member_ID = T2.Member_ID WHERE T1.Age < 19
SELECT AVG(T1.Age) FROM member AS T1 INNER JOIN club_leader AS T2 ON T1.Member_ID = T2.Member_ID
SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%'
SELECT T2.Collection_Subset_Name  FROM Collection_Subset_Members AS T1  INNER JOIN Collection_Subsets AS T2  ON T1.Collection_Subset_ID = T2.Collection_Subset_ID
SELECT T2.Collection_Subset_Name FROM Collections AS T1 INNER JOIN Collection_Subset_Members AS T3 ON T1.Collection_ID = T3.Collection_ID INNER JOIN Collection_Subsets AS T2 ON T3.Collection_Subset_ID = T2.Collection_Subset_ID
SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'
 SELECT T2.Collection_Description FROM Collection_Subsets AS T1 INNER JOIN Collection_Subset_Members AS T3 ON T1.Collection_Subset_ID = T3.Collection_Subset_ID INNER JOIN Collections AS T2 ON T3.Collection_ID = T2.Collection_ID WHERE T1.Collection_Subset_Name = 'Top collection'
SELECT T1.Document_Subset_Name  FROM Document_Subsets AS T1  INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID
SELECT Document_Subset_Name FROM Document_Subsets
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'
SELECT Document_Object_ID FROM Document_Objects
SELECT Document_Object_ID FROM Document_Objects
SELECT T1.Parent_Document_Object_ID FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner = 'Marlin'
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'
SELECT T1.Owner FROM Document_Objects AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID INNER JOIN Collections AS T3 ON T2.Collection_ID = T3.Collection_ID WHERE T3.Collection_Name = 'Braeden Collection'
SELECT T1.Owner FROM Document_Objects AS T1 INNER JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner = 'Marlin'
SELECT T1.Owner FROM Document_Objects AS T1 INNER JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner = 'Marlin'
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL
SELECT COUNT(Document_Object_ID) FROM Document_Objects WHERE Owner = 'Marlin'
SELECT COUNT(Document_Object_ID) FROM Document_Objects WHERE Owner = 'Marlin'
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL
SELECT Document_Object_ID, COUNT(Document_Object_ID) FROM Document_Objects GROUP BY Document_Object_ID
SELECT T1.Document_Object_ID, COUNT(T2.Document_Object_ID) FROM Document_Objects AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID GROUP BY T1.Document_Object_ID
SELECT Collection_Name FROM Collections
SELECT Collection_Name FROM Collections
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'
SELECT T2.Collection_Name FROM Collections AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = 'Nice'
SELECT T2.Collection_Name FROM Collections AS T1 INNER JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = 'Nice'
SELECT Collection_Name FROM Collections WHERE Parent_Collection_ID IS NULL
SELECT Collection_Name FROM Collections WHERE Parent_Collection_ID IS NULL
SELECT Document_Object_ID FROM Document_Objects WHERE Document_Object_ID IN (SELECT Related_Document_Object_ID FROM Document_Subset_Members GROUP BY Related_Document_Object_ID HAVING COUNT(Related_Document_Object_ID) > 1)
SELECT T1.Document_Object_ID FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID GROUP BY T1.Document_Object_ID HAVING COUNT(T1.Document_Object_ID) > 1
SELECT COUNT(Collection_ID) FROM Collections WHERE Collection_Name = 'Best'
SELECT COUNT(Collection_ID) FROM Collections WHERE Collection_Name = 'Best'
SELECT T1.Document_Object_ID FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner = 'Ransom'
SELECT T1.Document_Object_ID FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner = 'Ransom'
SELECT T1.Collection_Subset_ID, T1.Collection_Subset_Name, COUNT(T2.Collection_ID) FROM Collection_Subsets AS T1 INNER JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID GROUP BY T1.Collection_Subset_ID, T1.Collection_Subset_Name
SELECT T1.Collection_Subset_ID, T1.Collection_Subset_Name, COUNT(T2.Collection_ID) FROM Collection_Subsets AS T1 INNER JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID GROUP BY T1.Collection_Subset_ID, T1.Collection_Subset_Name
SELECT Document_Object_ID, COUNT(Document_Object_ID) FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL GROUP BY Document_Object_ID ORDER BY COUNT(Document_Object_ID) DESC LIMIT 1
SELECT Document_Object_ID, COUNT(*) FROM Document_Subset_Members GROUP BY Document_Object_ID
SELECT Document_Object_ID, COUNT(Document_Object_ID) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY COUNT(Document_Object_ID) ASC LIMIT 1
SELECT Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID ORDER BY COUNT(Document_Object_ID) ASC LIMIT 1
SELECT T1.Document_Object_ID, COUNT(T2.Document_Object_ID) FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID GROUP BY T1.Document_Object_ID HAVING COUNT(T2.Document_Object_ID) BETWEEN 2 AND 4
SELECT T1.Document_Object_ID, COUNT(T2.Document_Object_ID) FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID GROUP BY T1.Document_Object_ID HAVING COUNT(T2.Document_Object_ID) BETWEEN 2 AND 4
SELECT T1.Owner FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID INNER JOIN Document_Subset_Members AS T3 ON T1.Document_Object_ID = T3.Related_Document_Object_ID INNER JOIN Document_Objects AS T4 ON T3.Document_Object_ID = T4.Document_Object_ID WHERE T4.Owner = 'Braeden'
SELECT DISTINCT T1.Owner FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID INNER JOIN Document_Subset_Members AS T3 ON T2.Related_Document_Object_ID = T3.Document_Object_ID INNER JOIN Document_Objects AS T4 ON T3.Related_Document_Object_ID = T4.Document_Object_ID WHERE T4.Owner = 'Braeden'
 SELECT T3.Document_Subset_Name  FROM Document_Objects AS T1  INNER JOIN Document_Subset_Members AS T2  ON T1.Document_Object_ID = T2.Document_Object_ID  INNER JOIN Document_Subsets AS T3  ON T2.Document_Subset_ID = T3.Document_Subset_ID  WHERE T1.Owner = 'Braeden'
 SELECT DISTINCT T3.Document_Subset_Name  FROM Document_Subset_Members AS T1  INNER JOIN Document_Objects AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID  INNER JOIN Document_Subsets AS T3 ON T1.Document_Subset_ID = T3.Document_Subset_ID  WHERE T2.Owner = 'Braeden'
SELECT T1.Document_Subset_ID, T1.Document_Subset_Name, COUNT(DISTINCT T2.Document_Object_ID)  FROM Document_Subsets AS T1  LEFT JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID
SELECT T1.Document_Subset_ID, T1.Document_Subset_Name, COUNT(DISTINCT T2.Document_Object_ID) FROM Document_Subsets AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID, T1.Document_Subset_Name
 SELECT Document_Subset_ID, Document_Subset_Name, COUNT(DISTINCT Document_Object_ID) FROM Document_Subset_Members GROUP BY Document_Subset_ID, Document_Subset_Name ORDER BY COUNT(DISTINCT Document_Object_ID) DESC LIMIT 1
 SELECT Document_Subset_Members.Document_Subset_ID, Document_Subsets.Document_Subset_Name, COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) FROM Document_Subset_Members INNER JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID GROUP BY Document_Subset_Members.Document_Subset_ID ORDER BY COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) DESC LIMIT 1
SELECT T1.Document_Object_ID  FROM Document_Subset_Members AS T1  JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID  WHERE T2.Document_Subset_Name = 'Best for 2000'
SELECT T1.Document_Object_ID  FROM Document_Subset_Members AS T1  JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID  WHERE T2.Document_Subset_Name = 'Best for 2000'
 SELECT T1.Document_Subset_Name, T2.Document_Object_ID  FROM Document_Subset_Members AS T1  INNER JOIN Document_Objects AS T2  ON T1.Document_Object_ID = T2.Document_Object_ID  INNER JOIN Document_Subsets AS T3  ON T1.Document_Subset_ID = T3.Document_Subset_ID
SELECT T1.Document_Subset_Name, T1.Document_Subset_ID, T2.Document_Object_ID  FROM Document_Subset_Members AS T2  INNER JOIN Document_Subsets AS T1  ON T2.Document_Subset_ID = T1.Document_Subset_ID
 SELECT T3.Collection_Name  FROM Document_Objects AS T1  INNER JOIN Documents_in_Collections AS T2  ON T1.Document_Object_ID = T2.Document_Object_ID  INNER JOIN Collections AS T3  ON T2.Collection_ID = T3.Collection_ID  WHERE T1.Owner = 'Ransom ';
 SELECT T2.Collection_Name FROM Document_Objects AS T1 INNER JOIN Collections AS T2 ON T1.Document_Object_ID = T2.Collection_ID WHERE T1.Owner = 'Ransom'
SELECT Document_Object_ID, COUNT(Collection_ID) FROM Documents_in_Collections GROUP BY Document_Object_ID
SELECT Document_Object_ID, COUNT(Collection_ID) FROM Documents_in_Collections GROUP BY Document_Object_ID
SELECT COUNT(DISTINCT T1.Document_Object_ID)  FROM Documents_in_Collections AS T1  INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID  WHERE T2.Collection_Name = 'Best'
SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Best'
SELECT T1.Document_Object_ID FROM Documents_in_Collections AS T1 INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = 'Best'
SELECT COUNT(DISTINCT T1.Document_Object_ID)  FROM Documents_in_Collections AS T1  INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID  WHERE T2.Collection_Name = 'Best'
SELECT C.Collection_Name, C.Collection_ID, COUNT(DI.Collection_ID) FROM Collections C LEFT JOIN Documents_in_Collections DI ON C.Collection_ID = DI.Collection_ID GROUP BY C.Collection_ID ORDER BY COUNT(DI.Collection_ID) DESC LIMIT 1
SELECT T1.Collection_Name, T1.Collection_ID, COUNT(T2.Document_Object_ID) FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = 'Best' GROUP BY T1.Collection_ID ORDER BY COUNT(T2.Document_Object_ID) DESC LIMIT 1
SELECT T1.Document_Object_ID  FROM Document_Objects AS T1  INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID  INNER JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID = T3.Document_Subset_ID  WHERE T3.Document_Subset_Name = 'Best for 2000'  INTERSECT  SELECT T1.Document_Object_ID  FROM Document_Objects AS T1  INNER JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID  INNER JOIN Collections AS T3 ON T2.Collection_ID = T3.Collection_ID  WHERE T3.Collection_Name = 'Best'
SELECT DISTINCT T1.Document_Object_ID  FROM Document_Subset_Members AS T1  INNER JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID  WHERE T2.Document_Subset_Name = 'Best for 2000' UNION SELECT DISTINCT T3.Document_Object_ID  FROM Documents_in_Collections AS T3  INNER JOIN Collections AS T4 ON T3.Collection_ID = T4.Collection_ID  WHERE T4.Collection_Name = 'Best'
SELECT T1.Document_Object_ID  FROM Documents_in_Collections AS T1  INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID  INNER JOIN Collection_Subset_Members AS T3 ON T2.Collection_ID = T3.Collection_ID  INNER JOIN Collection_Subsets AS T4 ON T3.Collection_Subset_ID = T4.Collection_Subset_ID  WHERE T2.Collection_Name = 'Best' AND T4.Collection_Subset_Name = 'Best' AND T1.Document_Object_ID NOT IN ( SELECT T5.Document_Object_ID FROM Document_Subset_Members AS T5 INNER JOIN Document_Subsets AS T6 ON T5.Document_Subset_ID = T6.Document_Subset_ID WHERE T6.Document_Subset_Name = 'Best for 2000' )
SELECT DISTINCT T1.Document_Object_ID  FROM Documents_in_Collections AS T1  INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID  INNER JOIN Collection_Subset_Members AS T3 ON T2.Collection_ID = T3.Collection_ID  INNER JOIN Collection_Subsets AS T4 ON T3.Collection_Subset_ID = T4.Collection_Subset_ID  WHERE T4.Collection_Subset_Name = 'Best for 2000'  EXCEPT  SELECT DISTINCT T1.Document_Object_ID  FROM Documents_in_Collections AS T1  INNER JOIN Collections AS T2 ON T1.Collection_ID = T2.Collection_ID  INNER JOIN Collection_Subset_Members AS T3 ON T2.Collection_ID = T3.Collection_ID  INNER JOIN Collection_Subsets AS T4 ON T3.Collection_Subset_ID = T4.Collection_Subset_ID  WHERE T4.Collection_Subset_Name = 'Best'
SELECT T1.Document_Object_ID FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID INNER JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID = T3.Document_Subset_ID WHERE T3.Document_Subset_Name = 'Best for 2000' UNION SELECT T1.Document_Object_ID FROM Document_Objects AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID INNER JOIN Collections AS T3 ON T2.Collection_ID = T3.Collection_ID WHERE T3.Collection_Name = 'Best'
SELECT DISTINCT T1.Document_Object_ID  FROM Document_Objects AS T1  INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID  INNER JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID = T3.Document_Subset_ID  WHERE T3.Document_Subset_Name = 'Best for 2000'  UNION  SELECT DISTINCT T1.Document_Object_ID  FROM Document_Objects AS T1  INNER JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID  INNER JOIN Collections AS T3 ON T2.Collection_ID = T3.Collection_ID  WHERE T3.Collection_Name = 'Best'
 SELECT T2.Collection_Name FROM Collections AS T1 INNER JOIN Collection_Subset_Members AS T3 ON T1.Collection_ID = T3.Collection_ID INNER JOIN Collection_Subsets AS T2 ON T3.Collection_Subset_ID = T2.Collection_Subset_ID WHERE T2.Collection_Subset_Name = 'Best'
 SELECT T2.Collection_Name FROM Collections AS T1 INNER JOIN Collection_Subset_Members AS T3 ON T1.Collection_ID = T3.Collection_ID INNER JOIN Collection_Subsets AS T2 ON T3.Collection_Subset_ID = T2.Collection_Subset_ID WHERE T2.Collection_Subset_Name = 'Best'
SELECT COUNT(Collection_ID) FROM Collections WHERE Collection_Name = 'Best'
SELECT COUNT(DISTINCT Collection_ID) FROM Collections WHERE Collection_Name = 'Best'
 SELECT T3.Collection_Subset_Name  FROM Collections AS T1  INNER JOIN Collection_Subset_Members AS T2  ON T1.Collection_ID = T2.Collection_ID  INNER JOIN Collection_Subsets AS T3  ON T2.Collection_Subset_ID = T3.Collection_Subset_ID  WHERE T1.Collection_Name = 'Best in'
SELECT T2.Collection_Subset_ID FROM Collections AS T1 INNER JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = 'Best'
SELECT COUNT(id) FROM songs WHERE name LIKE '%Love%'
SELECT name FROM songs ORDER BY name ASC
 SELECT T1.name, T2.language FROM songs AS T1 INNER JOIN performance_score AS T3 ON T1.id = T3.songs_id INNER JOIN songs AS T2 ON T3.songs_id = T2.id
SELECT MAX(voice_sound_quality), MIN(voice_sound_quality) FROM performance_score
SELECT T1.voice_sound_quality, T1.rhythm_tempo, T1.stage_presence  FROM performance_score AS T1  JOIN participants AS T2 ON T1.participant_id = T2.id  WHERE T2.name = 'Freeway';
SELECT id, language, original_artist FROM songs WHERE name!= 'Love'
SELECT T1.name, T1.original_artist FROM songs AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.songs_id WHERE T1.english_translation = 'All the streets of love'
SELECT DISTINCT T1.stage_presence FROM performance_score AS T1 INNER JOIN songs AS T2 ON T1.songs_id = T2.id WHERE T2.language = 'English'
 SELECT T1.id, T1.name FROM participants AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.participant_id GROUP BY T1.id HAVING COUNT(T2.participant_id) >= 2
SELECT p.id, p.name, p.popularity, COUNT(ps.songs_id) FROM participants p LEFT JOIN performance_score ps ON p.id = ps.participant_id GROUP BY p.id ORDER BY COUNT(ps.songs_id) DESC
SELECT T1.id, T1.name FROM participants AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T2.voice_sound_quality = 5 OR T2.rhythm_tempo = 5
SELECT T2.voice_sound_quality  FROM songs AS T1  INNER JOIN performance_score AS T2  ON T1.id = T2.songs_id  WHERE T1.name = 'The Balkan Girls' AND T1.language = 'English';
SELECT T1.id, T1.name FROM songs AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.songs_id GROUP BY T1.id ORDER BY COUNT(T2.participant_id) DESC LIMIT 1
SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9
SELECT COUNT(id) FROM songs WHERE id NOT IN (SELECT songs_id FROM performance_score)
SELECT T1.language, AVG(T2.rhythm_tempo) FROM songs AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.songs_id GROUP BY T1.language
SELECT DISTINCT T1.name FROM participants AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.participant_id INNER JOIN songs AS T3 ON T2.songs_id = T3.id WHERE T3.`language` = 'English'
SELECT T1.name, T1.popularity  FROM participants AS T1  JOIN performance_score AS T2 ON T1.id = T2.participant_id  JOIN songs AS T3 ON T2.songs_id = T3.id  WHERE T3.language = 'Croatian' AND T3.english_translation IS NOT NULL
SELECT name FROM songs WHERE name LIKE '%Is%'
SELECT T1.original_artist FROM songs AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.songs_id WHERE T2.rhythm_tempo > 5 ORDER BY T2.voice_sound_quality DESC
SELECT COUNT(city_code) FROM City
SELECT COUNT(city_code) FROM City
SELECT DISTINCT state FROM City
SELECT DISTINCT state FROM City
SELECT COUNT(country) FROM City
SELECT COUNT(country) FROM City
SELECT city_name, city_code, state, country FROM City
SELECT city_name, city_code, state, country FROM City
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore'
SELECT city_name FROM City WHERE state = 'PA'
SELECT city_name FROM City WHERE state = 'PA'
SELECT COUNT(city_code) FROM City WHERE country = 'Canada'
SELECT COUNT(city_code) FROM City WHERE country = 'Canada'
SELECT city_name FROM City WHERE state = 'US' ORDER BY latitude
SELECT city_name FROM City WHERE state = 'US' ORDER BY latitude
SELECT state, COUNT(city_code) FROM City GROUP BY state
SELECT state, COUNT(city_code) FROM City GROUP BY state
SELECT country, COUNT(city_code) FROM City GROUP BY country
SELECT country, COUNT(city_code) FROM City GROUP BY country
SELECT state FROM City GROUP BY state HAVING COUNT(city_code) >= 2
SELECT state FROM City GROUP BY state HAVING COUNT(city_code) >= 2
SELECT state FROM City GROUP BY state ORDER BY COUNT(city_code) DESC LIMIT 1
SELECT state FROM City GROUP BY state ORDER BY COUNT(city_code) DESC LIMIT 1
SELECT country FROM City GROUP BY country ORDER BY COUNT(city_code) LIMIT 1
SELECT country FROM City GROUP BY country ORDER BY COUNT(city_code) ASC LIMIT 1
SELECT T1.Fname, T1.LName  FROM Student AS T1  JOIN City AS T2 ON T1.city_code = T2.city_code  WHERE T2.state = 'MD';
SELECT Fname, LName FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE state = 'MD')
 SELECT COUNT(StuID) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country = 'China')
SELECT COUNT(StuID) FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE country = 'China')
SELECT T1.Fname, T1.Major  FROM Student AS T1  JOIN City AS T2 ON T1.city_code = T2.city_code  WHERE T2.city_name = 'Baltimore';
SELECT T1.Fname, T1.Major FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.city_name = 'Baltimore'
SELECT COUNT(StuID), T2.country FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code GROUP BY T2.country
 SELECT T2.country, COUNT(T1.StuID) FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code GROUP BY T2.country
SELECT T1.city_name, COUNT(T2.StuID) FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_name
SELECT T1.city_name, COUNT(T2.StuID) FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_name
SELECT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state ORDER BY COUNT(T2.StuID) DESC LIMIT 1
SELECT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state ORDER BY COUNT(T2.StuID) DESC LIMIT 1
SELECT T1.country FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.country ORDER BY COUNT(T2.StuID) ASC LIMIT 1
SELECT T1.country FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.country ORDER BY COUNT(T2.StuID) ASC LIMIT 1
SELECT T2.city_name FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_code HAVING COUNT(T1.StuID) >= 3
SELECT T2.city_name FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code GROUP BY T2.city_name HAVING COUNT(T1.StuID) >= 3
SELECT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state HAVING COUNT(T2.StuID) > 5
SELECT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state HAVING COUNT(T2.StuID) > 5
 SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE state = 'US')
 SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE state = 'USA')
 SELECT StuID FROM Student WHERE Sex = 'F' AND city_code IN (SELECT city_code FROM City WHERE state = 'PA')
SELECT StuID FROM Student WHERE Sex = 'F' AND Advisor IN ( SELECT city_code FROM City WHERE state = 'PA' );
 SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE state = 'US')
 SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE state = 'US')
SELECT T1.distance FROM Direct_distance AS T1 INNER JOIN City AS T2 ON T1.city1_code = T2.city_code WHERE T2.city_name = 'BAL' AND T1.city2_code IN ( SELECT city_code FROM City WHERE city_name = 'CHI' )
SELECT T1.distance FROM Direct_distance AS T1 INNER JOIN City AS T2 ON T1.city1_code = T2.city_code WHERE T2.city_name = 'BAL' AND T1.city2_code IN (SELECT city_code FROM City WHERE city_name = 'CHI')
SELECT T1.distance  FROM Direct_distance AS T1  JOIN City AS T2 ON T1.city1_code = T2.city_code  JOIN City AS T3 ON T1.city2_code = T3.city_code  WHERE T2.city_name = 'Boston' AND T3.city_name = 'Newark';
SELECT T1.distance  FROM Direct_distance AS T1  JOIN City AS T2 ON T1.city1_code = T2.city_code  JOIN City AS T3 ON T1.city2_code = T3.city_code  WHERE T2.city_name = 'Boston' AND T3.city_name = 'Newark'
SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance
SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance
SELECT T1.city1_code, T2.city2_code FROM Direct_distance AS T1 INNER JOIN Direct_distance AS T2 ON T1.distance = T2.distance AND T1.city1_code < T2.city1_code ORDER BY T1.distance DESC LIMIT 1
SELECT city1_code FROM Direct_distance WHERE distance = ( SELECT MAX(distance) FROM Direct_distance )
SELECT city1_code FROM Direct_distance WHERE distance > ( SELECT AVG(distance) FROM Direct_distance )
SELECT city1_code FROM Direct_distance WHERE distance > ( SELECT AVG(distance) FROM Direct_distance )
SELECT city1_code, city2_code FROM Direct_distance WHERE distance < 1000
SELECT city1_code FROM Direct_distance WHERE distance < 1000 UNION SELECT city2_code FROM Direct_distance WHERE distance < 1000
SELECT SUM(T2.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.city_name = 'BAL'
SELECT SUM(T2.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.city_name = 'BAL'
SELECT AVG(T2.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.city_name = 'Boston'
SELECT AVG(T2.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.city_name = 'Boston'
 SELECT T2.city_name FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.city_name = 'Chicago' ORDER BY T2.distance LIMIT 1
 SELECT T2.city_name FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.city_name = 'Chicago' ORDER BY T2.distance LIMIT 1
SELECT city_name FROM City WHERE latitude = ( SELECT MAX(latitude) FROM City WHERE city_name!= 'Boston' )
SELECT T2.city_name  FROM Direct_distance AS T1  JOIN City AS T2 ON T1.city1_code = T2.city_code  WHERE T2.city_name = 'Boston'  ORDER BY T1.distance DESC  LIMIT 1
 SELECT d1.city1_code, SUM(d1.distance) FROM Direct_distance d1 GROUP BY d1.city1_code
 SELECT city1_code, SUM(distance) FROM Direct_distance GROUP BY city1_code
SELECT T1.city_name, AVG(T2.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code GROUP BY T1.city_name
SELECT T1.city_name, AVG(T2.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code GROUP BY T1.city_name
SELECT T1.distance FROM Direct_distance AS T1 INNER JOIN City AS T2 ON T1.city1_code = T2.city_code INNER JOIN City AS T3 ON T1.city2_code = T3.city_code INNER JOIN Student AS T4 ON T2.city_code = T4.city_code WHERE T4.LName = 'Smith' AND T4.Fname = 'Linda' INTERSECT SELECT T1.distance FROM Direct_distance AS T1 INNER JOIN City AS T2 ON T1.city1_code = T2.city_code INNER JOIN City AS T3 ON T1.city2_code = T3.city_code INNER JOIN Student AS T4 ON T3.city_code = T4.city_code WHERE T4.LName = 'Kim' AND T4.Fname = 'Tracy'
SELECT T1.distance  FROM Direct_distance AS T1  INNER JOIN City AS T2  ON T1.city1_code = T2.city_code  INNER JOIN Student AS T3  ON T2.city_code = T3.city_code  WHERE T3.LName = 'Smith' AND T3.Fname = 'Linda'  INTERSECT  SELECT T1.distance  FROM Direct_distance AS T1  INNER JOIN City AS T2  ON T1.city2_code = T2.city_code  INNER JOIN Student AS T3  ON T2.city_code = T3.city_code  WHERE T3.LName = 'Kim' AND T3.Fname = 'Tracy'
SELECT T1.Fname, T1.LName  FROM Student AS T1  JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code  JOIN Student AS T3 ON T2.city2_code = T3.city_code  WHERE T3.LName = 'Smith' AND T3.Fname = 'Linda'  ORDER BY T2.distance DESC  LIMIT 1
SELECT T1.Fname, T1.LName  FROM Student AS T1  JOIN City AS T2 ON T1.city_code = T2.city_code  WHERE T2.latitude - ( SELECT T2.latitude FROM City AS T2 JOIN Student AS T1 ON T2.city_code = T1.city_code WHERE T1.LName = 'Smith' AND T1.Fname = 'Linda' ) = ( SELECT MAX(T2.latitude - ( SELECT T2.latitude FROM City AS T2 JOIN Student AS T1 ON T2.city_code = T1.city_code WHERE T1.LName = 'Smith' AND T1.Fname = 'Linda' )) FROM City AS T2 JOIN Student AS T1 ON T2.city_code = T1.city_code );
SELECT T2.state FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.Fname = 'Linda'
SELECT T2.state FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T1.Fname = 'Linda'
SELECT * FROM Sailors WHERE age > 30
SELECT name FROM Sailors WHERE age > 30
SELECT name, age FROM Sailors WHERE age < 30
SELECT name, age FROM Sailors WHERE age < 30
 SELECT T3.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T1.sid = 1
SELECT bid FROM Reserves WHERE sid = 1 GROUP BY bid
SELECT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 102
SELECT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 102
SELECT DISTINCT bid FROM Reserves
SELECT bid FROM Reserves
SELECT name FROM Sailors WHERE name LIKE '%e%'
SELECT name FROM Sailors WHERE name LIKE '%e%'
SELECT sid FROM Sailors WHERE age > ( SELECT MAX(age) FROM Sailors )
SELECT sid FROM Sailors WHERE age > ( SELECT MIN(age) FROM Sailors )
SELECT DISTINCT name FROM Sailors WHERE age > ( SELECT MAX(age) FROM Sailors WHERE rating > 7 )
SELECT DISTINCT name FROM Sailors WHERE age > ( SELECT MAX(age) FROM Sailors WHERE rating <= 7 )
SELECT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid
SELECT name, sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves)
SELECT T1.sid, T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid GROUP BY T1.sid HAVING COUNT(T2.bid) > 1
SELECT name FROM Sailors WHERE sid IN ( SELECT sid FROM Reserves GROUP BY sid HAVING COUNT(bid) >= 2 )
SELECT T1.sid  FROM Sailors AS T1  INNER JOIN Reserves AS T2 ON T1.sid = T2.sid  INNER JOIN Boats AS T3 ON T2.bid = T3.bid  WHERE T3.color IN ('red', 'blue');
SELECT T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color IN ('red', 'blue')
SELECT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color IN ('red', 'blue')
SELECT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color IN ('red', 'blue')
SELECT T1.sid  FROM Reserves AS T1  JOIN Boats AS T2 ON T1.bid = T2.bid  WHERE T2.color IN ('red', 'blue')
SELECT T1.sid  FROM Sailors AS T1  JOIN Reserves AS T2 ON T1.sid = T2.sid  JOIN Boats AS T3 ON T2.bid = T3.bid  WHERE T3.color ='red' INTERSECT  SELECT T1.sid  FROM Sailors AS T1  JOIN Reserves AS T2 ON T1.sid = T2.sid  JOIN Boats AS T3 ON T2.bid = T3.bid  WHERE T3.color = 'blue';
SELECT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color ='red' INTERSECT SELECT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = 'blue'
SELECT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color ='red' OR T3.color = 'blue'
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT name, sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT sid FROM Sailors WHERE sid NOT IN (SELECT sid FROM Reserves)
SELECT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 103
SELECT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 103
SELECT name FROM Sailors WHERE rating > ( SELECT MAX(rating) FROM Sailors WHERE name = 'Luis' )
SELECT name FROM Sailors WHERE rating > ( SELECT MAX(rating) FROM Sailors WHERE name = 'Luis' )
SELECT name FROM Sailors WHERE rating > ( SELECT MAX(rating) FROM Sailors WHERE name = 'Luis' )
SELECT name FROM Sailors WHERE rating > ( SELECT MAX(rating) FROM Sailors WHERE name = 'Luis' )
SELECT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T1.rating > 2
SELECT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T1.rating >= 3
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1
SELECT name, age FROM Sailors ORDER BY age DESC LIMIT 1
SELECT COUNT(sid) FROM Sailors
SELECT COUNT(sid) FROM Sailors
SELECT AVG(age) FROM Sailors WHERE rating = 7
SELECT AVG(age) FROM Sailors WHERE rating = 7
SELECT COUNT(sid) FROM Sailors WHERE name LIKE 'D%'
SELECT COUNT(sid) FROM Sailors WHERE name LIKE 'D%'
SELECT AVG(rating), MAX(age) FROM Sailors
SELECT AVG(rating), MAX(age) FROM Sailors
SELECT name, COUNT(*) FROM Boats AS T1 INNER JOIN Reserves AS T2 ON T1.bid = T2.bid GROUP BY T1.name
SELECT name, COUNT(*) FROM Boats AS T1 INNER JOIN Reserves AS T2 ON T1.bid = T2.bid GROUP BY T1.name
SELECT COUNT(*) FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.bid > 50
SELECT COUNT(*), T2.name FROM Reserves AS T1 INNER JOIN Boats AS T2 ON T1.bid = T2.bid WHERE T2.bid > 50 GROUP BY T2.bid
SELECT COUNT(*) FROM Reserves GROUP BY bid HAVING COUNT(*) > 1
SELECT bid, COUNT(*) FROM Reserves GROUP BY bid HAVING COUNT(*) > 1
SELECT COUNT(T1.bid), T1.bid FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.sid > 1 GROUP BY T1.bid
 SELECT COUNT(T2.bid), T3.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T1.sid > 1 GROUP BY T3.name
SELECT T1.rating, AVG(T1.age) FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color ='red' GROUP BY T1.rating
SELECT T1.rating, AVG(T1.age) FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color ='red' GROUP BY T1.rating
SELECT name, rating, age FROM Sailors ORDER BY rating, age
SELECT name, rating, age FROM Sailors ORDER BY rating, age
SELECT COUNT(bid) FROM Boats
SELECT COUNT(bid) FROM Boats
SELECT COUNT(*) FROM Boats WHERE color ='red'
SELECT COUNT(*) FROM Boats WHERE color ='red'
 SELECT T3.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T1.age BETWEEN 20 AND 30
 SELECT T3.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T1.age BETWEEN 20 AND 30
SELECT name FROM Sailors WHERE rating > ( SELECT MAX(rating) FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color ='red' )
SELECT name FROM Sailors WHERE rating > ( SELECT MAX(rating) FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color ='red' )
SELECT MAX(rating) FROM Sailors
 SELECT MAX(rating) FROM Sailors
SELECT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.name = 'Melon'
SELECT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.name = 'Melon'
SELECT name, age FROM Sailors ORDER BY rating DESC
SELECT name, age FROM Sailors ORDER BY rating DESC
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1
SELECT Model FROM headphone GROUP BY Model ORDER BY Model
SELECT DISTINCT Model FROM headphone ORDER BY Model ASC
SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(Class) DESC LIMIT 1
SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(Class) DESC LIMIT 1
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(Class) > 2
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(Class) <= 2
SELECT Class, COUNT(*) FROM headphone WHERE Price > 200 GROUP BY Class
SELECT Class, COUNT(*) FROM headphone WHERE Price > 200 GROUP BY Class
SELECT COUNT(DISTINCT Earpads) FROM headphone
SELECT COUNT(DISTINCT Earpads) FROM headphone
SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(Earpads) DESC LIMIT 2
SELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(Earpads) DESC LIMIT 2
SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC LIMIT 1
SELECT Model, Class, Construction FROM headphone ORDER BY Price ASC LIMIT 1
SELECT AVG(Price) FROM headphone GROUP BY Construction
SELECT AVG(Price) FROM headphone GROUP BY Construction
SELECT DISTINCT T1.Class FROM headphone AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID WHERE T1.Earpads = 'Bowls' INTERSECT SELECT DISTINCT T1.Class FROM headphone AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID WHERE T1.Earpads = 'Comfort Pads'
SELECT DISTINCT T1.Class FROM headphone AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID WHERE T1.Earpads = 'Bowls' INTERSECT SELECT DISTINCT T1.Class FROM headphone AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID WHERE T1.Earpads = 'Comfort Pads'
SELECT Earpads FROM headphone WHERE Construction!= 'Plastic'
SELECT Earpads FROM headphone WHERE Construction!= 'Plastic'
SELECT Model FROM headphone WHERE Price < ( SELECT AVG(Price) FROM headphone )
SELECT Model FROM headphone WHERE Price < ( SELECT AVG(Price) FROM headphone )
SELECT Name FROM store ORDER BY Date_Opened
SELECT Name FROM store ORDER BY Date_Opened
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'
SELECT COUNT(DISTINCT Neighborhood) FROM store
SELECT COUNT(DISTINCT Neighborhood) FROM store
SELECT Neighborhood, COUNT(Store_ID) FROM store GROUP BY Neighborhood
SELECT Neighborhood, COUNT(Store_ID) FROM store GROUP BY Neighborhood
 SELECT T1.Name, SUM(T2.Quantity) FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID GROUP BY T1.Store_ID ORDER BY SUM(T2.Quantity) DESC LIMIT 1
 SELECT T1.Name, SUM(T2.Quantity) FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID GROUP BY T1.Store_ID
SELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)
SELECT T2.Name FROM stock AS T1 INNER JOIN store AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Headphone_ID IS NULL
SELECT Model FROM headphone WHERE Headphone_ID NOT IN ( SELECT Headphone_ID FROM stock )
SELECT Model FROM headphone WHERE Model NOT IN ( SELECT h.Model FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY h.Model )
SELECT T1.Model FROM headphone AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T1.Model ORDER BY SUM(T2.Quantity) DESC LIMIT 1
SELECT T1.Model FROM headphone AS T1 INNER JOIN stock AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T1.Model ORDER BY SUM(T2.Quantity) DESC LIMIT 1
SELECT COUNT(T2.Headphone_ID) FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Name = 'Woodman'
SELECT SUM(T2.Quantity) FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Name = 'Woodman'
SELECT Neighborhood FROM store WHERE Store_ID NOT IN ( SELECT Store_ID FROM stock )
SELECT T2.Neighborhood FROM stock AS T1 INNER JOIN store AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Store_ID NOT IN (SELECT Store_ID FROM stock GROUP BY Store_ID HAVING COUNT(Headphone_ID) > 0)
SELECT COUNT(author_id) FROM Author
SELECT COUNT(author_id) FROM Author
SELECT COUNT(paper_id) FROM Paper
SELECT COUNT(paper_id) FROM Paper
SELECT COUNT(*) FROM Affiliation
SELECT COUNT(*) FROM Affiliation
SELECT COUNT(paper_id) FROM Paper WHERE venue = 'NAACL 2000'
SELECT COUNT(paper_id) FROM Paper WHERE venue = 'NAACL 2000' AND year = 2000
SELECT COUNT(T1.paper_id)  FROM Paper AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Author AS T3 ON T2.author_id = T3.author_id  JOIN Affiliation AS T4 ON T2.affiliation_id = T4.affiliation_id  WHERE T1.year = 2009 AND T4.name = 'Columbia University';
SELECT COUNT(T1.paper_id)  FROM Paper AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Author AS T3 ON T2.author_id = T3.author_id  JOIN Affiliation AS T4 ON T2.affiliation_id = T4.affiliation_id  WHERE T4.name = 'Columbia University' AND T1.year = 2009
SELECT name, address FROM Affiliation
SELECT name, address FROM Affiliation
SELECT venue, year FROM Paper ORDER BY year
SELECT DISTINCT venue FROM Paper ORDER BY year
SELECT T1.title, T1.paper_id  FROM Paper AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Author AS T3 ON T2.author_id = T3.author_id  JOIN Affiliation AS T4 ON T2.affiliation_id = T4.affiliation_id  WHERE T4.name = 'Harvard University';
SELECT T1.title, T1.paper_id  FROM Paper AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Author AS T3 ON T2.author_id = T3.author_id  JOIN Affiliation AS T4 ON T2.affiliation_id = T4.affiliation_id  WHERE T4.name = 'Harvard University';
SELECT p.paper_id, p.title  FROM Paper p  JOIN Author_list al ON p.paper_id = al.paper_id  JOIN Author a ON al.author_id = a.author_id  WHERE a.name = 'Mckeown'
SELECT T1.title, T1.paper_id FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown'
SELECT DISTINCT p.paper_id, p.title  FROM Paper p  JOIN Author_list al ON p.paper_id = al.paper_id  JOIN Author a ON al.author_id = a.author_id  JOIN Affiliation af ON al.affiliation_id = af.affiliation_id  WHERE af.name IN ('Stanford University', 'Columbia University');
SELECT T1.title, T1.paper_id  FROM Paper AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id  WHERE T3.name IN ('Stanford', 'Columbia University')
SELECT DISTINCT p.paper_id, p.title  FROM Paper p  JOIN Author_list al1 ON p.paper_id = al1.paper_id  JOIN Author_list al2 ON p.paper_id = al2.paper_id  JOIN Author a1 ON al1.author_id = a1.author_id  JOIN Author a2 ON al2.author_id = a2.author_id  WHERE a1.name = 'Mckeown, Kathleen' AND a2.name = 'Rambow, Owen';
SELECT T1.title, T1.paper_id  FROM Paper AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Author AS T3 ON T2.author_id = T3.author_id  WHERE T3.name = 'Mckeown, Kathleen' AND T2.author_id IN ( SELECT author_id FROM Author WHERE name = 'Rambow, Owen' );
SELECT T1.title, T1.paper_id  FROM Paper AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Author AS T3 ON T2.author_id = T3.author_id  WHERE T3.name = 'Mckeown' AND T2.author_id NOT IN (SELECT author_id FROM Author_list WHERE name = 'Rambow');
SELECT T1.title, T1.paper_id  FROM Paper AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Author AS T3 ON T2.author_id = T3.author_id  WHERE T3.name = 'Mckeown' AND T2.author_id NOT IN (SELECT author_id FROM Author_list WHERE author_id IN (SELECT author_id FROM Author WHERE name = 'Rambow'))
SELECT T1.title, T1.paper_id  FROM Paper AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Author AS T3 ON T2.author_id = T3.author_id  WHERE T3.name IN ('Mckeown, Kathleen', 'Rambow, Owen');
SELECT T1.title, T1.paper_id  FROM Paper AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Author AS T3 ON T2.author_id = T3.author_id  WHERE T3.name = 'Mckeown, Kathleen' OR T3.name = 'Rambow, Owen'
SELECT T1.name, COUNT(T2.paper_id) FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id ORDER BY COUNT(T2.paper_id) DESC
SELECT T1.name, COUNT(T2.paper_id) FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id ORDER BY COUNT(T2.paper_id) DESC
SELECT T1.name, COUNT(T2.paper_id) FROM Affiliation AS T1 LEFT JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY COUNT(T2.paper_id) ASC
SELECT T1.name FROM Affiliation AS T1 INNER JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY COUNT(T2.paper_id) DESC
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING COUNT(T2.paper_id) > 50
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING COUNT(T2.paper_id) > 50
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING COUNT(T2.paper_id) = 1
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING COUNT(T2.paper_id) = 1
SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(paper_id) DESC LIMIT 1
SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(paper_id) DESC LIMIT 1
SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(paper_id) ASC LIMIT 1
SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(paper_id) ASC LIMIT 1
SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002'
SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002'
SELECT COUNT(cited_paper_id) FROM Citation WHERE paper_id = 'D12-1027'
SELECT COUNT(cited_paper_id) FROM Citation WHERE paper_id = 'D12-1027'
SELECT T1.paper_id, COUNT(T2.cited_paper_id) FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.cited_paper_id) DESC LIMIT 1
SELECT T1.paper_id, COUNT(T2.cited_paper_id) FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.cited_paper_id) DESC LIMIT 1
SELECT T1.title FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.cited_paper_id) DESC LIMIT 1
SELECT T1.title FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.cited_paper_id) DESC LIMIT 1
SELECT T1.paper_id, COUNT(T2.cited_paper_id) AS num_citations FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY num_citations DESC LIMIT 10
SELECT paper_id, COUNT(*) FROM Citation GROUP BY paper_id ORDER BY COUNT(*) DESC LIMIT 10
SELECT COUNT(T1.paper_id) FROM Citation AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown, Kathleen'
SELECT COUNT(T2.cited_paper_id)  FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.paper_id  INNER JOIN Author_list AS T3 ON T1.author_id = T3.author_id  WHERE T1.name = 'Mckeown, Kathleen';
SELECT COUNT(T1.paper_id) FROM Citation AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown, Kathleen'
SELECT COUNT(T1.paper_id)  FROM Citation AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Author AS T3 ON T2.author_id = T3.author_id  WHERE T3.name = 'Mckeown, Kathleen'
SELECT T1.name, COUNT(T2.paper_id) FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id INNER JOIN Citation AS T3 ON T2.paper_id = T3.paper_id GROUP BY T1.author_id ORDER BY COUNT(T2.paper_id) DESC LIMIT 1
SELECT T1.name, COUNT(T2.cited_paper_id) FROM Author AS T1 INNER JOIN Citation AS T2 ON T1.author_id = T2.paper_id GROUP BY T1.author_id ORDER BY COUNT(T2.cited_paper_id) DESC LIMIT 1
SELECT T1.venue, T1.year FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown, Kathleen'
SELECT T1.venue, T1.year FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown, Kathleen'
SELECT T1.venue, T1.year FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = 'Columbia University'
SELECT T1.venue, T1.year FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id INNER JOIN Affiliation AS T4 ON T2.affiliation_id = T4.affiliation_id WHERE T4.name = 'Columbia University'
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id INNER JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year = 2009 GROUP BY T1.name ORDER BY COUNT(T1.name) DESC LIMIT 1
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id INNER JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year = 2009 GROUP BY T1.name ORDER BY COUNT(T2.paper_id) DESC LIMIT 1
SELECT T1.name FROM Affiliation AS T1 INNER JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id INNER JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year = 2009 GROUP BY T1.name ORDER BY COUNT(T1.name) DESC LIMIT 3
SELECT T1.name FROM Affiliation AS T1 INNER JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id INNER JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year = 2009 GROUP BY T1.name ORDER BY COUNT(T1.name) DESC LIMIT 3
SELECT COUNT(DISTINCT T1.paper_id)  FROM Paper AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Author AS T3 ON T2.author_id = T3.author_id  JOIN Affiliation AS T4 ON T2.affiliation_id = T4.affiliation_id  WHERE T4.name = 'Columbia University' AND T1.year <= 2009
SELECT COUNT(DISTINCT T1.paper_id)  FROM Paper AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Author AS T3 ON T2.author_id = T3.author_id  JOIN Affiliation AS T4 ON T2.affiliation_id = T4.affiliation_id  WHERE T4.name = 'Columbia University' AND T1.year <= 2009
SELECT COUNT(DISTINCT T1.paper_id)  FROM Paper AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Author AS T3 ON T2.author_id = T3.author_id  JOIN Affiliation AS T4 ON T2.affiliation_id = T4.affiliation_id  WHERE T4.name = 'Stanford University' AND T1.year BETWEEN 2000 AND 2009
SELECT COUNT(T1.paper_id)  FROM Paper AS T1  JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id  JOIN Author AS T3 ON T2.author_id = T3.author_id  JOIN Affiliation AS T4 ON T2.affiliation_id = T4.affiliation_id  WHERE T4.name = 'Stanford University' AND T1.year BETWEEN 2000 AND 2009
SELECT T1.title FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.author_id) DESC LIMIT 1
SELECT T1.title FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.author_id) DESC LIMIT 1
SELECT COUNT(DISTINCT author_id) FROM Author_list WHERE affiliation_id IN ( SELECT affiliation_id FROM Author_list WHERE author_id IN ( SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen' ) )
SELECT COUNT(DISTINCT T2.author_id)  FROM Author AS T1  INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id  WHERE T1.name = 'Mckeown, Kathleen';
SELECT T2.name FROM Author_list AS T1 INNER JOIN Author AS T2 ON T1.author_id = T2.author_id WHERE T2.name = 'Mckeown, Kathleen' GROUP BY T2.name ORDER BY COUNT(T1.paper_id) DESC LIMIT 1
SELECT T2.name FROM Author_list AS T1 INNER JOIN Author AS T2 ON T1.author_id = T2.author_id WHERE T1.paper_id IN ( SELECT T1.paper_id FROM Author_list AS T1 INNER JOIN Author AS T2 ON T1.author_id = T2.author_id WHERE T2.name = 'Mckeown, Kathleen' GROUP BY T1.paper_id ORDER BY COUNT(T1.paper_id) DESC LIMIT 1 ) GROUP BY T1.paper_id ORDER BY COUNT(T1.paper_id) DESC LIMIT 1
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'
SELECT T1.paper_id, T1.title FROM Paper AS T1 LEFT JOIN Citation AS T2 ON T1.paper_id = T2.paper_id WHERE T2.paper_id IS NULL
SELECT T1.paper_id, T1.title FROM Paper AS T1 LEFT JOIN Citation AS T2 ON T1.paper_id = T2.paper_id WHERE T2.paper_id IS NULL
SELECT T1.name FROM Affiliation AS T1 INNER JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id INNER JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T1.address LIKE '%China%' GROUP BY T1.name ORDER BY COUNT(T3.paper_id) DESC LIMIT 1
SELECT T1.name FROM Affiliation AS T1 INNER JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id INNER JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T1.address LIKE '%China%' GROUP BY T1.name ORDER BY COUNT(T2.paper_id) DESC LIMIT 1
SELECT venue, year, COUNT(paper_id) FROM Paper GROUP BY venue, year
SELECT venue, year, COUNT(paper_id) FROM Paper GROUP BY venue, year
SELECT T1.name, COUNT(T2.paper_id) FROM Affiliation AS T1 INNER JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.name
SELECT T1.name, COUNT(T2.paper_id) FROM Affiliation AS T1 LEFT JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.name
SELECT T1.title FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id HAVING COUNT(T2.paper_id) > 50
SELECT T1.title FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id HAVING COUNT(T2.paper_id) > 50
SELECT COUNT(DISTINCT T1.author_id)  FROM Author_list AS T1  JOIN Paper AS T2 ON T1.paper_id = T2.paper_id  WHERE T2.paper_id NOT IN ( SELECT T3.paper_id FROM Citation AS T3 GROUP BY T3.paper_id HAVING COUNT(T3.paper_id) > 50 );
SELECT COUNT(DISTINCT T1.author_id)  FROM Author AS T1  LEFT JOIN Paper AS T2 ON T1.author_id = T2.paper_id  LEFT JOIN Citation AS T3 ON T2.paper_id = T3.paper_id  GROUP BY T1.author_id  HAVING COUNT(DISTINCT T3.cited_paper_id) <= 50
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id INNER JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year = 2009 AND T3.title IN ('NAACL', 'ACL')
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id INNER JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year = 2009 AND T3.title IN ('NAACL', 'ACL') GROUP BY T1.name HAVING COUNT(DISTINCT T3.title) = 2
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id INNER JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.venue!= 'ACL' GROUP BY T1.author_id HAVING COUNT(T3.paper_id) = 0
SELECT name FROM Author WHERE author_id NOT IN ( SELECT author_id FROM Author_list AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.paper_id WHERE T2.venue = 'ACL' )
SELECT COUNT(Conference_ID) FROM conference
SELECT COUNT(Conference_ID) FROM conference
SELECT DISTINCT Conference_Name FROM conference
SELECT DISTINCT Conference_Name FROM conference
SELECT Conference_Name, Year, Location FROM conference
SELECT Conference_Name, Year, Location FROM conference
SELECT T1.Conference_Name, COUNT(T1.Conference_ID) FROM conference AS T1 GROUP BY T1.Conference_Name
SELECT Conference_Name, COUNT(Conference_ID) FROM conference GROUP BY Conference_Name
SELECT Year, COUNT(Conference_ID) FROM conference GROUP BY Year
SELECT COUNT(Conference_ID) FROM conference GROUP BY Year
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Year) ASC LIMIT 1
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(Year) ASC LIMIT 1
SELECT Location FROM conference GROUP BY Location HAVING COUNT(Location) >= 2
SELECT Location FROM conference GROUP BY Location HAVING COUNT(Conference_ID) >= 2
SELECT Institution_Name, Location, Founded FROM institution
SELECT Institution_Name, Location, Founded FROM institution
SELECT COUNT(Institution_ID) FROM institution WHERE Founded BETWEEN 1850 AND 1900
SELECT COUNT(Institution_ID) FROM institution WHERE Founded BETWEEN 1850 AND 1900
SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1
SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1
SELECT T1.Institution_Name, COUNT(T2.staff_ID) FROM institution AS T1 INNER JOIN staff AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Founded > 1800 GROUP BY T1.Institution_Name
SELECT T1.Institution_ID, COUNT(T2.staff_ID), T2.name FROM institution AS T1 INNER JOIN staff AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Founded > 1800 GROUP BY T1.Institution_ID
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)
SELECT name FROM staff WHERE Age > ( SELECT AVG(Age) FROM staff )
SELECT name FROM staff WHERE Age > ( SELECT AVG(Age) FROM staff )
SELECT MAX(Age), MIN(Age) FROM staff WHERE Nationality = 'United States'
SELECT MAX(Age), MIN(Age) FROM staff
 SELECT T3.Conference_Name  FROM staff AS T1  INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID  INNER JOIN conference AS T3 ON T2.Conference_ID = T3.Conference_ID  INNER JOIN institution AS T4 ON T1.Institution_ID = T4.Institution_ID  WHERE T1.Nationality = 'Canada'
SELECT T1.Conference_Name FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID INNER JOIN staff AS T3 ON T2.staff_ID = T3.staff_ID WHERE T3.Nationality = 'Canada'
SELECT T1.name FROM staff AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID WHERE T2.role ='speaker' INTERSECT SELECT T1.name FROM staff AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID WHERE T2.role ='sponsor'
SELECT T1.name FROM staff AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID WHERE T2.role ='speaker' INTERSECT SELECT T1.name FROM staff AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID WHERE T2.role ='sponsor'
SELECT T1.name FROM staff AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID INNER JOIN conference AS T3 ON T2.Conference_ID = T3.Conference_ID WHERE T3.Conference_Name = 'ACL' INTERSECT SELECT T1.name FROM staff AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID INNER JOIN conference AS T3 ON T2.Conference_ID = T3.Conference_ID WHERE T3.Conference_Name = 'NACCL'
SELECT T2.name FROM conference_participation AS T1 INNER JOIN staff AS T2 ON T1.staff_ID = T2.staff_ID INNER JOIN conference AS T3 ON T1.Conference_ID = T3.Conference_ID WHERE T3.Conference_Name = 'ACL' INTERSECT SELECT T2.name FROM conference_participation AS T1 INNER JOIN staff AS T2 ON T1.staff_ID = T2.staff_ID INNER JOIN conference AS T3 ON T1.Conference_ID = T3.Conference_ID WHERE T3.Conference_Name = 'NACCL'
SELECT T1.name FROM staff AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID INNER JOIN conference AS T3 ON T2.Conference_ID = T3.Conference_ID WHERE T3.Year BETWEEN 2003 AND 2004
SELECT T1.name FROM staff AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID INNER JOIN conference AS T3 ON T2.Conference_ID = T3.Conference_ID WHERE T3.Year BETWEEN 2003 AND 2004
SELECT T1.Conference_Name, T1.Year, COUNT(T2.staff_ID) FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID
SELECT T1.Conference_Name, T1.Year, COUNT(T3.staff_ID) FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID INNER JOIN staff AS T3 ON T2.staff_ID = T3.staff_ID GROUP BY T1.Conference_ID
SELECT T1.Conference_Name FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID ORDER BY COUNT(T2.staff_ID) DESC LIMIT 2
SELECT T1.Conference_Name FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID ORDER BY COUNT(T2.staff_ID) DESC LIMIT 2
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL'))
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN (SELECT staff_ID FROM conference_participation WHERE Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL'))
SELECT T1.Institution_Name, T1.Location  FROM institution AS T1  LEFT JOIN staff AS T2 ON T1.Institution_ID = T2.Institution_ID  LEFT JOIN conference_participation AS T3 ON T2.staff_ID = T3.staff_ID  WHERE T3.Conference_ID IS NULL AND T1.Founded < 2004
SELECT T1.Institution_Name, T1.Location  FROM institution AS T1  LEFT JOIN staff AS T2 ON T1.Institution_ID = T2.Institution_ID  LEFT JOIN conference_participation AS T3 ON T2.staff_ID = T3.staff_ID  WHERE T3.Conference_ID IS NULL AND T1.Founded < 2004
SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1
SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1
SELECT pilot_name FROM PilotSkills WHERE age < ( SELECT AVG(age) FROM PilotSkills ) ORDER BY age
SELECT pilot_name FROM PilotSkills WHERE age < ( SELECT AVG(age) FROM PilotSkills ) ORDER BY age ASC
SELECT * FROM PilotSkills WHERE age < 30
SELECT * FROM PilotSkills WHERE age < 30
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35
SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub'
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter'
SELECT COUNT(DISTINCT location) FROM Hangar
SELECT COUNT(DISTINCT location) FROM Hangar
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40
SELECT COUNT(plane_name) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35
SELECT COUNT(pilot_name) FROM PilotSkills WHERE plane_name = 'B-52 Bomber' AND age < 35
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1
SELECT plane_name FROM Hangar GROUP BY plane_name ORDER BY COUNT(plane_name) DESC LIMIT 1
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(pilot_name) DESC LIMIT 1
SELECT plane_name FROM Hangar GROUP BY plane_name ORDER BY COUNT(plane_name) ASC LIMIT 1
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(pilot_name) ASC LIMIT 1
SELECT COUNT(pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Chicago'
SELECT COUNT(DISTINCT T1.pilot_name)  FROM PilotSkills AS T1  JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name  WHERE T2.location = 'Chicago';
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41
SELECT COUNT(plane_name) FROM PilotSkills
SELECT COUNT(plane_name) FROM PilotSkills
SELECT COUNT(plane_name) FROM PilotSkills WHERE pilot_name = 'Smith'
SELECT COUNT(plane_name) FROM PilotSkills WHERE pilot_name = 'Smith'
SELECT COUNT(plane_name) FROM PilotSkills WHERE age > 40
SELECT COUNT(plane_name) FROM PilotSkills WHERE age > 40
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC
SELECT pilot_name FROM PilotSkills ORDER BY age DESC
SELECT pilot_name FROM PilotSkills ORDER BY age DESC
SELECT T2.location FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name ORDER BY T2.plane_name
SELECT location FROM Hangar ORDER BY plane_name
SELECT DISTINCT plane_name FROM PilotSkills
SELECT DISTINCT plane_name FROM Hangar ORDER BY plane_name
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40 OR age < 30
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40 OR age < 30
SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)
SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'
SELECT AVG(age), MIN(age) FROM PilotSkills
SELECT AVG(age), MIN(age) FROM PilotSkills
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ( SELECT plane_name FROM Hangar WHERE location = 'Austin' ) INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name IN ( SELECT plane_name FROM Hangar WHERE location = 'Boston' )
SELECT T1.pilot_name  FROM PilotSkills AS T1  JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name  WHERE T2.location IN ('Austin', 'Boston');
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter'
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')
SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name
SELECT plane_name, AVG(age) FROM PilotSkills GROUP BY plane_name
SELECT COUNT(plane_name), plane_name FROM Hangar GROUP BY plane_name
SELECT plane_name, COUNT(*) FROM PilotSkills GROUP BY plane_name
SELECT T1.plane_name, T2.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name ORDER BY T1.plane_name, T2.age DESC LIMIT 1
SELECT plane_name, pilot_name FROM PilotSkills WHERE age = ( SELECT MAX(age) FROM PilotSkills GROUP BY plane_name )
SELECT T1.plane_name, T1.pilot_name FROM PilotSkills AS T1 INNER JOIN ( SELECT plane_name, MAX(age) AS max_age FROM PilotSkills GROUP BY plane_name ) AS T2 ON T1.plane_name = T2.plane_name AND T1.age = T2.max_age
SELECT T1.plane_name, T2.pilot_name  FROM Hangar AS T1  JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name  JOIN ( SELECT plane_name, MAX(age) AS max_age         FROM PilotSkills         GROUP BY plane_name       ) AS T3 ON T1.plane_name = T3.plane_name AND T2.age = T3.max_age
SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name
SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name
SELECT T1.location, COUNT(T2.pilot_name), AVG(T2.age) FROM Hangar AS T1 LEFT JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name GROUP BY T1.location
SELECT T1.location, COUNT(T2.pilot_name) AS num_pilots, AVG(T2.age) AS avg_age FROM Hangar AS T1 LEFT JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name GROUP BY T1.location
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age < 35 GROUP BY plane_name
SELECT plane_name, COUNT(pilot_name) FROM PilotSkills GROUP BY plane_name HAVING AVG(age) < 35
SELECT T2.location FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name ORDER BY T1.age LIMIT 1
SELECT T2.location FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name ORDER BY T1.age LIMIT 1
SELECT T1.pilot_name, T1.age  FROM PilotSkills AS T1  JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name  WHERE T2.location = 'Austin'
SELECT T1.pilot_name, T1.age FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin'
SELECT pilot_name FROM PilotSkills WHERE age > ( SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub' )
SELECT pilot_name FROM PilotSkills WHERE age > ( SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub' )
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age < ( SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter' )
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age < ( SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter' )
SELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'
SELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age < ( SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub' )
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > ( SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub' )
SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1
SELECT Area_km, Government_website FROM district ORDER BY Population ASC LIMIT 1
SELECT T1.Name, T1.Population FROM district AS T1 INNER JOIN ( SELECT Area_km, AVG(Area_km) AS avg_area FROM district GROUP BY Area_km ) AS T2 ON T1.Area_km > T2.avg_area
SELECT MAX(Area_km),  AVG(Area_km) FROM district
SELECT SUM(T2.Population) FROM district AS T1 INNER JOIN district AS T2 ON T1.Area_km = T2.Area_km ORDER BY T1.Area_km DESC LIMIT 3
SELECT "District_ID", "Name", "Government_website" FROM district ORDER BY "Population"
SELECT Name FROM district WHERE Government_website LIKE '%gov%'
SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000
SELECT T1.Name, T2.Speach_title FROM spokesman AS T1 INNER JOIN spokesman_district AS T3 ON T1.Spokesman_ID = T3.Spokesman_ID INNER JOIN spokesman AS T2 ON T2.Spokesman_ID = T3.Spokesman_ID
 SELECT AVG(T2.Points), AVG(T1.Age) FROM spokesman AS T1 INNER JOIN spokesman_district AS T2 ON T1.Spokesman_ID = T2.Spokesman_ID WHERE T2.Rank_position = 1
SELECT Name, Points FROM spokesman WHERE Age < 40
SELECT Name FROM spokesman ORDER BY Age DESC LIMIT 1
SELECT Name FROM spokesman WHERE Points < ( SELECT AVG(Points) FROM spokesman )
SELECT T1.Name FROM district AS T1 INNER JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T2.District_ID ORDER BY COUNT(T2.District_ID) DESC LIMIT 1
SELECT T1.Name FROM spokesman AS T1 INNER JOIN spokesman_district AS T2 ON T1.Spokesman_ID = T2.Spokesman_ID WHERE T2.Start_year < '2004'
SELECT T1.Name, COUNT(T2.Spokesman_ID) FROM district AS T1 INNER JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T2.District_ID
 SELECT T1.Name FROM district AS T1 INNER JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID INNER JOIN spokesman AS T3 ON T2.Spokeman_ID = T3.Spokeman_ID WHERE T3.Rank_position = 1 INTERSECT SELECT T1.Name FROM district AS T1 INNER JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID INNER JOIN spokesman AS T3 ON T2.Spokeman_ID = T3.Spokeman_ID WHERE T3.Rank_position = 2
SELECT T1.Name FROM district AS T1 INNER JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T2.District_ID HAVING COUNT(T2.District_ID) > 1
SELECT COUNT(District_ID) FROM district WHERE District_ID NOT IN (SELECT District_ID FROM spokesman_district)
SELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)
SELECT SUM(T1.Population),  AVG(T1.Population) FROM district AS T1 INNER JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID
SELECT title FROM Sculptures WHERE year = ( SELECT MAX(year) FROM Sculptures );
SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1
SELECT title, location FROM Paintings ORDER BY year ASC LIMIT 1
SELECT T1.title, T1.location FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID ORDER BY T1.year LIMIT 1
SELECT T1.fname, T1.lname  FROM Artists AS T1  INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID  WHERE T2.location = 'gallery 226';
 SELECT T1.title FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.sculptorID = T2.artistID WHERE T2.artistID = (SELECT sculptorID FROM Sculptures WHERE location = 226)
SELECT title, location FROM Paintings
SELECT title, location FROM Paintings
SELECT title, location FROM Sculptures
SELECT title, location FROM Sculptures
 SELECT T1.medium FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.paintingID = 80
 SELECT T2.medium, T2.mediumOn FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.paintingID = 80
SELECT fname, lname FROM Artists WHERE birthYear > 1850
SELECT fname, lname FROM Artists WHERE birthYear > 1850
SELECT T1.fname, T1.lname, T2.year FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.location!= 'gallery 226'
SELECT T1.fname, T1.lname, T2.year FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.location!= 'gallery 226'
SELECT DISTINCT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year < 1900
SELECT DISTINCT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year < 1900
SELECT DISTINCT T1.birthYear FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year > 1920
SELECT T1.birthYear FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year > 1920 GROUP BY T1.artistID
SELECT fname, lname FROM Artists ORDER BY deathYear DESC LIMIT 1
SELECT fname ||'' || lname FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1
SELECT (2024 - MAX(deathYear)) FROM Artists WHERE deathYear IS NOT NULL
SELECT birthYear FROM Artists WHERE deathYear - birthYear = ( SELECT MIN(deathYear - birthYear) FROM Artists )
SELECT fname, deathYear - birthYear AS age FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1
SELECT fname, deathYear - birthYear AS age FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1
SELECT COUNT(paintingID) FROM Paintings WHERE location = 'gallery 240'
SELECT COUNT(paintingID) FROM Paintings WHERE location = '240'
SELECT COUNT(paintingID) FROM Paintings WHERE painterID IN ( SELECT artistID FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1 )
SELECT COUNT(T2.paintingID) FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID ORDER BY T1.deathYear - T1.birthYear DESC LIMIT 1
SELECT T1.fname, T1.lname, T2.year FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.fname = 'Mary'
SELECT T1.title, T1.year FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.fname = 'Mary'
SELECT T2.width_mm FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.birthYear < 1850
SELECT SUM(width_mm) FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850)
SELECT T2.location, T2.medium FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.fname = 'Pablo'
SELECT T2.location, T2.mediumOn FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.fname = 'Pablo'
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID INNER JOIN Sculptures AS T3 ON T1.artistID = T3.sculptorID
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID INNER JOIN Sculptures AS T3 ON T1.artistID = T3.sculptorID
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' INTERSECT SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'lithograph'
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' INTERSECT SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.mediumOn = 'lithographic'
SELECT T1.birthYear FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year = 1884 AND T2.mediumOn = 'canvas'
SELECT T1.birthYear FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year = 1884
SELECT DISTINCT T1.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.mediumOn = 'oil' AND T2.location = 'gallery 241'
SELECT T1.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.location = 'gallery 241' AND T2.mediumOn = 'oil'
SELECT medium, COUNT(paintingID) FROM Paintings UNION SELECT medium, COUNT(sculptureID) FROM Sculptures GROUP BY medium
SELECT medium, COUNT(paintingID) FROM Paintings UNION SELECT medium, COUNT(sculptureID) FROM Sculptures
SELECT AVG(height_mm), medium FROM Paintings GROUP BY medium
SELECT AVG(height_mm), medium FROM Paintings GROUP BY medium
SELECT location, COUNT(paintingID) FROM Paintings WHERE year < 1900 GROUP BY location
SELECT COUNT(paintingID) FROM Paintings WHERE year < 1900 GROUP BY location
SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil'
SELECT T1.title FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.mediumOn = 'oil' AND T1.year > 1910
SELECT T1.artistID FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.mediumOn = 'oil' AND T2.location = 'gallery 240' GROUP BY T1.artistID
SELECT T1.artistID FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.mediumOn = 'oil' AND T2.location = 'gallery 240' GROUP BY T1.artistID
SELECT DISTINCT T1.title FROM Paintings AS T1 INNER JOIN Paintings AS T2 ON T1.height_mm > T2.height_mm AND T1.mediumOn = 'canvas'
SELECT DISTINCT T1.title FROM Paintings AS T1 INNER JOIN Paintings AS T2 ON T1.height_mm > T2.height_mm AND T1.mediumOn = 'canvas'
SELECT DISTINCT T1.paintingID FROM Paintings AS T1 INNER JOIN Paintings AS T2 ON T1.year > T2.year AND T1.location = T2.location AND T1.location = 'gallery 240' WHERE T2.location = 'gallery 240'
SELECT DISTINCT T1.painterID FROM Paintings AS T1 INNER JOIN Paintings AS T2 ON T1.year > T2.year WHERE T2.location = 'gallery 240'
SELECT T1.paintingID FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID ORDER BY T1.year LIMIT 1
SELECT T1.paintingID FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID ORDER BY T1.year LIMIT 1
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.title LIKE '%female%'
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.title LIKE '%female%'
SELECT DISTINCT title FROM Paintings ORDER BY title ASC
SELECT DISTINCT title FROM Paintings ORDER BY title ASC
SELECT DISTINCT title FROM Paintings ORDER BY (width_mm + height_mm)
SELECT title FROM Paintings ORDER BY height_mm ASC
SELECT T1.title FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.year BETWEEN 1900 AND 1950 UNION SELECT T1.title FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.sculptorID = T2.artistID WHERE T1.year BETWEEN 1900 AND 1950
SELECT T1.title FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.year BETWEEN 1900 AND 1950 UNION SELECT T1.title FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.sculptorID = T2.artistID WHERE T1.year BETWEEN 1900 AND 1950
SELECT T1.title FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.artistID = 222 UNION SELECT T1.title FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.sculptorID = T2.artistID WHERE T2.artistID = 222
SELECT T1.title FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T2.artistID = 222 UNION SELECT T1.title FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.sculptorID = T2.artistID WHERE T2.artistID = 222
 SELECT T.artistID FROM ( SELECT T2.artistID, COUNT(T1.paintingID) AS num FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.year < 1900 GROUP BY T2.artistID ORDER BY num DESC LIMIT 1 ) T
SELECT T1.artistID FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year < 1900 GROUP BY T1.artistID ORDER BY COUNT(T2.paintingID) DESC LIMIT 1
SELECT T.fname FROM ( SELECT T1.fname, COUNT(T2.sculptureID) FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T1.fname ORDER BY COUNT(T2.sculptureID) DESC LIMIT 1 ) T
SELECT T.fname FROM ( SELECT T1.fname, COUNT(T2.sculptureID) AS num FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T1.fname ORDER BY num DESC LIMIT 1 ) T
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930
SELECT DISTINCT location FROM Paintings WHERE year < 1885 OR year > 1930
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000
SELECT T1.paintingID FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.height_mm > 500 AND T1.height_mm < 2000
SELECT location FROM Paintings WHERE mediumOn = 'on panel' INTERSECT SELECT location FROM Paintings WHERE mediumOn = 'on canvas'
SELECT location FROM Paintings WHERE mediumOn = 'on panels' INTERSECT SELECT location FROM Paintings WHERE mediumOn = 'on canvas'
SELECT T1.location FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.year < 1885 AND T1.year > 1930
SELECT location FROM Paintings WHERE year < 1885 INTERSECT SELECT location FROM Paintings WHERE year > 1930
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE mediumOn = 'oil' AND location = 'gallery 241'
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE mediumOn = 'oil' AND location = 'gallery 241'
SELECT MAX(height_mm), paintingID FROM Paintings WHERE year < 1900
SELECT height_mm, paintingID FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1
SELECT year, MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year
SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM Paintings GROUP BY year
SELECT T1.fname, T1.lname, AVG(T2.height_mm), AVG(T2.width_mm) FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T1.artistID ORDER BY T1.fname, T1.lname
SELECT T1.fname, T1.lname, AVG(T2.height_mm), AVG(T2.width_mm) FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T1.artistID ORDER BY T1.fname, T1.lname
SELECT T1.fname, COUNT(T2.paintingID) FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T1.artistID HAVING COUNT(T2.paintingID) >= 2
SELECT T.fname, COUNT(T1.paintingID) FROM Artists AS T INNER JOIN Paintings AS T1 ON T.artistID = T1.painterID GROUP BY T.fname HAVING COUNT(T1.paintingID) >= 2
SELECT T1.deathYear FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T1.artistID HAVING COUNT(T2.paintingID) <= 3
SELECT T1.deathYear FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T1.artistID HAVING COUNT(T2.paintingID) < 4
SELECT T.deathYear FROM ( SELECT T1.deathYear, COUNT(T2.sculptorID) AS num FROM Artists T1 INNER JOIN Sculptures T2 ON T1.artistID = T2.sculptorID GROUP BY T1.deathYear ) T ORDER BY T.num ASC LIMIT 1
SELECT T2.deathYear FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.sculptorID = T2.artistID GROUP BY T2.artistID ORDER BY COUNT(T1.sculptureID) ASC LIMIT 1
 SELECT T1.paintingID, T1.height_mm FROM Paintings AS T1 WHERE T1.location = 240 ORDER BY T1.width_mm DESC LIMIT 1
 SELECT T1.height_mm, T1.paintingID FROM Paintings AS T1 WHERE T1.location = 240 ORDER BY T1.width_mm DESC LIMIT 1
SELECT paintingID FROM Paintings WHERE year < ( SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240' )
SELECT T1.paintingID FROM Paintings AS T1 INNER JOIN Paintings AS T2 ON T1.year < T2.year WHERE T2.location = '240'
SELECT paintingID FROM Paintings WHERE height_mm > ( SELECT MAX(height_mm) FROM Paintings WHERE year > 1900 )
SELECT paintingID FROM Paintings WHERE height_mm > ( SELECT MAX(height_mm) FROM Paintings WHERE year > 1900 )
SELECT T1.fname, T1.lname, COUNT(T2.paintingID) FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' GROUP BY T1.artistID ORDER BY COUNT(T2.paintingID) DESC LIMIT 3
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.mediumOn = 'oil' GROUP BY T1.artistID ORDER BY COUNT(T2.paintingID) DESC LIMIT 1
SELECT T1.paintingID, T1.location, T1.title FROM Paintings AS T1 INNER JOIN Paintings AS T2 ON T1.year = T2.year WHERE T2.mediumOn = 'oil' ORDER BY T1.year
SELECT T1.paintingID, T1.location, T1.title FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.mediumOn = 'oil' ORDER BY T1.year
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title
SELECT T1.year, T1.location, T1.title FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.height_mm > 1000 ORDER BY T1.title
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID LEFT JOIN Sculptures AS T3 ON T1.artistID = T3.sculptorID WHERE T3.sculptorID IS NULL
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.artistID NOT IN (SELECT sculptorID FROM Sculptures)
SELECT T1.location FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.year < 1885 AND T1.mediumOn!= 'canvas'
SELECT location FROM Paintings WHERE year < 1885 AND mediumOn!= 'canvas'
SELECT COUNT(*) FROM race
SELECT COUNT(*) FROM race
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team
 SELECT T1.Winning_driver FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position!= 'Junior Strous'
 SELECT T1.Winning_driver FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Driver_Name!= 'Junior Strous'
SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC
SELECT DISTINCT Constructor FROM driver ORDER BY Age ASC
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20
SELECT MAX(Age), MIN(Age) FROM driver
SELECT MAX(Age),  MIN(Age) FROM driver
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20
SELECT COUNT(DISTINCT T1.Engine) FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Age > 30 OR T1.Age < 20
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
SELECT T1.Driver_Name, T2.Race_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID
SELECT T1.Driver_Name, T2.Race_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID
SELECT T1.Driver_Name, COUNT(T2.Road) FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID
SELECT T1.Driver_Name, COUNT(T2.Road) FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID
SELECT T1.Age FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(T2.Road) DESC LIMIT 1
SELECT T1.Age FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(T2.Road) DESC LIMIT 1
SELECT T1.Driver_Name, T1.Age FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(T2.Road) >= 2
SELECT T1.Driver_Name, T1.Age FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(T2.Road) >= 2
SELECT T2.Race_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Age >= 26
SELECT T2.Race_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Age >= 26
SELECT Driver_Name FROM driver WHERE Constructor!= 'Bugatti'
SELECT Driver_Name FROM driver WHERE Constructor!= 'Bugatti'
SELECT Constructor, COUNT(Driver_ID) FROM driver GROUP BY Constructor
SELECT Constructor, COUNT(Driver_ID) FROM driver GROUP BY Constructor
SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC LIMIT 1
SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(Engine) DESC LIMIT 1
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(Engine) >= 2
SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(Engine) >= 2
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)
SELECT DISTINCT T1.Constructor FROM driver AS T1 INNER JOIN driver AS T2 ON T1.Constructor = T2.Constructor WHERE T1.Age < 20 AND T2.Age > 30
SELECT DISTINCT T1.Constructor FROM driver AS T1 INNER JOIN driver AS T2 ON T1.Constructor = T2.Constructor WHERE T1.Age < 20 AND T2.Age > 30
SELECT DISTINCT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(Winning_team) > 1
SELECT DISTINCT T1.Winning_team FROM race AS T1 INNER JOIN race AS T2 ON T1.Winning_team = T2.Winning_team WHERE T1.Road!= T2.Road
SELECT T1.Driver_Name  FROM driver AS T1  INNER JOIN race AS T2  ON T1.Driver_ID = T2.Driver_ID  WHERE T2.Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong')
SELECT T1.Driver_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position = 'James Hinchcliffe' INTERSECT SELECT T1.Driver_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position = 'Carl Skerlong'
SELECT T1.Driver_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position!= 'James Hinchcliffe'
SELECT T1.Driver_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Pole_Position!= 'James Hinchcliffe'
SELECT COUNT(id) FROM languages
SELECT COUNT(id) FROM languages
SELECT name FROM languages ORDER BY name ASC
SELECT name FROM languages ORDER BY name ASC
SELECT name FROM languages WHERE name LIKE '%ish%'
SELECT name FROM languages WHERE name LIKE '%ish%'
SELECT name FROM countries ORDER BY overall_score DESC
SELECT name FROM countries ORDER BY overall_score DESC
SELECT AVG(overall_score) FROM countries
SELECT AVG("justice_score") FROM countries
SELECT MAX(health_score), MIN(health_score) FROM countries WHERE name!= 'Norway'
SELECT MAX(health_score),  MIN(health_score) FROM countries WHERE name!= 'Norway'
SELECT COUNT(DISTINCT T1.language_id) FROM official_languages AS T1
SELECT COUNT(DISTINCT language_id) FROM official_languages
SELECT name FROM countries ORDER BY education_score DESC
SELECT name FROM countries ORDER BY education_score DESC
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1
SELECT T1.name, T3.name FROM countries AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.country_id INNER JOIN languages AS T3 ON T2.language_id = T3.id
SELECT T1.name, T3.name FROM countries AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.country_id INNER JOIN languages AS T3 ON T2.language_id = T3.id
SELECT T1.name, COUNT(T2.country_id) FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.id
SELECT T1.name, COUNT(T2.country_id) FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T2.language_id
SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T2.language_id ORDER BY COUNT(T2.country_id) DESC LIMIT 1
SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T2.language_id ORDER BY COUNT(T2.language_id) DESC LIMIT 1
SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T2.language_id HAVING COUNT(T2.country_id) >= 2
SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T2.language_id HAVING COUNT(T2.country_id) >= 2
SELECT AVG(T2.overall_score) FROM languages AS T1 INNER JOIN official_languages AS T3 ON T1.id = T3.language_id INNER JOIN countries AS T2 ON T3.country_id = T2.id WHERE T1.name = 'English'
 SELECT AVG(T3.overall_score) FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id INNER JOIN countries AS T3 ON T2.country_id = T3.id WHERE T1.name = 'English'
SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T2.language_id ORDER BY COUNT(T2.language_id) DESC LIMIT 3
SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T2.language_id ORDER BY COUNT(T2.country_id) DESC LIMIT 3
SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id INNER JOIN countries AS T3 ON T2.country_id = T3.id GROUP BY T1.name ORDER BY AVG(T3.overall_score) DESC
SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id INNER JOIN countries AS T3 ON T2.country_id = T3.id GROUP BY T2.language_id ORDER BY AVG(T3.overall_score) DESC
SELECT T1.name FROM countries AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.country_id GROUP BY T1.id ORDER BY COUNT(T2.language_id) DESC LIMIT 1
SELECT T1.name FROM countries AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.country_id GROUP BY T2.country_id ORDER BY COUNT(T2.country_id) DESC LIMIT 1
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id INNER JOIN countries AS T3 ON T2.country_id = T3.id WHERE T3.overall_score > 95 INTERSECT SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id INNER JOIN countries AS T3 ON T2.country_id = T3.id WHERE T3.overall_score < 90
SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id INNER JOIN countries AS T3 ON T2.country_id = T3.id WHERE T3.overall_score > 95 INTERSECT SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id INNER JOIN countries AS T3 ON T2.country_id = T3.id WHERE T3.overall_score < 90
SELECT DISTINCT country, city FROM addresses
SELECT T1.country, T1.town_city FROM Addresses AS T1
SELECT state, COUNT(*) FROM properties GROUP BY state
SELECT T1.property_id, T2.state FROM properties AS T1 INNER JOIN states AS T2 ON T1.state_id = T2.state_id
 SELECT T1.feature_description FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id WHERE T1.feature_name = 'rooftop'
SELECT description FROM features WHERE name = 'rooftop'
SELECT T1.feature_name, T1.description FROM features AS T1 INNER JOIN ( SELECT feature_id, COUNT(*) AS count FROM properties GROUP BY feature_id ORDER BY count DESC LIMIT 1 ) AS T2 ON T1.feature_id = T2.feature_id
SELECT T1.feature_name, T1.feature_description  FROM Features AS T1  JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id  GROUP BY T2.feature_id  ORDER BY COUNT(T2.property_id) DESC  LIMIT 1
 SELECT MIN(rooms) FROM properties
SELECT MIN(room_count) FROM Properties
SELECT COUNT(*) FROM Properties WHERE parking_lots = '1' OR garage_yn = '1'
 SELECT COUNT(*) FROM properties WHERE parking_lots = 1 OR parking_lots IS NULL OR garages IS NULL
 SELECT DISTINCT T2.age_category FROM users AS T1 INNER JOIN user_descriptions AS T2 ON T1.id = T2.user_id WHERE T1.description LIKE '%Mother%'
SELECT T1.age_category_code FROM Ref_Age_Categories AS T1 INNER JOIN Users AS T2 ON T1.age_category_code = T2.age_category_code WHERE T1.age_category_description LIKE '%Mother%'
SELECT T1.first_name FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id GROUP BY T1.user_id ORDER BY COUNT(T2.property_id) DESC LIMIT 1
SELECT T1.first_name FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id GROUP BY T1.user_id ORDER BY COUNT(T2.property_id) DESC LIMIT 1
 SELECT AVG(room_count) FROM properties WHERE garden = 1
SELECT CAST(SUM(CASE WHEN T1.feature_name = 'Garden' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.feature_name) FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id INNER JOIN Properties AS T3 ON T2.property_id = T3.property_id INNER JOIN Rooms AS T4 ON T3.property_id = T4.property_id
 SELECT T1.town_city FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id INNER JOIN Property_Features AS T3 ON T2.property_id = T3.property_id WHERE T3.feature_value = 'Swimming Pool'
 SELECT DISTINCT city FROM properties WHERE has_pool = 1
SELECT property_id, vendor_requested_price FROM Properties WHERE vendor_requested_price = ( SELECT MIN(vendor_requested_price) FROM Properties )
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price ASC LIMIT 1
SELECT CAST(SUM(room_count) AS REAL) / COUNT(DISTINCT property_id) FROM Rooms
 SELECT AVG(CASE WHEN rooms IS NOT NULL THEN rooms ELSE 0 END) FROM properties
SELECT COUNT(DISTINCT room_size) FROM Rooms
SELECT COUNT(DISTINCT room_size) FROM real_estate_rentals2
SELECT T1.user_id, T2.search_string FROM Users AS T1 INNER JOIN User_Searches AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING COUNT(T2.search_seq) >= 2
SELECT user_id, search_seq FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) >= 2
SELECT MAX(search_datetime) FROM User_Searches
SELECT MAX(search_datetime) FROM User_Searches
SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC
SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC
 SELECT DISTINCT T2.zip FROM properties AS T1 INNER JOIN property_users AS T2 ON T1.id = T2.property_id INNER JOIN users AS T3 ON T2.user_id = T3.id GROUP BY T3.id HAVING COUNT(T1.id) > 2
SELECT T2.zip_postcode  FROM Properties AS T1  JOIN Addresses AS T2 ON T1.property_address_id = T2.address_id  JOIN Users AS T3 ON T1.owner_user_id = T3.user_id  WHERE T3.user_id NOT IN (SELECT T1.owner_user_id FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id = T2.user_id GROUP BY T1.owner_user_id HAVING COUNT(T1.owner_user_id) > 2)
SELECT category, user_id FROM searches WHERE search_count = 1
SELECT id, category_code FROM users WHERE id IN ( SELECT user_id FROM searches GROUP BY user_id HAVING COUNT(search_id) = 1 );
SELECT T2.age_range FROM search_log AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.user_id ORDER BY T1.search_time LIMIT 1
SELECT T2.age_category FROM search_log AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.user_id ORDER BY T1.search_time LIMIT 1
 SELECT u.login_name FROM users u JOIN user_profiles p ON u.id = p.user_id WHERE p.age > 60 ORDER BY u.first_name
SELECT T1.first_name, T1.last_name FROM customers AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_id = 1
SELECT COUNT(id) FROM searches
SELECT COUNT(*) FROM buyer_searches
SELECT date_registered FROM Users WHERE login_name = 'ratione'
SELECT date_registered FROM Users WHERE login_name = 'ratione'
 SELECT u.first_name, u.middle_name, u.last_name, u.login_name  FROM users u  JOIN user_roles ur ON u.id = ur.user_id  JOIN roles r ON ur.role_id = r.id  WHERE r.name ='seller' AND u.seller = 1
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1'
 SELECT T1.building, T1.street, T1.city FROM properties AS T1 INNER JOIN tenants AS T2 ON T1.id = T2.property_id WHERE T2.age > 65
 SELECT T1.building, T1.street, T1.city FROM addresses AS T1 INNER JOIN customers AS T2 ON T1.address_id = T2.address_id WHERE T2.senior_citizen = 1
SELECT COUNT(*) FROM properties WHERE id IN ( SELECT property_id FROM features GROUP BY property_id HAVING COUNT(feature_id) >= 2 )
 SELECT COUNT(p.property_id) FROM properties p WHERE p.property_id IN (SELECT feature_id FROM features GROUP BY feature_id HAVING COUNT(feature_id) >= 2)
SELECT T1.property_id, COUNT(T2.photo_seq) FROM Properties AS T1 INNER JOIN Property_Photos AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id
SELECT id, COUNT(photo_url) FROM properties GROUP BY id
 SELECT T1.user_id, COUNT(T2.photo_id) FROM users AS T1 INNER JOIN properties AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id
 SELECT properties.user_id, COUNT(property_photos.user_id) FROM properties INNER JOIN property_photos ON properties.user_id = property_photos.user_id GROUP BY properties.user_id
SELECT MAX(T2.price) FROM demographics AS T1 INNER JOIN properties AS T2 ON T1.id = T2.demographics_id WHERE T1.gender = 'F' AND (T1.education_level = 'High school' OR T1.education_level = 'College' OR T1.education_level = 'University')
SELECT MAX(T1.price_max) FROM Properties AS T1 INNER JOIN Users AS T2 ON T1.owner_user_id = T2.user_id INNER JOIN Ref_User_Categories AS T3 ON T2.user_category_code = T3.user_category_code WHERE T3.user_category_description IN ('Single Mother', 'Student')
SELECT T1.datestamp, T2.property_name FROM User_Property_History AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id ORDER BY T1.datestamp
SELECT T1.datestamp, T2.property_name FROM User_Property_History AS T1 INNER JOIN Properties AS T2 ON T1.property_id = T2.property_id ORDER BY T1.datestamp
 SELECT T1.property_type_description, T1.property_type_code  FROM Ref_Property_Types AS T1  JOIN ( SELECT property_type_code, COUNT(property_type_code) AS count FROM Properties GROUP BY property_type_code ORDER BY count DESC LIMIT 1 ) AS T2  ON T1.property_type_code = T2.property_type_code
SELECT property_type, description FROM property_types ORDER BY COUNT(property_type) DESC LIMIT 1
SELECT description FROM age_categories WHERE code = 'Over 60'
SELECT description FROM age_categories WHERE category = 'Over 60'
SELECT room_size, COUNT(*) FROM real_estate_rentals GROUP BY room_size
SELECT room_size, COUNT(room_size) FROM properties GROUP BY room_size
 SELECT T2.country FROM users AS T1 INNER JOIN addresses AS T2 ON T1.address_id = T2.id WHERE T1.first_name = 'Robbie'
SELECT T2.country FROM users AS T1 INNER JOIN addresses AS T2 ON T1.address_id = T2.id WHERE T1.first_name = 'Robbie'
SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name  FROM users AS T1  INNER JOIN properties AS T2 ON T1.user_id = T2.owner_id  WHERE T1.current_residence_id = T2.property_id
SELECT T1.first_name, T1.middle_name, T1.last_name  FROM Users AS T1  INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id  INNER JOIN Addresses AS T3 ON T2.property_address_id = T3.address_id
SELECT search_content FROM users WHERE id NOT IN (SELECT user_id FROM properties)
SELECT T1.search_string FROM search_strings AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.user_id LEFT JOIN properties AS T3 ON T2.user_id = T3.owner_id WHERE T3.owner_id IS NULL
SELECT T1.id, T1.lastName  FROM users AS T1  JOIN ( SELECT user_id, COUNT(*) AS count         FROM searches         GROUP BY user_id         HAVING COUNT(*) <= 2 ) AS T2  ON T1.id = T2.user_id  JOIN ( SELECT user_id, COUNT(*) AS count         FROM properties         GROUP BY user_id         HAVING COUNT(*) >= 2 ) AS T3  ON T1.id = T3.user_id
SELECT T1.last_name, T1.user_id FROM Users AS T1 INNER JOIN User_Searches AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING COUNT(T2.search_seq) <= 2 INTERSECT SELECT T1.last_name, T1.user_id FROM Users AS T1 INNER JOIN Properties AS T2 ON T1.user_id = T2.owner_user_id GROUP BY T1.user_id HAVING COUNT(T2.property_id) >= 2
SELECT COUNT(*) FROM bike WHERE weight > 780
SELECT product_name, weight FROM bike ORDER BY price ASC
SELECT heat, name, nation FROM cyclist
SELECT MAX(weight), MIN(weight) FROM bike
SELECT AVG(price) FROM bike WHERE material = 'Carbon CC'
SELECT name, result FROM cyclist WHERE nation!= 'Russia'
SELECT DISTINCT T1.id, T1.product_name FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id WHERE T2.purchase_year > 2015
SELECT T1.id, T1.product_name  FROM bike AS T1  JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id  GROUP BY T1.id  HAVING COUNT(T2.cyclist_id) >= 4
SELECT T1.id, T1.name FROM cyclist AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.cyclist_id GROUP BY T1.id ORDER BY COUNT(T2.cyclist_id) DESC LIMIT 1
SELECT DISTINCT T1.product_name FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id INNER JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.nation IN ('Russia', 'Great Britain')
SELECT COUNT(DISTINCT heat) FROM cyclist
SELECT COUNT(id) FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015)
SELECT DISTINCT T1.product_name FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id INNER JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.result < '4:21.558'
SELECT T1.product_name, T1.price  FROM bike AS T1  JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id  JOIN cyclist AS T3 ON T2.cyclist_id = T3.id  WHERE T3.name IN ('Bradley Wiggins', 'Antonio Tauler')
SELECT name, nation, result FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes WHERE bike_id IN (SELECT id FROM bike WHERE product_name = 'racing bike'))
SELECT product_name FROM bike WHERE material LIKE '%fiber%'
SELECT T1.id, COUNT(T2.bike_id) FROM cyclist AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.cyclist_id GROUP BY T1.id ORDER BY T1.id
SELECT T1.Flavor, MAX(T1.Price) FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T2.Item LIKE 'cake'
SELECT Id, Flavor FROM goods WHERE Food = 'cake' ORDER BY Price DESC LIMIT 1
SELECT T1.Flavor, T1.Price FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T2.Item = 'cookie' ORDER BY T1.Price LIMIT 1
SELECT Id, Flavor FROM goods WHERE Food = 'Cookie' ORDER BY Price ASC LIMIT 1
SELECT Id FROM goods WHERE Flavor = 'apple'
SELECT Id FROM goods WHERE Flavor = 'apple'
SELECT Id FROM goods WHERE Price < 3
SELECT Id FROM goods WHERE Price < 3
SELECT DISTINCT T1.Id  FROM customers AS T1  INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId  INNER JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt  INNER JOIN goods AS T4 ON T3.Item = T4.Id  WHERE T4.Flavor = 'lemon'
SELECT DISTINCT T1.Id  FROM customers AS T1  INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId  INNER JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt
SELECT T1.Food, COUNT(DISTINCT T3.CustomerId) FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item INNER JOIN receipts AS T3 ON T2.Receipt = T3.ReceiptNumber GROUP BY T1.Food
 SELECT T1.Food, COUNT(T2.Receipt) FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item GROUP BY T1.Food
SELECT T1.Id FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId GROUP BY T1.Id HAVING COUNT(T2.ReceiptNumber) >= 15
SELECT T1.Id FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId GROUP BY T1.Id HAVING COUNT(T2.ReceiptNumber) >= 15
SELECT T1.LastName FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId GROUP BY T1.Id HAVING COUNT(T2.ReceiptNumber) > 10
SELECT T1.LastName FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId GROUP BY T1.Id HAVING COUNT(T2.ReceiptNumber) > 10
SELECT COUNT(DISTINCT T2.Flavor) FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id WHERE T2.Food = 'Cake'
SELECT COUNT(DISTINCT T2.Flavor) FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id
SELECT T2.Flavor FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id WHERE T1.Item = 'Croissant'
SELECT T2.Flavor FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id WHERE T1.Item = 'croissant'
SELECT DISTINCT T2.Item FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt INNER JOIN customers AS T3 ON T1.CustomerId = T3.Id WHERE T3.Id = 15
SELECT DISTINCT T2.Item FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T1.CustomerId = 15
SELECT Food, AVG(Price) AS AveragePrice, MAX(Price) AS MaxPrice, MIN(Price) AS MinPrice FROM goods GROUP BY Food
SELECT Food, AVG(Price) AS AveragePrice, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods GROUP BY Food
SELECT T1.ReceiptNumber  FROM receipts AS T1  JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  WHERE T2.Item = 'Cake' INTERSECT  SELECT T1.ReceiptNumber  FROM receipts AS T1  JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  WHERE T2.Item = 'Cookie'
SELECT T1.ReceiptNumber  FROM receipts AS T1  JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  WHERE T2.Item IN ('cake', 'cookie')
SELECT T1.ReceiptNumber  FROM receipts AS T1  JOIN customers AS T2 ON T1.CustomerId = T2.Id  JOIN items AS T3 ON T1.ReceiptNumber = T3.Receipt  WHERE T2.LastName = 'LOGAN' AND T3.Item = 'Croissant'
SELECT T1.ReceiptNumber  FROM receipts AS T1  JOIN customers AS T2 ON T1.CustomerId = T2.Id  JOIN items AS T3 ON T1.ReceiptNumber = T3.Receipt  JOIN goods AS T4 ON T3.Item = T4.Id  WHERE T2.LastName = 'Logan' AND T4.Food = 'Croissant'
SELECT T1.ReceiptNumber, T1.Date  FROM receipts AS T1  JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  JOIN goods AS T3 ON T2.Item = T3.Id  WHERE T3.Price = ( SELECT MAX(Price) FROM goods )
SELECT T1.ReceiptNumber, T1.Date  FROM receipts AS T1  JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  JOIN goods AS T3 ON T2.Item = T3.Id  WHERE T3.Price = ( SELECT MAX(T3.Price) FROM goods AS T3 JOIN items AS T2 ON T3.Id = T2.Item );
SELECT T.Item FROM ( SELECT T.Item, COUNT(T.Receipt) AS Count FROM items AS T GROUP BY T.Item ) AS T ORDER BY T.Count LIMIT 1
SELECT T.Item FROM ( SELECT T.Item, COUNT(T.Receipt) AS Count FROM items AS T GROUP BY T.Item ) AS T ORDER BY T.Count LIMIT 1
SELECT Food, COUNT(*) FROM goods GROUP BY Food
SELECT Food, COUNT(*) FROM goods GROUP BY Food
SELECT Food, AVG(Price) FROM goods GROUP BY Food
SELECT AVG(Price) FROM goods GROUP BY Food
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5
 SELECT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'cakes' AND T1.Price > 10
 SELECT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'cake' AND T1.Price > 10
SELECT DISTINCT Id, Price FROM goods WHERE Price < ( SELECT AVG(Price) FROM goods )
SELECT DISTINCT Id, Price FROM goods WHERE Price < ( SELECT AVG(Price) FROM goods )
SELECT Id FROM goods WHERE Price < ( SELECT Price FROM goods WHERE Flavor = 'Tart' )
SELECT Id FROM goods WHERE Price < ( SELECT Price FROM goods WHERE Flavor = 'Tart' )
SELECT DISTINCT T1.ReceiptNumber  FROM receipts AS T1  JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  JOIN goods AS T3 ON T2.Item = T3.Id  WHERE T3.Price > 13
SELECT DISTINCT T1.ReceiptNumber  FROM receipts AS T1  JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  JOIN goods AS T3 ON T2.Item = T3.Id  WHERE T3.Price > 13
SELECT T3.Date FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id INNER JOIN receipts AS T3 ON T1.Receipt = T3.ReceiptNumber WHERE T2.Price > 15
SELECT T1.Date FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt INNER JOIN goods AS T3 ON T2.Item = T3.Id WHERE T3.Price > 15
SELECT Id FROM goods WHERE Id LIKE '%APP%'
SELECT Id FROM goods WHERE Id LIKE '%APP%'
SELECT T2.Price FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id WHERE T1.Item = '70'
SELECT Id, Price FROM goods WHERE Id = '70'
SELECT LastName FROM customers ORDER BY LastName ASC
SELECT LastName FROM customers ORDER BY LastName ASC
SELECT Id FROM goods ORDER BY Id
SELECT DISTINCT Item FROM items
SELECT r.ReceiptNumber  FROM receipts r  JOIN items i ON r.ReceiptNumber = i.Receipt  JOIN goods g ON i.Item = g.Id  WHERE g.Flavor = 'apple flavor pie'  OR r.CustomerId = 12
SELECT DISTINCT T1.ReceiptNumber  FROM receipts AS T1  INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  INNER JOIN goods AS T3 ON T2.Item = T3.Id  WHERE T3.Flavor = 'apple' OR T1.CustomerId = 12
SELECT T1.ReceiptNumber, T1.Date FROM receipts AS T1 INNER JOIN ( SELECT ReceiptNumber, MAX(Date) AS Date FROM receipts GROUP BY ReceiptNumber ) AS T2 ON T1.ReceiptNumber = T2.ReceiptNumber AND T1.Date = T2.Date
SELECT ReceiptNumber, MAX(Date) FROM receipts
SELECT DISTINCT T1.ReceiptNumber  FROM receipts AS T1  INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  INNER JOIN goods AS T3 ON T2.Item = T3.Id  WHERE T1.Date = (SELECT MIN(Date) FROM receipts)  OR T3.Price > 10
SELECT T1.ReceiptNumber  FROM receipts AS T1  JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt  JOIN goods AS T3 ON T2.Item = T3.Id  WHERE T3.Price > 10 OR T1.Date = ( SELECT MIN(Date) FROM receipts )
SELECT Id FROM goods WHERE Price BETWEEN 3 AND 7 AND Food IN ('Cookie', 'Cake')
SELECT Id FROM goods WHERE Price BETWEEN 3 AND 7 AND Food IN ('Cookies', 'Cakes')
SELECT T1.FirstName, T1.LastName  FROM customers AS T1  JOIN receipts AS T2 ON T1.Id = T2.CustomerId  ORDER BY T2.Date ASC  LIMIT 1
SELECT T1.FirstName, T1.LastName FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId ORDER BY T2.Date LIMIT 1
SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry'
SELECT AVG(Price) FROM goods WHERE Flavor = 'blackberry' OR Flavor = 'blueberry'
 SELECT MIN(T2.Price) FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Flavor = 'cheese'
SELECT MIN(Price) FROM goods WHERE Flavor = 'cheese'
SELECT Flavor, MAX(Price) AS MaxPrice, MIN(Price) AS MinPrice, AVG(Price) AS AvgPrice FROM goods GROUP BY Flavor ORDER BY Flavor
SELECT Flavor, MAX(Price) AS max_price, MIN(Price) AS min_price, AVG(Price) AS avg_price FROM goods GROUP BY Flavor ORDER BY Flavor
SELECT Food, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods GROUP BY Food ORDER BY Food
SELECT Food, MIN(Price) AS MinPrice, MAX(Price) AS MaxPrice FROM goods WHERE Food = 'food'
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(Date) DESC LIMIT 3
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(Date) DESC LIMIT 3
SELECT T1.FirstName, T1.LastName, COUNT(T2.ReceiptNumber) FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId GROUP BY T1.Id ORDER BY COUNT(T2.ReceiptNumber) DESC LIMIT 1
 SELECT T1.Id, COUNT(T2.ReceiptNumber) FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId GROUP BY T1.Id ORDER BY COUNT(T2.ReceiptNumber) DESC LIMIT 1
 SELECT T1.Date, COUNT(DISTINCT T1.CustomerId) FROM receipts AS T1 INNER JOIN customers AS T2 ON T1.CustomerId = T2.Id GROUP BY T1.Date
 SELECT T1.Date, COUNT(T1.CustomerId) FROM receipts AS T1 INNER JOIN customers AS T2 ON T1.CustomerId = T2.Id GROUP BY T1.Date
SELECT T1.FirstName, T1.LastName  FROM customers AS T1  INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId  INNER JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt  INNER JOIN goods AS T4 ON T3.Item = T4.Id  WHERE T4.Flavor = 'apple' AND T4.Food = 'Tart'
SELECT T1.FirstName, T1.LastName  FROM customers AS T1  INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId  INNER JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt  INNER JOIN goods AS T4 ON T3.Item = T4.Id  WHERE T4.Flavor = 'apple' AND T4.Food = 'Tart'
SELECT Id FROM goods WHERE Price < ( SELECT MIN(Price) FROM goods WHERE Flavor = 'Croissant' ) AND Flavor = 'Cookies'
SELECT Id FROM goods WHERE Price < ( SELECT Price FROM goods WHERE Food = 'Croissant' ) AND Food = 'Cookie'
SELECT Id FROM goods WHERE Price >= ( SELECT AVG(Price) FROM goods WHERE Food = 'Tart' ) AND Food = 'Cake'
SELECT Id FROM goods WHERE Price >= ( SELECT AVG(Price) FROM goods WHERE Food = 'Tart' ) AND Food = 'Cake'
SELECT Id FROM goods WHERE Price > (SELECT AVG(Price) * 2 FROM goods)
SELECT Id FROM goods WHERE Price > ( SELECT AVG(Price) * 2 FROM goods )
SELECT T1.Id, T1.Flavor, T1.Food FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item ORDER BY T1.Price
SELECT Id, Flavor, Food FROM goods ORDER BY Price
SELECT T1.Id, T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T2.Item = 'Cake' ORDER BY T1.Flavor
SELECT T1.Id, T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'cake' ORDER BY T1.Flavor
SELECT T1.Item  FROM items AS T1  INNER JOIN goods AS T2  ON T1.Item = T2.Id  WHERE T2.Flavor = 'chocolate'  GROUP BY T1.Item  HAVING COUNT(T1.Item) <= 10
SELECT T1.Item  FROM items AS T1  JOIN goods AS T2 ON T1.Item = T2.Id  WHERE T2.Flavor = 'chocolate'  GROUP BY T1.Item  HAVING COUNT(T1.Receipt) <= 10
SELECT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'Cake' EXCEPT SELECT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'Tart'
SELECT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Food = 'Cakes' AND T1.Id NOT IN (SELECT Item FROM items WHERE Food = 'Tart')
 SELECT g.Id, COUNT(i.Receipt) FROM goods g LEFT JOIN items i ON g.Id = i.Item GROUP BY g.Id ORDER BY COUNT(i.Receipt) DESC LIMIT 3
SELECT T1.Item, COUNT(T1.Item) FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id GROUP BY T1.Item ORDER BY COUNT(T1.Item) DESC LIMIT 3
SELECT T1.Id FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId GROUP BY T1.Id HAVING SUM(T2.ReceiptNumber * ( SELECT SUM(Price) FROM items AS T3 INNER JOIN goods AS T4 ON T3.Item = T4.Id WHERE T3.Receipt = T2.ReceiptNumber GROUP BY T3.Receipt )) > 150
SELECT T1.Id FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId GROUP BY T1.Id HAVING SUM(T2.ReceiptNumber * ( SELECT SUM(Price) FROM items AS T3 INNER JOIN goods AS T4 ON T3.Item = T4.Id WHERE T3.Receipt = T2.ReceiptNumber GROUP BY T3.Receipt )) > 150
SELECT T1.Id FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId INNER JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt INNER JOIN goods AS T4 ON T3.Item = T4.Id GROUP BY T1.Id HAVING AVG(T4.Price) > 5
 SELECT T1.Id FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId INNER JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt INNER JOIN goods AS T4 ON T3.Item = T4.Id GROUP BY T1.Id HAVING AVG(T4.Price) > 5
SELECT T1.Date FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt INNER JOIN goods AS T3 ON T2.Item = T3.Id GROUP BY T1.Date HAVING SUM(T3.Price) > 100
SELECT T1.Date FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt INNER JOIN goods AS T3 ON T2.Item = T3.Id GROUP BY T1.Date HAVING SUM(T3.Price) > 100
SELECT COUNT(Driver_ID) FROM driver
SELECT COUNT(Driver_ID) FROM driver
SELECT COUNT(Driver_ID), Make FROM driver WHERE Points > 150 GROUP BY Make
SELECT Make, COUNT(Driver_ID) FROM driver WHERE Points > '150' GROUP BY Make
SELECT Make, AVG(Age) FROM driver GROUP BY Make
SELECT AVG(Age), Make FROM driver GROUP BY Make
SELECT AVG(Laps) FROM driver WHERE Age < 20
SELECT AVG(Laps) FROM driver WHERE Age < 20
SELECT Manager, Sponsor FROM team ORDER BY Car_Owner
SELECT Manager, Sponsor FROM team ORDER BY Car_Owner
SELECT T1.Make FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Make HAVING COUNT(T1.Make) > 1
SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1
 SELECT T2.Make FROM team_driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID INNER JOIN driver AS T3 ON T1.Driver_ID = T3.Driver_ID WHERE T3.`Car_#` = (SELECT `Car_#` FROM driver WHERE Car_Owner = 'Buddy Arrington')
 SELECT T1.Make FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID INNER JOIN driver AS T3 ON T2.Driver_ID = T3.Driver_ID WHERE T3.Car_Owner = 'Buddy Arrington'
SELECT MAX(`Points`), MIN(`Points`) FROM driver
SELECT MAX(`Points`) AS highest_points, MIN(`Points`) AS lowest_points FROM driver
SELECT COUNT(Driver_ID) FROM driver WHERE Points < 150
SELECT COUNT(Driver_ID) FROM driver WHERE Points < 150
SELECT Driver FROM driver ORDER BY Age ASC
SELECT Driver FROM driver ORDER BY Age ASC
SELECT Driver FROM driver ORDER BY Points DESC
SELECT Driver FROM driver ORDER BY Points DESC
SELECT T1.Driver, T2.Country FROM driver AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Country_Id
SELECT T1.Driver, T2.Country FROM driver AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Country_Id
SELECT MAX(T2.Points) FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T1.Capital = 'Dublin'
SELECT MAX(T2.Points) FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T1.Capital = 'Dubai'
SELECT AVG(Age) FROM driver WHERE Country IN ( SELECT Country_Id FROM country WHERE Official_native_language = 'English' )
SELECT AVG(T2.Age) FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T1.Official_native_language = 'English'
SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points > 150
SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points > 150 GROUP BY T1.Country_Id
SELECT T1.Capital FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country ORDER BY T2.Points DESC LIMIT 1
SELECT T2.Capital FROM driver AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Country_Id ORDER BY T1.Points DESC LIMIT 1
SELECT Make, COUNT(Make) FROM driver GROUP BY Make
SELECT Make, COUNT(Make) FROM driver GROUP BY Make
SELECT T1.Make FROM driver AS T1 INNER JOIN ( SELECT T1.Make, COUNT(T1.Make) AS num FROM driver AS T1 GROUP BY T1.Make ORDER BY T1.Make DESC LIMIT 1 ) AS T2 ON T1.Make = T2.Make
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(Make) DESC LIMIT 1
SELECT Make FROM driver GROUP BY Make HAVING COUNT(Make) >= 3
SELECT Make FROM driver GROUP BY Make HAVING COUNT(Make) >= 3
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = 'Dodge' INTERSECT SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = 'Chevrolet'
SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = 'Dodge' INTERSECT SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make = 'Chevrolet'
SELECT SUM(`Points`) AS Total_Points, AVG(`Points`) AS Average_Points FROM driver
SELECT SUM(`Points`) AS TotalPoints, AVG(`Points`) AS AveragePoints FROM driver
SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver)
SELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver)
SELECT T1.Manager, T1.Sponsor FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T2.Team_ID ORDER BY COUNT(T2.Driver_ID) DESC LIMIT 1
SELECT T1.Manager, T1.Sponsor FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T2.Team_ID ORDER BY COUNT(T2.Driver_ID) DESC LIMIT 1
SELECT T1.Manager, T1.Car_Owner FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T2.Team_ID HAVING COUNT(T2.Driver_ID) >= 2
SELECT T1.Manager, T1.Car_Owner FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T2.Team_ID HAVING COUNT(T2.Driver_ID) >= 2
SELECT COUNT(Institution_ID) FROM institution
SELECT COUNT(Institution_ID) FROM institution
SELECT Name FROM institution ORDER BY Name ASC
SELECT Name FROM institution ORDER BY Name ASC
SELECT Name FROM institution ORDER BY Founded ASC
SELECT Name FROM institution ORDER BY Founded
SELECT City, Province FROM institution
SELECT City, Province FROM institution
SELECT MAX(Enrollment),  MIN(Enrollment) FROM institution
SELECT MAX(Enrollment),  MIN(Enrollment) FROM institution
SELECT DISTINCT Affiliation FROM institution WHERE City!= 'Vancouver'
SELECT DISTINCT T1.Affiliation FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.City!= 'Vancouver'
SELECT Stadium FROM institution ORDER BY Capacity DESC
SELECT Stadium FROM institution ORDER BY Capacity DESC
SELECT T1.Stadium FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Enrollment DESC LIMIT 1
SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1
SELECT T1.Name, T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID
SELECT T1.Name, T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID
SELECT T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Enrollment ASC LIMIT 1
SELECT T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Enrollment ASC LIMIT 1
SELECT T1.Name FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Number_of_Championships DESC
SELECT T1.Name FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Number_of_Championships DESC
SELECT T1.Name FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID
SELECT T1.Name FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID
SELECT SUM(Number_of_Championships) FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution WHERE Affiliation = 'Public')
SELECT SUM(Number_of_Championships) FROM Championship WHERE Institution_ID IN (SELECT Institution_ID FROM institution WHERE Affiliation = 'Public')
SELECT Affiliation, COUNT(Institution_ID) FROM institution GROUP BY Affiliation
SELECT Affiliation, COUNT(Institution_ID) FROM institution GROUP BY Affiliation
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC LIMIT 1
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(Affiliation) DESC LIMIT 1
SELECT Founded FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1
SELECT Founded, COUNT(Institution_ID) FROM institution GROUP BY Founded HAVING COUNT(Institution_ID) > 1
SELECT T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Capacity DESC
SELECT T1.Nickname FROM Championship AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Capacity DESC
SELECT SUM(Enrollment) FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'
SELECT Enrollment FROM institution WHERE City = 'Vancouver' OR City = 'Calgary'
SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950
SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950
SELECT COUNT(DISTINCT Province) FROM institution
SELECT COUNT(DISTINCT Province) FROM institution
SELECT * FROM Warehouses
SELECT * FROM Warehouses
SELECT DISTINCT T2.Contents  FROM Warehouses AS T1  INNER JOIN Boxes AS T2  ON T1.Code = T2.Warehouse  WHERE T1.Location = 'New York';
SELECT DISTINCT T2.Contents  FROM Warehouses AS T1  INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse  WHERE T1.Location = 'New York';
SELECT Contents FROM Boxes WHERE Value > 150
SELECT Contents FROM Boxes WHERE Value > 150
SELECT T1.Code, AVG(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code
SELECT AVG(Value) FROM Boxes GROUP BY Warehouse
SELECT AVG(Value), SUM(Value) FROM Boxes
SELECT AVG(Value), SUM(Value) FROM Boxes
SELECT AVG(Capacity) AS avg_capacity, SUM(Capacity) AS total_capacity FROM Warehouses
SELECT AVG(Capacity),  SUM(Capacity) FROM Warehouses
SELECT Contents, AVG(Value) AS Average_Value, MAX(Value) AS Max_Value FROM Boxes GROUP BY Contents
SELECT Contents, AVG(Value) AS Average_Value, MAX(Value) AS Max_Value FROM Boxes GROUP BY Contents
SELECT Contents FROM Boxes GROUP BY Contents ORDER BY SUM(Value) DESC LIMIT 1
SELECT Contents FROM Boxes ORDER BY Value DESC LIMIT 1
SELECT AVG(Value) FROM Boxes
SELECT AVG(Value) FROM Boxes
SELECT DISTINCT Contents FROM Boxes
SELECT DISTINCT Contents FROM Boxes
SELECT COUNT(DISTINCT Contents) FROM Boxes
SELECT COUNT(DISTINCT Contents) FROM Boxes
SELECT DISTINCT Location FROM Warehouses
SELECT DISTINCT Location FROM Warehouses
SELECT B.Code  FROM Boxes B  JOIN Warehouses W ON B.Warehouse = W.Code  WHERE W.Location IN ('Chicago', 'New York');
SELECT T2.Code  FROM Warehouses AS T1  INNER JOIN Boxes AS T2  ON T1.Code = T2.Warehouse  WHERE T1.Location IN ('Chicago', 'New York');
SELECT SUM(T2.Value)  FROM Warehouses AS T1  INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse  WHERE T1.Location IN ('Chicago', 'New York');
SELECT SUM(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location IN ('Chicago', 'New York')
SELECT T2.Contents  FROM Warehouses AS T1  INNER JOIN Boxes AS T2  ON T1.Code = T2.Warehouse  WHERE T1.Location IN ('Chicago', 'New York');
SELECT T.Contents  FROM ( SELECT T1.Contents, T2.Location        FROM Boxes AS T1        JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code        WHERE T2.Location = 'Chicago'        UNION        SELECT T1.Contents, T2.Location        FROM Boxes AS T1        JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code        WHERE T2.Location = 'New York' ) AS T  GROUP BY T.Contents  HAVING COUNT(T.Location) = 2
SELECT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York')
SELECT DISTINCT T2.Contents  FROM Warehouses AS T1  INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse  WHERE T1.Location = 'New York'
SELECT T2.Location  FROM Boxes AS T1  INNER JOIN Warehouses AS T2  ON T1.Warehouse = T2.Code  WHERE T1.Contents = 'Rocks' AND T1.Code NOT IN (SELECT Code FROM Boxes WHERE Contents = 'Scissors');
SELECT T1.Location FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks' AND T2.Contents!= 'Scissors'
SELECT T1.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents IN ('Rocks', 'Scissors')
SELECT DISTINCT T1.Code  FROM Warehouses AS T1  INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse  WHERE T2.Contents IN ('Rocks', 'Scissors');
SELECT T2.Location  FROM Boxes AS T1  INNER JOIN Warehouses AS T2  ON T1.Warehouse = T2.Code  WHERE T1.Contents IN ('Rocks', 'Scissors');
SELECT T2.Location  FROM Boxes AS T1  INNER JOIN Warehouses AS T2  ON T1.Warehouse = T2.Code  WHERE T1.Contents = 'Rocks' OR T1.Contents = 'Scissors'
SELECT Code, Contents FROM Boxes ORDER BY Value
SELECT Code, Contents FROM Boxes ORDER BY Value
SELECT Code, Contents FROM Boxes ORDER BY Value ASC LIMIT 1
SELECT Code, Contents FROM Boxes ORDER BY Value ASC LIMIT 1
SELECT DISTINCT Contents FROM Boxes WHERE Value > ( SELECT AVG(Value) FROM Boxes )
SELECT DISTINCT Contents FROM Boxes WHERE Value > ( SELECT AVG(Value) FROM Boxes )
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC
SELECT Code FROM Boxes WHERE Value > ( SELECT MAX(Value) FROM Boxes WHERE Contents = 'Rocks' )
SELECT Code FROM Boxes WHERE Value > ( SELECT Value FROM Boxes WHERE Contents = 'Rocks' )
SELECT T1.Code, T1.Contents  FROM Boxes AS T1  JOIN ( SELECT Contents, MAX(Value) AS max_value         FROM Boxes         WHERE Contents = 'Scissors'         GROUP BY Contents ) AS T2  ON T1.Contents = T2.Contents AND T1.Value > T2.max_value
SELECT T1.Code, T1.Contents  FROM Boxes AS T1  WHERE T1.Value > ( SELECT MAX(T2.Value)                     FROM Boxes AS T2                     WHERE T2.Contents = 'Scissors' );
SELECT SUM(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse ORDER BY T1.Capacity DESC LIMIT 1
SELECT SUM(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse ORDER BY T1.Capacity DESC LIMIT 1
SELECT T1.Code, AVG(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code HAVING AVG(T2.Value) > 150
SELECT AVG(Value) FROM Boxes GROUP BY Warehouse HAVING AVG(Value) > 150
SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Contents
SELECT Contents, SUM(Value) AS TotalValue, COUNT(Code) AS NumberOfBoxes FROM Boxes GROUP BY Contents
SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location
SELECT Location, SUM(Capacity) AS TotalCapacity, AVG(Capacity) AS AverageCapacity, MAX(Capacity) AS MaxCapacity FROM Warehouses GROUP BY Location
SELECT SUM(Capacity) FROM Warehouses
SELECT SUM(Capacity) FROM Warehouses
 SELECT T1.Location, T2.Contents, T2.Value  FROM Warehouses AS T1  INNER JOIN Boxes AS T2  ON T1.Code = T2.Warehouse  GROUP BY T1.Location  ORDER BY T1.Location, T2.Value DESC
SELECT T1.Location, MAX(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Location
SELECT T1.Code, COUNT(T2.Code) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code
SELECT T1.Location, COUNT(T2.Code) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code
SELECT COUNT(DISTINCT T1.Location) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T2.Contents = 'Rocks'
 SELECT COUNT(DISTINCT T2.Code)  FROM Boxes AS T1  INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code  WHERE T1.Contents = 'Rocks';
SELECT T1.Code, T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code
SELECT T1.Code, T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code
SELECT T2.Code  FROM Warehouses AS T1  INNER JOIN Boxes AS T2  ON T1.Code = T2.Warehouse  WHERE T1.Location = 'Chicago';
SELECT T2.Code  FROM Warehouses AS T1  INNER JOIN Boxes AS T2  ON T1.Code = T2.Warehouse  WHERE T1.Location = 'Chicago';
SELECT T1.Location, COUNT(T2.Code) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code
SELECT T1.Location, COUNT(T2.Code) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code
SELECT T1.Location, COUNT(DISTINCT T2.Contents) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Location
SELECT T1.Location, T2.Contents, COUNT(T2.Contents) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T2.Contents, T1.Location
SELECT Code FROM Warehouses WHERE Capacity < ( SELECT SUM(Value) FROM Boxes WHERE Warehouse = Warehouses.Code )
SELECT T1.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse GROUP BY T1.Code HAVING COUNT(T2.Code) > T1.Capacity
SELECT SUM(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location!= 'Chicago'
SELECT SUM(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location!= 'Chicago'
SELECT University_Name, City, State FROM university ORDER BY University_Name ASC
SELECT University_Name, City, State FROM university ORDER BY University_Name ASC
SELECT COUNT(University_ID) FROM university WHERE State = 'Illinois' OR State = 'Ohio'
SELECT COUNT(University_ID) FROM university WHERE State = 'Illinois' OR State = 'Ohio'
SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university
SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university
SELECT T1.Team_Name FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Enrollment > ( SELECT AVG(Enrollment) FROM university )
SELECT T1.Team_Name FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Enrollment > ( SELECT AVG(Enrollment) FROM university )
SELECT DISTINCT Home_Conference FROM university
SELECT DISTINCT Home_Conference FROM university
SELECT Home_Conference, COUNT(University_ID) FROM university GROUP BY Home_Conference
SELECT COUNT(DISTINCT University_ID) FROM university WHERE Home_Conference = 'Home_Conference'
SELECT State FROM university GROUP BY State ORDER BY COUNT(State) DESC LIMIT 1
SELECT State FROM university GROUP BY State ORDER BY COUNT(State) DESC LIMIT 1
SELECT Home_Conference, AVG(Enrollment) FROM university WHERE Enrollment > 2000 GROUP BY Home_Conference
SELECT Home_Conference FROM university GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000
SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY COUNT(Enrollment) ASC LIMIT 1
SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY COUNT(Enrollment) ASC LIMIT 1
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code
SELECT T1.`Major_Name`, T2.`Rank`  FROM major AS T1  JOIN major_ranking AS T2 ON T1.`Major_ID` = T2.`Major_ID`  JOIN university AS T3 ON T2.`University_ID` = T3.`University_ID`  WHERE T3.`University_Name` = 'Augustana College'
SELECT T1.Rank, T2.Major_Name FROM major_ranking AS T1 INNER JOIN major AS T2 ON T1.Major_ID = T2.Major_ID WHERE T2.Major_Name = 'Augustana College'
SELECT T1.University_Name, T1.City, T1.State  FROM university AS T1  JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID  JOIN major AS T3 ON T2.Major_ID = T3.Major_ID  WHERE T3.Major_Name = 'Accounting' AND T2.Rank = 1
SELECT T1.University_Name, T1.City, T1.State  FROM university AS T1  JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID  JOIN major AS T3 ON T2.Major_ID = T3.Major_ID  WHERE T3.Major_Name = 'Accounting' AND T2.Rank = 1
SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1 GROUP BY T1.University_ID ORDER BY COUNT(T2.Major_ID) DESC LIMIT 1
SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1 GROUP BY T1.University_Name ORDER BY COUNT(T2.Major_ID) DESC LIMIT 1
SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank = 1 AND T2.Major_ID IS NULL
SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Rank!= 1
SELECT T1.University_Name  FROM university AS T1  INNER JOIN major_ranking AS T2  ON T1.University_ID = T2.University_ID  INNER JOIN major AS T3  ON T2.Major_ID = T3.Major_ID  WHERE T3.Major_Name = 'Accounting'  INTERSECT  SELECT T1.University_Name  FROM university AS T1  INNER JOIN major_ranking AS T2  ON T1.University_ID = T2.University_ID  INNER JOIN major AS T3  ON T2.Major_ID = T3.Major_ID  WHERE T3.Major_Name = 'Urban Education'
SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Accounting' INTERSECT SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Urban Education'
SELECT T1.University_Name, T2.Total FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.State = 'Wisconsin'
SELECT T1.University_Name, T2.Rank FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T1.State = 'Wisconsin'
SELECT T2.University_Name FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.Research_point DESC LIMIT 1
SELECT T2.University_Name FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.Research_point DESC LIMIT 1
SELECT T2.University_Name FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.Reputation_point ASC
SELECT T2.University_Name FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.Reputation_point ASC
SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Accounting' AND T2.Rank >= 3
SELECT T2.University_Name FROM major_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T1.Major_ID = T3.Major_ID WHERE T3.Major_Name = 'Accounting' AND T1.Rank <= 3
SELECT SUM(T2.Enrollment) FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Rank <= 5
SELECT COUNT(T1.University_ID) FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Rank <= 5
SELECT T1.University_Name, T2.Citation_point FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Reputation_point IN (SELECT Reputation_point FROM overall_ranking ORDER BY Reputation_point DESC LIMIT 3)
SELECT T1.University_Name, T2.Citation_point FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Reputation_point DESC LIMIT 3
SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2
SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2
SELECT Title FROM Movies WHERE Rating IS NULL
SELECT Title FROM Movies WHERE Rating IS NULL
SELECT Title FROM Movies WHERE Rating = 'G'
SELECT Title FROM Movies WHERE Rating = 'G'
SELECT T1.Title  FROM Movies AS T1  INNER JOIN MovieTheaters AS T2  ON T1.Code = T2.Movie  WHERE T2.Name = 'Odeon';
SELECT T1.Title FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name = 'Odeon'
SELECT T1.Title, T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie
SELECT T1.Title, T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie
SELECT COUNT(Code) FROM Movies WHERE Rating = 'G'
SELECT COUNT(Code) FROM Movies WHERE Rating = 'G'
SELECT COUNT(T1.Code) FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie
SELECT COUNT(Movie) FROM MovieTheaters
SELECT COUNT(DISTINCT T1.Movie) FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code
SELECT COUNT(DISTINCT Movie) FROM MovieTheaters
SELECT COUNT(DISTINCT Code) FROM MovieTheaters
SELECT COUNT(DISTINCT Code) FROM MovieTheaters
SELECT T1.Rating FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name LIKE '%Citizen%'
SELECT T1.Rating FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name LIKE '%Citizen%'
SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating IN ('G', 'PG')
SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating IN ('G', 'PG')
SELECT T1.Title FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name IN ('Odeon', 'Imperial')
SELECT T1.Title FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name IN ('Odeon', 'Imperial')
SELECT T1.Title  FROM Movies AS T1  INNER JOIN MovieTheaters AS T2  ON T1.Code = T2.Movie  WHERE T2.Name IN ('Odeon', 'Imperial')
SELECT T1.Title  FROM Movies AS T1  INNER JOIN MovieTheaters AS T2  ON T1.Code = T2.Movie  WHERE T2.Name IN ('Odeon', 'Imperial')
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Name = 'Odeon')
SELECT Title FROM Movies ORDER BY Title ASC
SELECT Title FROM Movies ORDER BY Title ASC
SELECT Title FROM Movies ORDER BY Rating
SELECT Title FROM Movies ORDER BY Rating
SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(Movie) DESC LIMIT 1
SELECT Name FROM MovieTheaters GROUP BY Name ORDER BY COUNT(Movie) DESC LIMIT 1
SELECT T1.Title FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie GROUP BY T1.Code ORDER BY COUNT(T2.Code) DESC LIMIT 1
SELECT T1.Title FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie GROUP BY T1.Title ORDER BY COUNT(T2.Code) DESC LIMIT 1
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating
SELECT Rating, COUNT(*) FROM Movies GROUP BY Rating
SELECT COUNT(Code) FROM Movies WHERE Rating IS NOT NULL
SELECT COUNT(Code) FROM Movies WHERE Rating IS NOT NULL
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL
SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie
SELECT Name FROM MovieTheaters WHERE Movie IS NULL
SELECT Name FROM MovieTheaters WHERE Movie IS NULL
SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = 'G'
SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = 'G'
SELECT Title FROM Movies
SELECT Title FROM Movies
SELECT DISTINCT Rating FROM Movies
SELECT DISTINCT Rating FROM Movies
SELECT * FROM Movies WHERE Rating IS NULL
SELECT * FROM Movies WHERE Rating IS NULL
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)
SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters)
 SELECT T2.AccountNumber FROM Package AS T1 JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber JOIN Client AS T3 ON T1.Sender = T3.AccountNumber JOIN Shipment AS T4 ON T1.Shipment = T4.ShipmentID ORDER BY T1.Weight DESC LIMIT 1
SELECT T2.Name FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1
SELECT SUM(T1.Weight) FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = 'Leo Wong'
SELECT SUM(T1.Weight) FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = 'Leo Wong'
SELECT Position FROM Employee WHERE Name = 'Amy Wong'
SELECT Position FROM Employee WHERE Name = 'Amy Wong'
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'
SELECT T2.Level FROM Employee AS T1 INNER JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee WHERE T1.Name = 'Physician'
SELECT T2.Level  FROM Employee AS T1  INNER JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee  WHERE T1.Position = 'Physician'
SELECT T2.PackageNumber FROM Employee AS T1 INNER JOIN Package AS T2 ON T1.EmployeeID = T2.Sender WHERE T1.Name = 'Leo Wong'
SELECT COUNT(T1.PackageNumber) FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = 'Leo Wong'
SELECT T2.PackageNumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient INNER JOIN Employee AS T3 ON T3.EmployeeID = T1.AccountNumber WHERE T3.Name = 'Leo Wong'
SELECT T2.PackageNumber FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient INNER JOIN Employee AS T3 ON T3.EmployeeID = T1.AccountNumber WHERE T3.Name = 'Leo Wong'
SELECT T1.PackageNumber FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = 'Leo Wong' UNION SELECT T1.PackageNumber FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber WHERE T2.Name = 'Leo Wong'
SELECT DISTINCT T1.PackageNumber FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = 'Leo Wong' UNION SELECT DISTINCT T1.PackageNumber FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber WHERE T2.Name = 'Leo Wong'
SELECT COUNT(T1.PackageNumber)  FROM Package AS T1  JOIN Client AS T2 ON T1.Sender = T2.AccountNumber  JOIN Client AS T3 ON T1.Recipient = T3.AccountNumber  JOIN Employee AS T4 ON T2.AccountNumber = T4.EmployeeID  JOIN Employee AS T5 ON T3.AccountNumber = T5.EmployeeID  WHERE T4.Name = 'Ogden Wernstrom' AND T5.Name = 'Leo Wong'
SELECT COUNT(T1.PackageNumber) FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber INNER JOIN Client AS T3 ON T1.Recipient = T3.AccountNumber INNER JOIN Employee AS T4 ON T2.AccountNumber = T4.EmployeeID INNER JOIN Employee AS T5 ON T3.AccountNumber = T5.EmployeeID WHERE T4.Name = 'Ogden Wernstrom' AND T5.Name = 'Leo Wong'
SELECT T2.Contents FROM Employee AS T1 INNER JOIN Package AS T2 ON T1.EmployeeID = T2.Sender WHERE T1.Name = 'John Zoidfarb'
SELECT T2.Contents FROM Employee AS T1 INNER JOIN Package AS T2 ON T1.EmployeeID = T2.Sender WHERE T1.Name = 'John Zoidfarb'
SELECT T1.PackageNumber, T1.Weight FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name LIKE '%John%' ORDER BY T1.Weight DESC LIMIT 1
SELECT T1.PackageNumber, T1.Weight FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name LIKE 'John%' ORDER BY T1.Weight DESC LIMIT 1
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3
SELECT PackageNumber, Weight FROM Package ORDER BY Weight ASC LIMIT 3
SELECT T1.Name, COUNT(T2.PackageNumber) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.AccountNumber ORDER BY COUNT(T2.PackageNumber) DESC LIMIT 1
SELECT T1.Name, COUNT(*) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.AccountNumber ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Name, COUNT(T2.Recipient) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient GROUP BY T1.AccountNumber ORDER BY COUNT(T2.Recipient) ASC LIMIT 1
 SELECT T1.AccountNumber, COUNT(T2.Recipient) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient GROUP BY T1.AccountNumber ORDER BY COUNT(T2.Recipient) ASC LIMIT 1
SELECT T1.Name FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T2.Sender HAVING COUNT(T2.Sender) > 1
SELECT T1.Name FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T2.Sender HAVING COUNT(T2.Sender) > 1
SELECT T1.Coordinates FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet WHERE T1.Name = 'Mars'
SELECT T1.Coordinates FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet WHERE T1.Name = 'Mars'
SELECT Name, Coordinates FROM Planet ORDER BY Name ASC
SELECT Name, Coordinates FROM Planet ORDER BY Name ASC
SELECT ShipmentID FROM Shipment WHERE Manager IN (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J. Fry')
SELECT T1.ShipmentID FROM Shipment AS T1 INNER JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = 'Phillip J Fry'
SELECT Date FROM Shipment
SELECT Date FROM Shipment
SELECT T1.ShipmentID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name = 'Mars'
SELECT T1.ShipmentID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name = 'Mars'
SELECT T1.ShipmentID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.PlanetID INNER JOIN Employee AS T3 ON T1.Manager = T3.EmployeeID WHERE T2.Name = 'Mars' AND T3.Name = 'Turanga Leela'
SELECT T1.ShipmentID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.PlanetID INNER JOIN Employee AS T3 ON T1.Manager = T3.EmployeeID WHERE T2.Name = 'Mars' AND T3.Name = 'Turanga Leela'
SELECT T1.ShipmentID FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.PlanetID INNER JOIN Employee AS T3 ON T1.Manager = T3.EmployeeID WHERE T2.Name = 'Mars' OR T3.Name = 'Turanga Leela'
SELECT T2.ShipmentID FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet INNER JOIN Employee AS T3 ON T3.EmployeeID = T2.Manager WHERE T1.Name = 'Mars' AND T3.Name = 'Turanga Leela'
SELECT T1.Name, COUNT(T2.ShipmentID) FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.PlanetID
SELECT T1.Name, COUNT(T2.ShipmentID) FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.PlanetID
SELECT T2.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY COUNT(T1.Planet) DESC LIMIT 1
SELECT T1.Name FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T2.Planet ORDER BY COUNT(T2.Planet) DESC LIMIT 1
SELECT T1.Name, COUNT(T2.ShipmentID) FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.Manager GROUP BY T1.EmployeeID
 SELECT COUNT(T2.ShipmentID) AS NumShipments, T1.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.Manager GROUP BY T1.Name
SELECT SUM(T1.Weight)  FROM Package AS T1  JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID  JOIN Planet AS T3 ON T2.Planet = T3.PlanetID  WHERE T3.Name = 'Mars'
SELECT SUM(T1.Weight)  FROM Package AS T1  JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID  JOIN Planet AS T3 ON T2.Planet = T3.PlanetID  WHERE T3.Name = 'Mars'
SELECT T1.Name, SUM(T3.Weight) FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet INNER JOIN Package AS T3 ON T2.ShipmentID = T3.Shipment GROUP BY T1.Name
SELECT T1.Name, SUM(T2.Weight) FROM Planet AS T1 INNER JOIN Shipment AS T3 ON T1.PlanetID = T3.Planet INNER JOIN Package AS T2 ON T3.ShipmentID = T2.Shipment GROUP BY T1.PlanetID
SELECT T1.Name FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet INNER JOIN Package AS T3 ON T2.ShipmentID = T3.Shipment GROUP BY T1.PlanetID HAVING SUM(T3.Weight) > 30
SELECT T1.Name FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet INNER JOIN Package AS T3 ON T2.ShipmentID = T3.Shipment GROUP BY T1.Name HAVING SUM(T3.Weight) > 30
 SELECT T3.PackageNumber  FROM Planet AS T1  INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet  INNER JOIN Package AS T3 ON T2.ShipmentID = T3.Shipment  INNER JOIN Client AS T4 ON T3.Sender = T4.AccountNumber  INNER JOIN Employee AS T5 ON T2.Manager = T5.EmployeeID  WHERE T1.Name = 'Omicron Persei 8' AND T5.Name = 'Zapp Brannigan';
SELECT COUNT(T1.PackageNumber)  FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID  INNER JOIN Employee AS T3 ON T2.Manager = T3.EmployeeID  INNER JOIN Has_Clearance AS T4 ON T3.EmployeeID = T4.Employee  INNER JOIN Planet AS T5 ON T4.Planet = T5.PlanetID  WHERE T3.Name = 'Zapp Brannigan' AND T5.Name = 'Omicron Persei 8'
SELECT T2.PackageNumber  FROM Shipment AS T1  JOIN Package AS T2 ON T1.ShipmentID = T2.Shipment  JOIN Planet AS T3 ON T1.Planet = T3.PlanetID  JOIN Client AS T4 ON T2.Sender = T4.AccountNumber  JOIN Employee AS T5 ON T1.Manager = T5.EmployeeID  WHERE T3.Name = 'Omicron Persei 8' OR T5.Name = 'Zapp Brannigan'
SELECT COUNT(T1.PackageNumber) FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID INNER JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = 'Omicron Persei 8' OR T1.Sender IN ( SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan' )
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30
SELECT T1.Name  FROM Employee AS T1  LEFT JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee  LEFT JOIN Planet AS T3 ON T2.Planet = T3.PlanetID  WHERE T3.Name = 'Mars' AND T2.Level IS NULL
SELECT Name FROM Employee WHERE EmployeeID NOT IN (SELECT Employee FROM Has_Clearance WHERE Planet IN (SELECT PlanetID FROM Planet WHERE Name = 'Mars'))
SELECT T1.Name FROM Employee AS T1 INNER JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee INNER JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = 'Omega III'
SELECT T1.Name FROM Employee AS T1 INNER JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee INNER JOIN Planet AS T3 ON T3.PlanetID = T2.Planet WHERE T3.Name = 'Omega III'
SELECT T3.Name FROM Has_Clearance AS T1 INNER JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID INNER JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING COUNT(T1.Employee) = 1
SELECT T1.Name FROM Planet AS T1 INNER JOIN Has_Clearance AS T2 ON T1.PlanetID = T2.Planet GROUP BY T2.Planet HAVING COUNT(T2.Employee) = 1
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000
SELECT COUNT(T1.EmployeeID)  FROM Employee AS T1  LEFT JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee  LEFT JOIN Planet AS T3 ON T2.Planet = T3.PlanetID  WHERE T3.Name = 'Mars' AND T2.Planet IS NULL
SELECT COUNT(T1.EmployeeID) FROM Employee AS T1 LEFT JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee LEFT JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = 'Mars' AND T2.Employee IS NULL
SELECT COUNT(*) FROM game
SELECT COUNT(*) FROM game
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC
SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT LIKE '%Nintendo%'
SELECT AVG(Units_sold_Millions) FROM game WHERE Developers NOT LIKE '%Nintendo%'
SELECT "Platform_name", "Market_district" FROM platform
SELECT Platform_name, Market_district FROM platform
SELECT "Platform_ID", "Platform_name" FROM platform WHERE "Download_rank" = 1
SELECT "Platform_name", "Platform_ID" FROM platform WHERE "Download_rank" = 1
SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player
SELECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM player
SELECT COUNT(Player_ID) FROM player WHERE Rank_of_the_year < 3
SELECT COUNT("Player_ID") FROM player WHERE "Rank_of_the_year" <= 3
SELECT Player_name FROM player ORDER BY Player_name ASC
SELECT Player_name FROM player ORDER BY Player_name ASC
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC
SELECT T1.Player_name, T1.Rank_of_the_year  FROM player AS T1  JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID  JOIN game AS T3 ON T2.Game_ID = T3.Game_ID  WHERE T3.Title = 'Super Mario World';
SELECT T1.Player_name, T1.Rank_of_the_year  FROM player AS T1  JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID  JOIN game AS T3 ON T2.Game_ID = T3.Game_ID  WHERE T3.Title = 'Super Mario World';
SELECT DISTINCT T1.Developers  FROM game AS T1  INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID  INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID  WHERE T3.College = 'Auburn';
SELECT DISTINCT T1.Developers FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = 'Auburn'
SELECT AVG(T1.Units_sold_Millions)  FROM game AS T1  JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID  JOIN player AS T3 ON T2.Player_ID = T3.Player_ID  WHERE T3.Position = 'Guard';
SELECT AVG(T1.Units_sold_Millions)  FROM game AS T1  JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID  JOIN player AS T3 ON T2.Player_ID = T3.Player_ID  WHERE T3.Position = 'Guard'
SELECT T1.Title, T2.Platform_name FROM game AS T1 INNER JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID
SELECT T1.Title, T2.Platform_name FROM game AS T1 INNER JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID
SELECT T2.Title FROM platform AS T1 INNER JOIN game AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T1.Market_district IN ('Asia', 'USA')
SELECT T1.Title FROM game AS T1 INNER JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T2.Market_district IN ('Asia', 'USA')
SELECT Franchise, COUNT(T1.Game_ID) FROM game AS T1 GROUP BY T1.Franchise
SELECT Franchise, COUNT(Game_ID) FROM game GROUP BY Franchise
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Franchise) DESC LIMIT 1
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Franchise) DESC LIMIT 1
SELECT DISTINCT T1.Franchise FROM game AS T1 INNER JOIN game AS T2 ON T1.Franchise = T2.Franchise WHERE T1.Franchise!= T2.Franchise
SELECT DISTINCT T1.Franchise FROM game AS T1 INNER JOIN game AS T2 ON T1.Franchise = T2.Franchise WHERE T1.Game_ID!= T2.Game_ID
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
SELECT T1.Title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID INNER JOIN player AS T4 ON T2.Player_ID = T4.Player_ID WHERE T3.College = 'Oklahoma' AND T4.College = 'Auburn'
SELECT T1.Title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.College = 'Oklahoma' OR T3.College = 'Auburn'
SELECT DISTINCT Franchise FROM game
SELECT DISTINCT Franchise FROM game
SELECT T1.Title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.Position!= 'Guard' GROUP BY T1.Title HAVING COUNT(T2.Player_ID) = 0
SELECT T1.Title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.Position!= 'Guard'
SELECT Name FROM press ORDER BY Year_Profits_billion DESC
SELECT Name FROM press ORDER BY Year_Profits_billion DESC
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1
SELECT AVG("Year_Profits_billion"), MAX("Year_Profits_billion") FROM press
SELECT Press_ID, AVG(YEAR_Profits_billion) AS avg_yearly_profit, MAX(YEAR_Profits_billion) AS max_yearly_profit FROM press GROUP BY Press_ID
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1
SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1
 SELECT Name FROM ( SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1 ) AS high UNION SELECT Name FROM ( SELECT Name FROM press ORDER BY Month_Profits_billion ASC LIMIT 1 ) AS low
 SELECT Name FROM ( SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1 ) AS high_profit UNION SELECT Name FROM ( SELECT Name FROM press ORDER BY Month_Profits_billion ASC LIMIT 1 ) AS low_profit
SELECT COUNT(Author_ID) FROM author WHERE Age < 30
SELECT COUNT(Author_ID) FROM author WHERE Age < 30
SELECT Gender, AVG(Age) FROM author GROUP BY Gender
SELECT Gender, AVG(Age) FROM author GROUP BY Gender
SELECT Gender, COUNT(Author_ID) FROM author WHERE Age > 30 GROUP BY Gender
SELECT Gender, COUNT(Author_ID) FROM author WHERE Age > 30 GROUP BY Gender
SELECT Title FROM book ORDER BY Release_date DESC
SELECT Title FROM book ORDER BY Release_date DESC
SELECT Book_Series, COUNT(Book_ID) FROM book GROUP BY Book_Series
SELECT Book_Series, COUNT(Book_ID) FROM book GROUP BY Book_Series
SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5
SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5
SELECT Book_Series FROM book WHERE Sale_Amount = '1000' INTERSECT SELECT Book_Series FROM book WHERE Sale_Amount = '500'
SELECT DISTINCT T1.Book_Series FROM book AS T1 INNER JOIN book AS T2 ON T1.Book_Series = T2.Book_Series WHERE T1.Sale_Amount = 'above 1000' AND T2.Sale_Amount = 'below 500'
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = 'MM' INTERSECT SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = 'LT'
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = 'MM' INTERSECT SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series = 'LT'
SELECT Name, Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T2.Author_ID HAVING COUNT(T2.Author_ID) > 1
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Author_ID HAVING COUNT(T2.Author_ID) > 1
SELECT T1.Title, T2.Name, T3.Name FROM book AS T1 INNER JOIN author AS T2 ON T1.Author_ID = T2.Author_ID INNER JOIN press AS T3 ON T1.Press_ID = T3.Press_ID ORDER BY T1.Sale_Amount DESC LIMIT 3
SELECT T1.Title, T3.Name AS Author_Name, T2.Name AS Press_Name FROM book AS T1 INNER JOIN author AS T3 ON T1.Author_ID = T3.Author_ID INNER JOIN press AS T2 ON T1.Press_ID = T2.Press_ID ORDER BY T1.Sale_Amount DESC LIMIT 3
SELECT T2.Name, SUM(T1.Sale_Amount) FROM book AS T1 INNER JOIN press AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T2.Press_ID
SELECT T2.Name, SUM(T1.Sale_Amount) FROM book AS T1 INNER JOIN press AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T2.Press_ID
SELECT T1.Name, COUNT(T2.Book_ID) FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Press_ID WHERE T2.Sale_Amount > '1000' GROUP BY T1.Press_ID
SELECT T1.Name, COUNT(T2.Book_ID) FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Press_ID WHERE T2.Sale_Amount > '1000' GROUP BY T1.Press_ID
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Sale_Amount = 'best selling'
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID ORDER BY T2.Sale_Amount DESC LIMIT 1
SELECT T1.Name, T1.Gender FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Author_ID ORDER BY COUNT(T2.Book_ID) DESC LIMIT 1
SELECT T1.Name, T1.Gender FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Author_ID ORDER BY COUNT(T2.Book_ID) DESC LIMIT 1
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor'))
SELECT Name FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book WHERE Press_ID IN (SELECT Press_ID FROM press WHERE Name = 'Accor'))
SELECT T2.Name, T2."Year_Profits_billion" FROM book AS T1 INNER JOIN press AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Press_ID HAVING COUNT(T1.Press_ID) > 2
SELECT T2.Name, T2."Year_Profits_billion" FROM book AS T1 INNER JOIN press AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Press_ID HAVING COUNT(T1.Press_ID) > 2
SELECT COUNT(author_name) FROM Authors
SELECT author_name FROM Authors
SELECT author_name, other_details FROM Authors
SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik'
SELECT COUNT(document_id) FROM Documents
SELECT T2.author_name FROM Documents AS T1 INNER JOIN Authors AS T2 ON T1.author_name = T2.author_name WHERE T1.document_id = 4
SELECT T2.author_name FROM Documents AS T1 INNER JOIN Authors AS T2 ON T1.author_name = T2.author_name WHERE T1.document_name = 'Travel to Brazil'
SELECT COUNT(document_id) FROM Documents WHERE author_name = 'Era Kerluke'
SELECT author_name, document_name, document_description FROM Documents
SELECT T1.document_id, T1.document_name FROM Documents AS T1 INNER JOIN Authors AS T2 ON T1.author_name = T2.author_name WHERE T2.author_name = 'Bianka Cummings'
SELECT T2.author_name, T2.other_details  FROM Documents AS T1  INNER JOIN Authors AS T2 ON T1.author_name = T2.author_name  WHERE T1.document_name = 'Travel to China';
SELECT T1.author_name, COUNT(T2.document_id) FROM Authors AS T1 INNER JOIN Documents AS T2 ON T1.author_name = T2.author_name GROUP BY T1.author_name
SELECT T1.author_name FROM Authors AS T1 INNER JOIN Documents AS T2 ON T1.author_name = T2.author_name GROUP BY T1.author_name ORDER BY COUNT(T2.document_id) DESC LIMIT 1
SELECT T1.author_name FROM Authors AS T1 INNER JOIN Documents AS T2 ON T1.author_name = T2.author_name GROUP BY T1.author_name HAVING COUNT(T1.author_name) >= 2
SELECT COUNT(process_id) FROM Business_Processes
SELECT T2.next_process_id, T2.process_name, T2.process_description  FROM Documents_Processes AS T1  INNER JOIN Business_Processes AS T2 ON T1.process_id = T2.process_id  WHERE T1.document_id IN ( SELECT document_id FROM Documents_Processes WHERE process_id = 9 );
SELECT T2.process_name FROM Business_Processes AS T1 INNER JOIN Business_Processes AS T2 ON T1.next_process_id = T2.process_id WHERE T1.process_id = 9
SELECT COUNT(process_outcome_code) FROM Process_Outcomes
SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes
SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working'
SELECT COUNT(process_status_code) FROM Process_Status
SELECT process_status_code, process_status_description FROM Process_Status
SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct'
SELECT COUNT(staff_id) FROM Staff
SELECT staff_id, staff_details FROM Staff
SELECT staff_details FROM Staff WHERE staff_id = 100
SELECT COUNT(staff_role_code) FROM Ref_Staff_Roles
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles
SELECT T2.staff_role_description FROM Staff_in_Processes AS T1 INNER JOIN Ref_Staff_Roles AS T2 ON T1.staff_role_code = T2.staff_role_code WHERE T1.staff_role_code = 'HR'
SELECT COUNT(DISTINCT document_id) FROM Documents_Processes
SELECT DISTINCT T1.process_id FROM Documents_Processes AS T1 INNER JOIN Documents AS T2 ON T1.document_id = T2.document_id
SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes)
SELECT process_id FROM Business_Processes WHERE process_id NOT IN (SELECT process_id FROM Documents_Processes)
SELECT T2.process_outcome_description, T3.process_status_description  FROM Documents_Processes AS T1  INNER JOIN Process_Outcomes AS T2 ON T1.process_outcome_code = T2.process_outcome_code  INNER JOIN Process_Status AS T3 ON T1.process_status_code = T3.process_status_code  WHERE T1.document_id = 0
 SELECT T2.process_name  FROM Documents AS T1  INNER JOIN Business_Processes AS T2  ON T1.document_id = T2.process_id  WHERE T1.document_name = 'Travel to Brazil'
SELECT T1.process_id, COUNT(T2.document_id) FROM Business_Processes AS T1 INNER JOIN Documents_Processes AS T2 ON T1.process_id = T2.process_id GROUP BY T1.process_id
SELECT COUNT(DISTINCT T1.staff_id) FROM Staff_in_Processes AS T1 INNER JOIN Documents_Processes AS T2 ON T1.document_id = T2.document_id AND T1.process_id = T2.process_id WHERE T2.document_id = 0 AND T2.process_id = 9
SELECT T1.staff_id, COUNT(T2.document_id) FROM Staff AS T1 INNER JOIN Staff_in_Processes AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id
SELECT T1.staff_role_code, COUNT(T2.document_id) FROM Ref_Staff_Roles AS T1 INNER JOIN Staff_in_Processes AS T2 ON T1.staff_role_code = T2.staff_role_code GROUP BY T1.staff_role_code
SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3
SELECT COUNT(*) FROM Agencies
SELECT COUNT(*) FROM Agencies
SELECT agency_id, agency_details FROM Agencies
SELECT agency_id, agency_details FROM Agencies
SELECT COUNT(client_id) FROM Clients
SELECT COUNT(`client_id`) FROM Clients
SELECT client_id, client_details FROM Clients
SELECT client_id, client_details FROM Clients
SELECT Agencies.agency_id, COUNT(Clients.client_id) FROM Agencies LEFT JOIN Clients ON Agencies.agency_id = Clients.agency_id GROUP BY Agencies.agency_id
SELECT T1.agency_id, COUNT(T2.client_id) FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY COUNT(T2.client_id) DESC LIMIT 1
SELECT T1.agency_id, T1.agency_details  FROM Agencies AS T1  JOIN Clients AS T2 ON T1.agency_id = T2.agency_id  GROUP BY T1.agency_id  ORDER BY COUNT(T2.client_id) DESC  LIMIT 1
SELECT T1.agency_id, T1.agency_details  FROM Agencies AS T1  JOIN Clients AS T2 ON T1.agency_id = T2.agency_id  GROUP BY T1.agency_id  HAVING COUNT(T2.client_id) >= 2
SELECT T1.agency_id, T1.agency_details  FROM Agencies AS T1  JOIN Clients AS T2 ON T1.agency_id = T2.agency_id  GROUP BY T1.agency_id  HAVING COUNT(T2.client_id) >= 2
SELECT T1.agency_details  FROM Agencies AS T1  INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id  WHERE T2.client_details = 'Mac'
SELECT T1.agency_details FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id WHERE T2.client_details = 'Mac'
SELECT T1.client_details, T2.staff_details FROM Clients AS T1 INNER JOIN Staff AS T2 ON T1.agency_id = T2.agency_id
SELECT T1.client_details, T2.agency_details FROM Clients AS T1 INNER JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id
SELECT sic_code, COUNT(client_id) FROM Clients GROUP BY sic_code
SELECT sic_code, COUNT(client_id) FROM Clients GROUP BY sic_code
SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'
SELECT client_details FROM Clients WHERE sic_code = 'Bad'
SELECT T1.agency_id, T1.agency_details  FROM Agencies AS T1  INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id
SELECT T1.agency_id, T1.agency_details  FROM Agencies AS T1  INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id
SELECT T1.agency_id FROM Agencies AS T1 LEFT JOIN Clients AS T2 ON T1.agency_id = T2.agency_id WHERE T2.agency_id IS NULL
SELECT agency_id FROM Agencies WHERE agency_id NOT IN (SELECT agency_id FROM Clients)
SELECT COUNT(`invoice_id`) FROM `Invoices`
SELECT COUNT(`invoice_id`) FROM `Invoices`
SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details FROM Invoices AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id
SELECT invoice_id, invoice_status, invoice_details FROM Invoices
SELECT client_id, COUNT(invoice_id) FROM Invoices GROUP BY client_id
SELECT client_id, COUNT(*) FROM Invoices GROUP BY client_id
SELECT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id ORDER BY COUNT(T2.invoice_id) DESC LIMIT 1
SELECT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id ORDER BY COUNT(T2.invoice_id) DESC LIMIT 1
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(client_id) >= 2
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(client_id) >= 2
SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status
SELECT invoice_status, COUNT(*) FROM Invoices GROUP BY invoice_status
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(invoice_status) DESC LIMIT 1
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(invoice_status) DESC LIMIT 1
SELECT T1.invoice_status, T1.invoice_details, T2.client_id, T2.client_details, T3.agency_id, T3.agency_details FROM Invoices AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id INNER JOIN Agencies AS T3 ON T2.agency_id = T3.agency_id
SELECT T1.invoice_status, T1.invoice_details, T2.client_id, T2.client_details, T3.agency_id, T3.agency_details FROM Invoices AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id INNER JOIN Agencies AS T3 ON T2.agency_id = T3.agency_id
SELECT meeting_type, purpose_of_meeting FROM Meetings
SELECT DISTINCT meeting_type, other_details FROM Meetings
SELECT meeting_outcome, purpose_of_meeting FROM Meetings
SELECT meeting_outcome, purpose_of_meeting FROM Meetings
SELECT T1.payment_id, T1.payment_details  FROM Payments AS T1  INNER JOIN Invoices AS T2 ON T1.invoice_id = T2.invoice_id  WHERE T2.invoice_status = 'Working';
SELECT T1.payment_id, T1.payment_details FROM Payments AS T1 INNER JOIN Invoices AS T2 ON T1.invoice_id = T2.invoice_id WHERE T2.invoice_status = 'Working'
SELECT T1.invoice_id, T1.invoice_status FROM Invoices AS T1 LEFT JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id WHERE T2.invoice_id IS NULL
SELECT T1.invoice_id, T1.invoice_status FROM Invoices AS T1 LEFT JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id WHERE T2.invoice_id IS NULL
SELECT COUNT(payment_id) FROM Payments
SELECT COUNT(payment_id) FROM Payments
SELECT payment_id, invoice_id, payment_details FROM Payments
SELECT payment_id, invoice_id, payment_details FROM Payments
SELECT DISTINCT T1.invoice_id, T1.invoice_status FROM Invoices AS T1 INNER JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id
SELECT DISTINCT T1.invoice_id, T1.invoice_status FROM Invoices AS T1 INNER JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id
SELECT T1.invoice_id, COUNT(T2.payment_id) FROM Invoices AS T1 INNER JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id
SELECT invoice_id, COUNT(payment_id) FROM Payments GROUP BY invoice_id
SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details  FROM Invoices AS T1  JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id  GROUP BY T1.invoice_id  ORDER BY COUNT(T2.payment_id) DESC  LIMIT 1
SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details  FROM Invoices AS T1  JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id  GROUP BY T1.invoice_id  ORDER BY COUNT(T2.payment_id) DESC  LIMIT 1
SELECT COUNT(*) FROM Staff
SELECT COUNT(*) FROM Staff
SELECT Agencies.agency_id, COUNT(Staff.staff_id) FROM Agencies LEFT JOIN Staff ON Agencies.agency_id = Staff.agency_id GROUP BY Agencies.agency_id
SELECT T1.agency_id, COUNT(T2.staff_id) FROM Agencies AS T1 INNER JOIN Staff AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id
SELECT T1.agency_id, T1.agency_details  FROM Agencies AS T1  JOIN Staff AS T2 ON T1.agency_id = T2.agency_id  GROUP BY T1.agency_id  ORDER BY COUNT(T2.staff_id) DESC  LIMIT 1
SELECT T1.agency_id, T1.agency_details  FROM Agencies AS T1  JOIN Staff AS T2 ON T1.agency_id = T2.agency_id  GROUP BY T1.agency_id  ORDER BY COUNT(T2.staff_id) DESC  LIMIT 1
SELECT meeting_outcome, COUNT(meeting_outcome) FROM Meetings GROUP BY meeting_outcome
SELECT meeting_outcome, COUNT(meeting_outcome) FROM Meetings GROUP BY meeting_outcome
SELECT T1.client_id, COUNT(T2.meeting_id) FROM Clients AS T1 INNER JOIN Meetings AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id
SELECT client_id, COUNT(meeting_id) FROM Meetings GROUP BY client_id
SELECT T1.meeting_type, COUNT(T1.meeting_id) FROM Meetings AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id GROUP BY T1.meeting_type
SELECT meeting_type, COUNT(meeting_id) FROM Meetings GROUP BY meeting_type
SELECT T1.meeting_id, T1.meeting_outcome, T1.meeting_type, T2.client_details  FROM Meetings AS T1  INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id
SELECT T1.meeting_id, T1.meeting_outcome, T1.meeting_type, T2.client_details FROM Meetings AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id
SELECT T1.meeting_id, COUNT(T2.staff_id) FROM Meetings AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.meeting_id = T2.meeting_id GROUP BY T1.meeting_id
SELECT meeting_id, COUNT(staff_id) FROM Staff_in_Meetings GROUP BY meeting_id
SELECT T1.staff_id, COUNT(T2.meeting_id) FROM Staff AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY COUNT(T2.meeting_id) ASC LIMIT 1
SELECT T.staff_id FROM ( SELECT T1.staff_id, COUNT(T1.meeting_id) AS num FROM Staff_in_Meetings T1 INNER JOIN Meetings T2 ON T1.meeting_id = T2.meeting_id WHERE T2.billable_yn = 'Y' GROUP BY T1.staff_id ) AS T ORDER BY T.num ASC LIMIT 1
SELECT COUNT(DISTINCT T1.staff_id) FROM Staff_in_Meetings AS T1 INNER JOIN Meetings AS T2 ON T1.meeting_id = T2.meeting_id
SELECT COUNT(DISTINCT T1.staff_id) FROM Staff_in_Meetings AS T1 INNER JOIN Meetings AS T2 ON T1.meeting_id = T2.meeting_id
SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings)
SELECT COUNT(T1.staff_id) FROM Staff AS T1 LEFT JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id WHERE T2.meeting_id IS NULL
SELECT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id UNION SELECT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Meetings AS T2 ON T1.client_id = T2.client_id
SELECT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id UNION SELECT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Meetings AS T2 ON T1.client_id = T2.client_id
SELECT T1.staff_id, T1.staff_details  FROM Staff AS T1  INNER JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id  WHERE T1.staff_details LIKE '%s%'
SELECT T1.staff_id, T1.staff_details  FROM Staff AS T1  INNER JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id  WHERE T1.staff_details LIKE '%s%'
SELECT T1.client_id, T1.sic_code, T1.agency_id  FROM Clients AS T1  JOIN Meetings AS T2 ON T1.client_id = T2.client_id  JOIN Invoices AS T3 ON T1.client_id = T3.client_id  GROUP BY T1.client_id  HAVING COUNT(T2.meeting_id) = 1 AND COUNT(T3.invoice_id) > 0
SELECT T1.client_id, T1.sic_code, T1.agency_id  FROM Clients AS T1  JOIN Invoices AS T2 ON T1.client_id = T2.client_id  JOIN Meetings AS T3 ON T1.client_id = T3.client_id  GROUP BY T1.client_id  HAVING COUNT(T3.meeting_id) = 1
 SELECT T1.start_date_time, T1.end_date_time, T4.client_details, T3.staff_details  FROM Meetings AS T1  INNER JOIN Staff_in_Meetings AS T2 ON T1.meeting_id = T2.meeting_id  INNER JOIN Staff AS T3 ON T2.staff_id = T3.staff_id  INNER JOIN Clients AS T4 ON T1.client_id = T4.client_id
SELECT T1.start_date_time, T1.end_date_time, T2.client_details, T3.staff_details  FROM Meetings AS T1  INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id  INNER JOIN Staff_in_Meetings AS T4 ON T1.meeting_id = T4.meeting_id  INNER JOIN Staff AS T3 ON T4.staff_id = T3.staff_id
