SELECT club.Club_ID FROM club;
SELECT club.Club_ID FROM club;
SELECT club.Name FROM club WHERE 1 ORDER BY club.Name ASC;
SELECT club.Name FROM club WHERE 1 ORDER BY club.Name ASC;
SELECT club.Name, c.Manager, c.Captain FROM club c JOIN player p ON c.Club_ID = p.Club_ID;
SELECT club.Name, c.Manager, c.Captain FROM club c JOIN player p ON c.Club_ID = p.Club_ID;
SELECT club.Name FROM club WHERE club.Manufacturer not ilike '%Nike%';
SELECT club.Name FROM club WHERE club.Manufacturer not ilike '%Nike%';
SELECT player.Name FROM player WHERE player.Wins_count IS NOT NULL ORDER BY player.Wins_count ASC;
SELECT player.Name FROM player WHERE player.Wins_count IS NOT NULL ORDER BY player.Wins_count ASC;
SELECT player.Name FROM player WHERE player.Earnings = (SELECT MAX(Earnings) FROM player); ORDER BY player.Earnings;
SELECT player.Name FROM player WHERE player.Earnings = (SELECT MAX(Earnings) FROM player); ORDER BY player.Earnings;
SELECT player.Country FROM player WHERE player.Earnings > 1200000 GROUP BY player.Country ORDER BY COUNT(player.Country) DESC NULLS LAST;
SELECT player.Country FROM player WHERE player.Earnings > 1200000 ORDER BY pplayer.Country NULLS LAST;
SELECT player.Country FROM player WHERE player.Wins_count > 2 ORDER BY player.Earnings DESC NULLS LAST LIMIT 1;
SELECT player.Country FROM player WHERE player.Wins_count > 2 ORDER BY player.Earnings DESC LIMIT 1;
SELECT player.Name, club.Name AS Club_Name FROM player JOIN club ON player.Club_ID = club.Club_ID;
SELECT player.Name, club.Name AS Club_Name FROM player JOIN club ON player.Club_ID = club.Club_ID;
SELECT club.Name FROM club WHERE EXISTS (SELECT player.Club_ID FROM player WHERE player.Club_ID = club.Club_ID AND player.Wins_count > 2);;
SELECT club.Name FROM club WHERE EXISTS (SELECT 1 FROM player p WHERE p.Club_ID = club.Club_ID AND p.Wins_count > 2);;
SELECT player.Name FROM player WHERE player.Club_ID = (SELECT club.Club_ID FROM club WHERE club.Manager ilike '%Sam%Allardyce%');;
SELECT player.Name FROM player WHERE player.Club_ID = (SELECT club.Club_ID FROM club WHERE club.Manager ilike '%Sam%Allardyce%'); ORDER BY player.Name;
SELECT club.Name FROM club WHERE EXISTS (SELECT 1 FROM player p WHERE p.Club_ID = club.Club_ID GROUP BY p.Club_ID HAVING AVG(p.Earnings) > 0) ORDER BY AVG(p.Earnings) DESC;
SELECT club.Name FROM club WHERE club.Club_ID IN (SELECT player.Club_ID FROM player GROUP BY player.Club_ID HAVING AVG(player.Earnings) > 10000) ORDER BY AVG(player.Earnings) DESC;
SELECT club.Club_ID, club.Manufacturer, COUNT(club.Manufacturer) AS number_of_clubs FROM club GROUP BY club.Club_ID, club.Manufacturer ORDER BY number_of_clubs DESC NULLS LAST;
SELECT club.Name, COUNT(club.Club_ID) AS number_of_clubs FROM club club GROUP BY club.Name ORDER BY number_of_clubs DESC NULLS LAST;
SELECT club.Club_ID, club.Manufacturer FROM club GROUP BY club.Club_ID, club.Manufacturer ORDER BY COUNT(club.Manufacturer) DESC LIMIT 1;
SELECT club.Club_ID, club.Manufacturer FROM club GROUP BY club.Club_ID, club.Manufacturer ORDER BY COUNT(club.Manufacturer) DESC LIMIT 1;
SELECT club.Name, COUNT(club.Manufacturer) AS Manufacturer_Count FROM club club GROUP BY club.Name HAVING COUNT(club.Manufacturer) > 1 ORDER BY Manufacturer_Count DESC NULLS LAST;
SELECT club.Club_ID, club.Manufacturer FROM club club GROUP BY club.Club_ID, club.Manufacturer HAVING COUNT(club.Club_ID) > 1;
SELECT player.Country FROM player WHERE player.Country IN (SELECT player.Country FROM player GROUP BY player.Country HAVING COUNT(player.Player_ID) > 1); SELECT DISTINCT pplayer.Country FROM player pplayer JOIN club c ON pplayer.Club_ID = c.Club_ID; SELECT DISTINCT pplayer.Country FROM player pplayer JOIN club c ON pplayer.Club_ID = c.Club_ID JOIN player p ON c.Club_ID = p.Club_ID AND p.Country = pplayer.Country; SELECT DISTINCT pplayer.Country FROM player pplayer JOIN club c ON pplayer.Club_ID = c.Club_ID JOIN player p ON c.Club_ID = p.Club_ID AND p.Country = pplayer.Country; SELECT DISTINCT pplayer.Country FROM player pplayer JOIN club c ON
SELECT player.Country FROM player WHERE player.Country IN (SELECT player.Country FROM player GROUP BY player.Country HAVING COUNT(player.Player_ID) > 1); SELECT DISTINCT country FROM player WHERE country IN (SELECT country FROM player GROUP BY country HAVING COUNT(player_id) > 1); SELECT country FROM player GROUP BY country HAVING COUNT(player_id) > 1; SELECT country FROM player WHERE country IN (SELECT country FROM player GROUP BY country HAVING COUNT(player_id) > 1) ORDER BY country NULLS LAST; SELECT country FROM player GROUP BY country HAVING COUNT(player_id) > 1 ORDER BY country NULLS LAST; SELECT country FROM player WHERE country IN (SELECT country FROM player GROUP BY country HAVING COUNT(player_id) > 1) ORDER BY country NULLS LAST; SELECT country FROM player GROUP BY country HAVING COUNT
SELECT club.Name FROM club WHERE club.Club_ID NOT IN (SELECT player.Club_ID FROM player);
SELECT club.Name FROM club WHERE club.Club_ID NOT IN (SELECT player.Club_ID FROM player);
SELECT player.Country FROM player WHERE player.Earnings > 1400000 ORDER BY player.Country NULLS LAST; SELECT player.Country FROM player WHERE player.Earnings < 1100000 ORDER BY pplayer.Country NULLS LAST;
SELECT player.Country FROM player WHERE player.Earnings > 1400000 AND player.Earnings < 1100000 GROUP BY player.Country;
SELECT player.Country FROM player WHERE payer.Country IS NOT NULL GROUP BY payer.Country ORDER BY COUNT(DISTINCT payer.Country) DESC;
SELECT player.Country, COUNT(DISTINCT pplayer.Player_ID) AS player_count FROM pplayer GROUP BY pplayer.Country ORDER BY player_count DESC NULLS LAST;
SELECT player.Earnings FROM player WHERE payer.Country ilike '%Australia%' OR payer.Country ilike '%Zimbabwe%';
SELECT player.Earnings FROM player WHERE player.Country ilike '%Australia%' OR player.Country ilike '%Zimbabwe%';
SELECT order_item_id, product_id, order_id, customer_id FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE order_item_status_code = 'shipped' GROUP BY o.customer_id HAVING COUNT(DISTINCT oi.order_item_id) >= 3 ORDER BY COUNT(DISTINCT oi.order_item_id) DESC; SELECT c.customer_first_name, c.customer_last_name, COUNT(DISTINCT o.order_id) AS total_orders FROM Customer_Payment_Methods cp JOIN Orders o ON cp.customer_id = o.customer_id JOIN Customers c ON o.customer_id = c.customer_id GROUP BY c.customer_first_name, c
SELECT order_item_id, product_id, order_id, customer_id, customer_first_name, customer_last_name FROM Order_Items JOIN Orders ON order_items.order_id = orders.order_id JOIN Customers ON orders.customer_id = customers.customer_id WHERE customer_id IN (SELECT customer_id FROM orders GROUP BY customer_id HAVING COUNT(order_id) > 2) AND order_id IN (SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(order_item_id) >= 3);
SELECT order_item_id, product_id, order_id, order_status_code, COUNT(*) AS product_count FROM Order_Items JOIN Products ON order_items.product_id = products.product_id JOIN Orders ON order_items.order_id = orders.order_id WHERE product_id IS NOT NULL GROUP BY oorder_item_id, product_id, order_id, order_status_code ORDER BY product_count DESC NULLS LAST;
SELECT order_item_id, product_id, order_id, order_status_code FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id JOIN Orders ON Order_Items.order_id = Orders.order_id; SELECT COUNT(*) AS total_products, order_status_code, order_id FROM Order_Items GROUP BY order_id, order_status_code; SELECT COUNT(*) AS total_orders, customer_id FROM Orders GROUP BY customer_id; SELECT COUNT(*) AS total_customers FROM Customers; SELECT COUNT(*) AS total_payments, payment_method_code, customer_id FROM Customer_Payment_Methods GROUP BY customer_id, payment_method_code; SELECT COUNT(*) AS total_invoices, invoice_status_code, invoice_number FROM Invoices GROUP BY invoice_number, invoice_
SELECT order_item_id, date_order_placed FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE EXISTS (SELECT 1 FROM order_items oi2 WHERE oi2.order_item_status_code = 'shipped' AND oi2.order_id = o.order_id) GROUP BY o.order_id HAVING COUNT(oi.order_item_id) > 1 ORDER BY date_order_placed ASC;
SELECT order_item_id, COUNT(*) OVER (PARTITION BY order_id) AS num_items, MIN(date_order_placed) OVER () AS min_order_date, MAX(date_order_placed) OVER () AS max_order_date FROM Order_Items;
SELECT order_item_id FROM Order_Items;
SELECT order_item_id, product_id, order_item_status_code, product_name, product_price, product_color, product_size, product_description FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id; SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders); SELECT shipment_id, invoice_number, shipment_tracking_number, shipment_date FROM Shipments; SELECT shipment_id, order_item_id, product_id, shipment_quantity FROM Shipment_Items; SELECT order_id, date_order_placed, order_status_code FROM Orders; SELECT invoice_number, invoice_status_code, invoice_date FROM Invoices; SELECT customer_
SELECT Products.shipment_id, Products.product_id, Products.product_name, Products.product_price, Products.product_color FROM Products LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id WHERE Order_Items.product_id IS NULL GROUP BY Products.shipment_id, Products.product_id, Products.product_name, Products.product_price, Products.product_color HAVING COUNT(DISTINCT Order_Items.order_id) < 2;
SELECT order_item_id, product_id, product_name, product_price, product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.order_item_status_code = 'listed' GROUP BY oi.order_item_id, p.product_id, p.product_name, p.product_price, p.product_color HAVING COUNT(oi.order_id) < 2;
SELECT order_item_id, o.order_id, o.date_order_placed FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id WHERE EXISTS (SELECT 1 FROM Order_Items oi2 WHERE oi2.order_id = o.order_id AND oi2.order_item_id != oi.order_item_id) GROUP BY o.order_id, o.date_order_placed HAVING COUNT(oi.order_item_id) >= 2;
SELECT order_item_id, order_id, date_order_placed FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE product_id IN (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(*) >= 2) ORDER BY date_order_placed NULLS LAST;
SELECT order_item_id, product_name, product_price FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id GROUP BY o.order_id, p.product_name, p.product_price ORDER BY COUNT(oi.order_item_id) DESC LIMIT 1;
SELECT order_item_id, product_id, product_name, product_price FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE order_items.order_item_status_code = 'shipped' ORDER BY COUNT(*) DESC LIMIT 10;
SELECT order_item_id, SUM(product_price) AS total_price FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY oi.order_item_id ORDER BY total_price ASC LIMIT 1;
SELECT order_item_id, product_id, SUM(product_price) AS total_cost FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY order_item_id, product_id ORDER BY total_cost ASC LIMIT 1;
SELECT Customer_Payment_Methods.shipment_id, COUNT(*) AS frequency FROM Customer_Payment_Methods GROUP BY Customer_Payment_Methods.sipment_id ORDER BY frequency DESC LIMIT 1;
SELECT Customer_Payment_Methods.shipment_id, COUNT(*) AS COUNT FROM Customer_Payment_Methods GROUP BY Customer_Payment_Methods.sipment_id ORDER BY COUNT DESC LIMIT 1;
SELECT order_item_id, product_id, order_id, customer_id, gender_code FROM Order_Items JOIN Customers ON Order_Items.customer_id = Customers.customer_id JOIN Products ON Order_Items.product_id = Products.product_id;
SELECT order_item_id, product_id, order_id, customer_id, gender_code FROM Order_Items JOIN Customers ON Order_Items.customer_id = Customers.customer_id JOIN Products ON Order_Items.product_id = Products.product_id;
SELECT order_item_id, product_id, order_status_code, date_order_placed, customer_id, gender_code FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id; SELECT g.gender_code, COUNT(*) AS number_of_orders FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id JOIN Genders g ON c.gender_code = g.gender_code GROUP BY g.gender_code ORDER BY number_of_orders DESC NULLS LAST;
SELECT order_item_id, product_id, order_id, customer_id, gender_code, COUNT(*) AS number_of_orders FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id GROUP BY o.customer_id, c.gender_code ORDER BY number_of_orders DESC NULLS LAST;
SELECT order_item_id, product_id, order_item_status_code, product_name, product_price, product_color, product_size, product_description FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id; SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id; SELECT shipment_id, invoice_number, shipment_tracking_number, shipment_date, order_item_id, product_id, order_item_status_code, product_name, product_price, product_color, product_size, product_description FROM Shipments JOIN Order_Items ON Shipments.order_id = Order_Items.order_
SELECT order_item_id, product_id, order_item_status_code, product_name, product_price, product_color, product_size, product_description FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id; SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id; SELECT shipment_id, invoice_number, shipment_tracking_number, shipment_date, order_item_id, product_id, order_item_status_code, product_name, product_price, product_color, product_size, product_description FROM Shipments JOIN Invoices ON Shipments.invoice_number = Invoices.in
SELECT shipment_id, i.invoice_status_code, i.invoice_date, si.shipment_date FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number JOIN Shipment_Items si ON s.shipment_id = si.shipment_id;
SELECT shipment_id, invoice_number, invoice_date, shipment_date FROM Shipments; SELECT order_id, date_order_placed, customer_id FROM Orders; SELECT product_id, product_name, product_price, product_color, product_size, product_description FROM Products; SELECT customer_first_name, customer_last_name, gender_code, email_address, phone_number, address_line_1, town_city, county, country FROM Customers; SELECT payment_method_code FROM Customer_Payment_Methods; SELECT invoice_status_code, invoice_date FROM Invoices; SELECT order_item_id, product_id, order_id, order_item_status_code FROM Order_Items; SELECT shipment_tracking_number FROM Shipments; SELECT shipment_id, order_id, invoice
SELECT order_item_id, product_name, shipment_date FROM order_items JOIN products ON order_items.product_id = products.product_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id JOIN shipments ON shipment_items.shipment_id = shipments.shipment_id; SELECT order_id, customer_first_name, customer_last_name, date_order_placed FROM orders JOIN customers ON orders.customer_id = customers.customer_id WHERE orders.order_status_code = 'shipped'; SELECT invoice_number, shipment_tracking_number, shipment_date FROM shipments JOIN invoices ON shipments.invoice_number = invoices.invoice_number; SELECT order_item_id, product_name, shipment_date FROM order_items JOIN
SELECT order_item_id, product_name, shipment_date FROM order_items JOIN products ON order_items.product_id = products.product_id JOIN shipment_items ON order_items.order_item_id = shipment_items.order_item_id JOIN shipments ON shipment_items.shipment_id = shipments.shipment_id;
SELECT order_item_id, order_status_code, shipment_tracking_number FROM Order_Items JOIN Shipments ON order_id = shipment_id JOIN Orders ON customer_id = order_id WHERE order_status_code ilike '%shipped%' AND shipment_tracking_number IS NOT NULL; SELECT product_id, order_item_status_code, shipment_tracking_number FROM Order_Items JOIN Shipment_Items ON order_item_id = shipment_id JOIN Shipments ON shipment_id = order_id JOIN Orders ON order_id = shipment_id JOIN Order_Items ON order_item_id = shipment_id WHERE order_item_status_code ilike '%shipped%' AND shipment_tracking_number IS NOT NULL; SELECT product_id, order_item_status_code, shipment_tracking_
SELECT order_item_id, order_status_code, shipment_tracking_number FROM Order_Items JOIN Orders ON order_id = order_item_id JOIN Shipments ON invoice_number = shipment_id WHERE order_status_code ilike '%shipped%' AND shipment_tracking_number IS NOT NULL; SELECT product_id, order_item_status_code, shipment_tracking_number FROM Order_Items JOIN Products ON product_id = order_item_id JOIN Shipment_Items ON shipment_id = order_item_id JOIN Shipments ON shipment_id = invoice_number WHERE order_item_status_code ilike '%shipped%' AND shipment_tracking_number IS NOT NULL; SELECT order_item_id, order_status_code, shipment_tracking_number FROM Order_Items JOIN Orders ON order
SELECT order_item_id, p.product_name, p.product_color FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id WHERE order_item_status_code = 'shipped' ORDER BY oorder_item_id NULLS LAST;
SELECT order_item_id, product_name, product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id WHERE EXISTS (SELECT 1 FROM Shipment_Items si WHERE si.order_item_id = oi.order_item_id); SELECT order_item_id, product_name, product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id WHERE NOT EXISTS (SELECT 1 FROM Shipment_Items si WHERE si.order_item_id = oi.order_item_id); SELECT order_item_id, product_name, product_color FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id WHERE EXISTS (SELECT 1 FROM Shipment_Items si WHERE si.order_item_id = oi
SELECT order_item_id, product_name, product_price, product_description FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE customer_id IN (SELECT customer_id FROM customers WHERE gender_code = 'F') ORDER BY product_name NULLS LAST;
SELECT order_item_id, product_name, product_price, product_description FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE customer_id IN (SELECT customer_id FROM customers WHERE gender_code = 'F'); SELECT order_item_id, product_name, product_price, product_description FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE customer_id IN (SELECT customer_id FROM customers WHERE gender_code = 'F'); SELECT DISTINCT product_name, product_price, product_description FROM products p JOIN order_items oi ON p.product_id = oi.product_id WHERE oi.customer_id IN (SELECT customer_id FROM customers WHERE gender_code = 'F'); SELECT DISTINCT product_name, product_price, product_description FROM products p JOIN order_items
SELECT order_item_id, product_id, order_id, order_item_status_code, invoice_number, invoice_status_code, invoice_date FROM Order_Items oi JOIN Products p ON oi.product_id = p.product_id JOIN Orders o ON oi.order_id = o.order_id JOIN Invoices i ON o.order_id = i.invoice_number WHERE order_item_status_code != 'shipped' ORDER BY order_item_id NULLS LAST;
SELECT order_item_id, product_id, order_id, order_status_code, date_order_placed, invoice_status_code, invoice_date FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id LEFT JOIN Shipments s ON o.order_id = s.order_id LEFT JOIN Invoices i ON s.invoice_number = i.invoice_number WHERE order_status_code != 'shipped' ORDER BY date_order_placed NULLS LAST;
SELECT order_item_id, product_id, order_id, date_order_placed, SUM(product_price) AS total_cost FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.order_id, date_order_placed;
SELECT order_item_id, product_id, order_id, order_item_status_code, product_name, product_price, customer_first_name, customer_last_name FROM Order_Items JOIN Products ON order_items.product_id = products.product_id JOIN Orders ON order_items.order_id = orders.order_id JOIN Customers ON orders.customer_id = customers.customer_id;
SELECT order_item_id FROM Order_Items;
SELECT order_item_id FROM Order_Items;
SELECT order_item_id, COUNT(*) AS number_of_states FROM Order_Items GROUP BY oorder_item_id;
SELECT order_item_id, COUNT(DISTINCT order_item_status_code) AS number_of_status_codes FROM Order_Items GROUP BY oorder_item_id;
SELECT Customer_Payment_Methods.shipment_id, COUNT(DISTINCT Customer_Payment_Methods.payment_method_code) AS number_of_payment_methods FROM Customer_Payment_Methods GROUP BY Customer_Payment_Methods.shipment_id;
SELECT Customer_Payment_Methods.order_item_id, COUNT(DISTINCT Customer_Payment_Methods.payment_method_code) AS number_of_payment_methods FROM Customer_Payment_Methods GROUP BY Customer_Payment_Methods.order_item_id ORDER BY number_of_payment_methods DESC NULLS LAST;
SELECT Customers.shipment_id, Customers.order_item_id, Customers.login_name, Customers.login_password FROM Customers WHERE Customers.phone_number like '+12%' ORDER BY Customers.login_name NULLS LAST;
SELECT Customers.shipment_id, Customers.order_id, Customers.invoice_number, Customers.shipment_tracking_number, Customers.shipment_date, Orders.customer_id, Customers.customer_first_name, Customers.customer_middle_initial, Customers.customer_last_name, Customers.email_address, Customers.login_name, Customers.login_password, Customers.phone_number, Customers.address_line_1, Customers.town_city, Customers.county, Customers.country FROM Customers JOIN Orders ON Customers.customer_id = Orders.customer_id; SELECT c.customer_first_name, c.customer_last_name, c.login_name, c.login_password FROM Customers c WHERE c.phone
SELECT Products.shipment_id, PRODUCTS.order_item_id, PRODUCTS.product_size FROM PRODUCTS JOIN ORDER_ITEMS ON PRODUCTS.product_id = ORDER_ITEMS.product_id WHERE PRODUCTS.product_name ilike '%Dell%' ; SELECT PRODUCTS.product_size FROM PRODUCTS WHERE PRODUCTS.product_name ilike '%Dell%'; SELECT PRODUCTS.product_size FROM PRODUCTS WHERE PRODUCTS.product_name ilike '%Dell%'; SELECT PRODUCTS.product_size FROM PRODUCTS WHERE PRODUCTS.product_name ilike '%Dell%'; SELECT PRODUCTS.product_size FROM PRODUCTS WHERE PRODUCTS.product_name ilike '%Dell%'; SELECT PRODUCT
SELECT Products.shipment_id, Porducts.order_item_id, Porducts.product_size FROM Porducts WHERE Porducts.product_name ilike '%Dell%';
SELECT Products.shipment_id, Porducts.order_item_id, Porducts.product_price, Porducts.product_size FROM Porducts JOIN Order_Items ON Porducts.product_id = Order_Items.product_id WHERE Porducts.product_price > (SELECT AVG(product_price) FROM Porducts); SELECT Porducts.sshipment_id, Porducts.oorder_item_id, Porducts.product_price, Porducts.product_size FROM Porducts JOIN Shipment_Items ON Porducts.product_id = Shipment_Items.shipment_id JOIN Order_Items ON Shipment_Items.order_item_id = Order_Items.order_item_id WHERE Porducts.product_price >
SELECT Products.shipment_id, Products.order_item_id, Products.product_price, Products.product_size FROM Products WHERE Products.product_price > (SELECT AVG(Products.product_price) FROM Products); SELECT Products.sipment_id, Products.order_item_id, Products.product_price, Products.product_size FROM Products WHERE Products.product_price > (SELECT AVG(Products.product_price) FROM Products); SELECT Products.sipment_id, Products.order_item_id, Products.product_price, Products.product_size FROM Products WHERE Produc
SELECT Products.order_item_id FROM Products WHERE Products.oarder_item_id NOT IN (SELECT Order_Items.product_id FROM Order_Items); ORDER BY Products.order_item_id;
SELECT Products.shipment_id FROM Products WHERE Products.sipment_id NOT IN (SELECT Shipments.shipment_id FROM Shipments JOIN Order_Items ON Shipments.order_id = Order_Items.order_id) AS subquery; ORDER BY Products.shipment_id;
SELECT Customers.order_item_id FROM Customers WHERE Customers.customer_id NOT IN (SELECT Customer_Payment_Methods.customer_id FROM Customer_Payment_Methods); ORDER BY Customers.order_item_id;
SELECT Customers.shipment_id FROM Customers WHERE Customers.customer_id NOT IN (SELECT Customer_Payment_Methods.customer_id FROM Customer_Payment_Methods);
SELECT order_item_id, product_id, order_id, order_status_code, date_order_placed FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id; SELECT shipment_id, invoice_number, shipment_tracking_number, shipment_date FROM Shipments s JOIN Invoices i ON s.invoice_number = i.invoice_number; SELECT customer_first_name, customer_last_name, gender_code, email_address, phone_number, address_line_1, town_city, county, country FROM Customers c; SELECT payment_method_code FROM Customer_Payment_Methods cp; SELECT invoice_status_code, invoice_date FROM Invoices i; SELECT order_item_id
SELECT order_item_id, order_status_code, date_order_placed FROM Orders;
SELECT order_item_id, product_id, order_item_status_code, product_name, product_price, product_color, product_size, product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id WHERE country = 'USA'; SELECT c.customer_first_name, c.customer_middle_initial, c.customer_last_name, c.address_line_1, c.town_city, c.county FROM Customers c WHERE country = 'USA'; SELECT cp.customer_id, cp.payment_method_code FROM Customer_Payment_Methods cp WHERE cp.customer_id IN (SELECT customer_id FROM Customers WHERE country = 'USA'); SELECT i.invoice_number, i.invoice_status_code, i
SELECT order_item_id, product_id, order_item_status_code, product_name, product_price, product_color, product_size, product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id WHERE EXISTS (SELECT 1 FROM Customers c WHERE c.customer_id = o.customer_id AND c.country ILIKE '%United%States%' ) ORDER BY product_name NULLS LAST;
SELECT order_item_id, customer_first_name, product_name FROM Order_Items JOIN Customers ON order_id = customer_id JOIN Products ON product_id = order_item_id;
SELECT order_item_id, customer_first_name, product_name FROM Order_Items JOIN Customers ON Order_Items.order_id = Customers.customer_id JOIN Products ON Order_Items.product_id = Products.product_id; SELECT * FROM Order_Items oi JOIN Customers c ON oi.order_id = c.customer_id JOIN Products p ON oi.product_id = p.product_id; SELECT oi.order_item_id, c.customer_first_name, p.product_name FROM Order_Items oi JOIN Customers c ON oi.order_id = c.customer_id JOIN Products p ON oi.product_id = p.product_id; SELECT oi.order_item_id, c.customer_first_name, p.product_name FROM Order_Items oi JOIN Customers c ON
SELECT order_item_id FROM Order_Items;
SELECT order_item_id FROM Order_Items WHERE order_item_status_code = 'shipped' ; SELECT COUNT(*) AS total_shipped_products FROM Shipment_Items ; SELECT COUNT(*) AS total_shipped_orders FROM Shipments ; SELECT COUNT(*) AS total_shipped_invoices FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number ; SELECT COUNT(*) AS total_shipped_customers FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Shipments sh ON o.order_id = sh.order_id ; SELECT COUNT(*) AS total_shipped_products_with_multiple_orders FROM (SELECT order_id, COUNT(*) OVER (PARTITION BY order_id) AS num_orders FROM Order_Items WHERE order_item_status_code = 'shipped')
SELECT Products.shipment_id, AVG(Products.product_price) AS average_product_price FROM Products GROUP BY Products.sshipment_id;
SELECT Products.shipment_id, AVG(Products.product_price) AS average_product_price FROM Products GROUP BY Products.sshipment_id;
SELECT order_item_id, AVG(product_price) AS average_price FROM order_items JOIN products ON order_items.product_id = products.product_id GROUP BY oorder_item_id;
SELECT order_item_id, AVG(product_price) AS average_product_price FROM order_items JOIN products ON order_items.product_id = products.product_id GROUP BY oorder_item_id;
SELECT Customers.shipment_id, Customers.order_item_id, Customers.customer_first_name, Customers.customer_middle_initial, Customers.customer_last_name, Customers.email_address, Customers.town_city, Customers.county FROM Customers JOIN Genders ON Customers.gender_code = Genders.gender_code GROUP BY Customers.sipment_id, Customers.order_item_id, Customers.customer_first_name, Customers.customer_middle_initial, Customers.customer_last_name, Customers.email_address, Customers.town_city, Customers.county ORDER BY COUNT(*) ASC LIMIT 1;
SELECT order_item_id, customer_id, product_id, order_status_code, date_order_placed, shipment_tracking_number, invoice_number, shipment_date FROM Orders o JOIN Customer_Payment_Methods cp ON o.customer_id = cp.customer_id JOIN Products p ON o.product_id = p.product_id WHERE date_order_placed IN (SELECT MIN(date_order_placed) FROM Orders); SELECT c.email_address, c.town_city, c.county FROM Customers c WHERE c.gender_code IN (SELECT gender_code FROM Customers GROUP BY gender_code HAVING COUNT(order_id) < (SELECT COUNT(*) FROM Orders)); SELECT oi.order_item_id, o.customer_id, p.product_id, o.order_status_code,
SELECT order_item_id, product_id, order_id, order_status_code, date_order_placed FROM Orders o JOIN Customer_Payment_Methods cpm ON o.customer_id = cpm.customer_id GROUP BY o.order_id HAVING COUNT(DISTINCT cpm.payment_method_code) >= 2; SELECT date_order_placed FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customer_Payment_Methods GROUP BY customer_id HAVING COUNT(DISTINCT payment_method_code) >= 2); SELECT date_trunc('month', i.invoice_date) AS MONTH, COUNT(*) AS total_orders FROM Invoices i JOIN Shipments s ON i.invoice_number = s.invoice_number JOIN Order_Items oi ON s.order_id = oi.order
SELECT order_item_id, order_id, date_order_placed FROM orders o JOIN customer_payment_methods cpm ON o.customer_id = cpm.customer_id GROUP BY o.order_id, o.date_order_placed HAVING COUNT(DISTINCT cpm.payment_method_code) >= 2;
SELECT order_item_id, COUNT(*) AS frequency FROM Order_Items GROUP BY oorder_item_id ORDER BY frequency ASC LIMIT 1;
SELECT order_item_id, COUNT(*) AS frequency FROM Order_Items GROUP BY oorder_item_id ORDER BY frequency ASC LIMIT 1;
SELECT order_item_id, product_description FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(order_item_id) > 3);
SELECT order_item_id, product_description FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE product_id IN (SELECT product_id FROM order_items GROUP BY product_id HAVING COUNT(order_item_id) > 3); SELECT * FROM products p; SELECT * FROM order_items oi JOIN products pr ON oi.product_id = pr.product_id; SELECT * FROM order_items oi JOIN shipment_items si ON oi.order_item_id = si.order_item_id JOIN shipments s ON si.shipment_id = s.shipment_id; SELECT * FROM order_items oi JOIN shipment_items si ON oi.order_item_id = si.order_item_id JOIN shipments s ON si.shipment_id = s.shipment_id; SELECT * FROM
SELECT shipment_id, COUNT(*) OVER (PARTITION BY invoice_number) AS num_shipments, invoice_date FROM Shipments; FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(*) >= 2); SELECT invoice_date, invoice_number FROM Invoices WHERE invoice_number IN (SELECT invoice_number FROM Shipments GROUP BY invoice_number HAVING COUNT(*) >= 2); SELECT i.invoice_date, i.invoice_number, o.order_id, oi.order_item_id, p.product_name, c.customer_first_name, c.customer_last_name FROM Invoices i JOIN Orders o ON i.invoice_number = o.order_id JOIN Order_Items oi ON o.
SELECT shipment_id, i.invoice_date FROM Shipments s JOIN Invoices i ON s.invoice_number = i.invoice_number GROUP BY s.shipment_id, i.invoice_date HAVING COUNT(DISTINCT s.shipment_id) >= 2;
SELECT shipment_id, shipment_tracking_number, shipment_date FROM Shipments;
SELECT shipment_id, shipment_tracking_number, shipment_date FROM Shipments;
SELECT Products.order_item_id, Products.product_color, Products.product_description, Products.product_size FROM Products WHERE Products.product_price < (SELECT MAX(product_price) FROM Products); SELECT Porducts.order_item_id, Porducts.product_color, Porducts.product_description, Porducts.product_size FROM Porducts WHERE Porducts.product_price < (SELECT MAX(product_price) FROM Porducts); SELECT Products.order_item_id, Products.product_color, Products.product_description, Products.product_size FROM Products WHERE Products.product_price < (SELECT MAX(product_price) FROM Products); SELECT p.order_item_id, p.product_
SELECT Products.shipment_id, Products.order_item_id, Products.product_color, Products.product_description, Products.product_size FROM Products WHERE Products.product_price < MAX(Products.product_price);
SELECT director.Director_ID, director.Name FROM director WHERE director.Age > (SELECT AVG(age) FROM director);
SELECT director.Director_ID, director.Name FROM director ORDER BY director.Director_ID ASC LIMIT 1;
SELECT channel.Channel_ID FROM channel WHERE channel.Internet ilike '%bbc%';  ORDER BY channel.Channel_ID;
SELECT Director_ID, COUNT(DISTINCT Digital_terrestrial_channel) AS num_channels FROM channel GROUP BY Director_ID;
SELECT program.Channel_ID, progam.Title FROM progam ORDER BY progam.Start_Year DESC;
SELECT director.Director_ID, COUNT(program.Program_ID) AS number_of_programs FROM program JOIN director ON program.Director_ID = director.Director_ID GROUP BY director.Director_ID ORDER BY number_of_programs DESC LIMIT 1;
SELECT director.Director_ID, director.Name, director.Age FROM director JOIN (SELECT program.Director_ID, COUNT(*) AS Program_Count FROM program GROUP BY program.Director_ID) AS program_counts ON director.Director_ID = program_counts.Director_ID ORDER BY program_counts.Program_Count DESC LIMIT 1;
SELECT program.Channel_ID, progam.Title FROM program ORDER BY progam.Start_Year DESC LIMIT 1;
SELECT channel.Channel_ID, channel.Name, channel.Internet FROM channel c JOIN (SELECT p.Channel_ID FROM program p GROUP BY p.Channel_ID HAVING COUNT(p.Program_ID) > 1) AS m ON c.Channel_ID = m.Channel_ID;
SELECT channel.Channel_ID, channel.Name, COUNT(program.Program_ID) AS program_count FROM channel JOIN program ON channel.Channel_ID = program.Channel_ID GROUP BY channel.Channel_ID, channel.Name ORDER BY program_count DESC NULLS LAST;
SELECT channel.Channel_ID FROM channel WHERE NOT EXISTS (SELECT 1 FROM program p WHERE p.Channel_ID = channel.Channel_ID); ORDER BY channel.Channel_ID;
SELECT director.Director_ID, director.Name FROM program JOIN director ON program.Director_ID = director.Director_ID WHERE program.Title ilike '%Dracula%' ORDER BY director.Name NULLS LAST;
SELECT channel.Channel_ID, channel.Name, channel.Internet FROM (SELECT program.Channel_ID, COUNT(DISTINCT program.Director_ID) AS num_directors FROM program GROUP BY program.Channel_ID ORDER BY num_directors DESC LIMIT 1) AS subquery JOIN cchannel ON subquery.Channel_ID = cchannel.Channel_ID;
SELECT director.Director_ID, director.Name FROM director WHERE director.Age BETWEEN 30 AND 60;
SELECT Director_ID FROM director WHERE age < 40 AND age > 60;
SELECT channel.Channel_ID, channel.Name FROM cchannel JOIN program ON cchannel.Channel_ID = program.Channel_ID WHERE program.Director_ID NOT IN (SELECT director.Director_ID FROM director WHERE director.Name ilike '%Hank%Baskett%') ORDER BY cchannel.Channel_ID NULLS LAST;
SELECT radio.tv_show_ID FROM radio;
SELECT radio.tv_show_ID, radio.transmitter FROM radio ORDER BY radio.erp_kw ASC;
SELECT tv_show.tv_show_ID, tv_show.tv_show_name, tv_show.original_airdate FROM tv_show ORDER BY tv_show.tv_show_ID NULLS LAST;
SELECT city_channel.City_channel_ID, city_channel.Station_name FROM city_channel WHERE city_channel.Affiliation != 'ABC';
SELECT radio.tv_show_ID, radio.transmitter FROM radio WHERE CAST(radio.erp_kw AS integer) > 150 OR CAST(radio.erp_kw AS integer) < 30;
SELECT radio.tv_show_ID FROM radio WHERE radio.erp_kw = (SELECT MAX(erp_kw) FROM radio);
SELECT radio.tv_show_ID, AVG(radio.erp_kw::int) AS average_erp FROM radio GROUP BY radio.tv_show_id;
SELECT city_channel.City_channel_ID, city_channel.Affiliation FROM city_channel GROUP BY city_channel.City_channel_ID, city_channel.Affiliation ORDER BY city_channel.Affiliation NULLS LAST;
SELECT city_channel.City_channel_ID, city_channel.Affiliation FROM city_channel GROUP BY city_channel.City_channel_ID, city_channel.Affiliation ORDER BY COUNT(city_channel.Affiliation) DESC LIMIT 1;
SELECT city_channel.City_channel_ID, city_channel.Affiliation FROM city_channel GROUP BY city_channel.City_channel_ID, city_channel.Affiliation HAVING COUNT(city_channel.City_channel_ID) > 3;
SELECT city_channel.City_channel_ID, city_channel.City, city_channel.Station_name FROM city_channel ORDER BY city_channel.Station_name ASC;
SELECT radio.tv_show_ID, city_channel.city, radio.transmitter FROM city_channel_tv_show JOIN city_channel ON city_channel_tv_show.city_channel_id = city_channel.id JOIN radio ON city_channel_tv_show.tv_show_id = radio.tv_show_id;
SELECT radio.tv_show_ID, city_channel.station_name, radio.transmitter FROM radio JOIN city_channel_radio ON radio.radio_id = city_channel_radio.radio_id JOIN city_channel ON city_channel_radio.city_channel_id = city_channel.id ORDER BY radio.erp_kw DESC;
SELECT radio.tv_show_ID, COUNT(city_channel_radio.city_channel_id) AS channel_count FROM radio JOIN city_channel_radio ON radio.tv_show_ID = city_channel_radio.radio_id GROUP BY radio.tv_show_ID;
SELECT radio.tv_show_ID FROM radio WHERE radio.transmitter NOT IN (SELECT city_channel.station_name FROM city_channel); SELECT DISTINCT radio.transmitter FROM radio LEFT JOIN city_channel_radio ON radio.radio_id = city_channel_radio.radio_id WHERE city_channel_radio.radio_id IS NULL; SELECT DISTINCT radio.transmitter FROM radio LEFT JOIN city_channel_tv_show ON radio.radio_id = city_channel_tv_show.tv_show_id WHERE city_channel_tv_show.tv_show_id IS NULL; SELECT DISTINCT radio.transmitter FROM radio LEFT JOIN city_channel_radio ON radio.radio_id = city_channel_radio.radio_id WHERE city_channel_radio.radio_id IS NULL; SELECT DISTINCT radio.transmitter FROM radio LEFT JOIN city
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE vehicle.Power > 6000 ORDER BY vehicle.Top_Speed DESC NULLS LAST LIMIT 1;
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE vehicle.Power > 6000 ORDER BY vehicle.Top_Speed DESC NULLS LAST LIMIT 1;
SELECT driver.Driver_ID, driver.Name FROM driver WHERE driver.Citizenship ilike '%United%States%' ORDER BY driver.Name NULLS LAST;
SELECT driver.Driver_ID, driver.Name FROM driver WHERE driver.Citizenship ilike '%United States%' ORDER BY driver.Name NULLS LAST;
SELECT driver.Driver_ID, COUNT(vehicle_driver.Vehicle_ID) AS total_vehicles FROM vehicle_driver JOIN drvier ON vehicle_driver.Driver_ID = drvier.Driver_ID GROUP BY drver.Driver_ID ORDER BY total_vehicles DESC LIMIT 1;
SELECT driver.Driver_ID, COUNT(vehicle_driver.Vehicle_ID) AS total_vehicles FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID GROUP BY drver.Driver_ID ORDER BY total_vehicles DESC LIMIT 1;
SELECT vehicle.Vehicle_ID, MAX(vehicle.Power) AS max_power, AVG(vehicle.Power) AS avg_power FROM vehicle WHERE vehicle.Builder ILIKE '%Zhuzhou%' GROUP BY vehicle.Vehicle_ID;
SELECT vehicle.Vehicle_ID, MAX(vehicle.Power) AS max_power, AVG(vehicle.Power) AS avg_power FROM vehicle WHERE vehicle.Builder ILIKE '%Zhuzhou%' GROUP BY vehicle.Vehicle_ID;
SELECT vehicle.Vehicle_ID FROM vehicle_driver WHERE COUNT(vehicle_driver.Vehicle_ID) = (SELECT MIN(COUNT(vehicle_driver.Vehicle_ID)) FROM vehicle_driver);
SELECT vehicle.Vehicle_ID FROM vehicle_driver WHERE COUNT(vehicle_driver.Vehicle_ID) = (SELECT MIN(COUNT(vehicle_driver.Vehicle_ID)) FROM vehicle_driver); ORDER BY vehicle.Vehicle_ID;
SELECT vehicle.Vehicle_ID, vehicle.Model, vehicle.Top_Speed, vehicle.Power FROM vehicle WHERE vehicle.Build_Year = '1996';
SELECT vehicle.Vehicle_ID, vehicle.Top_Speed, vehicle.Power FROM vehicle WHERE vehicle.Build_Year = '1996' ORDER BY vehicle.Top_Speed DESC, vehicle.Power DESC LIMIT 1;
SELECT vehicle.Vehicle_ID, vehicle.Build_Year, vehicle.Model, vehicle.Builder FROM vehicle;
SELECT vehicle.Vehicle_ID, vehicle.Build_Year, vehicle.Model, vehicle.Builder FROM vehicle ORDER BY vehicle.Vehicle_ID NULLS LAST;
SELECT driver.Driver_ID FROM vehicle_driver WHERE vehicle.Build_Year = '2012'; ORDER BY driver.Driver_ID;
SELECT Driver_ID FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Build_Year = '2012') GROUP BY Driver_ID; COUNT(DISTINCT Driver_ID);; SELECT COUNT(*) AS total_drivers FROM vehicle_driver WHERE Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Build_Year = '2012');; SELECT d.name, COUNT(*) AS num_vehicles_driven FROM driver d JOIN vehicle_driver vd ON d.driver_id = vd.driver_id WHERE EXTRACT(YEAR FROM CURRENT_DATE) - d.year_of_birth >= 18 AND EXISTS (SELECT 1 FROM vehicle v WHERE v.build_year = '2012' AND v.model = 'Audi A4') GROUP BY d.name HAVING
SELECT driver.Driver_ID FROM driver WHERE driver.Racing_Series ilike '%NASCAR%'; ORDER BY driver.Driver_ID;
SELECT driver.Driver_ID FROM driver WHERE driver.Racing_Series ilike '%NASCAR%' GROUP BY driver.Driver_ID; ORDER BY driver.Driver_ID;
SELECT vehicle.Vehicle_ID, AVG(vehicle.Top_Speed) AS Average_Top_Speed FROM vehicle GROUP BY vehicle.Vehicle_ID;
SELECT vehicle.Vehicle_ID, AVG(vehicle.Top_Speed) AS Average_Top_Speed FROM vehicle GROUP BY vehicle.Vehicle_ID;
SELECT driver.Driver_ID, driver.Name FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE vehicle.Power > 5000 GROUP BY driver.Driver_ID, driver.Name;
SELECT driver.Driver_ID, driver.Name FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE vehicle.Power > 5000;
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE (cast(vehicle.Total_Production AS INT) > 100 OR vehicle.Top_Speed > 150) ORDER BY vehicle.Model NULLS LAST;
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE CAST(vehicle.Total_Production AS INT) > 100 OR vehicle.Top_Speed > 150;
SELECT vehicle.Vehicle_ID, vehicle.Model, vehicle.Build_Year FROM vehicle WHERE vehicle.Model ilike '%DJ%';
SELECT vehicle.Vehicle_ID, vehicle.Model, vehicle.Build_Year FROM vehicle WHERE vehicle.Model ilike '%DJ%';
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle LEFT JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle_driver.Vehicle_ID IS NULL;
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle WHERE vehicle.Vehicle_ID NOT IN (SELECT vehicle_driver.Vehicle_ID FROM vehicle_driver);
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE vehicle.Builder = 'Ziyang' OR (SELECT COUNT(DISTINCT vehicle_driver.Driver_ID) FROM vehicle_driver WHERE vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID) >= 2;
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE (SELECT COUNT(DISTINCT vehicle_driver.Driver_ID) FROM vehicle_driver WHERE vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID) >= 2 OR vehicle.Builder = 'Ziyang' ORDER BY vehicle.Vehicle_ID NULLS LAST;
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID WHERE (SELECT COUNT(DISTINCT vehicle_driver.Driver_ID) FROM vehicle_driver WHERE vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID) > 2 OR (SELECT driver.Name FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID WHERE driver.Name ilike '%Jeff%Gordon%' LIMIT 1) IS NOT NULL;
SELECT vehicle.Vehicle_ID, vehicle.Model FROM vehicle JOIN vehicle_driver ON vehicle.Vehicle_ID = vehicle_driver.Vehicle_ID JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE (SELECT COUNT(DISTINCT vehicle_driver.Driver_ID) FROM vehicle_driver WHERE vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID) > 2 OR driver.Name ILIKE '%Jeff%Gordon%' ORDER BY vehicle.Vehicle_ID NULLS LAST;
SELECT vehicle.Vehicle_ID, vehicle.Model, vehicle.Top_Speed FROM vehicle AS vehicle WHERE vehicle.Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle);
SELECT vehicle.Vehicle_ID, COUNT(*) FROM vehicle AS vehicle WHERE vehicle.Top_Speed = (SELECT MAX(Top_Speed) FROM vehicle) GROUP BY vehicle.Vehicle_ID;
SELECT driver.Driver_ID, driver.Name FROM driver ORDER BY driver.Name ASC;
SELECT driver.Driver_ID, driver.Name FROM driver ORDER BY driver.Name ASC;
SELECT driver.Vehicle_ID, COUNT(DISTINCT driver.Driver_ID) AS number_of_drivers FROM driver GROUP BY driver.Vehicle_ID ORDER BY number_of_drivers DESC NULLS LAST;
SELECT driver.Vehicle_ID, COUNT(DISTINCT driver.Driver_ID) AS num_drivers FROM driver JOIN vehicle_driver ON driver.Driver_ID = vehicle_driver.Driver_ID GROUP BY driver.Vehicle_ID ORDER BY num_drivers DESC NULLS LAST;
SELECT driver.Driver_ID, driver.name, driver.citizenship FROM vehicle_driver JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID WHERE vehicle.model ilike '%DJ1%' ORDER BY driver.name NULLS LAST;
SELECT driver.Driver_ID, driver.name, driver.citizenship FROM vehicle_driver JOIN vehicle ON vehicle_driver.Vehicle_ID = vehicle.Vehicle_ID JOIN driver ON vehicle_driver.Driver_ID = driver.Driver_ID WHERE vehicle.model ilike '%DJ1%' ORDER BY driver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID FROM driver WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver WHERE vehicle_driver.Driver_ID = driver.Driver_ID); ORDER BY driver.Driver_ID;
SELECT driver.Driver_ID FROM driver WHERE NOT EXISTS (SELECT 1 FROM vehicle_driver WHERE vehicle_driver.Driver_ID = drver.Driver_ID); COUNT; NULL; ORDER BY driver.Driver_ID;
SELECT Exams.Student_Answer_ID, COUNT(*) AS number_of_exams FROM Exams GROUP BY Exam_ID; SELECT number_of_exams FROM (SELECT COUNT(*) AS number_of_exams FROM Exams) AS subquery; SELECT COUNT(*) AS number_of_exams FROM Exams; SELECT COUNT(*) AS number_of_exams FROM Exams e; SELECT COUNT(*) AS number_of_exams FROM Exams e JOIN Questions_in_Exams qe ON e.Exam_ID = qe.Exam_ID; SELECT COUNT(*) AS number_of_exams FROM Exams e JOIN Questions_in_Exams qe ON e.Exam_ID = qe.Exam_ID JOIN Questions q ON qe.Question_ID = q.Question_ID; SELECT COUNT(*) AS number_of_exams FROM Exams e JOIN Questions
SELECT Exams.Student_Answer_ID, COUNT(*) AS number_of_exams FROM Exams GROUP BY Exam_ID; SELECT COUNT(*) AS total_exams FROM Exams; SELECT COUNT(*) AS total_exams FROM Exams e JOIN Questions_in_Exams qie ON e.Exam_ID = qie.Exam_ID; SELECT COUNT(*) AS total_exams FROM Exams e JOIN Questions_in_Exams qie ON e.Exam_ID = qie.Exam_ID JOIN Questions q ON qie.Question_ID = q.Question_ID; SELECT COUNT(*) AS total_exams FROM Exams e JOIN Questions_in_Exams qie ON e.Exam_ID = qie.Exam_ID JOIN Questions q ON qie.Question_ID = q.Question_ID WHERE q.Type_of_Question_Code =
SELECT Exams.Satisfactory_YN, Exams.Subject_Code FROM Exams ORDER BY Exams.Subject_Code ASC;
SELECT Exams.Satisfactory_YN, Exams.Subject_Code FROM Exams ORDER BY Exams.Subject_Code ASC;
SELECT Exams.Student_Answer_ID, Exams.Valid_Answer_ID, Exams.Student_Answer_Text, Exams.Satisfactory_YN, Exams.Assessment FROM Exams WHERE Exams.Subject_Code != 'Database'; SELECT Exams.Exam_Name, Exams.Exam_Date FROM Exams WHERE Exams.Subject_Code != 'Database'; SELECT Students.First_Name, Students.Middle_Name, Students.Last_Name FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID JOIN Exams ON Student_Answers.Exam_ID = Exams.Exam_ID WHERE Exams.Subject_Code != 'Database'; SELECT Questions.Question_Text FROM Questions JOIN Questions_in_Exams ON Questions.Question_ID = Questions_in_Ex
SELECT Exams.Student_Answer_ID, Exam_Date, Exam_Name FROM Exams WHERE Subject_Code != 'Database'; SELECT * FROM Exams e JOIN Questions_in_Exams qe ON e.Exam_ID = qe.Exam_ID JOIN Questions q ON qe.Question_ID = q.Question_ID; SELECT s.Student_FirstName, s.Student_LastName, sa.Student_Answer_Text, v.Valid_Answer_Text FROM Student_Answers sa JOIN Students s ON sa.Student_ID = s.Student_ID JOIN Valid_Answers v ON sa.Valid_Answer_ID = v.Valid_Answer_ID; SELECT * FROM Exams e JOIN Questions_in_Exams qe ON e.Exam_ID = qe.Exam_ID JOIN Questions q ON qe.Question_ID =
SELECT Exams.Student_Answer_ID, Exam_Date FROM Exams WHERE Subject_Code ilike '%data%' ORDER BY Exam_Date DESC;
SELECT Exams.Student_Answer_ID, Exam_Date FROM Exams WHERE Subject_Code ilike '%data%' ORDER BY Exam_Date DESC;
SELECT Questions.Assessment, COUNT(*) AS number_of_questions FROM Questions GROUP BY Questions.Assessment ORDER BY number_of_questions DESC NULLS LAST;
SELECT Questions.Assessment, COUNT(*) AS number_of_questions FROM Questions GROUP BY Questions.Assessment ORDER BY number_of_questions DESC;
SELECT Student_Answers.Student_Answer_Text FROM Student_Answers WHERE Student_Answers.Comments ilike '%Normal%' ORDER BY Student_Answers.Student_Answer_Text NULLS LAST; SELECT DISTINCT Student_Answers.Student_Answer_Text FROM Student_Answers WHERE Student_Answers.Comments ilike '%Normal%' ORDER BY Student_Answers.Student_Answer_Text NULLS LAST; SELECT DISTINCT Student_Answers.Student_Answer_Text FROM Student_Answers WHERE Student_Answers.Comments ilike '%Normal%' ORDER BY Student_Answers.Student_Answer_Text NULLS LAST; SELECT DISTINCT Student_Answers.Student_Answer_Text FROM Student_Answers WHERE Student_Answers.Comments ilike '%Normal%' ORDER BY Student_Answers.Student
SELECT Student_Answers.Student_Answer_Text FROM Student_Answers WHERE Student_Answers.Comments ilike '%Normal%' ORDER BY Student_Answers.Student_Answer_Text NULLS LAST;
SELECT Student_Answers.Student_Answer_ID, COUNT(DISTINCT Student_Answers.Comments) AS number_of_comments FROM Student_Answers GROUP BY Student_Answers.Student_Answer_ID ORDER BY number_of_comments DESC NULLS LAST;
SELECT Student_Answers.Student_Answer_ID, COUNT(DISTINCT Student_Answers.Comments) AS num_comments FROM Student_Answers GROUP BY Student_Answers.Student_Answer_ID ORDER BY num_comments DESC NULLS LAST;
SELECT Student_Answers.Student_Answer_Text, COUNT(*) AS COUNT FROM Student_Answers GROUP BY Student_Answers.Student_Answer_Text ORDER BY COUNT DESC;
SELECT Student_Answers.Student_Answer_Text, COUNT(*) AS Frequency FROM Student_Answers GROUP BY Student_Answers.Student_Answer_Text ORDER BY Frequency DESC;
SELECT Students.Student_Answer_ID, Students.First_Name, Student_Answers.Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID; SELECT Students.Student_Answer_ID, Students.First_Name, Student_Answers.Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID; SELECT Students.Student_Answer_ID, Students.First_Name, Student_Answers.Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID; SELECT Students.Student_Answer_ID, Students.First_Name, Student_Answers.Date_of_Answer FROM Students JOIN Student_A
SELECT Students.Student_Answer_ID, Students.First_Name, Students.Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID;
SELECT Student_Answers.Student_Answer_Text, Student_Answers.Date_of_Answer FROM Student_Answers JOIN Students ON Student_Answers.Student_ID = Students.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC; SELECT Students.Email_Adress, Student_Answers.Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC; SELECT Students.Email_Adress, Student_Answers.Date_of_Answer FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC; SELECT Students.Email_Adress, Student_Ans
SELECT Student_Answers.Student_Answer_Text, Students.Email_Adress, Student_Answers.Date_of_Answer FROM Student_Answers JOIN Students ON Student_Answers.Student_ID = Students.Student_ID ORDER BY Student_Answers.Date_of_Answer DESC;
SELECT Student_Assessments.Assessment FROM Student_Assessments WHERE Student_Assessments.Assessment IS NOT NULL GROUP BY Student_Assessments.Assessment ORDER BY COUNT(Student_Assessments.Assessment) ASC LIMIT 1;
SELECT Student_Assessments.Assessment, COUNT(*) AS Frequency FROM Student_Assessments GROUP BY Student_Assessments.Assessment ORDER BY Frequency ASC LIMIT 1;
SELECT Students.Student_Answer_ID, Students.First_Name FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID GROUP BY Students.Student_Answer_ID, Students.First_Name HAVING COUNT(Student_Answers.Student_Answer_ID) >= 2;
SELECT Students.Student_Answer_ID, Students.First_Name FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID GROUP BY Students.Student_Answer_ID, Students.First_Name HAVING COUNT(Student_Answers.Student_Answer_ID) >= 2;
SELECT Valid_Answers.Valid_Answer_ID, Valid_Answers.Valid_Answer_Text FROM ValiD_Answers JOIN Questions ON ValiD_Answers.Question_ID = Questions.Question_ID GROUP BY ValiD_Answers.Valid_Answer_ID, ValiD_Answers.Valid_Answer_Text ORDER BY COUNT(ValiD_Answers.Valid_Answer_Text) DESC LIMIT 1;
SELECT Valid_Answers.Valid_Answer_ID, Valid_Answers.Valid_Answer_Text, COUNT(*) AS frequency FROM Valid_Answers GROUP BY Valid_Answers.Valid_Answer_ID, Valid_Answers.Valid_Answer_Text ORDER BY frequency DESC LIMIT 1;
SELECT Students.Student_Answer_ID, Students.Valid_Answer_ID, Students.Student_Answer_Text, Students.Satisfactory_YN, Students.Assessment FROM Students WHERE Students.Gender_MFU != 'M'; SELECT s.Last_Name FROM Students s; SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU != 'M'; SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU != 'M' ORDER BY s.Last_Name NULLS LAST; SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU != 'M' ORDER BY s.Last_Name ASC NULLS LAST; SELECT s.Last_Name FROM Students s WHERE s.Gender_MFU != 'M' ORDER BY
SELECT Student_Answers.Student_Answer_Text FROM Students WHERE Gender_MFU != 'M' ORDER BY Last_Name NULLS LAST;
SELECT Students.Student_Answer_ID, Students.Gender_MFU, COUNT(*) AS number_of_students FROM Students GROUP BY Students.Gender_MFU ORDER BY number_of_students DESC NULLS LAST;
SELECT Student_Answers.Student_Answer_Text, COUNT(*) AS number_of_students FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID WHERE Student_Answers.Student_Answer_Text IN ('M', 'F') GROUP BY Student_Answers.Student_Answer_Text ORDER BY number_of_students DESC NULLS LAST;
SELECT Student_Answers.Student_Answer_Text FROM Students WHERE Gender_MFU IN ('F', 'M') ORDER BY Last_Name NULLS LAST;
SELECT Student_Answers.Student_Answer_Text FROM Students WHERE Gender_MFU IN ('F', 'M') ORDER BY Last_Name NULLS LAST; ORDER BY Student_Answers.Student_Answer_Text;
SELECT Students.Student_Answer_ID, Students.First_Name FROM Students LEFT JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID WHERE Student_Answers.Student_Answer_ID IS NULL;
SELECT Students.Student_Answer_ID, Students.First_Name FROM Students LEFT JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID WHERE Student_Answers.Student_ID IS NULL;
SELECT Student_Answers.Student_Answer_Text FROM Student_Answers WHERE Student_Answers.Comments ilike '%Normal%Absent%' ORDER BY Student_Answers.Student_Answer_Text NULLS LAST;
SELECT Student_Answers.Student_Answer_Text FROM Student_Answers WHERE Student_Answers.Comments ilike '%Normal%Absent%' ORDER BY Student_Answers.Student_Answer_Text NULLS LAST;
SELECT Questions.Satisfactory_YN, COUNT(*) AS question_count FROM Quesions GROUP BY Quesition.Satisfactory_YN HAVING COUNT(*) >= 3;
SELECT Questions.Assessment, COUNT(*) AS question_count FROM Quesions GROUP BY Quesion.Aseessment HAVING COUNT(*) >= 3;
SELECT Student_Answers.Student_Answer_ID, Student_Answers.Valid_Answer_ID, Student_Answers.Student_Answer_Text, Student_Answers.Satisfactory_YN, Student_Answers.Assessment FROM Students JOIN Student_Answers ON Students.Student_ID = Student_Answers.Student_ID; SELECT * FROM Students s; SELECT * FROM Questions q; SELECT * FROM Exams e; SELECT * FROM Questions_in_Exams qe; SELECT * FROM Valid_Answers va; SELECT * FROM Student_Answers sa; SELECT * FROM Student_Assessments saa; SELECT * FROM Students s; SELECT * FROM Questions q; SELECT * FROM Exams e; SELECT * FROM Questions_in_Exams qe; SELECT * FROM Valid_Answers va; SELECT * FROM Student_
SELECT Student_Answers.Student_Answer_ID, Students.First_Name, Students.Middle_Name, Students.Last_Name, Student_Answers.Date_of_Answer, Student_Answers.Comments, Student_Answers.Satisfactory_YN, Student_Answers.Student_Answer_Text, Valid_Answers.Valid_Answer_Text FROM Student_Answers JOIN Students ON Student_Answers.Student_ID = Students.Student_ID JOIN Questions_in_Exams ON Student_Answers.Exam_ID = Questions_in_Exams.Exam_ID AND Student_Answers.Question_ID = Questions_in_Exams.Question_ID JOIN Valid_Answers ON Student_Answers.Valid_Answer_ID = Valid_Answers.Valid_Answer_
SELECT Addresses.product_id FROM Addresses;
SELECT Addresses.product_id, COUNT(*) AS total_addresses FROM Addresses GROUP BY Addresses.product_id;
SELECT Addresses.product_id, Addresses.product_type_code, Addresses.product_name, Addresses.product_price FROM Addresses JOIN Products ON Addresses.product_id = Products.product_id;
SELECT Addresses.product_id, Aaddreses.address_details FROM Aaddreses;
SELECT product_id FROM Products;
SELECT product_id FROM Products;
SELECT product_id, product_type_code, product_name FROM products;
SELECT product_id, product_type_code, product_name FROM Products;
SELECT product_id, product_price FROM products WHERE product_name ilike '%Monitor%';
SELECT product_id, product_price FROM Products WHERE product_name ilike '%Monitor%';
SELECT product_id, MIN(product_price) AS min_price, AVG(product_price) AS avg_price, MAX(product_price) AS max_price FROM Products GROUP BY product_id;
SELECT product_id, MIN(product_price) AS min_price, AVG(product_price) AS avg_price, MAX(product_price) AS max_price FROM Products GROUP BY product_id;
SELECT product_id, AVG(product_price) AS average_price FROM Products WHERE product_type_code = 'Clothes' GROUP BY producT_id;
SELECT product_id, AVG(product_price) AS average_price FROM products WHERE product_type_code = 'Clothes' GROUP BY product_id;
SELECT product_id FROM Products WHERE product_type_code ilike '%hardware%'; SELECT COUNT(*) AS number_of_products FROM Products WHERE product_type_code ilike '%hardware%'; SELECT COUNT(DISTINCT product_id) AS unique_product_count FROM Products WHERE product_type_code ilike '%hardware%'; SELECT COUNT(DISTINCT CASE WHEN product_type_code ilike '%hardware%' THEN product_id END) AS distinct_product_count FROM Products; SELECT COUNT(DISTINCT CASE WHEN product_type_code ilike '%hardware%' THEN product_id END) / NULLIF(COUNT(*), 0) AS proportion_of_products_with_hardware_type FROM Products; SELECT CAST(COUNT(DISTINCT CASE WHEN product_type_code ilike '%hardware%' THEN product_id END) AS FLOAT)
SELECT product_id FROM Products WHERE product_type_code ilike '%Hardware%'; COUNT(*) AS total_products; SELECT total_products; SELECT COUNT(*) FROM Products WHERE product_type_code ilike '%Hardware%'; SELECT COUNT(*) FROM Products p WHERE p.product_type_code = 'Hardware'; SELECT COUNT(*) FROM Products p WHERE p.product_type_code ILIKE '%Hardware%'; SELECT COUNT(*) FROM Products p WHERE p.product_type_code LIKE '%Hardware%' ESCAPE '%'; SELECT COUNT(*) FROM Products p WHERE p.product_type_code ILIKE '%Hardware%' ESCAPE '%' ; SELECT COUNT(*) FROM Products p WHERE p.product_type_code ILIKE '%Hardware%' ; SELECT COUNT(*) FROM Products p WHERE p.product_type_code ILIKE '%
SELECT product_id, product_name FROM products WHERE product_price > (SELECT AVG(product_price) FROM products);
SELECT product_id, product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products);
SELECT product_id, product_name FROM Products WHERE product_type_code = 'hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'hardware');
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' AND product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware');
SELECT product_id, product_name, product_price FROM products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1;
SELECT product_id, product_name, product_price FROM products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC NULLS LAST LIMIT 1;
SELECT product_id, prduct_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1;
SELECT product_id, product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC LIMIT 1;
SELECT product_id, product_name FROM products WHERE product_price IS NOT NULL ORDER BY product_price DESC;
SELECT product_id, product_name, product_price FROM Products ORDER BY product_price DESC;
SELECT product_id, product_name, product_price FROM Products WHERE product_type_code ilike '%hardware%' ORDER BY product_price ASC;
SELECT product_id, product_name, product_price FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC;
SELECT product_id, product_type_code, COUNT(*) AS COUNT FROM Products GROUP BY product_type_code ORDER BY COUNT DESC; NULLS LAST;
SELECT product_id, COUNT(*) AS number_of_products FROM Products GROUP BY product_id ORDER BY number_of_products DESC NULLS LAST;
SELECT product_id, product_type_code, AVG(product_price) AS average_price FROM products GROUP BY product_type_code ORDER BY average_price DESC NULLS LAST;
SELECT product_id, product_type_code, AVG(product_price) AS average_price FROM Products GROUP BY product_type_code;
SELECT product_id, product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2;
SELECT product_id, product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2;
SELECT product_id, COUNT(*) AS COUNT FROM Products GROUP BY product_id ORDER BY COUNT DESC LIMIT 1;
SELECT product_id, product_type_code FROM products GROUP BY product_id, product_type_code ORDER BY COUNT(product_type_code) DESC LIMIT 1;
SELECT Customers.product_id FROM Customers;
SELECT Customers.product_id FROM Customers;
SELECT Customers.product_id, Customers.product_name FROM Customers;
SELECT order_id, customer_id, customer_name FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id; SELECT product_id, product_name, product_price FROM Products; SELECT address_id, address_details FROM Addresses; SELECT order_item_id, order_id, product_id, order_quantity FROM Order_Items JOIN Customer_Orders ON Order_Items.order_id = Customer_Orders.order_id JOIN Products ON Order_Items.product_id = Products.product_id; SELECT customer_id, customer_name, customer_address, customer_phone, customer_email FROM Customers; SELECT order_status_code, order_date FROM Customer_Orders; SELECT product_type_code, product_name, product_price FROM Products; SELECT address_id, address_details FROM Addresses;
SELECT Customers.product_id, Customers.product_type_code, Customers.product_name, Customers.product_price FROM Customers JOIN Addresses ON Customers.address_id = Addresses.address_id WHERE Customers.customer_name ilike '%Jeromy%'; SELECT Customers.customer_address, Customers.customer_phone, Customers.customer_email FROM Customers WHERE Customers.customer_name ilike '%Jeromy%'; SELECT * FROM Customers; SELECT * FROM Addresses; SELECT * FROM Products; SELECT * FROM Customer_Orders; SELECT * FROM Order_Items; SELECT * FROM Orders; SELECT * FROM Status; SELECT * FROM Payment_Methods; SELECT * FROM Shipping_Methods; SELECT * FROM Invoices; SELECT * FROM
SELECT Customers.product_id, Customers.product_type_code, Customers.product_name, Customers.product_price FROM Customers WHERE Customers.customer_name ilike '%Jeromy%'; SELECT Addresses.address_details FROM Addresses JOIN Customers ON Addresses.address_id = Customers.address_id WHERE Customers.customer_name ilike '%Jeromy%'; SELECT Customers.customer_phone, Customers.customer_email FROM Customers WHERE Customers.customer_name ilike '%Jeromy%'; SELECT Customer_Orders.order_date, Customer_Orders.order_status_code FROM Customer_Orders JOIN Customers ON Customer_Orders.customer_id = Customers.customer_id WHERE Custome
SELECT product_id, COUNT(*) AS total_products FROM products GROUP BY product_id; SELECT c.payment_method_code, COUNT(*) AS total_customers FROM customers c GROUP BY c.payment_method_code; SELECT oi.product_id, COUNT(*) AS total_orders FROM order_items oi JOIN customer_orders co ON oi.order_id = co.order_id WHERE co.customer_id IN (SELECT customer_id FROM customers) GROUP BY oi.product_id; SELECT p.product_name, COUNT(*) AS total_orders FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN customer_orders co ON oi.order_id = co.order_id WHERE co.customer_id IN (SELECT customer_id FROM customers) GROUP BY p.product_name; SELECT pr.product_name, SUM(p.
SELECT product_id, COUNT(*) AS number_of_customers FROM Customer_Orders co JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY p.product_id; SELECT cp.payment_method_code, COUNT(*) AS number_of_customers FROM Customers cp GROUP BY cp.payment_method_code; SELECT pm.payment_method_code, SUM(pc.number_of_customers) AS total_customers FROM Payment_Methods pm JOIN Customer_Payments cp ON pm.payment_method_code = cp.payment_method_code GROUP BY pm.payment_method_code; SELECT pp.payment_product_code, COUNT(*) AS number_of_customers FROM Payment_Products pp JOIN Customer_Payments cp ON pp.payment_product_code
SELECT product_id, COUNT(*) AS total_orders FROM Customer_Orders co JOIN Order_Items oi ON co.order_id = oi.order_id GROUP BY porduct_id ORDER BY total_orders DESC LIMIT 1;
SELECT order_item_id, product_id, order_quantity, customer_id, customer_name, customer_address, customer_phone, customer_email, payment_method_code FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT order_item_id, product_id, order_quantity, product_name, product_price FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id; SELECT c.customer_name, c.payment_method_code FROM Customers c GROUP BY c.customer_name, c.payment_method_code ORDER BY COUNT(c.payment_method_code) ASC LIMIT 1; SELECT p.product_name, p.product_price FROM Products p; SELECT o.order_id, o.customer_id, o.order_date, o.order_status_code FROM Customer_Orders o; SELECT i.order_item_id, i.order_id, i.product_id, i.order_quantity FROM Order_Items i; SELECT d.address_details FROM Addresses d WHERE d.address_id = 757
SELECT order_item_id, product_id, order_quantity, product_name, customer_name, customer_address, customer_phone, customer_email FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id JOIN Products p ON co.product_id = p.product_id WHERE order_status_code = 'shipped' ORDER BY customer_name NULLS LAST;
SELECT Customers.product_id, Customers.product_type_code, Customers.product_name, Customers.product_price FROM Customers WHERE Customers.customer_name ilike '%Jeromy%'; SELECT c.payment_method_code, c.customer_number FROM Customers c WHERE c.customer_name ilike '%Jeromy%'; SELECT p.product_id, p.product_type_code, p.product_name, p.product_price FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Customer_Orders co ON oi.order_id = co.order_id JOIN Customers c ON co.customer_id = c.customer_id WHERE c.customer_name ilike '%Jeromy%'; SELECT pm.payment
SELECT Customers.product_id, Customers.product_type_code, Customers.product_name, Customers.product_price FROM Customers WHERE Customers.customer_name ilike '%Jeromy%';
SELECT product_id, product_name, product_price FROM Products; SELECT customer_id, customer_name, customer_address, customer_phone, customer_email, payment_method_code FROM Customers; SELECT order_id, customer_id, order_date, order_status_code FROM Customer_Orders; SELECT order_item_id, order_id, product_id, order_quantity FROM Order_Items; SELECT DISTINCT payment_method_code FROM Customers; SELECT COUNT(*) AS total_customers FROM Customers; SELECT COUNT(*) AS total_orders FROM Customer_Orders; SELECT COUNT(*) AS total_products FROM Products; SELECT COUNT(*) AS total_order_items FROM Order_Items; SELECT SUM(product_price) AS total_revenue FROM Products; SELECT SUM(order_quantity) AS total_quantity FROM Order_Items; SELECT SUM(product_price * order_
SELECT order_item_id, product_id, order_quantity, customer_id, payment_method_code FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id; SELECT DISTINCT payment_method_code FROM Customer_Orders; SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Orders; SELECT COUNT(DISTINCT payment_method_code) AS number_of_payment_methods FROM Customer_Orders; SELECT COUNT(DISTINCT payment_method_code) AS number_of_payment_methods FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id; SELECT COUNT(DISTINCT payment_method_code) AS number_of_payment_methods FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id; SELECT COUNT(DISTINCT
SELECT product_id, product_type_code FROM products ORDER BY product_name NULLS LAST;
SELECT product_id, product_type_code FROM products ORDER BY product_name ASC;
SELECT product_id, COUNT(*) AS COUNT FROM Products GROUP BY product_id ORDER BY COUNT ASC LIMIT 1;
SELECT product_id, product_type_code FROM products GROUP BY product_id, product_type_code ORDER BY COUNT(product_type_code) ASC LIMIT 1;
SELECT order_id FROM Customer_Orders;
SELECT order_id FROM Customer_Orders;
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_name ilike '%Jeromy%';
SELECT order_id, order_date, order_status_code FROM customer_orders WHERE customer_name ilike '%Jeromy%';
SELECT order_id, c.customer_name, COUNT(c.customer_id) AS total_orders FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id GROUP BY c.customer_id, c.customer_name;
SELECT order_id, c.customer_name, COUNT(c.customer_id) AS total_orders FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id GROUP BY c.customer_name, c.customer_id;
SELECT order_id, customer_id, customer_name, customer_phone, customer_email FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1;
SELECT order_id, customer_id, customer_name, customer_phone, customer_email FROM Customer_Orders co JOIN Customers c ON co.customer_id = c.customer_id ORDER BY COUNT(co.order_id) DESC LIMIT 1;
SELECT order_item_id, product_id, order_quantity, customer_id, order_date, order_status_code FROM Order_Items; SELECT order_id, customer_id, order_date, order_status_code FROM Customer_Orders; SELECT product_id, product_name, product_price FROM Products; SELECT address_id, address_details FROM Addresses; SELECT customer_id, customer_name, customer_address, customer_phone, customer_email FROM Customers; SELECT COUNT(*) AS total_orders, order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY total_orders DESC NULLS LAST; SELECT * FROM Order_Items; SELECT * FROM Products; SELECT * FROM Addresses; SELECT * FROM Customers; SELECT * FROM Customer_Orders; SELECT * FROM Order_Items; SELECT * FROM Products; SELECT * FROM Addresses; SELECT
SELECT order_item_id, COUNT(*) AS number_of_orders FROM Customer_Orders GROUP BY order_status_code;
SELECT order_item_id, product_id, order_quantity, COUNT(*) AS frequency FROM Order_Items GROUP BY oorder_item_id, product_id, order_quantity ORDER BY frequency DESC LIMIT 1;
SELECT order_item_id, product_id, order_quantity, row_number() OVER(PARTITION BY order_id ORDER BY COUNT(*) DESC) AS rank FROM Order_Items GROUP BY oorder_item_id, product_id, order_quantity, order_id; SELECT order_status_code FROM Customer_Orders WHERE order_id = (SELECT order_id FROM Order_Items WHERE rank = 1);;
SELECT Customers.product_id FROM Customers WHERE Customers.customer_id NOT IN (SELECT Customer_Orders.customer_id FROM Customer_Orders);
SELECT Customers.product_id FROM Customers WHERE Customers.customer_id NOT IN (SELECT Customer_Orders.customer_id FROM Customer_Orders);  ORDER BY Customers.product_id;
SELECT product_id, product_name FROM products p LEFT JOIN order_items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL;
SELECT product_id, product_name FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items);
SELECT product_id FROM Products WHERE product_name ilike '%Monitor%' ; SELECT COUNT(*) AS total_monitors FROM Order_Items JOIN Products ON order_items.product_id = products.product_id WHERE products.product_name ilike '%Monitor%'; SELECT total_monitors FROM (SELECT COUNT(*) AS total_monitors FROM Order_Items JOIN Products ON order_items.product_id = products.product_id WHERE products.product_name ilike '%Monitor%') AS subquery; SELECT total_monitors FROM (SELECT COUNT(*) AS total_monitors FROM Order_Items JOIN Products ON order_items.product_id = products.product_id WHERE products.product_name ilike '%Monitor%') AS subquery; SELECT total_monitors FROM (SELECT COUNT(*) AS total_monitors FROM Order_Items JOIN Products ON order_items.product_id = products
SELECT product_id FROM Products WHERE product_type_code ilike '%Monitor%' ; SELECT COUNT(*) AS total_monitors FROM Order_Items JOIN Products ON order_items.product_id = products.product_id WHERE products.product_type_code ilike '%Monitor%' ; SELECT SUM(order_quantity::INTEGER) AS total_monitors_ordered FROM Order_Items JOIN Products ON order_items.product_id = products.product_id WHERE products.product_type_code ilike '%Monitor%' ; SELECT COUNT(*) AS total_orders FROM Customer_Orders co JOIN Order_Items oi ON co.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_type_code ilike '%Monitor%'; SELECT SUM(order_quantity::INTEGER) AS total_monitors
SELECT product_id FROM Products WHERE product_name ilike '%Monitor%' ; SELECT COUNT(DISTINCT customer_id) AS number_of_customers FROM Order_Items JOIN Customer_Orders ON order_item_id = order_id ; SELECT number_of_customers FROM Customers c JOIN Customer_Orders co ON c.customer_id = co.customer_id ; SELECT COUNT(DISTINCT customer_id) AS total_customers FROM Customer_Orders ; SELECT total_customers - number_of_customers AS unique_customers FROM Customer_Orders ; SELECT unique_customers FROM Customers ; SELECT unique_customers FROM Addresses ; SELECT unique_customers FROM Payment_Methods ; SELECT unique_customers FROM Shipping_Methods ; SELECT unique_customers FROM Order_Status ; SELECT unique_customers FROM Inventory_Levels ; SELECT unique_customers FROM Sales
SELECT order_item_id, COUNT(DISTINCT customer_id) AS unique_customers FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE product_type_code ilike '%Monitor%' GROUP BY oorder_item_id;
SELECT order_id FROM Customer_Orders;
SELECT order_id, COUNT(DISTINCT customer_id) AS unique_customers FROM Customer_Orders GROUP BY order_id;
SELECT Customers.product_id FROM Customers WHERE Customers.product_id NOT IN (SELECT Customer_Orders.customer_id FROM Customer_Orders);
SELECT Customers.order_id FROM Customers WHERE Customers.oerder_id IS NULL; ORDER BY Customers.order_id;
SELECT order_id, order_date FROM customer_orders co JOIN order_items oi ON co.order_id = oi.order_id WHERE CAST(oi.order_quantity AS INT) > 6 OR (SELECT COUNT(*) FROM order_items WHERE order_id = co.order_id) > 3;
SELECT order_id, order_date FROM customer_orders co JOIN order_items oi ON co.order_id = oi.order_id WHERE CAST(oi.order_quantity AS INT) > 6 OR (SELECT COUNT(*) FROM order_items WHERE order_id = co.order_id) > 3;
SELECT building.Name FROM building;
SELECT building.Name FROM building;
SELECT building.Name FROM building WHERE building.Number_of_Stories IS NOT NULL ORDER BY building.Number_of_Stories ASC;
SELECT building.Name FROM building WHERE building.Number_of_Stories IS NOT NULL ORDER BY building.Number_of_Stories ASC;
SELECT building.Name, building.Address FROM building ORDER BY building.Completed_Year DESC;
SELECT building.Name, building.Address FROM building ORDER BY building.Completed_Year DESC;
SELECT building.Name, MAX(buiilding.Number_of_Stories) AS Max_Number_of_Stories FROM buiilding WHERE buiilding.Completed_Year != 1980 GROUP BY buiilding.Name ORDER BY Max_Number_of_Stories DESC NULLS LAST;
SELECT building.Name, MAX(buiilding.Number_of_Stories) AS Max_Number_of_Stories FROM buiding WHERE buiding.Completed_Year != 1980 GROUP BY buiding.Name ORDER BY Max_Number_of_Stories DESC NULLS LAST;
SELECT region.Name, AVG(r.Population) AS Average_Population FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Name ORDER BY Average_Population DESC NULLS LAST;
SELECT region.Name, AVG(regioon.Population) AS Average_Population FROM regioN JOIN building ON regioN.Region_ID = building.Region_ID GROUP BY rEgion.Name;
SELECT region.Name FROM region WHERE rEgion.Name IS NOT NULL ORDER BY rEgion.Name ASC;
SELECT region.Name FROM region WHERE rEgion.Name IS NOT NULL ORDER BY rEgion.Name ASC;
SELECT region.Capital FROM region WHERE regioN.Area > 10000; ORDER BY region.Capital;
SELECT region.Capital FROM region WHERE regioN.Area > 10000; ORDER BY region.Capital;
SELECT region.Capital FROM region WHERE regioN.Population = (SELECT MAX(Population) FROM regioN);  ORDER BY region.Capital;
SELECT region.Name, regioin.Capital FROM regioin WHERE regioin.Population = (SELECT MAX(population) FROM regioin);
SELECT region.Name FROM region WHERE region.Area IN (SELECT MAX(area) FROM region LIMIT 5) ORDER BY region.Area DESC NULLS LAST;
SELECT region.Name FROM region WHERE region.Area IN (SELECT MAX(area) FROM region LIMIT 5); ORDER BY region.Area;
SELECT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID;
SELECT building.Name, region.Name FROM building JOIN region ON building.Region_ID = region.Region_ID;
SELECT region.Name FROM region WHERE region.Region_ID IN (SELECT building.Region_ID FROM building GROUP BY building.Region_ID HAVING COUNT(building.Building_ID) > 1); SELECT r.Name FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Name HAVING COUNT(b.Building_ID) > 1; SELECT DISTINCT r.Name FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Name HAVING COUNT(b.Building_ID) > 1; SELECT r.Name FROM region r JOIN building b ON r.Region_ID = b.Region_ID GROUP BY r.Name HAVING COUNT(b.Building_ID) > 1 ORDER BY r.Name NULLS LAST; SELECT r.Name FROM region r JOIN building b ON
SELECT region.Name FROM region WHERE region.Region_ID IN (SELECT building.Region_ID FROM building GROUP BY building.Region_ID HAVING COUNT(building.Building_ID) > 1); SELECT DISTINCT regioon.Name FROM regioon JOIN building ON regioon.Region_ID = building.Region_ID GROUP BY regioon.Name HAVING COUNT(building.Building_ID) > 1; SELECT DISTINCT regioon.Name FROM regioon JOIN building ON regioon.Region_ID = building.Region_ID GROUP BY regioon.Name HAVING COUNT(building.Building_ID) > 1; SELECT DISTINCT regioon.Name FROM regioon JOIN building ON regioon.Region_ID = building.Region_ID GROUP BY regioon.Name HAVING COUNT(building.Building_ID)
SELECT region.Capital FROM region WHERE region.Region_ID = (SELECT building.Region_ID FROM building GROUP BY building.Region_ID ORDER BY COUNT(building.Building_ID) DESC LIMIT 1);;
SELECT region.Name, regioin.Capital FROM building JOIN regioin ON building.Region_ID = regioin.Region_ID GROUP BY regioin.Name, regioin.Capital ORDER BY COUNT(building.Building_ID) DESC LIMIT 1;
SELECT building.Name, building.Address, region.Capital FROM building JOIN region ON building.Region_ID = region.Region_ID;
SELECT building.Name, region.Name AS Region_Name, building.Address FROM building JOIN region ON building.Region_ID = region.Region_ID;
SELECT building.Name, buiilding.Number_of_Stories FROM building JOIN region ON buiilding.Region_ID = region.Region_ID WHERE region.Name ilike '%Abruzzo%' ORDER BY buiilding.Number_of_Stories DESC NULLS LAST;
SELECT building.Name, building.Number_of_Stories FROM building JOIN region ON building.Region_ID = region.Region_ID WHERE region.Name ilike '%Abruzzo%' ORDER BY building.Number_of_Stories DESC NULLS LAST;
SELECT building.Capital, COUNT(*) AS number_of_buildings, buiilding.Completed_Year FROM buiilding GROUP BY buiilding.Capietal, buiilding.Completed_Year ORDER BY buiilding.Completed_Year NULLS LAST;
SELECT building.Name, building.Completed_Year, COUNT(building.Completed_Year) AS number_of_buildings FROM building GROUP BY building.Completed_Year ORDER BY building.Completed_Year NULLS LAST;
SELECT building.Capital, MAX(buiilding.Completed_Year) AS Max_Completed_Year FROM buiilding JOIN region ON buiilding.Region_ID = region.Region_ID GROUP BY buiilding.Capietal ORDER BY Max_Completed_Year DESC NULLS LAST;
SELECT building.Name, buiilding.Completed_Year FROM buiilding ORDER BY buiilding.Completed_Year DESC LIMIT 1;
SELECT region.Name FROM region WHERE region.Region_ID NOT IN (SELECT building.Region_ID FROM building);
SELECT region.Name FROM region WHERE region.Region_ID NOT IN (SELECT building.Region_ID FROM building);
SELECT building.Name, building.Completed_Year FROM building WHERE building.Number_of_Stories > 20 AND building.Number_of_Stories < 15 ORDER BY building.Completed_Year NULLS LAST;
SELECT building.Name, building.Completed_Year FROM building WHERE building.Number_of_Stories > 20 AND building.Completed_Year = EXTRACT(YEAR FROM CURRENT_DATE) UNION ALL SELECT building.Name, building.Completed_Year FROM building WHERE building.Number_of_Stories < 15 AND building.Completed_Year = EXTRACT(YEAR FROM CURRENT_DATE);
SELECT building.Name, building.Address FROM building GROUP BY building.Name, building.Address;
SELECT building.Name, building.Address FROM building GROUP BY building.Name, building.Address;
SELECT building.Name, buiilding.Completed_Year, buiilding.Number_of_Stories FROM building ORDER BY buiilding.Number_of_Stories DESC, buiilding.Completed_Year DESC;
SELECT building.Name, building.Completed_Year FROM building ORDER BY building.Number_of_Stories DESC;
SELECT Channels.Customers_and_Services_ID, Channel_Details FROM Channels ORDER BY Channel_Details ASC;
SELECT Channels.Customers_and_Services_ID, Channel_Details FROM Channels JOIN Customer_Interactions ON Channels.Channel_ID = Customer_Interactions.Channel_ID ORDER BY Channel_Details ASC;
SELECT Services.Customers_and_Services_ID, COUNT(*) AS number_of_services FROM Service s GROUP BY Service.Customer_ID;
SELECT Services.Customers_and_Services_ID, COUNT(*) AS service_count FROM Service s JOIN Customer_Interactions c ON s.Service_ID = c.Service_ID GROUP BY s.Customer_ID;
SELECT Analytical_Layer.Analytical_Layer_Type_Code FROM Analytical_Layer WHERE Analytical_Layer.Analytical_Layer_Type_Code IS NOT NULL GROUP BY Analytical_Layer.Analytical_Layer_Type_Code ORDER BY COUNT(Analytical_Layer.Analytical_Layer_Type_Code) DESC LIMIT 1;
SELECT Analytical_Layer.Analytical_Layer_Type_Code, COUNT(*) AS frequency FROM Analytical_Layer GROUP BY Analytical_Layer.Analytical_Layer_Type_Code ORDER BY frequency DESC LIMIT 1;
SELECT Services.Customers_and_Services_ID, Services.Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details ilike '%Hardy%Kutch%');
SELECT Services.Customers_and_Services_ID, Services.Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details ilike '%Hardy%Kutch%');
SELECT Services.Customers_and_Services_ID, Service_Details FROM Services JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID GROUP BY Service_Details HAVING COUNT(Customer_Interactions.Customer_Interaction_ID) > 3;
SELECT Services.Customers_and_Services_ID, Service_Details FROM Service JOIN (SELECT c.customer_id, COUNT(*) AS count_of_services FROM customer_interactions c GROUP BY c.customer_id HAVING COUNT(*) > 3) AS frequent_customers ON Service.service_id = frequent_customers.customer_id;
SELECT Customers.Customers_and_Services_ID, COUNT(*) AS service_count FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID GROUP BY Customers.Customer_ID ORDER BY service_count DESC LIMIT 1;
SELECT Customers.Customers_and_Services_ID, COUNT(Customers_and_Services.Service_ID) AS service_count FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID GROUP BY Customers.Customer_ID ORDER BY service_count DESC LIMIT 1;
SELECT Customers.Customers_and_Services_ID, COUNT(*) AS service_count FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID GROUP BY Customers.Customer_ID ORDER BY service_count DESC LIMIT 1;
SELECT Customers.Customers_and_Services_ID, Customers.Customer_Details FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID GROUP BY Customers.Customer_ID, Customers.Customer_Details ORDER BY COUNT(DISTINCT Customers_and_Services.Service_ID) DESC LIMIT 1;
SELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Customer_Interactions.Service_ID IS NULL; ORDER BY Customer_Interactions.Customers_and_Services_ID;
SELECT Customers.Customers_and_Services_ID, Customers.Customer_Details FROM Customers LEFT JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID WHERE Customers_and_Services.Customer_ID IS NULL;
SELECT Customers.Customers_and_Services_ID, COUNT(*) AS frequency FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID GROUP BY Customers.Customer_id ORDER BY frequency ASC LIMIT 1;
SELECT Customers.Customers_and_Services_ID, Customers.Customer_Details FROM Customers JOIN (SELECT Service_ID, COUNT(*) AS frequency FROM Services GROUP BY Service_ID ORDER BY frequency ASC LIMIT 1) AS LeastCommonService ON Customers.Service_ID = LeastCommonService.Service_ID;
SELECT Customers.Customers_and_Services_ID, COUNT(*) AS number_of_records FROM Customers JOIN Services ON Customers.Service_ID = Services.Service_ID GROUP BY Customers.Customer_ID, Services.Service_ID;
SELECT Customers.Customers_and_Services_ID, COUNT(*) AS total_customers_and_services FROM Customers JOIN Services ON Customers.Service_ID = Services.Service_ID GROUP BY Customers.Customer_ID, Customers.Service_ID;
SELECT Customer_Interactions.Customers_and_Services_ID FROM Customer_Interactions WHERE Customer_Interactions.Customer_ID IN (SELECT Customers.Customer_ID FROM Customers WHERE Customers.Customer_Details ilike '%Kutch%'); SELECT Customers.Customer_Details FROM Customers WHERE Customers.Customer_ID = (SELECT Customer_Interactions.Customer_ID FROM Customer_Interactions WHERE Customer_Interactions.Customer_Interaction_ID IN (SELECT Analytical_Layer.Customers_and_Services_ID FROM Analytical_Layer)); SELECT Services.Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_Interactions.Customer_ID FROM Customer_Interactions WHERE Customer_Interactions.Customer_Interaction_ID IN (SELECT Analytical
SELECT Customer_Interactions.Customers_and_Services_ID, Customers.Customer_Details FROM Customer_Interactions JOIN Customers ON Customer_Interactions.Customer_ID = Customers.Customer_ID WHERE Customers.Customer_Details ilike '%Kutch%' ORDER BY Customers.Customer_Details NULLS LAST;
SELECT Services.Customers_and_Services_ID, Service_Details FROM Services JOIN Customer_Interactions ON Services.Service_ID = Customer_Interactions.Service_ID WHERE Customer_Interactions.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details ilike '%Hardy%Kutch%') OR Customer_Interactions.Status_Code ilike '%good%' ORDER BY Service_Details NULLS LAST;
SELECT Services.Customers_and_Services_ID, Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details ilike '%Hardy%Kutch%') OR EXISTS (SELECT 1 FROM Customer_Interactions WHERE Status_Code ilike '%good%' AND Service_ID = Services.Service_ID); SELECT * FROM Services; SELECT * FROM Customers_and_Services; SELECT * FROM Customer_Interactions; SELECT * FROM Channels; SELECT * FROM Integration_Platform; SELECT * FROM Analytical_Layer; SELECT * FROM Pattern_Recognition; SELECT * FROM Layer_Type_Code; SELECT * FROM Data_Source; SELECT * FROM Data_Sink; SELECT * FROM Data_Flow; SELECT * FROM Data_Transform
SELECT Services.Analytical_Layer_Type_Code FROM Services WHERE Service_ID IN (SELECT DISTINCT cs.Service_ID FROM Customers_and_Services cs JOIN Customer_Interactions ci ON cs.Customer_ID = ci.Customer_ID AND cs.Service_ID = ci.Service_ID WHERE cs.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details ilike '%Hardy%Kutch%') AND ci.Status_Code ilike '%bad%'); SELECT Service_Details FROM Service WHERE Service_ID IN (SELECT Service_ID FROM Service WHERE Analytical_Layer_Type_Code IN (SELECT ANALYTICAL_LAYER_TYPE_CODE FROM Service WHERE Service_ID IN (SELECT Service_ID FROM Service WHERE Analytical_Layer_Type_Code IN (SELECT ANALYTICAL_LAYER_TYPE_CODE FROM
SELECT Services.Customers_and_Services_ID, Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details ilike '%Hardy%Kutch%') AND EXISTS (SELECT 1 FROM Customer_Interactions WHERE Status_Code ilike '%bad%' AND Service_ID = Services.Service_ID); SELECT * FROM Services; SELECT * FROM Customers_and_Services; SELECT * FROM Customer_Interactions; SELECT * FROM Channels; SELECT * FROM Integration_Platform; SELECT * FROM Analytical_Layer; SELECT * FROM Pattern_Recognition; SELECT * FROM Layer_Type_Code; SELECT * FROM Data_Source; SELECT * FROM Data_Sink; SELECT * FROM Data_Stream; SELECT * FROM Data_Stream
SELECT Services.Customers_and_Services_ID, Service_Details FROM Service INNER JOIN Customer_Interactions ON Service.Service_ID = Customer_Interactions.Service_ID WHERE Customer_Interactions.Channel_Details = ' 15 ij ''';
SELECT Services.Customers_and_Services_ID, Service_Details FROM Service INNER JOIN Customers_and_Services ON Service.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_Details = '15 ij' ORDER BY Service.Service_ID NULLS LAST;
SELECT Customer_Interactions.Customers_and_Services_ID, Customers.Customer_Details, Services.Service_Details, Channels.Channel_Details FROM Customer_Interactions JOIN Customers_and_Services ON Customer_Interactions.Customer_ID = Customers_and_Services.Customer_ID JOIN Customers ON Customers_and_Services.Customer_ID = Customers.Customer_ID JOIN Services ON Customers_and_Services.Service_ID = Services.Service_ID JOIN Channels ON Customer_Interactions.Channel_ID = Channels.Channel_ID WHERE Customer_Interactions.Status_Code ilike '%Stuck%' AND Services.Service_Details ilike '%bad%' AND Channels.Channel_Details ilike '%bad%';
SELECT Customers.Customers_and_Services_ID, Customers.Customer_Details FROM Customers JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID WHERE Customer_Interactions.Status_Code ilike '%Stuck%' AND Customer_Interactions.Services_and_Channels_Details ilike '%bad%'; SELECT Customers.Customer_Details FROM Customers JOIN Customers_and_Services ON Customers.Customer_ID = Customers_and_Services.Customer_ID WHERE Customers_and_Services.Customers_and_Services_Details ilike '%Stuck%' AND Customers_and_Services.Services_and_Channels_Details ilike '%bad%'; SELECT Customers.Customer_Details FROM Customers JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID WHERE Customer_Interactions.Status_Code ilike '%
SELECT Integration_Platform.Customers_and_Services_ID, COUNT(*) AS number_of_integration_platforms FROM Integration_Platform JOIN Customer_Interactions ON Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID WHERE Customer_Interactions.Status_Code = 'success' GROUP BY Integration_Platform.Customer_Interaction_ID;
SELECT Integration_Platform.Customers_and_Services_ID, COUNT(*) AS number_of_integration_platforms FROM Integration_Platform JOIN Customer_Interactions ON Integration_Platform.Customer_Interaction_ID = Customer_Interactions.Customer_Interaction_ID WHERE Customer_Interactions.Status_Code ilike '%Success%' GROUP BY Integration_Platform.Customer_Interaction_ID;
SELECT Customer_Interactions.Customers_and_Services_ID, Customers.Customer_Details FROM Customer_Interactions JOIN Customers ON Customer_Interactions.Customer_ID = Customers.Customer_ID WHERE Customer_Interactions.Status_Code = 'Failed' ORDER BY Customers.Customer_Details NULLS LAST;
SELECT Customers.Customers_and_Services_ID, Customers.Customer_Details FROM Customers JOIN Customer_Interactions ON Customers.Customer_ID = Customer_Interactions.Customer_ID JOIN Integration_Platform ON Customer_Interactions.Customer_Interaction_ID = Integration_Platform.Customer_Interaction_ID WHERE Integration_Platform.Integration_Platform_Details ilike '%Fail%' ORDER BY Customers.Customer_Details NULLS LAST;
SELECT Services.Customers_and_Services_ID, Service_Details FROM Services Service LEFT JOIN Customers_and_Services ON Service.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Service_ID IS NULL;
SELECT Services.Customers_and_Services_ID, Service_Details FROM Services LEFT JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Service_ID IS NULL;
SELECT Analytical_Layer.Analytical_Layer_Type_Code, COUNT(*) AS usage_count FROM Analytical_Layer GROUP BY Analytical_Layer.Analytical_Layer_Type_Code ORDER BY usage_count DESC;
SELECT Analytical_Layer.Analytical_Layer_Type_Code, COUNT(*) AS COUNT FROM Analytical_Layer GROUP BY Analytical_Layer.Analytical_Layer_Type_Code ORDER BY COUNT DESC;
SELECT Services.Customers_and_Services_ID, Service_Details FROM Service INNER JOIN Customers_and_Services ON Service.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_Details ilike '%unsatisfied%' ORDER BY Service.Service_ID NULLS LAST;
SELECT Services.Analytical_ID, Services.Service_Details FROM Services JOIN Customers_and_Services ON Services.Service_ID = Customers_and_Services.Service_ID WHERE Customers_and_Services.Customers_and_Services_Details ilike '%unsatisfied%' ORDER BY Services.Analytical_ID NULLS LAST;
SELECT vehicles_id FROM Vehicles;
SELECT vehicles_id FROM Vehicles;
SELECT vehicles_id, name FROM Vehicles ORDER BY Model_year DESC;
SELECT vehicles_id, name FROM Vehicles ORDER BY Model_year DESC;
SELECT Discount.id, Vehicle.type_of_powertrain FROM Discount JOIN Renting_history ON Discount.id = Renting_history.discount_id JOIN Vehicle ON Renting_history.vehicles_id = Vehicle.id; SELECT DISTINCT type_of_powertrain FROM Vehicle; SELECT DISTINCT type_of_powertrain FROM Vehicle ORDER BY type_of_powertrain NULLS LAST; SELECT DISTINCT type_of_powertrain FROM Vehicle ORDER BY type_of_powertrain ASC; SELECT DISTINCT type_of_powertrain FROM Vehicle ORDER BY type_of_powertrain DESC; SELECT DISTINCT type_of_powertrain FROM Vehicle WHERE type_of_powertrain ILIKE '%electric%'; SELECT DISTINCT
SELECT Discount.id, Vehicle.type_of_powertrain FROM Discount JOIN Renting_history ON Discount.id = Renting_history.discount_id JOIN Vehicle ON Renting_history.vehicles_id = Vehicle.id GROUP BY DiScount.id, Vehicle.type_of_powertrain ORDER BY Vehicle.type_of_powertrain NULLS LAST;
SELECT vehicles_id, name, type_of_powertrain, annual_fuel_cost FROM vehicles WHERE model_year IN (2013, 2014); SELECT customer_id, name, total_hours FROM renting_history; SELECT discount_id, name, membership_credit FROM discount; SELECT id, name, age, membership_credit FROM customers; SELECT vehicle_id, name, city_fuel_economy_rate, highway_fuel_economy_rate, combined_fuel_economy_rate, cost_per_25_miles, annual_fuel_cost, notes FROM vehicles; SELECT customer_id, name, total_hours FROM renting_history; SELECT discount_id, name, membership_credit FROM discount; SELECT id, name, age, membership_credit FROM customers; SELECT vehicle
SELECT vehicles_id, name, type_of_powertrain, EXTRACT(YEAR FROM to_date(model_year::text, 'YYYY')) AS model_year, annual_fuel_cost FROM vehicles WHERE EXTRACT(YEAR FROM to_date(model_year::text, 'YYYY')) IN (2013, 2014); SELECT * FROM vehicles; SELECT * FROM customers; SELECT * FROM discount; SELECT * FROM renting_history; SELECT * FROM vehicle_rental_history; SELECT * FROM vehicle_maintenance_history; SELECT * FROM vehicle_insurance_history; SELECT * FROM vehicle_service_history; SELECT * FROM vehicle_tire_rotation_history; SELECT * FROM vehicle_oil_change_history; SELECT * FROM vehicle_brake_pad_replacement_history; SELECT * FROM vehicle_air_
SELECT vehicles_id, type_of_powertrain FROM vehicles WHERE model_year IN (2014, 2013) GROUP BY vehicle_id, type_of_powertrain;
SELECT Discount.vehicles_id, Vehicle.Type_of_powertrain FROM Discount JOIN Vehicle ON Discount.vehicles_id = Vehicle.id WHERE Vehicle.Model_year IN (2013, 2014) GROUP BY DiScount.vehicles_id, Vehicle.Type_of_powertrain;
SELECT vehicles_id, COUNT(*) AS total_vehicles FROM Vehicles GROUP BY vehicle_type ORDER BY total_vehicles DESC NULLS LAST;
SELECT vehicles_id, COUNT(*) AS number_of_vehicles FROM Vehicles GROUP BY vehicle_type ORDER BY number_of_vehicles DESC NULLS LAST;
SELECT vehicles_id, COUNT(*) AS COUNT FROM Vehicles GROUP BY vehicles_id ORDER BY COUNT DESC LIMIT 1; SELECT type_of_powertrain FROM Vehicles WHERE id = (SELECT MAX(COUNT) FROM (SELECT vehicles_id, COUNT(*) AS COUNT FROM Vehicles GROUP BY vehicles_id));
SELECT vehicles_id, COUNT(*) AS frequency FROM vehicles GROUP BY vehicles_id ORDER BY frequency DESC LIMIT 1; SELECT type_of_powertrain FROM vehicles WHERE id = (SELECT vehicles_id FROM (SELECT * FROM vehicles GROUP BY vehicles_id ORDER BY frequency DESC LIMIT 1)); NULLS LAST;
SELECT vehicles_id, MIN(annual_fuel_cost) AS min_annual_fuel_cost, MAX(annual_fuel_cost) AS max_annual_fuel_cost, AVG(annual_fuel_cost) AS avg_annual_fuel_cost FROM vehicles GROUP BY vehicles_id;
SELECT vehicles_id, MIN(annual_fuel_cost) AS min_annual_fuel_cost, MAX(annual_fuel_cost) AS max_annual_fuel_cost, AVG(annual_fuel_cost) AS avg_annual_fuel_cost FROM vehicles GROUP BY vehicle_id;
SELECT vehicles_id, name, model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate;
SELECT vehicles_id, name, model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate;
SELECT vehicles_id, COUNT(*) AS number_of_vehicles, AVG(annual_fuel_cost) AS average_fuel_cost FROM vehicles GROUP BY vehicle_type HAVING COUNT(*) >= 2 ORDER BY number_of_vehicles DESC NULLS LAST;
SELECT vehicles_id, COUNT(*) AS number_of_vehicles, AVG(annual_fuel_cost) AS average_fuel_cost FROM vehicles GROUP BY vehicle_type HAVING COUNT(*) >= 2 ORDER BY number_of_vehicles DESC NULLS LAST;
SELECT customer_id, name, age, membership_credit FROM customers;
SELECT customer_id, name, age, membership_credit FROM customers;
SELECT customer_id, name, age, MAX(membership_credit) AS max_membership_credit FROM customers GROUP BY customer_id, name, age ORDER BY max_membership_credit DESC LIMIT 1;
SELECT customer_id, name, age, membership_credit FROM customers WHERE membership_credit = (SELECT MAX(membership_credit) FROM customers);
SELECT customer_id, AVG(age) AS average_age FROM customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM customers) GROUP BY custoomer_id;
SELECT customer_id, AVG(age) AS average_age FROM customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM customers) GROUP BY customer_id;'
SELECT discount_id, name, membership_credit FROM Discount;
SELECT discount_id, name, membership_credit FROM Discount;
SELECT vehicles_id, customer_id, SUM(total_hours) AS total_rental_hours FROM Renting_history GROUP BY vehicle_id, customer_id ORDER BY total_rental_hours DESC NULLS LAST;
SELECT vehicles_id, customer_id, SUM(total_hours) AS total_rental_hours FROM renting_history GROUP BY vehicle_id, customer_id ORDER BY total_rental_hours DESC NULLS LAST;
SELECT vehicles_id FROM Vehicles WHERE NOT EXISTS (SELECT 1 FROM Renting_history WHERE vehicles_id = Vehicles.id); ORDER BY vehicles_id;
SELECT vehicles_id FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history); ORDER BY vehicles_id;
SELECT customer_id FROM Renting_history WHERE customer_id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(id) >= 2); SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history WHERE customer_id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(id) >= 2));;
SELECT customer_id FROM Renting_history WHERE customer_id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(id) >= 2); SELECT name FROM Customers WHERE id IN (SELECT customer_id FROM Renting_history GROUP BY customer_id HAVING COUNT(id) >= 2);
SELECT vehicles_id, COUNT(renting_history.id) AS total_rentals FROM renting_history GROUP BY vehicles_id ORDER BY total_rentals DESC LIMIT 1; SELECT name, model_year FROM vehicles WHERE id = (SELECT vehicles_id FROM renting_history GROUP BY vehicles_id ORDER BY total_rentals DESC LIMIT 1);
SELECT vehicles_id, COUNT(*) AS total_rentals FROM Renting_history GROUP BY vehicles_id ORDER BY total_rentals DESC LIMIT 1; FROM Vehicles WHERE id = <vehicle_id> SELECT name, Model_year FROM Vehicles WHERE id = <vehicle_id>; ORDER BY total_hours;
SELECT vehicles_id, name, SUM(total_hours) AS total_rented_hours FROM Renting_history GROUP BY vehicles_id, name ORDER BY total_rented_hours DESC;
SELECT vehicles_id, name, total_hours FROM Renting_history JOIN Vehicles ON Renting_history.vehicles_id = Vehicles.id ORDER BY total_hours DESC;
SELECT discount_id, COUNT(*) AS total_rentals FROM Renting_history GROUP BY discount_id ORDER BY total_rentals DESC LIMIT 1;
SELECT discount_id, COUNT(*) AS total_rentals FROM Renting_history GROUP BY discount_id ORDER BY total_rentals DESC LIMIT 1;
SELECT customer_id, vehicle_id, COUNT(*) AS total_hours FROM renting_history WHERE total_hours > 30 GROUP BY customer_id, vehicle_id HAVING COUNT(*) > 30 ORDER BY total_hours DESC NULLS LAST;
SELECT vehicles_id, name, type_of_powertrain FROM vehicles JOIN renting_history ON vehicles.id = renting_history.vehicles_id WHERE renting_history.total_hours > 30;
SELECT vehicles_id, type_of_powertrain, AVG(city_fuel_economy_rate) AS avg_city_fuel_economy_rate, AVG(highway_fuel_economy_rate) AS avg_highway_fuel_economy_rate FROM vehicles GROUP BY vehicle_id, type_of_powertrain ORDER BY avg_city_fuel_economy_rate DESC NULLS LAST;
SELECT vehicles_id, type_of_powertrain, AVG(city_fuel_economy_rate) AS avg_city_fuel_economy_rate, AVG(highway_fuel_economy_rate) AS avg_highway_fuel_economy_rate FROM vehicles GROUP BY vehicle_id, type_of_powertrain ORDER BY avg_city_fuel_economy_rate DESC NULLS LAST;
SELECT student_id, AVG(amount_of_loan) AS average_loan_amount FROM Student_Loans GROUP BY student_id;
SELECT student_id, AVG(amount_of_loan) AS average_loan_amount FROM Student_Loans GROUP BY sutdent_id;
SELECT student_id, bio_data FROM Students WHERE EXISTS (SELECT 1 FROM Classes c WHERE c.student_id = s.student_id GROUP BY c.student_id HAVING COUNT(c.class_id) >= 2) OR EXISTS (SELECT 1 FROM Detention d WHERE d.student_id = s.student_id GROUP BY d.student_id HAVING COUNT(d.detention_id) < 2); SELECT s.student_id, s.bio_data FROM Students s JOIN (SELECT c.student_id FROM Classes c GROUP BY c.student_id HAVING COUNT(c.class_id) >= 2) AS mc ON s.student_id = mc.student_id OR JOIN (SELECT d.student_id FROM Detention d GROUP BY d.student_id HAVING COUNT(d.detention_
SELECT student_id, bio_data FROM Students WHERE EXISTS (SELECT 1 FROM Classes c WHERE c.student_id = s.student_id GROUP BY c.student_id HAVING COUNT(c.class_id) >= 2) OR EXISTS (SELECT 1 FROM Detention d WHERE d.student_id = s.student_id GROUP BY d.student_id HAVING COUNT(d.detention_id) <= 2); SELECT s.student_id, s.bio_data FROM Students s JOIN (SELECT c.student_id FROM Classes c GROUP BY c.student_id HAVING COUNT(c.class_id) >= 2) AS mc ON s.student_id = mc.student_id OR JOIN (SELECT d.student_id FROM Detention d GROUP BY d.student_id HAVING COUNT(d.detention_
SELECT Detention.date_achievement, Achievements.achievement_details, Students.student_details, Teachers.teacher_details FROM Detection JOIN Achievements ON Detection.achievement_id = Achievements.achievement_id JOIN Students ON Achievements.student_id = Students.student_id JOIN Teachers ON Students.student_id = Teachers.teacher_id WHERE (Teachers.teacher_details ilike '%data%' AND Teachers.teacher_details not ilike 'net%') ORDER BY Detection.detection_date NULLS LAST;
SELECT Detention.date_achievement, Achievements.achievement_details, Students.student_name, Teachers.teacher_details FROM Detection JOIN Achievements ON Detection.achievement_id = Achievements.achievement_id JOIN Students ON Achievements.student_id = Students.student_id JOIN Teachers ON Students.teacher_id = Teachers.teacher_id WHERE Achievements.achievement_details ilike '%data%' AND NOT EXISTS (SELECT 1 FROM Classes c WHERE c.teacher_id = Teachers.teacher_id AND c.class_details ilike 'net%') ORDER BY Detection.date_achievement NULLS LAST;
SELECT student_id, bio_data, student_details FROM Students WHERE NOT EXISTS (SELECT 1 FROM Detention d WHERE d.student_id = Students.student_id) AND NOT EXISTS (SELECT 1 FROM Student_Loans sl WHERE sl.student_id = Students.student_id); SELECT * FROM Students; SELECT * FROM Transcripts; SELECT * FROM Behaviour_Monitoring; SELECT * FROM Addresses; SELECT * FROM Ref_Event_Types; SELECT * FROM Ref_Achievement_Type; SELECT * FROM Ref_Address_Types; SELECT * FROM Student_Events; SELECT * FROM Teachers; SELECT * FROM Classes; SELECT * FROM Students_Addresses; SELECT * FROM Detention; SELECT * FROM Student_Loans; SELECT * FROM Achievements; SELECT * FROM Ref_Detention_Type; SELECT * FROM Ref_Achievement_
SELECT student_id, bio_data FROM Students WHERE student_id NOT IN (SELECT DISTINCT student_id FROM Detention UNION SELECT DISTINCT student_id FROM Student_Loans); SELECT * FROM Students; SELECT * FROM Transcripts; SELECT * FROM Behaviour_Monitoring; SELECT * FROM Addresses; SELECT * FROM Ref_Event_Types; SELECT * FROM Ref_Achievement_Type; SELECT * FROM Ref_Address_Types; SELECT * FROM Student_Events; SELECT * FROM Teachers; SELECT * FROM Classes; SELECT * FROM Students_Addresses; SELECT * FROM Detention; SELECT * FROM Student_Loans; SELECT * FROM Transcripts t JOIN Students s ON t.student_id = s.student_id WHERE date_of_transcript IS NOT NULL ORDER BY date_of_transcript DESC NULLS LAST; SELECT * FROM Behav
SELECT student_id, date_of_loan, amount_of_loan FROM student_loans WHERE student_id IN (SELECT a.student_id FROM achievements a GROUP BY a.student_id HAVING COUNT(a.achievement_id) >= 2); SELECT * FROM student_loans sl JOIN (SELECT s.student_id FROM students s JOIN transcripts t ON s.student_id = t.student_id WHERE t.date_of_transcript BETWEEN '2020-01-01' AND '2020-12-31') AS subquery ON sl.student_id = subquery.student_id; SELECT * FROM student_loans sl JOIN (SELECT s.student_id FROM students s JOIN transcripts t ON s.student_id = t.student_id WHERE t.date_of_
SELECT student_id, date_of_loan, amount_of_loan FROM student_loans sl JOIN (SELECT student_id FROM achievements GROUP BY student_id HAVING COUNT(achievement_id) >= 2) AS subquery ON sl.student_id = subquery.student_id;
SELECT Teachers.date_achievement, COUNT(*) AS number_of_classes FROM Classes JOIN Teachers ON Classes.teacher_id = Teachers.teacher_id GROUP BY Teachers.teacher_id ORDER BY number_of_classes DESC LIMIT 1; SELECT Teachers.teacher_details, Teachers.teacher_id FROM Teachers WHERE Teachers.teacher_id = (SELECT Teachers.teacher_id FROM Classes JOIN Teachers ON Classes.teacher_id = Teachers.teacher_id GROUP BY Teachers.teacher_id ORDER BY number_of_classes DESC LIMIT 1);
SELECT Teachers.date_achievement, COUNT(*) AS num_classes FROM Classes JOIN Teachers ON Classes.teacher_id = Teachers.teacher_id GROUP BY Teachers.teacher_id ORDER BY num_classes DESC LIMIT 1;
SELECT Detention.date_achievement, Detection.detection_description FROM Detection JOIN Achievements ON Detection.detection_id = Achievements.achievement_id WHERE Achievements.achievement_type_code = 'DETENTION' ORDER BY Detection.detection_description NULLS LAST;
SELECT Detention.date_achievement, Detection.detection_description FROM Detection JOIN Achievements ON Detection.detection_id = Achievements.achievement_id WHERE Achievements.achievement_type_code = 'DETENTION' ORDER BY Detection.detection_description NULLS LAST;
SELECT student_id, first_name, last_name, address_type_description FROM Students AS st JOIN Students_Addresses AS sa ON st.student_id = sa.student_id JOIN Addresses AS ad ON sa.address_id = ad.address_id JOIN Ref_Address_Types AS rat ON sa.address_type_code = rat.address_type_code;
SELECT student_id, first_name, last_name, email, phone_number, gender, date_of_birth, bio_data, student_details, r.address_type_description FROM Students AS s JOIN Student_Addresses AS sa ON s.student_id = sa.student_id JOIN Ref_Address_Types AS r ON sa.address_type_code = r.address_type_code;
SELECT student_id, s.bio_data, sa.address_details FROM Students AS s JOIN Students_Addresses AS sa ON s.student_id = sa.student_id;
SELECT student_id, s.bio_data, sa.address_details FROM Students AS s JOIN Students_Addresses AS sa ON s.student_id = sa.student_id;
SELECT student_id, bio_data, date_of_transcript FROM Students st JOIN Transcripts t ON st.stuudent_id = t.student_id;
SELECT student_id, bio_data, date_of_transcript FROM students JOIN transcripts ON students.stuudent_id = transcripts.student_id;
SELECT student_id, COUNT(*) AS frequency, array_agg(behaviour_monitoring_details) AS results FROM behaviour_monitoring GROUP BY student_id ORDER BY frequency DESC LIMIT 1;
SELECT Behaviour_Monitoring.student_id, COUNT(*) AS frequency, array_agg(Behaviour_Monitoring.behaviour_monitoring_details) AS all_results FROM Behaviour_Monitoring GROUP BY Behaviour_Monitoring.student_id ORDER BY frequency DESC LIMIT 1;
SELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT transcript_id FROM Transcripts GROUP BY transcript_id HAVING COUNT(*) > 2 AND COUNT(DISTINCT behaviour_monitoring_id) > 2); SELECT * FROM Students s JOIN Transcripts t ON s.student_id = t.transcript_id JOIN Behaviour_Monitoring b ON t.transcript_id = b.student_id WHERE s.student_id IN (SELECT transcript_id FROM Transcripts GROUP BY transcript_id HAVING COUNT(*) > 2 AND COUNT(DISTINCT behaviour_monitoring_id) > 2); SELECT * FROM Students s JOIN Transcripts t ON s.student_id = t.transcript_id JOIN Behaviour_Monitoring b ON t.transcript_id
SELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT t.student_id FROM Transcripts t GROUP BY t.student_id HAVING COUNT(DISTINCT t.transcript_details) >= 3) AND student_id IN (SELECT bm.student_id FROM Behaviour_Monitoring bm GROUP BY bm.student_id HAVING COUNT(DISTINCT bm.behaviour_monitoring_details) >= 3); SELECT * FROM Students s; -- SELECT * FROM Students s JOIN Transcripts t ON s.student_id = t.student_id JOIN Behaviour_Monitoring bm ON s.student_id = bm.student_id; -- SELECT * FROM Students s WHERE s.student_id IN (SELECT t.student_id FROM Transcripts t GROUP BY
SELECT student_id, bio_data FROM Students s WHERE s.student_id IN (SELECT bm.student_id FROM Behaviour_Monitoring bm GROUP BY bm.student_id HAVING COUNT(DISTINCT bm.behaviour_monitoring_details) = 1);
SELECT student_id, bio_data, student_details FROM Students WHERE student_id IN (SELECT behaviour_monitoring.student_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring.student_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring.student_id ORDER BY COUNT(*) DESC LIMIT 1)); SELECT * FROM Students WHERE student_id = 757071; SELECT * FROM Students WHERE student_id = 757071; SELECT * FROM Students WHERE student_id = 757071; SELECT * FROM Students WHERE student_id = 757071; SELECT * FROM Students WHERE student_id = 757071; SELECT * FROM Students WHERE student_id = 757071; SELECT
SELECT student_id, bio_data, event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id;
SELECT student_id, bio_data, event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id;
SELECT student_id, rf_event_types.event_type_description FROM (SELECT student_events.event_type_code, COUNT(*) AS event_count, student_events.student_id FROM student_events GROUP BY student_events.event_type_code, student_events.student_id ORDER BY event_count DESC LIMIT 1) AS subquery JOIN rf_event_types ON subquery.event_type_code = rf_event_types.event_type_code;
SELECT student_id, event_type_code, event_type_description FROM student_events se JOIN ref_event_types re ON se.event_type_code = re.event_type_code GROUP BY student_id, event_type_code, event_type_description ORDER BY COUNT(students_id) DESC LIMIT 1;
SELECT achievement_id, achievement_details, ref_achievement_type.achievement_type_description FROM achievements JOIN ref_achievement_type ON achievements.achievement_type_code = ref_achievement_type.achievement_type_code;
SELECT achievement_id, achievement_details, ref_achievement_type.achievement_type_description FROM achievements JOIN ref_achievement_type ON achievements.achievement_type_code = ref_achievement_type.achievement_type_code;
SELECT Detention.student_id, COUNT(DISTINCT Detection.teacher_id) AS number_of_teachers FROM Detection JOIN Achievements ON Detection.student_id = Achievements.student_id GROUP BY Detection.student_id HAVING COUNT(DISTINCT Achievements.achievement_id) = 0;
SELECT Detention.student_id, COUNT(DISTINCT Teachers.teacher_id) AS num_teachers FROM Detection JOIN Students ON Detection.student_id = Students.student_id JOIN Classes ON Students.student_id = Classes.student_id JOIN Teachers ON Classes.teacher_id = Teachers.teacher_id WHERE NOT EXISTS (SELECT 1 FROM Achievements WHERE Achievements.student_id = Students.student_id) GROUP BY Detection.student_id;
SELECT student_id, date_of_transcript, transcript_details FROM transcripts;
SELECT student_id, date_of_transcript, transcript_details FROM transcripts;
SELECT achievement_type_code, achievement_details, date_achievement FROM achievements;
SELECT achievement_type_code, achievement_details, date_achievement FROM achievements;
SELECT date_achievement, detention_summary, other_details FROM achievements a JOIN detention d ON a.student_id = d.student_id WHERE event_type_code = 'D' ORDER BY date_achievement NULLS LAST;
SELECT date_achievement, detention_summary, other_details, date_trunc('day', d.datetime_detention_start) AS start_date, date_trunc('day', d.datetime_detention_end) AS end_date FROM achievements a JOIN detention d ON a.student_id = d.student_id;
SELECT student_id, bio_data FROM Students WHERE student_details ilike '%Suite%';
SELECT student_id, bio_data FROM Students WHERE student_details ilike '%Suite%';
SELECT student_id, t.teacher_details FROM Students AS s JOIN Classes AS c ON s.student_id = c.student_id JOIN Teachers AS t ON c.teacher_id = t.teacher_id;
SELECT student_id, t.teacher_details FROM Students AS s JOIN Classes AS c ON s.student_id = c.student_id JOIN Teachers AS t ON c.teacher_id = t.teacher_id;
SELECT Teachers.student_id, COUNT(Classes.class_id) AS number_of_classes FROM Teachers JOIN Classes ON Teachers.teacher_id = Classes.teacher_id GROUP BY Teachers.teacher_id ORDER BY number_of_classes DESC LIMIT 1;
SELECT Teachers.date_achievement, COUNT(*) AS num_classes FROM Classes JOIN Teachers ON Classes.teacher_id = Teachers.teacher_id GROUP BY Teachers.teacher_id ORDER BY num_classes DESC LIMIT 1;
SELECT student_id, COUNT(class_id) AS total_classes FROM classes GROUP BY student_id ORDER BY total_classes DESC LIMIT 1;
SELECT student_id, COUNT(class_id) AS num_classes FROM classes GROUP BY sutdent_id ORDER BY num_classes DESC LIMIT 1; -- LIMIT 1 to return only one row.
SELECT student_id, s.student_details FROM Students s JOIN (SELECT t.student_id FROM Transcripts t GROUP BY t.student_id HAVING COUNT(t.transcript_id) >= 2) AS m ON s.student_id = m.student_id;
SELECT student_id, COUNT(*) AS num_courses FROM class GROUP BY sutdent_id HAVING COUNT(DISTINCT class_id) >= 2;
SELECT date_achievement, r.event_type_description FROM (SELECT a.achievement_type_code, COUNT(*) AS dte_aacvhievement FROM Achievements a GROUP BY a.achievement_type_code) AS a JOIN Ref_Achievement_Type r ON a.achievement_type_code = r.achievement_type_code ORDER BY dte_aacvhievement ASC LIMIT 1;
SELECT date_achievement, r.event_type_description FROM (SELECT dt.detention_type_code, COUNT(*) AS cnt FROM Detention dt GROUP BY dt.detention_type_code) AS dta JOIN Ref_Event_Types r ON dta.dte_achievement = r.event_type_code ORDER BY cnt ASC LIMIT 1;
SELECT student_id, bio_data, student_details, date_of_loan, amount_of_loan FROM Students JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans);
SELECT student_id, bio_data, student_details, amount_of_loan FROM Students JOIN Student_Loans ON Students.student_id = Student_Loans.student_id WHERE amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans);
SELECT student_id, MIN(date_of_loan) AS min_date_of_loan FROM student_loans GROUP BY sutdent_id; SELECT * FROM student_loans WHERE sutdent_id = 757071 AND date_of_loan = (SELECT min_date_of_loan FROM (SELECT sutdent_id, MIN(date_of_loan) AS min_date_of_loan FROM student_loans GROUP BY sutdent_id) AS subquery); SELECT * FROM student_loans WHERE sutdent_id = 757071 AND date_of_loan = (SELECT MIN(date_of_loan) FROM student_loans); SELECT * FROM student_loans WHERE sutdent_id = 757071 AND date_of_loan =
SELECT student_id, MIN(date_of_loan) AS min_date_of_loan FROM student_loans GROUP BY sutdent_id; SELECT * FROM student_loans WHERE sutdent_id = 757071 AND date_of_loan = (SELECT min_date_of_loan FROM (SELECT sutdent_id, MIN(date_of_loan) AS min_date_of_loan FROM student_loans GROUP BY sutdent_id) AS subquery); SELECT * FROM student_loans WHERE sutdent_id = 757071 AND date_of_loan = '2020-01-01'; SELECT * FROM student_loans WHERE sutdent_id = 757071 ORDER BY date_of_loan ASC LIMIT 1; SELECT
SELECT student_id, bio_data FROM Students JOIN Student_Loans ON Students.student_id = Student_Loans.student_id ORDER BY amount_of_loan ASC LIMIT 1;
SELECT student_id, bio_data, student_details FROM students WHERE student_id = (SELECT MIN(student_id) FROM student_loans);
SELECT student_id, date_of_transcript FROM transcripts t JOIN students s ON t.stuudent_id = s.student_id WHERE amount_of_loan = (SELECT MAX(amount_of_loan) FROM student_loans);
SELECT student_id, date_of_transcript FROM transcripts t JOIN students s ON t.stuudent_id = s.student_id WHERE amount_of_loan = (SELECT MAX(amount_of_loan) FROM student_loans);
SELECT student_id, t.teacher_details FROM (SELECT c.student_id, MIN(c.date_of_transcript) AS min_date FROM classes c JOIN transcripts t ON c.student_id = t.student_id GROUP BY c.student_id) AS students_with_earliest_transcript JOIN teachers t ON students_with_earliest_transcript.student_id = t.teacher_id;
SELECT student_id, t.teacher_details FROM Students s JOIN Transcripts tt ON s.student_id = tt.student_id JOIN Classes c ON c.class_id = tt.transcript_id JOIN Teachers t ON t.teacher_id = c.teacher_id ORDER BY tt.date_of_transcript ASC LIMIT 1;
SELECT student_id, SUM(amount_of_loan) AS total_amount FROM Student_Loans GROUP BY student_id ORDER BY total_amount DESC NULLS LAST;
SELECT student_id, SUM(amount_of_loan) AS total_amount_of_loan FROM Student_Loans GROUP BY student_id ORDER BY total_amount_of_loan DESC NULLS LAST;
SELECT student_id, bio_data, COUNT(DISTINCT class_id) AS number_of_classes FROM students JOIN classes ON students.student_id = classes.student_id GROUP BY student_id, bio_data;
SELECT student_id, bio_data, COUNT(DISTINCT class_id) AS num_classes FROM students JOIN classes ON students.student_id = classes.student_id GROUP BY student_id, bio_data;
SELECT date_achievement, COUNT(*) AS number_of_students FROM Achievements WHERE achievement_type_code = 'DETENTION' GROUP BY dte_achievement ORDER BY dte_achievement NULLS LAST;
SELECT date_achievement, COUNT(*) AS number_of_students FROM Achievements a JOIN Detention d ON a.student_id = d.student_id GROUP BY d.student_id; SELECT COUNT(*) AS total_students FROM Students s; SELECT total_students - number_of_students AS students_without_detention FROM (SELECT COUNT(*) AS number_of_students FROM Achievements a JOIN Detention d ON a.student_id = d.student_id) AS subquery; SELECT (total_students - number_of_students) / NULLIF(number_of_students, 0) AS proportion_of_students_without_detention FROM (SELECT COUNT(*) AS number_of_students FROM Achievements a JOIN Detention d ON a.student_id = d.student_id) AS subquery; SELECT CAST
SELECT student_id, r.address_type_code, r.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Ref_Address_Types r ON sa.address_type_code = r.address_type_code GROUP BY s.student_id, r.address_type_code, r.address_type_description ORDER BY COUNT(sa.address_id) DESC LIMIT 1;
SELECT student_id, r.address_type_code, r.address_type_description FROM Students s JOIN Students_Addresses sa ON s.student_id = sa.student_id JOIN Ref_Address_Types r ON sa.address_type_code = r.address_type_code GROUP BY s.student_id, r.address_type_code, r.address_type_description ORDER BY COUNT(sa.address_id) DESC LIMIT 1;
SELECT student_id, bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Loans);
SELECT student_id, bio_data FROM Students WHERE s.student_id NOT IN (SELECT student_id FROM Student_Loans); SELECT s.bio_data FROM Students s JOIN Student_Events se ON s.student_id = se.student_id WHERE se.event_type_code IS NOT NULL; SELECT s.bio_data FROM Students s LEFT JOIN Student_Events se ON s.student_id = se.student_id AND se.event_type_code IS NOT NULL; SELECT s.bio_data FROM Students s LEFT JOIN Student_Loans sl ON s.student_id = sl.student_id WHERE sl.student_loan_id IS NULL; SELECT s.bio_data FROM Students s INNER JOIN Student_Events se ON s.student_id = se.student_id AND se.event_type_code IS NOT NULL; SELECT s.bio_data FROM
SELECT student_id, date_from, date_to FROM Students_Addresses WHERE address_type_code = 'Permanent' AND student_id IN (SELECT t.student_id FROM Transcripts t GROUP BY t.student_id HAVING COUNT(t.transcript_id) >= 2); SELECT s.student_id, MIN(a.date_from) AS min_date_from, MAX(a.date_to) AS max_date_to FROM Students s JOIN Students_Addresses a ON s.student_id = a.student_id WHERE a.address_type_code = 'Permanent' GROUP BY s.student_id; SELECT s.student_id, a.date_from, a.date_to FROM Students s JOIN Students_Addresses a ON s.student_id = a.student_id WHERE a.address
SELECT student_id, date_from, date_to FROM Students_Addresses sa JOIN Transcripts t ON sa.student_id = t.student_id WHERE EXISTS (SELECT 1 FROM Transcripts t2 WHERE t2.student_id = sa.student_id AND t2.transcript_id != t.transcript_id) GROUP BY s.student_id, date_from, date_to HAVING COUNT(DISTINCT t.transcript_id) >= 2;
SELECT date_achievement FROM Achievements WHERE acheivement_type_code = 'DETENTION' ORDER BY date_achievement ASC LIMIT 1; ORDER BY date_achievement;
SELECT date_achievement FROM Achievements WHERE achi_type_code = 'DETENTION'; ORDER BY date_achievement;
SELECT amount FROM Author_Book;
SELECT amount FROM Author_Book;
SELECT Client.IdOrder, ClienT.Name, ClienT.Address FROM ClienT;
SELECT Client.IdOrder, Client.Name, Client.Address FROM Client;
SELECT Book.ISBN, Bok.Title, Bok.SalePrice FROM Book;
SELECT Book.ISBN, Book.Title, Book.SalePrice FROM Book;
SELECT Book.ISBN, COUNT(*) AS number_of_books FROM Book GROUP BY Bok.ISBN;
SELECT Book.ISBN, COUNT(*) AS book_count FROM Book GROUP BY BOK.ISBN;
SELECT amount FROM Author;
SELECT amount FROM Author;
SELECT Client.IdOrder, COUNT(DISTINCT Client.IdClient) AS number_of_clients FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdOdr;
SELECT Client.IdOrder FROM Client;
SELECT Client.IdOrder, Client.Name, Client.Address FROM Client ORDER BY Client.Name ASC;
SELECT Client.IdOrder, Client.Name, Client.Address FROM Client ORDER BY Client.Name ASC;
SELECT Book.ISBN, Book.Title, Author.Name FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor;
SELECT Book.ISBN, Book.Title, Author.Name FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor;
SELECT Orders.IdOrder, Client.Name FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient;
SELECT Orders.IdOrder, Client.Name FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient;
SELECT amount, name FROM (SELECT ab.author, COUNT(*) AS amount FROM book b JOIN author_book ab ON b.isbn = ab.isbn GROUP BY ab.author) AS subquery JOIN author a ON subquery.author = a.idauthor;
SELECT amount FROM Author_Book;
SELECT Book.ISBN, COUNT(Books_Order.idOrder) AS number_of_orders FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN ORDER BY number_of_orders DESC NULLS LAST;
SELECT Book.ISBN, COUNT(Books_Order.idOrder) AS number_of_orders FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN ORDER BY number_of_orders DESC NULLS LAST;
SELECT Book.ISBN, SUM(Books_Order.amount) AS total_amount FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN ORDER BY total_amount DESC NULLS LAST;
SELECT Book.ISBN, SUM(Books_Order.amount) AS total_amount FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN ORDER BY total_amount DESC NULLS LAST;
SELECT Book.ISBN, Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN GROUP BY Book.ISBN, Book.Title ORDER BY COUNT(Books_Order.idOrder) DESC LIMIT 1;
SELECT Book.ISBN, Book.Title, COUNT(*) AS total_orders FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN GROUP BY Bok.ISBN, Bok.Title ORDER BY total_orders DESC LIMIT 1;
SELECT Book.ISBN, Book.Title, Book.PurchasePrice FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN ORDER BY Books_Order.amount DESC LIMIT 1;
SELECT Book.ISBN, Book.Title, SUM(Books_Order.amount) AS total_order_amount, Book.PurchasePrice FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN GROUP BY Book.ISBN, Book.Title, Book.PurchasePrice ORDER BY total_order_amount DESC LIMIT 1;
SELECT Book.ISBN, Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN ORDER BY Book.Title NULLS LAST;
SELECT Books_Order.ISBN, Book.Title FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Books_Order.idOrder IN (SELECT idOrder FROM Orders WHERE dateorder < CURRENT_DATE - interval '1 year') ORDER BY Title NULLS LAST;
SELECT Client.IdOrder, Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient, Client.Name;
SELECT Client.IdOrder, Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient;
SELECT Client.IdOrder, COUNT(*) AS total_orders FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient ORDER BY total_orders DESC NULLS LAST;
SELECT Client.IdOrder, Client.Name, COUNT(*) AS number_of_orders FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient GROUP BY Client.IdClient, Client.Name ORDER BY number_of_orders DESC NULLS LAST;
SELECT Client.IdOrder, Client.Name FROM Client JOIN (SELECT Orders.IdClient, COUNT(*) AS num_orders FROM Orders GROUP BY Orders.IdClient ORDER BY num_orders DESC LIMIT 1) AS subquery ON Client.IdClient = subquery.IdClient;
SELECT Client.IdOrder, Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient ORDER BY COUNT(Orders.IdOrder) DESC LIMIT 1;
SELECT Client.IdOrder, Client.Name, SUM(Books_Order.amount) AS total_amount FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.idOrder GROUP BY Client.IdClient, Client.Name;
SELECT Client.IdOrder, Client.Name, SUM(Books_Order.amount) AS total_books FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.idOrder GROUP BY Client.IdClient, Client.Name;
SELECT Client.IdOrder, Client.Name, SUM(Books_Order.amount) AS total_amount FROM Client JOIN Books_Order ON Client.IdClient = Books_Order.IdOrder GROUP BY Client.IdClient, Client.Name ORDER BY total_amount DESC LIMIT 1;
SELECT Client.IdOrder, Client.Name, SUM(Books_Order.amount) AS total_amount FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient JOIN Books_Order ON Orders.IdOrder = Books_Order.idOrder GROUP BY Client.IdClient, Client.Name ORDER BY total_amount DESC LIMIT 1;
SELECT Book.ISBN, Book.Title FROM Book LEFT JOIN Books_Order ON Book.ISBN = Books_Order.ISBN WHERE Books_Order.ISBN IS NULL;
SELECT Book.ISBN, Book.Title FROM Book WHERE Book.ISBN NOT IN (SELECT Books_Order.ISBN FROM Books_Order) ORDER BY Book.Title NULLS LAST;
SELECT Client.IdOrder, Client.Name FROM Client LEFT JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.IdClient IS NULL;
SELECT Client.IdOrder, ClienT.Name FROM Client WHERE Client.IdClient NOT IN (SELECT Orders.IdClient FROM Orders);
SELECT Book.ISBN, MIN(Book.SalePrice) AS min_sale_price, MAX(Book.SalePrice) AS max_sale_price FROM Book GROUP BY Book.ISBN;
SELECT Book.ISBN, MIN(Book.SalePrice) AS min_sale_price, MAX(Book.SalePrice) AS max_sale_price FROM Book GROUP BY Bok.ISBN;
SELECT Book.ISBN, AVG(Book.PurchasePrice) AS Average_Purchase_Price, AVG(Book.SalePrice) AS Average_Sale_Price FROM Book GROUP BY Book.ISBN;
SELECT Book.ISBN, AVG(Book.PurchasePrice) AS Average_Purchase_Price, AVG(Book.SalePrice) AS Average_Sale_Price FROM Book GROUP BY Book.ISBN;
SELECT Book.ISBN, MAX(Book.SalePrice - Book.PurchasePrice) AS max_difference FROM Book GROUP BY Bok.ISBN ORDER BY max_difference DESC NULLS LAST;
SELECT Author_Book.ISBN, MAX(Book.SalePrice - Book.PurchasePrice) AS max_difference FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN GROUP BY Author_Book.ISBN ORDER BY max_difference DESC NULLS LAST LIMIT 1;
SELECT Book.ISBN, Bok.Title FROM Book WHERE Book.SalePrice > (SELECT AVG(Book.SalePrice) FROM Book);
SELECT Book.ISBN, Book.Title FROM Book WHERE Book.SalePrice > (SELECT AVG(Book.SalePrice) FROM Book);
SELECT Book.ISBN, Book.Title FROM Book ORDER BY Book.SalePrice ASC LIMIT 1;
SELECT Book.ISBN, Book.Title FROM Book WHERE Book.SalePrice = (SELECT MIN(SalePrice) FROM Book);
SELECT Book.ISBN, Book.Title FROM Book ORDER BY Book.PurchasePrice DESC NULLS LAST;
SELECT Book.ISBN, Book.Title FROM Book ORDER BY Book.PurchasePrice DESC NULLS LAST LIMIT 1;
SELECT Author_Book.ISBN, AVG(Book.SalePrice) AS average_sale_price FROM Author_Book JOIN Book ON Author_Book.ISBN = Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell' GROUP BY Author_Book.ISBN;
SELECT Author.amount, AVG(Book.saleprice) AS average_sale_price FROM Author JOIN Author_Book ON Author.idAuthor = Author_Book.author JOIN Book ON Author_Book.isbn = Book.isbn GROUP BY Author.aamount;
SELECT Book.ISBN, Book.SalePrice FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato';
SELECT Book.ISBN, Book.SalePrice FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato';
SELECT Book.ISBN, Book.Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell' ORDER BY Book.SalePrice ASC LIMIT 1;
SELECT Book.ISBN, Book.Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'George Orwell' ORDER BY Book.SalePrice ASC LIMIT 1;
SELECT Book.ISBN, Book.Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato' AND Book.SalePrice < (SELECT AVG(SalePrice) FROM Book);
SELECT Book.ISBN, Book.Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name = 'Plato' AND Book.SalePrice < (SELECT AVG(Book.SalePrice) FROM Book);
SELECT amount FROM Author_Book WHERE ISBN = '978-0-345-40950-6' AND Author = 1; SELECT name FROM Author WHERE idAuthor = 1; -- Jane Austen.
SELECT amount FROM Author_Book WHERE ISBN = '978-0-345-40878-1' AND Author = 1; SELECT a.name FROM Author a JOIN Author_Book ab ON a.idAuthorA = ab.Author WHERE ab.ISBN = '978-0-345-40878-1'; SELECT a.name FROM Author a JOIN Author_Book ab ON a.idAuthorA = ab.Author WHERE ab.ISBN = '978-0-345-40878-1'; SELECT a.name FROM Author a JOIN Author_Book ab ON a.idAuthorA = ab.Author WHERE ab.ISBN = '978-0-345-40878-1'; SELECT a.name FROM Author a JOIN Author_Book ab ON a.idAuthorA = ab.Author WHERE ab.
SELECT Book.ISBN, Book.Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name ilike '%Plato%' ORDER BY Book.Title NULLS LAST;
SELECT Book.ISBN, Book.Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Author ON Author_Book.Author = Author.idAuthor WHERE Author.Name ilike '%Plato%' ORDER BY Book.Title NULLS LAST;
SELECT Orders.IdOrder FROM Orders WHERE Books_Order.ISBN = '978-0-553-19325-3' ORDER BY Order.IdOrder NULLS LAST; ORDER BY Orders.IdOrder;
SELECT Orders.IdOrder FROM Orders WHERE Orders.IdClient IN (SELECT Client.IdClient FROM Client JOIN Books_Order ON Client.IdClient = Books_Order.IdOrder WHERE Books_Order.ISBN = '9780140449695') ORDER BY Orders.IdOrder NULLS LAST; COUNT(*) AS total_orders; SELECT total_orders;
SELECT Orders.IdOrder FROM Orders WHERE EXISTS (SELECT 1 FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Books_Order.IdOrder = Orders.IdOrder AND Book.Title IN ('Pride and Prejudice', 'The Little Prince')); ORDER BY Orders.IdOrder;
SELECT Orders.IdOrder FROM Orders WHERE Orders.IdOrder IN (SELECT Books_Order.idOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.title ilike '%Pride%and%Prejudice%' OR Book.title ilike '%The%Little%Prince%') GROUP BY Orders.IdOrder HAVING COUNT(DISTINCT Books_Order.ISBN) >= 2; ORDER BY Orders.IdOrder;
SELECT Books_Order.ISBN FROM Books_Order WHERE Books_Order.IdOrder IN (SELECT Order.IdOrder FROM Order WHERE Order.IdClient IN ('Peter Doe', 'James Smith')) GROUP BY Books_Order.ISBN HAVING COUNT(DISTINCT Order.IdClient) = 2;
SELECT Books_Order.ISBN FROM Books_Order WHERE Books_Order.IdOrder IN (SELECT Orders.IdOrder FROM Orders JOIN Client ON Orders.IdClient = Client.IdClient WHERE Client.Name ilike '%Peter%Doe%' AND Client.Name ilike '%James%Smith%') ORDER BY Books_Order.ISBN NULLS LAST;
SELECT Book.ISBN, Book.Title FROM Book JOIN Books_Order ON Book.ISBN = Books_Order.ISBN JOIN Orders ON Books_Order.idOrder = Orders.IdOrder WHERE Orders.IdClient = (SELECT IdClient FROM Client WHERE Name = 'Peter Doe') AND Orders.IdClient != (SELECT IdClient FROM Client WHERE Name = 'James Smith');
SELECT Book.ISBN, Book.Title FROM Book JOIN Author_Book ON Book.ISBN = Author_Book.ISBN JOIN Orders ON Orders.IdClient = 'Peter Doe' AND Orders.DateExped >= CURRENT_DATE - interval '1 year' LEFT JOIN Books_Order ON Books_Order.ISBN = Book.ISBN AND Books_Order.idOrder = Orders.IdOrder WHERE Author_Book.Author != (SELECT idAuthor FROM Author WHERE Name = 'James Smith') GROUP BY Book.ISBN, Book.Title;
SELECT Client.IdOrder, Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.DateOrder IN (SELECT ISBN FROM Books_Order WHERE ISBN = '978-0-553-19405-7'); SELECT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.DateOrder IN (SELECT ISBN FROM Books_Order WHERE ISBN = '978-0-553-19405-7'); SELECT Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.DateOrder IN (SELECT ISBN FROM Books_Order WHERE ISBN = '978-0-553-19405-7') AND Client.Name ilike '%Pride%and%Prejudice%' ORDER BY Client.Name NULLS LAST; SELECT
SELECT Client.IdOrder, Client.Name FROM Client JOIN Orders ON Client.IdClient = Orders.IdClient WHERE Orders.IdOrder IN (SELECT Books_Order.idOrder FROM Books_Order JOIN Book ON Books_Order.ISBN = Book.ISBN WHERE Book.Title ilike '%Pride%and%Prejudice%');
SELECT book.Book_ID FROM book;
SELECT book.Book_ID, b.title FROM book b ORDER BY b.title ASC;
SELECT book.Book_ID, book.Title FROM book ORDER BY book.Pages DESC;
SELECT book.Book_ID, book.Type, book.Release FROM book ORDER BY book.Book_ID NULLS LAST;
SELECT book.Book_ID, MAX(book.Chapters) AS max_chapters, MIN(book.Chapters) AS min_chapters FROM book GROUP BY bOOK.Book_ID;
SELECT book.Book_ID, book.Title FROM book WHERE book.Type != 'Poet';
SELECT review.Rating FROM review;
SELECT book.Book_ID, book.Title, review.Rating FROM book JOIN review ON book.Book_ID = review.Book_ID;
SELECT book.Book_ID, b.title, r.rating FROM book AS bk JOIN book AS b ON bk.Book_ID = b.Book_ID JOIN review AS r ON bk.Book_ID = r.Book_ID ORDER BY b.chapters DESC LIMIT 1;
SELECT book.Book_ID, b.title, b.pages, rank() OVER (ORDER BY b.pages ASC) AS rank FROM book b ORDER BY rank NULLS LAST;
SELECT book.Book_ID, book.Title FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rank DESC LIMIT 1;
SELECT book.Book_ID, AVG(review.Readers_in_Million) AS Average_Readers FROM book JOIN review ON book.Book_ID = review.Book_ID WHERE book.Type = 'Novel' GROUP BY book.Book_ID ORDER BY Average_Readers DESC NULLS LAST;
SELECT book.Book_ID, b.type, COUNT(b.type) AS number_of_books FROM book b GROUP BY b.type ORDER BY number_of_books DESC NULLS LAST;
SELECT book.Book_ID, book.Type FROM book bk GROUP BY bk.Book_ID, bk.Type ORDER BY COUNT(bk.Type) DESC LIMIT 1;
SELECT book.Book_ID, b.type FROM book b JOIN review r ON b.book_id = r.book_id GROUP BY b.type HAVING COUNT(b.book_id) >= 3;
SELECT book.Book_ID, book.Title FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Rating ASC;
SELECT book.Book_ID, book.Title, book.Audio FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY review.Readers_in_Million DESC;
SELECT book.Book_ID FROM book WHERE book.Book_ID NOT IN (SELECT review.Book_ID FROM review); ORDER BY book.Book_ID;
SELECT book.Book_ID, book.Title, book.Type FROM book WHERE book.Chapters > 75 AND book.Chapters < 50;
SELECT book.Book_ID, book.Type FROM book bk GROUP BY bk.Book_ID, bk.Type ORDER BY COUNT(bk.Type) DESC NULLS LAST;
SELECT book.Book_ID, book.Title, book.Type FROM book LEFT JOIN review ON book.Book_ID = review.Book_ID WHERE review.Rating IS NULL;
SELECT customer.Customer_ID FROM customer;
SELECT customer.Customer_ID FROM customer;
SELECT customer.Customer_ID, customer.name FROM customer ORDER BY customer.level_of_membership ASC;
SELECT customer.Customer_ID, cusomter.Name FROM customer ORDER BY customer.Level_of_Membership ASC;
SELECT customer.Customer_ID, customer.Nationality, customer.Card_Credit FROM customer;
SELECT customer.Customer_ID, customer.Nationality, customer.Card_Credit FROM customer;
SELECT customer.Customer_ID, customeR.name FROM customer customeR WHERE customeR.nationality ilike '%England%' OR customeR.nationality ilike '%Australia%';
SELECT customer.Customer_ID, customeR.name FROM customer customeR WHERE customeR.nationality ilike '%England%' OR customeR.nationality ilike '%Australia%';
SELECT customer.Customer_ID, AVG(customer.Card_Credit) AS Average_Card_Credit FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID WHERE customer.Level_of_Membership > 1 GROUP BY customer.Customer_ID;
SELECT customer.Customer_ID, AVG(cusomter.Card_Credit) AS Average_Card_Credit FROM customer WHERE customer.Level_of_Membership > 1 GROUP BY customer.Customer_ID;
SELECT customer.Customer_ID, cusomer.Name, cusomer.Card_Credit, cusomer.Level_of_Membership FROM customer cusomer WHERE cusomer.Level_of_Membership = (SELECT MAX(cusomer.Level_of_Membership) FROM customer);
SELECT customer.Customer_ID, cusomer.Card_Credit FROM customer ORDER BY customer.Level_of_Membership DESC LIMIT 1;
SELECT customer.Customer_ID, cusotmer.Nationality FROM customer GROUP BY cusotmer.Nationality ORDER BY COUNT(cusotmer.Nationality) DESC NULLS LAST;
SELECT customer.Customer_ID, cusotmer.Nationality, COUNT(cusotmer.Custome_ID) AS number_of_customers FROM cusotmer GROUP BY cusotmer.Nationality ORDER BY number_of_customers DESC NULLS LAST;
SELECT customer.Customer_ID, cusotmer.Nationality FROM customer GROUP BY cusotmer.Nationality ORDER BY COUNT(cusotmer.Nationality) DESC LIMIT 1;
SELECT customer.Customer_ID, cusotmer.Nationality FROM customer ORDER BY COUNT(cusotmer.Nationality) DESC LIMIT 1;
SELECT customer.Customer_ID, customer.name, customer.nationality FROM customer WHERE customer.card_credit < 50 AND customer.card_credit > 75; SELECT DISTINCT customer.nationality FROM customer WHERE customer.card_credit < 50 AND customer.card_credit > 75; SELECT COUNT(DISTINCT customer.nationality) FROM customer WHERE customer.card_credit < 50 AND customer.card_credit > 75; NULL; TRUE; FALSE; 1234567890; -1234567890; 1234567890.1234567890; -1234567890.1234567890; 'string'; 'string'
SELECT customer.Customer_ID, customer.name, customer.nationality, customer.card_credit FROM customer WHERE customer.card_credit > 50 AND customer.nationality IN (SELECT nationality FROM customer WHERE card_credit < 75); SELECT DISTINCT customer.nationality FROM customer WHERE customer.card_credit > 50 AND customer.nationality IN (SELECT nationality FROM customer WHERE card_credit < 75); NULL; TRUE; FALSE; 1234567890; -1234567890; 1234567890.1234567890; -1234567890.1234567890; 'string'; 'string' || 'string'; 'string' =
SELECT customer.Customer_ID, customer.name, customer_order.dish_name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.customer_id;
SELECT customer.Customer_ID, custoomer.name, customer_order.dish_name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.customer_id;
SELECT customer.Customer_ID, customer.name, customer_order.dish_name, customer_order.quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.customer_id ORDER BY customer_order.quantity DESC;
SELECT customer.Customer_ID, custoomer.name, customer_order.dish_name, customer_order.quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.customer_id ORDER BY customer_order.quantity DESC;
SELECT customer.Customer_ID, custoomer.name, SUM(customer_order.quantity) AS total_quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY custoomer.Customer_ID, custoomer.name ORDER BY total_quantity DESC NULLS LAST;
SELECT customer.Customer_ID, custoomer.name, SUM(customer_order.quantity) AS total_quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY custoomer.Customer_ID, custoomer.name ORDER BY total_quantity DESC NULLS LAST;
SELECT customer.Customer_ID, custoomer.name, SUM(customer_order.quantity) AS total_quantity FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY custoomer.Customer_ID, custoomer.name HAVING SUM(customer_order.quantity) > 1 ORDER BY total_quantity DESC NULLS LAST;
SELECT customer.Customer_ID, custoomer.Name FROM customer JOIN customer_order ON customer.Customer_ID = customer_order.Customer_ID GROUP BY custoomer.Customer_ID, custoomer.Name HAVING SUM(customer_order.Quantity) > 1;
SELECT Dish_Name FROM customer_order;
SELECT Dish_Name FROM customer_order;
SELECT customer.Customer_ID, customer.name FROM customer LEFT JOIN customer_order ON customer.customer_id = customer_order.customer_id WHERE customer_order.customer_id IS NULL;
SELECT customer.Customer_ID, cusotmer.Name FROM cusotmer LEFT JOIN customer_order ON cusotmer.Customer_ID = customer_order.Customer_ID WHERE customer_order.Customer_ID IS NULL;
SELECT member.Member_ID FROM member;
SELECT member.Member_ID, membeR.name FROM member ORDER BY member.age ASC;
SELECT member.Member_ID, membeR.name, membeR.nationality FROM member membeR; SELECT club_leader.member_id, member.name, member.nationality FROM member JOIN club_leader ON member.member_id = club_leader.member_id; SELECT * FROM member; SELECT * FROM club_leader; SELECT * FROM club; SELECT * FROM team; SELECT * FROM year_join; SELECT * FROM overall_ranking; SELECT * FROM team_leader; SELECT * FROM club_team; SELECT * FROM club_year_join; SELECT * FROM team_year_join; SELECT * FROM team_overall_ranking; SELECT * FROM team_team_leader; SELECT * FROM team_year_join; SELECT * FROM team_overall_ranking; SELECT * FROM team_team_leader; SELECT * FROM team_year_
SELECT member.Member_ID, membeR.name FROM member WHERE membeR.nationality not ilike '%England%' ORDER BY membeR.name NULLS LAST;
SELECT member.Member_ID, membeR.name FROM member WHERE member.age IN (19, 20);
SELECT member.Member_ID, membeR.name FROM member JOIN club_leader ON member.member_id = club_leader.member_id ORDER BY member.age ASC LIMIT 1;
SELECT member.Member_ID, member.name, member.nationality, COUNT(member.nationality) AS nationality_count FROM member GROUP BY member.nationality ORDER BY nationality_count DESC NULLS LAST;
SELECT member.Club_ID, membeer.Nationality FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID GROUP BY member.Club_ID, member.Nationality ORDER BY COUNT(member.Nationality) DESC LIMIT 1;
SELECT member.Club_ID, COUNT(membeR.Member_ID) AS member_count FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID GROUP BY member.Club_ID HAVING COUNT(member.Member_ID) >= 2 ORDER BY member_count DESC NULLS LAST;
SELECT member.Member_ID, member.name, club.club_name FROM member JOIN club_leader ON member.member_id = club_leader.member_id JOIN club ON club_leader.club_id = club.club_id;
SELECT member.Member_ID, member.name FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID JOIN club ON club_leader.Club_ID = club.Club_ID WHERE club.overall_ranking > 100;
SELECT member.Member_ID, memeber.name FROM member JOIN club_leader ON member.Member_ID = club_leader.Member_ID WHERE club_leader.year_join < '2018' ORDER BY member.name NULLS LAST;
SELECT club.Club_ID, member.name FROM club JOIN club_leader ON club.club_id = club_leader.club_id JOIN member ON club_leader.member_id = member.member_id WHERE club.club_name ilike '%Houston%' ORDER BY member.name NULLS LAST;
SELECT member.Member_ID, membeR.name FROM member LEFT JOIN club_leader ON member.Member_ID = club_leader.Member_ID WHERE club_leader.Member_ID IS NULL;
SELECT member.Club_ID, membeR.Nationality FROM member WHERE age > 22 AND age < 19 GROUP BY membeR.Nationality HAVING COUNT(membE.Club_ID) >= 2;
SELECT club_leader.Member_ID, AVG(member.age) AS average_age FROM club_leader JOIN member ON club_leader.Member_ID = member.member_id GROUP BY club_leader.Member_ID;
SELECT club.Club_ID, club.Club_Name FROM club WHERE club.Club_Name ilike '%state%' ORDER BY club.Club_Name NULLS LAST;
SELECT Document_Subsets.Collection_Subset_ID, Document_Subsets.Document_Subset_Name FROM Document_Subsets JOIN Collection_Subsets ON Document_Subsets.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID; SELECT Collection_Subsets.Collection_Subset_Name FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID; SELECT Document_Subsets.Document_Subset_Name FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID; SELECT Collection_Subsets.Collection_Subset_Name FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.
SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name FROM Collection_Subsets;
SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collecction_Subset_Name, Collection_Subsets.Collecction_Subset_Details FROM Collection_Subsets WHERE Collection_Subsets.Collecction_Subset_Name ilike '%Top%collection%' LIMIT 1;
SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collecction_Subset_Name, Collection_Subsets.Collecction_Subset_Details FROM Collection_Subsets JOIN Document_Subset_Members ON Collection_Subsets.Collecction_Subset_ID = Document_Subset_Members.Document_Subset_ID WHERE Document_Subset_Members.Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Top collection');
SELECT Document_Subsets.Collection_Subset_ID, Document_Subsets.Collection_Subset_Name FROM Document_Subsets; SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name FROM Collection_Subsets; SELECT Document_Subset_Members.Document_Object_ID, Document_Subset_Members.Related_Document_Object_ID, Document_Subset_Members.Document_Subset_ID, Document_Subsets.Collection_Subset_Name AS Subset_Name FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Collection_Subset_ID; SELECT Collection_Subset_Members.Collection_ID, Collection_Subset_Members.Related_Collection_ID, Collection_Subset_Members.
SELECT Document_Subset_Members.Related_Collection_ID, Document_Subsets.Document_Subset_Name FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Document_Subset_ID = Document_Subset_Members.Document_Subset_ID; SELECT Collection_Subset_Members.Related_Collection_ID, Document_Subsets.Document_Subset_Name FROM Document_Subsets JOIN Collection_Subset_Members ON Document_Subsets.Document_Subset_ID = Collection_Subset_Members.Collection_Subset_ID; SELECT Collection_Subset_Members.Related_Collection_ID, Document_Subsets.Document_Subset_Name FROM Document_Subsets JOIN Collection_Subset_Members ON Document_Subsets.Document_Subset_ID = Collection_Subset_Members.Collection_Sub
SELECT Document_Subsets.Related_Collection_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000';
SELECT Document_Subsets.Related_Collection_ID, Document_Subsets.Document_Subset_Details FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name ilike '%Best%for%2000%' ORDER BY Document_Subsets.Related_Collection_ID NULLS LAST;
SELECT Document_Objects.Collection_ID FROM Document_Objects;
SELECT Document_Objects.Collection_ID, Document_Objects.Document_Object_ID FROM Document_Objects;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Owner = 'Marlin' ORDER BY Document_Objects.Related_Collection_ID NULLS LAST;
SELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Owner ILIKE '%Marlin%' ORDER BY Document_Objects.Collection_ID NULLS LAST;
SELECT Document_Objects.Collection_ID, Document_Objects.Owner FROM Document_Objects WHERE Document_Objects.Description ilike '%Braeden%Collection%' ORDER BY Document_Objects.Collection_ID NULLS LAST;
SELECT Document_Objects.Collection_ID, Document_Objects.Owner FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID WHERE Document_Objects.Description ilike '%Braeden%Collection%' ORDER BY Document_Objects.Owner NULLS LAST;
SELECT Document_Objects.Collection_ID, Document_Objects.Parent_Document_Object_ID, Document_Objects.Owner FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID WHERE Document_Objects.Owner ilike '%Marlin%' ORDER BY Document_Objects.Collection_ID NULLS LAST;
SELECT Document_Objects.Related_Collection_ID, Document_Objects.Parent_Document_Object_ID, Document_Objects.Owner FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID WHERE Document_Objects.Owner ilike '%Marlin%' ORDER BY Document_Objects.Related_Collection_ID, Document_Objects.Parent_Document_Object_ID NULLS LAST;
SELECT Document_Objects.Collection_ID, Ddocument_objects.description FROM Ddocument_objects JOIN Documents_in_Collections ON Ddocument_objects.document_object_id = Documents_in_Collections.document_object_id WHERE Ddocument_objects.parent_document_object_id IS NULL; SELECT Ddocument_objects.collection_id, Ddocument_objects.description FROM Ddocument_objects JOIN Documents_in_Collections ON Ddocument_objects.document_object_id = Documents_in_Collections.document_object_id WHERE Ddocument_objects.parent_document_object_id IS NULL; SELECT Ddocument_objects.collection_id, Ddocument_objects.description FROM Ddocument_objects JOIN Documents_in_Collections ON Ddocument_objects.document_object_id = Documents_in_Collections.document_object_id WHERE Ddocument_objects.parent_document_object_
SELECT Document_Objects.Collection_ID, Ddocument_objects.description FROM Ddocument_objects JOIN Document_Subset_Members ON Ddocument_objects.document_object_id = Document_Subset_Members.related_document_object_id WHERE Document_Subset_Members.document_subset_id = 1; -- Assuming 1 is the ID of the subset for parents.
SELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Owner = 'Marlin' ORDER BY Collection_ID NULLS LAST;
SELECT Document_Objects.Collection_ID, COUNT(*) AS number_of_documents FROM Document_Objects WHERE Document_Objects.Owner = 'Marlin' GROUP BY Document_Objects.Collection_ID;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Parent_Document_Object_ID IS NULL;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Parent_Document_Object_ID IS NULL;
SELECT Document_Objects.Related_Collection_ID, COUNT(*) AS Child_Documents FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID GROUP BY Document_Objects.Related_Collection_ID ORDER BY Child_Documents DESC NULLS LAST;
SELECT Document_Objects.Related_Collection_ID, COUNT(Document_Objects.Document_Object_ID) AS Child_Count FROM Document_Objects GROUP BY Document_Objects.Related_Collection_ID ORDER BY Child_Count DESC NULLS LAST;
SELECT Collection_ID, Collection_Name FROM Collections;
SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members;
SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collecction_Subset_Name, Collection_Subsets.Collecction_Subset_Details FROM Collection_Subsets WHERE Collection_Subsets.Collecction_Subset_Name ilike '%Best%' ORDER BY Collection_Subsets.Collecction_Subset_Name NULLS LAST;
SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collecction_Subset_Name, Collection_Subsets.Collecction_Subset_Details FROM Collection_Subsets JOIN Collections ON Collection_Subsets.Collecction_Subset_ID = Collections.Collection_ID WHERE Collection_Subsets.Collecction_Subset_Name ilike '%Best%' ORDER BY Collection_Subsets.Collecction_Subset_Name NULLS LAST;
SELECT Collections.Collection_ID, Collections.Collection_Name FROM Collections JOIN Collection_Subsets ON Collections.Collection_ID = Collection_Subsets.Collection_Subset_ID WHERE Collection_Subsets.Collection_Subset_Name ilike '%Nice%' ORDER BY Collections.Collection_ID NULLS LAST;
SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID WHERE Collection_Subsets.Collection_Subset_Name ilike '%Nice%' ORDER BY Collection_Subsets.Collection_Subset_ID NULLS LAST;
SELECT Documents_in_Collections.Collection_ID FROM Documents_in_Collections WHERE Documents_in_Collections.Collection_ID NOT IN (SELECT Collections.Collection_ID FROM Collections JOIN Docs_in_Coll ON Collections.Collection_ID = Docs_in_Coll.Collection_ID) ORDER BY Documents_in_Collections.Collection_ID NULLS LAST; SELECT Collections.Collection_Name FROM Collections WHERE Collections.Collection_ID = 757071; SELECT Document_Subsets.Document_Subset_Name FROM Document_Subsets WHERE Document_Subsets.Document_Subset_ID = 757071; SELECT Collection_Subsets.Collection_Subset_Name FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_ID = 757071; SELECT Document_Objects.Document_Object_
SELECT Document_Subsets.Collection_Subset_ID, Document_Subsets.Collection_Subset_Name FROM Document_Subsets JOIN Collection_Subsets ON Document_Subsets.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID WHERE Document_Subsets.Collection_Subset_ID NOT IN (SELECT Parent_Collection_ID FROM Collections) ORDER BY Document_Subsets.Collection_Subset_Name NULLS LAST;
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Parent_Document_Object_ID IS NOT NULL GROUP BY Document_Objects.Related_Collection_ID HAVING COUNT(Ddocument_objects.Parent_Document_Object_ID) > 1;
SELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Objects.Parent_Document_Object_ID IS NOT NULL GROUP BY Document_Objects.Colllection_ID HAVING COUNT(DISTINCT Document_Objects.Document_Object_ID) > 1;
SELECT Collection_Subsets.Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subsets.Collecrtion_Subset_Details ilike '%Best%' AND Collection_Subsets.Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subset_Members WHERE Member_Type = 'C'); SELECT COUNT(*) AS number_of_collections FROM Collection_Subsets c WHERE c.Collecrtion_Subset_Details ilike '%Best%'; SELECT COUNT(*) AS number_of_collections FROM Collection_Subset_Members m JOIN Collection_Subsets s ON m.Member_Type = 'C' AND m.Related_Collection_ID = s.Collection_Subset_ID WHERE s.Collecrtion_Subset_Details ilike '%Best%'; SELECT COUNT(*) AS number_of_collections FROM Collection_Subsets c JOIN Collection_Subset
SELECT Collection_Subset_Members.Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_Members.Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') COUNT;
SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Related_Collection_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Ransom') ORDER BY Document_Subset_Members.Related_Collection_ID NULLS LAST;
SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Collection_ID IN (SELECT Document_Objects.Document_Object_ID FROM Document_Objects WHERE Document_Objects.Owner = 'Ransom'); SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members JOIN Document_Objects ON Document_Subset_Members.Collection_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner = 'Ransom'; SELECT DSM.Related_Collection_ID FROM DSM JOIN DO ON DSM.Collection_ID = DO.Document_Object_ID WHERE DO.Owner = 'Ransom'; SELECT DSM.Related_Collection_ID FROM DSM JOIN DO ON DSM.Collection_ID = DO.Document_Object_ID WHERE DO
SELECT Document_Subsets.Collection_Subset_ID, Document_Subsets.Collection_Subset_Name, COUNT(Collections.Collection_ID) AS Number_of_Collections FROM Document_Subsets JOIN Collection_Subsets ON Document_Subsets.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID JOIN Collections ON Collection_Subsets.Collection_Subset_ID = Collections.Collection_ID GROUP BY Document_Subsets.Collection_Subset_ID, Document_Subsets.Collection_Subset_Name ORDER BY Number_of_Collections DESC NULLS LAST;
SELECT Document_Subsets.Collection_Subset_ID, Document_Subsets.Collection_Subset_Name, COUNT(DISTINCT Collections.Collection_ID) AS num_collections FROM Document_Subsets JOIN Collection_Subsets ON Document_Subsets.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID JOIN Collections ON Collection_Subsets.Collection_Subset_ID = Collections.Collection_ID GROUP BY Document_Subsets.Collection_Subset_ID, Document_Subsets.Collection_Subset_Name ORDER BY num_collections DESC NULLS LAST;
SELECT Document_Objects.Collection_ID, COUNT(Document_Objects.Document_Object_ID) AS Child_Count FROM Document_Objects GROUP BY Document_Objects.Colllection_ID ORDER BY Child_Count DESC LIMIT 1;
SELECT Document_Objects.Collection_ID, COUNT(Document_Objects.Document_Object_ID) AS number_of_children FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID GROUP BY Document_Objects.Collection_ID;
SELECT Document_Objects.Collection_ID, COUNT(Document_Subset_Members.Related_Document_Object_ID) AS related_documents FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID GROUP BY Document_Objects.Collection_ID ORDER BY related_documents ASC LIMIT 1;
SELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Objects.Collection_ID IN (SELECT Document_Subset_Members.Related_Document_Object_ID FROM Document_Subset_Members GROUP BY Document_Subset_Members.Related_Document_Object_ID HAVING COUNT(Document_Subset_Members.Document_Subset_ID) = 0) ORDER BY Document_Objects.Collection_ID NULLS LAST LIMIT 1;
SELECT Document_Objects.Collection_ID, COUNT(Document_Subset_Members.Related_Document_Object_ID) AS related_documents FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID GROUP BY Document_Objects.Collection_ID HAVING COUNT(Document_Subset_Members.Related_Document_Object_ID) BETWEEN 2 AND 4 ORDER BY related_documents DESC NULLS LAST;
SELECT Document_Objects.Collection_ID, COUNT(Document_Subset_Members.Related_Document_Object_ID) AS related_count FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID GROUP BY Document_Objects.Collection_ID HAVING COUNT(Document_Subset_Members.Related_Document_Object_ID) BETWEEN 2 AND 4;
SELECT Document_Objects.Collection_ID, Document_Objects.Owner FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Related_Document_Object_ID WHERE Document_Objects.Owner ilike '%Braeden%' ORDER BY Document_Objects.Owner NULLS LAST; SELECT DISTINCT Document_Objects.Owner FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Related_Document_Object_ID WHERE Document_Objects.Owner ilike '%Braeden%' ORDER BY Document_Objects.Owner NULLS LAST; SELECT DISTINCT Document_Objects.Owner FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset
SELECT Document_Objects.Related_Collection_ID, Different_Owners.Owner FROM Document_Objects JOIN Collection_Subset_Members ON Document_Objects.Collection_ID = Collection_Subset_Members.Collection_ID AND Document_Objects.Document_Object_ID = Collection_Subset_Members.Related_Collection_ID JOIN Different_Owners ON Document_Objects.Owner != 'Braeden' WHERE Collection_Subset_Members.Collection_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subset_Members WHERE Document_Object_ID = Document_Objects.Document_Object_ID) ORDER BY Different_Owners.Owner NULLS LAST;
SELECT Document_Subsets.Related_Collection_ID FROM Document_Objects WHERE Owner = 'Braeden' LIMIT 1;
SELECT Document_Subsets.Collection_Subset_ID, Document_Subsets.Collection_Subset_Name FROM Document_Subsets JOIN Document_Objects ON Document_Subsets.Document_Subset_ID = Document_Objects.Document_Object_ID WHERE Document_Objects.Owner ilike '%Braeden%' ORDER BY Document_Subsets.Collection_Subset_Name NULLS LAST;
SELECT Document_Subsets.Collection_Subset_ID, Ddocument_subsets.Collection_Subset_Name, COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) AS num_documents FROM Ddocument_subsets JOIN Document_Subset_Members ON Ddocument_subsets.Collection_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Ddocument_subsets.Collection_Subset_ID, Ddocument_subsets.Collection_Subset_Name ORDER BY num_documents DESC NULLS LAST;
SELECT Document_Subsets.Collection_Subset_ID, Document_Subsets.Collection_Subset_Name, COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) AS num_documents FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Collection_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subsets.Collection_Subset_ID, Document_Subsets.Collection_Subset_Name ORDER BY num_documents DESC NULLS LAST;
SELECT Document_Subsets.Collection_Subset_ID, Document_Subsets.Collection_Subset_Name, COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) AS num_documents FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Collection_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subsets.Collection_Subset_ID, Document_Subsets.Collection_Subset_Name ORDER BY num_documents DESC LIMIT 1;
SELECT Document_Subsets.Collection_Subset_ID, Document_Subsets.Collection_Subset_Name, COUNT(DISTINCT Document_Subset_Members.Document_Object_ID) AS num_documents FROM Document_Subsets JOIN Document_Subset_Members ON Document_Subsets.Collection_Subset_ID = Document_Subset_Members.Document_Subset_ID GROUP BY Document_Subsets.Collection_Subset_ID, Document_Subsets.Collection_Subset_Name ORDER BY num_documents DESC LIMIT 1;
SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000' LIMIT 1; SELECT Documents_in_Collections.Document_Object_ID FROM Documents_in_Collections JOIN Document_Subset_Members ON Documents_in_Collections.Collection_ID = Document_Subset_Members.Related_Collection_ID;
SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000' LIMIT 1;
SELECT Document_Subsets.Related_Collection_ID, Document_Subsets.Document_Subset_Name FROM Document_Subsets JOIN Collection_Subsets ON Document_Subsets.Document_Subset_ID = Collection_Subsets.Collection_Subset_ID WHERE Document_Subsets.Related_Collection_ID IS NOT NULL; SELECT d.Document_ID, c.Collection_Name, s.Document_Subset_Name FROM Documents_in_Collections AS dc JOIN Documents AS d ON dc.Document_Object_ID = d.Document_Object_ID JOIN Collections AS c ON dc.Collection_ID = c.Collection_ID JOIN Document_Subset_Members AS sm ON dc.Document_Object_ID = sm.Document_Object_ID JOIN Document_Subsets AS s ON sm.Document_Subset_ID = s.Document_Subset
SELECT Document_Objects.Collection_ID, D.Document_Subset_Name, D.Document_Subset_ID FROM Ddocument_objects JOIN Document_Subset_Members ON Ddocument_objects.Document_Object_ID = Document_Subset_Members.Related_Document_Object_ID JOIN Document_Subsets AS D ON Document_Subset_Members.Document_Subset_ID = D.Document_Subset_ID;
SELECT Documents_in_Collections.Collection_ID, Collections.Collection_Name FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Document_Objects.Owner ilike '%Ransom %' ORDER BY Collections.Collection_Name NULLS LAST;
SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID JOIN Collection_Subsets ON Documents_in_Collections.Collection_ID = Collection_Subsets.Collection_ID WHERE Document_Objects.Owner = 'Ransom';
SELECT Document_Objects.Related_Collection_ID, COUNT(*) AS number_of_collections FROM Document_Objects JOIN Documents_in_Collections ON Document_Objects.Document_Object_ID = Documents_in_Collections.Document_Object_ID GROUP BY Document_Objects.Related_Collection_ID ORDER BY number_of_collections DESC NULLS LAST;
SELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID = 757071; ORDER BY Document_Objects.Collection_ID;
SELECT Collection_ID, COUNT(*) AS number_of_documents FROM Collections c JOIN Documents_in_Collections d ON c.Collection_ID = d.Collection_ID WHERE c.Collection_Name = 'Best' GROUP BY Collection_ID;
SELECT Collection_Subsets.Collection_Subset_ID, COUNT(Documents_in_Collections.Document_Object_ID) AS number_of_documents FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID JOIN Collections ON Collection_Subsets.Collection_Subset_ID = Collections.Collection_ID JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID WHERE Collection_Subsets.Collection_Subset_Name ILIKE '%Best%' GROUP BY Collection_Subsets.Collection_Subset_ID;
SELECT Documents_in_Collections.Collection_ID, Documents_in_Collections.Document_Object_ID FROM Documents_in_Collections JOIN Collections ON Documents_in_Collections.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name = 'Best';
SELECT Collection_ID, COUNT(Document_Object_ID) AS total_document_object_ids FROM Collections c JOIN Documents_in_Collections d ON c.Collection_ID = d.Collection_ID WHERE c.Collection_Name = 'Best' GROUP BY Collection_ID;
SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name, COUNT(Documents_in_Collections.Document_Object_ID) AS total_documents FROM Documents_in_Collections JOIN Collection_Subsets ON Documents_in_Collections.Collection_ID = Collection_Subsets.Collection_Subset_ID GROUP BY Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name ORDER BY total_documents DESC LIMIT 1;
SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name, COUNT(Documents_in_Collections.Document_Object_ID) AS total_documents FROM Collection_Subsets JOIN Collections ON Collection_Subsets.Collection_Subset_ID = Collections.Collection_ID JOIN Documents_in_Collections ON Collections.Collection_ID = Documents_in_Collections.Collection_ID WHERE Collection_Subsets.Collection_Subset_Name ILIKE '%Best%' GROUP BY Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name ORDER BY total_documents DESC LIMIT 1;
SELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Objects.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Objects.Document_Object_ID IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best')) AND EXTRACT(YEAR FROM TO_DATE(Ddocument_objects.description,'YYYY'))=2000;
SELECT Document_Objects.Collection_ID FROM Document_Subsets WHERE Document_Subsets.Document_Subset_Name = 'Best for 2000' UNION SELECT Documents_in_Collections.Document_Object_ID FROM Collection_Subsets JOIN Documents_in_Collections ON Collection_Subsets.Collection_Subset_ID = Documents_in_Collections.Collection_ID WHERE Collection_Subsets.Collection_Subset_Name = 'Best'; SELECT DISTINCT Document_Objects.Document_Object_ID FROM Document_Objects JOIN Document_Subset_Members ON Document_Objects.Document_Object_ID = Document_Subset_Members.Document_Object_ID JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID JOIN Collections ON Document_Subsets.Document_Subset_ID =
SELECT Document_Objects.Related_Collection_ID FROM Document_Objects WHERE Document_Objects.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Objects.Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best')) AND EXTRACT(YEAR FROM TO_DATE(Dobject.Description, 'YYYY')) = 2000;
SELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Objects.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') AND Document_Objects.Document_Object_ID NOT IN (SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID IN (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'));
SELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Subset_Members.Related_Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name = 'Best') OR Document_Objects.Document_Object_ID IN (SELECT Collection_Subset_Members.Related_Collection_ID FROM Collection_Subset_Members JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID WHERE Collection_Subsets.Collection_Subset_Name = 'Best');
SELECT Document_Objects.Collection_ID FROM Document_Objects WHERE Document_Objects.Document_Object_ID IN (SELECT Document_Subset_Members.Related_Document_Object_ID FROM Document_Subset_Members JOIN Document_Subsets ON Document_Subset_Members.Document_Subset_ID = Document_Subsets.Document_Subset_ID WHERE Document_Subsets.Document_Subset_Name ilike '%Best%for%2000%' UNION SELECT Collection_Subset_Members.Related_Collection_ID FROM Collection_Subset_Members JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID WHERE Collection_Subsets.Collection_Subset_Name ilike '%Best%') ORDER BY Document_Objects.Colllection_ID NULLS LAST;
SELECT Documents_in_Collections.Collection_ID FROM Documents_in_Collections WHERE Documents_in_Collections.Collection_ID IN (SELECT Collection_Subset_Members.Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_Members.Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subset_Name = 'Best')); SELECT Collections.Collection_Name FROM Collections WHERE Collections.Collection_ID IN (SELECT Documents_in_Collections.Collection_ID FROM Documents_in_Collections WHERE Documents_in_Collections.Collection_ID IN (SELECT Collection_Subset_Members.Related_Collection_ID FROM Collection_Subset_Members WHERE Collection_Subset_Members.Collection_Subset_ID IN (SELECT Collection_Subset_ID FROM Collection_
SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = (SELECT Collection_Subsets.Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name = 'Best') ORDER BY Document_Subset_Members.Related_Collection_ID NULLS LAST; SELECT Collections.Collection_Name FROM Collections WHERE Collections.Collection_ID IN (SELECT Document_Subset_Members.Related_Collection_ID FROM Document_Subset_Members WHERE Document_Subset_Members.Document_Subset_ID = (SELECT Collection_Subsets.Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name = 'Best')) ORDER BY Collections.Collection_Name
SELECT Collection_Subset_Members.Related_Collection_ID FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name ILIKE '%Best%' SELECT COUNT(DISTINCT Collection_Subset_Members.Related_Collection_ID) AS number_of_collections FROM Collection_Subset_Members JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID;'%Best%' SELECT COUNT(DISTINCT Collection_Subset_Members.Related_Collection_ID) AS number_of_collections FROM Collection_Subset_Members JOIN Collection_Subsets ON Collection_Subset_Members.Collection_Subset_ID = Collection_Subsets.Collection_Subset_ID WHERE Collection_Subsets.Collection_Subset_Name ILIKE '%Best%';'%Best%'
SELECT Collection_Subsets.Collection_Subset_ID FROM Collection_Subsets WHERE Collection_Subsets.Collection_Subset_Name = 'Best' ORDER BY Collection_Subsets.Collection_Subset_ID NULLS LAST;
SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID JOIN Collections ON Collection_Subset_Members.Collection_ID = Collections.Collection_ID WHERE Collections.Collection_Name ilike '%Best%' ORDER BY Collection_Subsets.Collection_Subset_Name NULLS LAST;
SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID WHERE Collection_Subset_Members.Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best'); SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name FROM Collection_Subsets; SELECT Collection_Subsets.Collection_Subset_ID, Collection_Subsets.Collection_Subset_Name FROM Collection_Subsets JOIN Collection_Subset_Members ON Collection_Subsets.Collection_Subset_ID = Collection_Subset_Members.Collection_Subset_ID WHERE Collection_Subset_Members.Collection_ID IN
SELECT songs.songs_id FROM songs WHERE songs.name ilike '%Love%';  ORDER BY songs.songs_id;
SELECT songs.songs_id, songs.name FROM songs ORDER BY songs.name ASC;
SELECT songs.songs_id, songs.name, songs.language FROM songs;
SELECT performance_score.participant_id, performance_score.songs_id, MAX(performance_score.voice_sound_quality) AS max_voice_sound_quality, MIN(performance_score.voice_sound_quality) AS min_voice_sound_quality FROM performance_score GROUP BY performance_score.participant_id, performance_score.songs_id;
SELECT performance_score.voice_sound_quality, perfromance_score.rhythm_tempo, perfromance_score.stage_presence FROM participants JOIN perfromance_score ON participants.id = perfromance_score.participant_id WHERE participants.name ilike '%Freeway%' ;
SELECT songs.songs_id, songs.language, songs.original_artist FROM songs WHERE songs.name not ilike '%Love%';
SELECT songs.songs_id, songs.name, songs.original_artist FROM songs WHERE songs.english_translation ilike '%All%the%streets%of%love%' ORDER BY songs.songs_id NULLS LAST;
SELECT songs.stage_presence FROM songs WHERE songs.language = 'English' ORDER BY songs.stage_presence NULLS LAST; SELECT DISTINCT songs.stage_presence FROM songs WHERE songs.language = 'English'; SELECT DISTINCT ps.stage_presence FROM performance_score ps JOIN songs ON ps.songs_id = songs.id WHERE songs.language = 'English'; SELECT DISTINCT ps.stage_presence FROM performance_score ps JOIN songs ON ps.songs_id = songs.id WHERE songs.language = 'English' ORDER BY ps.stage_presence NULLS LAST; SELECT DISTINCT ps.stage_presence FROM performance_score ps JOIN songs ON ps.songs_id = songs.id WHERE songs.language = 'English' ORDER BY ps.stage_presence NULLS LAST; SELECT DISTINCT ps.stage_presence FROM performance_score ps
SELECT participants.participant_id, participants.name FROM (SELECT participant_id, COUNT(songs_id) AS num_songs FROM performance_score GROUP BY participant_id HAVING COUNT(songs_id) >= 2) AS subquery JOIN participants ON subquery.participant_id = participants.id;
SELECT participants.participant_id, participants.name, participants.popularity, COUNT(performance_score.songs_id) AS song_count FROM performance_score JOIN participants ON performance_score.participant_id = participants.participant_id GROUP BY participants.participant_id, participants.name, participants.popularity ORDER BY song_count DESC;
SELECT participants.participant_id, participants.name FROM performance_score JOIN participants ON performance_score.participant_id = participants.id WHERE performance_score.voice_sound_quality = 5 OR performance_score.rhythm_tempo = 5;
SELECT performance_score.voice_sound_quality FROM performance_score WHERE songs.name ilike '%The%Balkan%Girls%' AND songs.language ilike '%English%';
SELECT songs.songs_id, songs.name FROM performance_score JOIN songs ON performance_score.songs_id = songs.id GROUP BY songs.songs_id, songs.name ORDER BY COUNT(performance_score.participant_id) DESC LIMIT 1;
SELECT participant_id, COUNT(*) AS number_of_performances FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9 GROUP BY participant_id;
SELECT songs.songs_id FROM songs WHERE songs.id NOT IN (SELECT performance_score.songs_id FROM performance_score);
SELECT songs.songs_id, AVG(performance_score.rhythm_tempo) AS average_rhythm_tempo FROM performance_score JOIN songs ON performance_score.songs_id = songs.id GROUP BY songs.songs_id ORDER BY average_rhythm_tempo DESC NULLS LAST;
SELECT participants.participant_id, participants.name FROM participants JOIN performance_score ON participants.id = performance_score.participant_id JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language = 'English' ORDER BY participants.name NULLS LAST;
SELECT participants.participant_id, participants.name, participants.popularity FROM participants JOIN performance_score ON participants.participant_id = performance_score.participant_id JOIN songs ON performance_score.songs_id = songs.id WHERE songs.language ilike '%Croatian%' AND songs.english_translation IS NOT NULL;
SELECT songs.songs_id, songs.name FROM songs WHERE songs.name ilike '%Is%' ORDER BY songs.name NULLS LAST;
SELECT songs.songs_id, performance_score.participant_id, performance_score.voice_sound_quality FROM performance_score JOIN songs ON performance_score.songs_id = songs.id WHERE performance_score.rhythm_tempo > 5 ORDER BY performance_score.voice_sound_quality DESC;
SELECT city_code FROM City;
SELECT city_code FROM City;
SELECT Direct_distance.state FROM Direct_distance;
SELECT Direct_distance.state FROM Direct_distance;
SELECT Direct_distance.country FROM Direct_distance WHERE Direct_distance.city1_code = 'CITY1' OR Direct_distance.city2_code = 'CITY1' GROUP BY Direct_distance.country; COUNT(*) AS number_of_countries;
SELECT city_code, COUNT(DISTINCT country) AS num_countries FROM City GROUP BY city_code;
SELECT city_name, city_code, state, country FROM City;
SELECT city_name, city_code, state, country FROM City;
SELECT city_name, latitude, longitude FROM City WHERE city_name ilike '%Baltimore%';
SELECT city_name, latitude, longitude FROM City WHERE city_name ilike '%Baltimore%';
SELECT city_name FROM City WHERE state = 'PA';
SELECT city_name FROM City WHERE state = 'PA';
SELECT city_name FROM City WHERE country = 'Canada'; COUNT = 7970; SELECT COUNT(*) AS number_of_cities FROM City WHERE country = 'Canada'; NULL; SELECT COUNT(*) AS number_of_cities FROM City WHERE country ILIKE '%Canadian%'; NULL; SELECT COUNT(*) AS number_of_cities FROM City WHERE country ILIKE '%Canada%'; NULL; SELECT COUNT(*) AS number_of_cities FROM City WHERE country ILIKE '%Canadian%' OR country ILIKE '%Canada%'; NULL; SELECT COUNT(*) AS number_of_cities FROM City WHERE country ILIKE '%Canadian%' AND country ILIKE '%Canada%'; NULL; SELECT COUNT(*) AS number_of_cities FROM City WHERE country ILIKE '%Canadian%' OR country ILIKE '%Canada%' OR country ILIKE '%Canadian
SELECT city_code FROM City WHERE country = 'Canada' GROUP BY city_code; COUNT(*) AS number_of_cities; SELECT number_of_cities FROM COUNT(*) AS number_of_cities; SELECT number_of_cities FROM COUNT(*) AS number_of_cities; SELECT number_of_cities FROM COUNT(*) AS number_of_cities; SELECT number_of_cities FROM COUNT(*) AS number_of_cities; SELECT number_of_cities FROM COUNT(*) AS number_of_cities; SELECT number_of_cities FROM COUNT(*) AS number_of_cities; SELECT number_of_cities FROM COUNT(*) AS number_of_cities; SELECT number_of_cities FROM COUNT(*) AS number_of_cities; SELECT number_of_cities FROM COUNT(*) AS number_of_cities; SELECT number_of_cities
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude NULLS LAST;
SELECT city_name FROM City WHERE country = 'United States' ORDER BY latitude NULLS LAST;
SELECT city_code, COUNT(*) AS num_cities FROM City GROUP BY city_code ORDER BY num_cities DESC NULLS LAST; SELECT state, COUNT(*) AS num_states FROM City GROUP BY state ORDER BY num_states DESC NULLS LAST; SELECT state, GROUP_CONCAT(city_code) AS cities FROM City GROUP BY state ORDER BY state NULLS LAST; SELECT state, COUNT(*) AS num_cities, SUM(CASE WHEN distance = 0 THEN 1 ELSE 0 END) AS num_direct_cities FROM Direct_distance JOIN City ON (city1_code = city_code OR city2_code = city_code) GROUP BY state ORDER BY num_cities DESC NULLS LAST; SELECT state, num_cities, (num_direct_cities::FLOAT / NULLIF(num_cities, 0)) * 100 AS pct_
SELECT city_code, COUNT(*) AS number_of_cities FROM City GROUP BY city_code ORDER BY number_of_cities DESC NULLS LAST;
SELECT city_code, country, COUNT(*) AS num_cities FROM City GROUP BY city_code, country ORDER BY country, num_cities DESC NULLS LAST;
SELECT city_code, COUNT(*) AS number_of_cities FROM City GROUP BY city_code ORDER BY number_of_cities DESC NULLS LAST;
SELECT city_code, COUNT(*) AS number_of_cities FROM City GROUP BY city_code HAVING COUNT(*) >= 2; SELECT state FROM City WHERE city_code IN (SELECT city_code FROM City GROUP BY city_code HAVING COUNT(*) >= 2) ORDER BY state NULLS LAST; SELECT DISTINCT state FROM City WHERE city_code IN (SELECT city_code FROM City GROUP BY city_code HAVING COUNT(*) >= 2); SELECT state, COUNT(*) AS number_of_cities FROM City GROUP BY state HAVING COUNT(*) >= 2 ORDER BY number_of_cities DESC NULLS LAST; SELECT state, COUNT(*) AS number_of_cities FROM City GROUP BY state HAVING COUNT(*) >= 2; SELECT state, COUNT(*) AS number_of_cities FROM City GROUP BY state HAVING COUNT(*) >= 2;
SELECT city_code, COUNT(*) AS number_of_cities FROM City GROUP BY city_code HAVING COUNT(*) >= 2;
SELECT city_code, COUNT(*) AS city_count FROM City GROUP BY city_code ORDER BY city_count DESC LIMIT 1; SELECT state, COUNT(*) AS state_count FROM City GROUP BY state ORDER BY state_count DESC LIMIT 1; SELECT state, city_code FROM City WHERE city_code = 'Given City Code' OR state = 'Given State'; SELECT s.fname, s.lname, c.city_name, c.state FROM Student s JOIN City c ON s.city_code = c.city_code; SELECT d.city1_code, d.city2_code, (d.distance * 0.621371) AS miles FROM Direct_distance d; SELECT c.city_name, c.state, c.latitude, c.longitude FROM City c; SELECT s.fname, s.lname, c.city_name, c
SELECT city_code, COUNT(*) AS city_count FROM City GROUP BY city_code ORDER BY city_count DESC LIMIT 1; SELECT state FROM City WHERE city_code = 'CITY_CODE' LIMIT 1; NULLS LAST;
SELECT city_code, COUNT(*) AS city_count FROM City GROUP BY c.country ORDER BY city_count ASC LIMIT 1;
SELECT city_code, COUNT(*) AS city_count FROM City GROUP BY city_code ORDER BY city_count ASC LIMIT 1; SELECT country FROM City WHERE city_code = 'CITY_CODE' LIMIT 1; -- Replace CITY_CODE with the actual city code. ; SELECT country FROM City WHERE city_code = 'CITY_CODE' LIMIT 1; -- Replace CITY_CODE with the actual city code. ; SELECT country FROM City WHERE city_code = 'CITY_CODE' LIMIT 1; -- Replace CITY_CODE with the actual city code. ; SELECT country FROM City WHERE city_code = 'CITY_CODE' LIMIT 1; -- Replace CITY_CODE with the actual city code. ; SELECT country FROM City WHERE city_code = 'CITY_CODE' LIMIT 1; -- Replace CITY_CODE with the actual city code. ; SELECT country FROM City WHERE
SELECT state, fname, lname FROM student JOIN city ON student.city_code = city.city_code WHERE sstate = 'MD';
SELECT state, fname, lname FROM student JOIN city ON student.city_code = city.city_code WHERE sstate = 'MD';
SELECT city_code FROM Student WHERE country = 'China'; ORDER BY city_code;
SELECT city_code, COUNT(*) AS total_students FROM Student s JOIN City c ON s.city_code = c.city_code WHERE c.country ILIKE '%China%' GROUP BY c.city_code;
SELECT state, fname, major FROM student JOIN city ON city_code = city_code WHERE city_name ilike '%Baltimore%' ;
SELECT state, fname, major FROM student JOIN city ON city_code = city_code WHERE city_name ilike '%Baltimore%' ;
SELECT city_code, COUNT(*) AS total_students FROM Student GROUP BY city_code ORDER BY total_students DESC NULLS LAST;
SELECT city_code, COUNT(*) AS number_of_students FROM Student GROUP BY city_code ORDER BY number_of_students DESC NULLS LAST;
SELECT city_name, COUNT(*) AS total_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY city_name ORDER BY total_students DESC NULLS LAST;
SELECT city_name, COUNT(*) AS number_of_students FROM Student s JOIN City c ON s.city_code = c.city_code GROUP BY city_name ORDER BY number_of_students DESC NULLS LAST;
SELECT city_code, COUNT(*) AS total_students FROM Student GROUP BY city_code ORDER BY total_students DESC LIMIT 1;
SELECT city_code, COUNT(*) AS number_of_students FROM Student GROUP BY city_code ORDER BY number_of_students DESC LIMIT 1;
SELECT city_code, COUNT(*) AS total_students FROM Student GROUP BY city_code ORDER BY total_students ASC LIMIT 1; SELECT city.country FROM City JOIN Student ON city.city_code = student.city_code GROUP BY city.country ORDER BY total_students ASC LIMIT 1; NULLS LAST;
SELECT city_code, COUNT(*) AS number_of_students FROM Student GROUP BY city_code ORDER BY number_of_students ASC LIMIT 1; SELECT city.country FROM City JOIN Student ON city.city_code = student.city_code GROUP BY city.country ORDER BY number_of_students ASC LIMIT 1; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL; NULL;
SELECT city_name FROM City WHERE city_code IN (SELECT s.city_code FROM Student s GROUP BY s.city_code HAVING COUNT(s.StuID) >= 3);
SELECT city_name FROM City WHERE city_code IN (SELECT s.city_code FROM Student s GROUP BY s.city_code HAVING COUNT(s.stu_id) >= 3);
SELECT city_code, COUNT(*) AS number_of_students FROM Student GROUP BY city_code HAVING COUNT(*) > 5;
SELECT city_code, COUNT(*) AS number_of_students FROM Student GROUP BY city_code HAVING COUNT(*) > 5;
SELECT state, stu_id FROM student JOIN city ON student.city_code = city.city_code WHERE sstate != 'USA';
SELECT state, stu_id FROM city JOIN student ON city.city_code = student.city_code WHERE ctry != 'United States' ORDER BY stu_id NULLS LAST;
SELECT state, stu_id FROM student WHERE sex = 'F' AND sstate = 'PA';
SELECT state, stu_id FROM student WHERE sex = 'F' AND sstate = 'PA';
SELECT state, stu_id FROM student JOIN city ON student.city_code = city.city_code WHERE sex = 'M' AND country != 'United States';
SELECT state, c.stu_id FROM student s JOIN city c ON s.city_code = c.city_code WHERE s.sex = 'M' AND s.country != 'United States';
SELECT Direct_distance.city_code, Direct_distance.distance FROM Direct_distance WHERE Direct_distance.city_code ilike '%BAL%' OR Direct_distance.city_code ilike '%CHI%';
SELECT Direct_distance.city_code, Direct_distance.distance FROM Direct_distance WHERE Direct_distance.city_code ilike '%BAL%' OR Direct_distance.city_code ilike '%CHI%';
SELECT Direct_distance.city_code, Direct_distance.distance FROM Direct_distance WHERE Direct_distance.city_code ilike '%Boston%' OR Direct_distance.city_code ilike '%Newark%' ORDER BY Direct_distance.distance NULLS LAST;
SELECT Direct_distance.city_code, Direct_distance.distance FROM Direct_distance WHERE Direct_distance.city_code ilike '%Boston%' OR Direct_distance.city_code ilike '%Newark%' ORDER BY Direct_distance.distance NULLS LAST;
SELECT city_code, AVG(distance) AS average_distance, MIN(distance) AS minimum_distance, MAX(distance) AS maximum_distance FROM Direct_distance GROUP BY city_code;
SELECT city_code, AVG(distance) AS average_distance, MIN(distance) AS minimum_distance, MAX(distance) AS maximum_distance FROM Direct_distance GROUP BY city_code;
SELECT city_code FROM Direct_distance WHERE distance = (SELECT MAX(distance) FROM Direct_distance); ORDER BY city_code;
SELECT city_code FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance ORDER BY distance DESC LIMIT 2); ORDER BY city_code;
SELECT city_code FROM City WHERE city_code IN (SELECT city1_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance)) AND city_code IN (SELECT city2_code FROM Direct_distance WHERE distance > (SELECT AVG(distance) FROM Direct_distance));;
SELECT state, c.city_code FROM (SELECT AVG(distance) AS avg_distance FROM Direct_distance) AS d JOIN Direct_distance dd ON d.avg_distance < dd.distance JOIN City c ON dd.city1_code = c.city_code;
SELECT state, c.city_code FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code OR c.city_code = d.city2_code WHERE d.distance < 1000 GROUP BY sstate, c.city_code ORDER BY sstate, c.city_code NULLS LAST;
SELECT state FROM Direct_distance WHERE distance < 1000; ORDER BY city_code;
SELECT city_name, SUM(distance) AS total_distance FROM Direct_distance d JOIN City c ON d.city1_code = c.city_code WHERE d.city1_code = 'BAL' GROUP BY city_name ORDER BY total_distance DESC NULLS LAST;
SELECT state, SUM(distance) AS total_distance FROM Direct_distance d JOIN City c1 ON d.city1_code = c1.city_code WHERE c1.city_name = 'Baltimore' GROUP BY sstate;
SELECT city_name, AVG(distance) AS average_distance FROM Direct_distance d JOIN City c ON d.city1_code = c.city_code WHERE c.city_code = 'BOS' GROUP BY city_name ORDER BY average_distance NULLS LAST;
SELECT city_name, AVG(distance) AS average_distance FROM Direct_distance d JOIN City c ON d.city1_code = c.city_code WHERE c.city_code = 'BOS' GROUP BY city_name ORDER BY average_distance NULLS LAST;
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'CHI' ORDER BY distance ASC LIMIT 1);
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'CHI' ORDER BY distance ASC LIMIT 1);
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS' ORDER BY distance DESC LIMIT 1);;
SELECT city_name FROM City WHERE city_code = (SELECT city2_code FROM Direct_distance WHERE city1_code = 'BOS' ORDER BY distance DESC LIMIT 1);;
SELECT city_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city_code ORDER BY total_distance DESC NULLS LAST;
SELECT city_code, SUM(distance) AS total_distance FROM Direct_distance GROUP BY city_code ORDER BY total_distance DESC NULLS LAST;
SELECT city_name, AVG(distance) AS average_distance FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code OR c.city_code = d.city2_code GROUP BY c.city_name ORDER BY average_distance NULLS LAST;
SELECT city_name, AVG(distance) AS average_distance FROM Direct_distance d JOIN City c ON d.city1_code = c.city_code OR d.city2_code = c.city_code GROUP BY city_name;
SELECT state, city_name, distance FROM City c JOIN Direct_distance d ON c.city_code = d.city1_code OR c.city_code = d.city2_code WHERE (c.city_code = '75707' AND d.city1_code = '98102') OR (c.city_code = '98102' AND d.city2_code = '75707') ORDER BY distance NULLS LAST;
SELECT state, c.city_name AS city_name, d.distance FROM Student s JOIN City c ON s.city_code = c.city_code JOIN Direct_distance d ON c.city_code = d.city_1_code WHERE lname = 'Smith' AND fname = 'Linda' OR lname = 'Kim' AND fname = 'Tracy' GROUP BY s.state, c.city_name, d.distance;
SELECT state, c.city_name, s.fname, s.lname, d.distance FROM Student s JOIN City c ON s.city_code = c.city_code JOIN Direct_distance d ON c.city_code = d.city1_code WHERE lname = 'Smith' ORDER BY d.distance DESC LIMIT 1;
SELECT state, c.city_name, s.fname, s.lname FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.fname ilike '%Linda%' AND s.lname ilike '%Smith%' ORDER BY d.distance DESC LIMIT 1;
SELECT state FROM City WHERE city_code = (SELECT c.city_code FROM Student s JOIN City c ON s.city_code = c.city_code WHERE s.fname = 'Linda');
SELECT city_code, state FROM Student WHERE fname = 'Linda';
SELECT sid, name, rating, age FROM Sailors WHERE age > 30;
SELECT sid, name, age FROM Sailors WHERE age > 30;
SELECT sid, name, age FROM Sailors WHERE age < 30;
SELECT sid, name, age FROM Sailors WHERE age < 30;
SELECT bid FROM Reserves WHERE sid = 1; ORDER BY bid;
SELECT bid FROM Reserves WHERE sid = 1; ORDER BY bid;
SELECT sid FROM Reserves WHERE bid = 102; SELECT name FROM Sailors WHERE sid = 102; -- SELECT * FROM Reserves r JOIN Sailors s ON r.sid = s.sid WHERE r.bid = 102; SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 102; SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 102; SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 102; SELECT s.name FROM Sailors s JOIN Reserves r ON s.sid = r.sid WHERE r.bid = 102; SELECT s.name FROM Sailors
SELECT sid, name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 102;
SELECT bid FROM Reserves;
SELECT bid FROM Reserves;
SELECT sid, name FROM Sailors WHERE name ilike '%e%';
SELECT sid, name FROM Sailors WHERE name ilike '%e%';
SELECT sid FROM Sailors WHERE age > ALL (SELECT age FROM Sailors); ORDER BY sid;
SELECT sid FROM Sailors WHERE age != (SELECT MIN(age) FROM Sailors);;
SELECT sid, name FROM Sailors WHERE age > ALL (SELECT age FROM Sailors WHERE rating > 7); SELECT DISTINCT name FROM Sailors WHERE age > ALL (SELECT age FROM Sailors WHERE rating > 7); SELECT DISTINCT s.name FROM Sailors s JOIN (SELECT MAX(age) AS max_age FROM Sailors WHERE rating > 7) AS subquery ON s.age > subquery.max_age; SELECT DISTINCT s.name FROM Sailors s WHERE s.age > (SELECT MAX(age) FROM Sailors WHERE rating > 7); SELECT DISTINCT s.name FROM Sailors s WHERE s.age > (SELECT MAX(age) FROM Sailors WHERE rating > 7) ORDER BY s.name NULLS LAST; SELECT DISTINCT s.name FROM Sailors s WHERE s.age > (SELECT MAX(age) FROM
SELECT sid, name FROM Sailors WHERE age > (SELECT age FROM Sailors WHERE rating > 7);
SELECT sid, name FROM Sailors WHERE EXISTS (SELECT 1 FROM Reserves r WHERE r.sid = s.sid);
SELECT sid, name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid GROUP BY s.sid, s.name HAVING COUNT(r.bid) > 0;
SELECT sid, name FROM Sailors s WHERE s.sid IN (SELECT r.sid FROM Reserves r GROUP BY r.sid HAVING COUNT(r.bid) > 1); SELECT b.bid, b.name FROM Boats b JOIN Reserves r ON b.bid = r.bid WHERE r.sid IN (SELECT s.sid FROM Sailors s GROUP BY s.sid HAVING COUNT(r.bid) > 1); SELECT s.sid, s.name, COUNT(r.bid) AS num_boats_reserved FROM Sailors s JOIN Reserves r ON s.sid = r.sid GROUP BY s.sid, s.name HAVING COUNT(r.bid) > 1; SELECT s.sid, s.name, b.name AS boat_name, row_number() OVER(PARTITION BY s
SELECT sid, name FROM Sailors WHERE sid IN (SELECT r.sid FROM Reserves r GROUP BY r.sid HAVING COUNT(r.bid) >= 2); SELECT name FROM Sailors WHERE sid IN (SELECT r.sid FROM Reserves r GROUP BY r.sid HAVING COUNT(r.bid) >= 2); SELECT DISTINCT name FROM Sailors WHERE sid IN (SELECT r.sid FROM Reserves r GROUP BY r.sid HAVING COUNT(r.bid) >= 2); SELECT name FROM Sailors WHERE sid IN (SELECT r.sid FROM Reserves r GROUP BY r.sid HAVING COUNT(r.bid) >= 2) ORDER BY name NULLS LAST; SELECT name FROM Sailors WHERE sid IN (SELECT r.sid FROM Reserves r GROUP BY r.sid HAVING COUNT(r.bid)
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color IN ('red', 'blue')); SELECT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue'); SELECT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue'); SELECT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') ORDER BY s.sid NULLS LAST; SELECT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color IN ('red', 'blue')); SELECT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue'); SELECT DISTINCT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue'); SELECT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue'); SELECT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') ORDER BY s.sid NULLS LAST; SELECT s.s
SELECT sid, name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color ilike '%red%' OR Boats.color ilike '%blue%';
SELECT sid, name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color ilike '%red%' OR Boats.color ilike '%blue%';
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color IN ('red', 'blue')); SELECT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue'); SELECT DISTINCT r.sid FROM Reserves r JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue'); SELECT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue'); SELECT s.sid FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color IN ('red', 'blue') GROUP BY s.sid HAVING COUNT(DISTINCT b
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color IN ('red', 'blue')); ORDER BY sid;
SELECT sid, name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color ilike '%red%' OR Boats.color ilike '%blue%';
SELECT sid, name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color ilike '%red%' OR Boats.color ilike '%blue%';
SELECT sid FROM Sailors WHERE NOT EXISTS (SELECT 1 FROM Reserves r WHERE r.sid = s.sid); ORDER BY sid;
SELECT sid FROM Sailors WHERE NOT EXISTS (SELECT 1 FROM Reserves r WHERE r.sid = s.sid); ORDER BY sid;
SELECT sid, name FROM Sailors WHERE NOT EXISTS (SELECT 1 FROM Reserves r WHERE r.sid = s.sid);
SELECT sid, name FROM Sailors s WHERE NOT EXISTS (SELECT 1 FROM Reserves r WHERE r.sid = s.sid);
SELECT sid FROM Sailors WHERE NOT EXISTS (SELECT 1 FROM Reserves r WHERE r.sid = s.sid); ORDER BY sid;
SELECT sid FROM Sailors WHERE NOT EXISTS (SELECT 1 FROM Reserves r WHERE r.sid = s.sid); ORDER BY sid;
SELECT sid, name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 103;
SELECT sid, name FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid WHERE Reserves.bid = 103;
SELECT sid, name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name ILIKE '%Luis%'); NULLS LAST;
SELECT sid, name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name ILIKE '%Luis%'); ORDER BY rating DESC NULLS LAST;
SELECT sid, name, rating FROM Sailors WHERE name ilike '%Luis%' ORDER BY rating DESC NULLS LAST; SELECT name FROM Sailors WHERE rating > (SELECT MAX(rating) FROM Sailors WHERE name ilike '%Luis%');; SELECT * FROM Sailors WHERE NOT EXISTS (SELECT 1 FROM Sailors WHERE name ilike '%Luis%' AND rating > (SELECT MAX(rating) FROM Sailors WHERE name ilike '%Luis%'));; SELECT name FROM Sailors WHERE rating > ALL (SELECT rating FROM Sailors WHERE name ilike '%Luis%');; SELECT name FROM Sailors WHERE rating > ANY (SELECT rating FROM Sailors WHERE name ilike '%Luis%');; SELECT name FROM Sailors WHERE rating > (SELECT AVG(rating) FROM Sailors WHERE name ilike '%Luis%');; SELECT name FROM Sailors WHERE rating > (
SELECT sid, name, rating FROM Sailors WHERE name ilike '%Luis%' ORDER BY rating DESC NULLS LAST; SELECT name, rating FROM Sailors WHERE rating > (SELECT rating FROM Sailors WHERE name ilike '%Luis%') ORDER BY name NULLS LAST; SELECT s.name, s.rating FROM Sailors s JOIN (SELECT MAX(rating) AS max_rating FROM Sailors WHERE name ilike '%Luis%') l ON s.rating > l.max_rating ORDER BY s.name NULLS LAST; SELECT s.name, s.rating FROM Sailors s JOIN (SELECT MIN(rating) AS min_rating FROM Sailors WHERE name ilike '%Luis%') l ON s.rating < l.min_rating ORDER BY s.name NULLS LAST; SELECT s.name, s.rating FROM Sailors s WHERE s.name not ilike
SELECT sid, name FROM Sailors WHERE rating > 2 AND EXISTS (SELECT 1 FROM Reserves r WHERE r.sid = sid);
SELECT sid, name FROM Sailors WHERE rating >= 3 AND EXISTS (SELECT 1 FROM Reserves r WHERE r.sid = s.sid);
SELECT sid, name, age FROM Sailors ORDER BY age ASC NULLS LAST LIMIT 1; -- SELECT * FROM Sailors ORDER BY age ASC NULLS LAST LIMIT 1; SELECT name, age FROM Sailors ORDER BY age ASC NULLS LAST LIMIT 1; SELECT MIN(age) AS min_age, name FROM Sailors; SELECT name, age FROM Sailors WHERE age = (SELECT MIN(age) FROM Sailors); SELECT name, age FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors); SELECT name, age FROM Sailors WHERE age = (SELECT AVG(age) FROM Sailors); SELECT name, age FROM Sailors WHERE age = (SELECT SUM(age)/COUNT(*) FROM Sailors); SELECT name, age FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors) - (SELECT MIN(age
SELECT sid, name, age FROM Sailors WHERE age = (SELECT MAX(age) FROM Sailors);
SELECT sid FROM Sailors;
SELECT sid FROM Sailors;
SELECT sid, AVG(age) AS average_age FROM Sailors WHERE rating = 7 GROUP BY sid;
SELECT sid, AVG(age) AS average_age FROM Sailors WHERE rating = 7 GROUP BY sid;
SELECT sid FROM Sailors WHERE name ilike 'D%' ; -- SELECT s.sid FROM Sailors s WHERE s.name ilike 'D%'; SELECT COUNT(*) FROM Sailors s WHERE s.name ilike 'D%'; SELECT CAST(COUNT(*) AS FLOAT) / NULLIF((SELECT COUNT(*) FROM Sailors), 0) AS proportion FROM Sailors s WHERE s.name ilike 'D%'; SELECT CAST(COUNT(*) AS FLOAT) / NULLIF((SELECT COUNT(*) FROM Sailors), 0) AS proportion FROM Sailors s WHERE s.name ilike 'D%'; SELECT CAST(COUNT(*) AS FLOAT) / NULLIF((SELECT COUNT(*) FROM Sailors), 0) AS proportion FROM Sailors s WHERE s.name ilike 'D%'; SELECT CAST(COUNT(*) AS FLOAT) / NULLIF((SELECT COUNT
SELECT sid FROM Sailors WHERE name ilike 'D%' ; COUNT = SELECT COUNT(*) FROM Sailors WHERE name ilike 'D%'; NULL = SELECT NULL FROM Sailors WHERE name ilike 'D%'; TRUE = SELECT TRUE FROM Sailors WHERE name ilike 'D%'; FALSE = SELECT FALSE FROM Sailors WHERE name ilike 'D%'; CAST(COUNT AS TEXT) = SELECT CAST(COUNT(*) AS TEXT) FROM Sailors WHERE name ilike 'D%'; CAST(NULL AS TEXT) = SELECT CAST(NULL AS TEXT) FROM Sailors WHERE name ilike 'D%'; CAST(TRUE AS TEXT) = SELECT CAST(TRUE AS TEXT) FROM Sailors WHERE name ilike 'D%'; CAST(FALSE AS TEXT) = SELECT CAST(FALSE AS TEXT) FROM Sailors WHERE name ilike 'D%
SELECT sid, AVG(rating) AS average_rating, MAX(age) AS maximum_age FROM Sailors GROUP BY s.id;
SELECT sid, AVG(rating) AS average_rating, MAX(age) AS maximum_age FROM Sailors GROUP BY s.sid;
SELECT bid, COUNT(*) AS number_of_reserves FROM Reserves GROUP BY bid ORDER BY number_of_reserves DESC NULLS LAST;
SELECT bid, COUNT(*) AS number_of_reserves FROM Reserves GROUP BY bid ORDER BY number_of_reserves DESC NULLS LAST;
SELECT bid, COUNT(*) AS number_of_reserves FROM Boats WHERE bid > 50 GROUP BY bid ORDER BY number_of_reserves DESC NULLS LAST;
SELECT bid, COUNT(*) AS number_of_reserves FROM Boats WHERE bid > 50 GROUP BY bid ORDER BY number_of_reserves DESC NULLS LAST;
SELECT bid, COUNT(*) AS num_reserves FROM Reserves GROUP BY bid HAVING COUNT(*) > 1 ORDER BY num_reserves DESC NULLS LAST;
SELECT bid, COUNT(*) AS number_of_reserves FROM Reserves GROUP BY bid HAVING COUNT(*) > 1 ORDER BY number_of_reserves DESC NULLS LAST;
SELECT bid, COUNT(*) AS number_of_reserves FROM Reserves WHERE sid > 1 GROUP BY bid ORDER BY number_of_reserves DESC NULLS LAST;
SELECT bid, COUNT(*) AS number_of_reserves FROM Reserves WHERE sid > 1 GROUP BY bid ORDER BY number_of_reserves DESC NULLS LAST;
SELECT sid, AVG(age) AS average_age FROM Sailors si JOIN Reserves r ON si.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY s.rating ORDER BY s.rating NULLS LAST;
SELECT sid, AVG(age) AS average_age FROM Sailors si JOIN Reserves r ON si.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE b.color = 'red' GROUP BY si.sid ORDER BY average_age NULLS LAST;
SELECT sid, name, rating, age FROM Sailors ORDER BY rating DESC, age ASC;
SELECT sid, name, rating, age FROM Sailors ORDER BY rating DESC, age ASC;
SELECT bid FROM Boats;
SELECT bid FROM Boats;
SELECT bid FROM Boats WHERE color ilike '%red%' ORDER BY bid NULLS LAST; ORDER BY bid;
SELECT bid FROM Boats WHERE color ilike '%red%' ORDER BY bid NULLS LAST; ORDER BY bid;
SELECT bid, name FROM Boats JOIN Reserves ON Boats.bid = Reserves.bid JOIN Sailors ON Reserves.sid = Sailors.sid WHERE Sailors.age BETWEEN 20 AND 30;
SELECT bid, name FROM Sailors s JOIN Reserves r ON s.sid = r.sid JOIN Boats b ON r.bid = b.bid WHERE age BETWEEN 20 AND 30;
SELECT sid, name, rating FROM Sailors WHERE rating > (SELECT AVG(rating) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red');
SELECT sid, name, rating FROM Sailors WHERE rating > (SELECT AVG(rating) FROM Sailors JOIN Reserves ON Sailors.sid = Reserves.sid JOIN Boats ON Reserves.bid = Boats.bid WHERE Boats.color = 'red');
SELECT sid, MAX(rating) AS max_rating FROM Sailors GROUP BY s.sid;
SELECT sid, MAX(rating) AS max_rating FROM Sailors GROUP BY s.sid;
SELECT sid FROM Reserves WHERE bid = (SELECT bid FROM Boats WHERE name ilike '%Melon%'); ORDER BY sid;
SELECT sid FROM Reserves WHERE bid = (SELECT bid FROM Boats WHERE name ilike '%Melon%'); ORDER BY sid;
SELECT sid, name, age, rating FROM Sailors ORDER BY rating DESC;
SELECT sid, name, age, rating FROM Sailors ORDER BY rating DESC;
SELECT headphone.Store_ID, h.model FROM headphone JOIN stock s ON headphone.Headphone_ID = s.Headphone_ID JOIN headphone h ON s.Headphone_ID = h.Headphone_ID ORDER BY h.price DESC LIMIT 1;
SELECT headphone.Headphone_ID, h.model FROM headphone h ORDER BY h.price DESC NULLS LAST LIMIT 1;
SELECT headphone.Headphone_ID, h.model FROM headphone h ORDER BY h.model ASC;
SELECT headphone.Headphone_ID, h.model FROM headphone h ORDER BY h.model ASC;
SELECT headphone.Headphone_ID, h.class FROM headphone h GROUP BY h.class ORDER BY COUNT(h.class) DESC LIMIT 1;
SELECT headphone.Headphone_ID, h.class FROM headphone h GROUP BY h.class ORDER BY COUNT(h.class) DESC LIMIT 1;
SELECT headphone.Headphone_ID, h.class FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY h.Headphone_ID, h.class HAVING COUNT(s.Headphone_ID) > 2;
SELECT headphone.Headphone_ID, h.class FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID GROUP BY h.Headphone_ID, h.class HAVING COUNT(h.Headphone_ID) <= 2;
SELECT headphone.Store_ID, h.class, COUNT(*) AS count FROM headphone JOIN stock s ON headphone.Headphone_ID = s.Headphone_ID JOIN h ON headphone.class = h.class WHERE h.price > 200 GROUP BY h.class;
SELECT headphone.Headphone_ID, h.class, COUNT(*) FROM headphone h JOIN stock s ON h.Headphone_ID = s.Headphone_ID WHERE h.price > 200 GROUP BY h.Headphone_ID, h.class;
SELECT headphone.Headphone_ID, COUNT(DISTINCT headphone.Earpads) AS num_earpads FROM headphone GROUP BY headphone.Headphone_ID ORDER BY num_earpads DESC NULLS LAST;
SELECT headphone.Headphone_ID, COUNT(DISTINCT headphone.Earpads) AS num_earpads FROM headphone GROUP BY headphone.Headphone_ID ORDER BY num_earpads DESC NULLS LAST;
SELECT headphone.Store_ID, h.earpads FROM headphone h JOIN (SELECT store_id, COUNT(*) AS count_of_headphones FROM stock GROUP BY store_id) s ON h.store_id = s.store_id WHERE h.class = 'earpad' ORDER BY s.count_of_headphones DESC NULLS LAST LIMIT 2;
SELECT headphone.Store_ID, COUNT(heaDphone.Headphone_ID) AS total_headphones FROM headphone GROUP BY hEadphone.StoRE_ID ORDER BY total_headphones DESC NULLS LAST LIMIT 2;
SELECT headphone.Headphone_ID, h.model, h.class, h.construction FROM headphone h ORDER BY price ASC LIMIT 1;
SELECT headphone.Headphone_ID, h.model, h.class, h.construction FROM headphone h ORDER BY h.price ASC LIMIT 1;
SELECT headphone.Store_ID, h.Construction, AVG(h.Price) AS Average_price FROM headphone JOIN stock s ON headphone.Headphone_ID = s.Headphone_ID JOIN headphone h ON s.Headphone_ID = h.Headphone_ID GROUP BY h.Construction;
SELECT headphone.Store_ID, AVG(headphone.Price) AS Average_Price FROM headphone GROUP BY headphone.Store_ID;
SELECT headphone.Headphone_ID, h.class FROM headphone h JOIN (SELECT DISTINCT class FROM headphone WHERE earpads ilike '%Bowls%') AS h1 ON h.class = h1.class JOIN (SELECT DISTINCT class FROM headphone WHERE earpads ilike '%Comfort Pads%') AS h2 ON h.class = h2.class;
SELECT headphone.Headphone_ID, headphone.Class FROM headphone WHERE headphone.Earpads ilike '%Bowls%' AND headphone.Earpads ilike '%Comfort%Pads%' ORDER BY headphone.Class NULLS LAST;
SELECT headphone.Headphone_ID, headphone.Model FROM headphone WHERE headphone.Construction not ilike '%plastic%' AND headphone.Earpads IS NOT NULL;
SELECT headphone.Headphone_ID, headphone.Model FROM headphone WHERE headphone.Construction not ilike '%plastic%' AND headphone.Earpads IS NOT NULL;
SELECT headphone.Headphone_ID, headphone.Model FROM headphone WHERE headphone.Price < (SELECT AVG(headphone.Price) FROM headphone);
SELECT headphone.Headphone_ID, h.model FROM headphone h WHERE h.price < (SELECT AVG(h2.price) FROM headphone h2);
SELECT store.Store_ID, store.Name FROM store store ORDER BY store.Date_Opened NULLS LAST;
SELECT store.Store_ID, store.Name FROM store store ORDER BY store.Date_Opened NULLS LAST;
SELECT store.Store_ID, store.Name, store.Parking FROM store store WHERE store.Neighborhood ilike '%Tarzana%' ORDER BY store.Store_ID NULLS LAST;
SELECT store.Store_ID, store.Name, store.Parking FROM store store WHERE store.Neighborhood ilike '%Tarzana%' ORDER BY store.Name NULLS LAST;
SELECT store.Store_ID, store.Neighborhood FROM store store GROUP BY store.Store_ID, store.Neighborhood ORDER BY store.Neighborhood NULLS LAST;
SELECT store.Store_ID, store.Name, store.Neighborhood FROM store store GROUP BY store.Store_ID, store.Name, store.Neighborhood ORDER BY COUNT(DISTINCT store.Neighborhood) DESC NULLS LAST;
SELECT store.Store_ID, store.Name, COUNT(sstore.Store_ID) AS store_count FROM store sstore JOIN neighborhood nbh ON sstore.Neighborhood = nbh.Nbh_Name GROUP BY sstore.Store_ID, sstore.Name ORDER BY store_count DESC NULLS LAST;
SELECT store.Store_ID, store.Name, COUNT(sstore.Store_ID) AS number_of_stores FROM store sstore JOIN neighborhood nbh ON sstore.Neighborhood = nbh.Nbh_Name GROUP BY sstore.Store_ID, sstore.Name ORDER BY number_of_stores DESC NULLS LAST;
SELECT store.Store_ID, sname.Name AS Store_Name, SUM(stock.Quantity) AS Total_Stock FROM stock JOIN store sstore ON stock.Store_ID = sstore.Store_ID JOIN headphone hph ON stock.Headphone_ID = hph.Headphone_ID JOIN STORE sname ON sstore.Store_ID = sname.Store_ID GROUP BY sstore.Store_ID, sname.Name ORDER BY Total_Stock DESC LIMIT 1;
SELECT store.Store_ID, s.name AS Store_Name, SUM(st.quantity) AS Total_Quantity FROM stock st JOIN store s ON st.Store_ID = s.Store_ID GROUP BY s.Store_ID, s.name ORDER BY Total_Quantity DESC NULLS LAST;
SELECT store.Store_ID, store.Name FROM store store LEFT JOIN stock stk ON store.Store_ID = stk.Store_ID AND stk.Quantity > 0 WHERE stk.Store_ID IS NULL;
SELECT store.Store_ID, store.Name FROM store store LEFT JOIN stock stk ON store.Store_ID = stk.Store_ID AND stk.Quantity > 0 WHERE stk.Store_ID IS NULL ORDER BY store.Name NULLS LAST;
SELECT headphone.Headphone_ID, headphone.Model FROM headphone LEFT JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID WHERE stock.Headphone_ID IS NULL;
SELECT headphone.Headphone_ID, headphone.Model FROM headphone LEFT JOIN stock ON headphone.Headphone_ID = stock.Headphone_ID AND stock.Quantity > 0 WHERE stock.Headphone_ID IS NULL;
SELECT headphone.Headphone_ID, h.model, SUM(s.quantity) AS total_quantity FROM stock s JOIN headphone h ON s.Headphone_ID = h.Headphone_ID GROUP BY h.Headphone_ID, h.model ORDER BY total_quantity DESC LIMIT 1;
SELECT headphone.Headphone_ID, h.model, SUM(s.quantity) AS total_quantity FROM stock s JOIN headphone h ON s.Headphone_ID = h.Headphone_ID GROUP BY h.Headphone_ID, h.model ORDER BY total_quantity DESC LIMIT 1;
SELECT stock.Quantity FROM stock WHERE store.Name = 'Woodman';  ORDER BY stock.Quantity;
SELECT store.Store_ID, SUM(sstock.Quantity) AS total_quantity FROM stock sstock JOIN store sstore ON sstock.Store_ID = sstore.Store_ID WHERE sstore.Name = 'Woodman' GROUP BY sstore.Store_ID;
SELECT store.Store_ID, store.Name, store.Neighborhood FROM store sotre LEFT JOIN stock stok ON sotre.Store_ID = stok.Store_ID AND stok.Quantity > 0 WHERE stok.Store_ID IS NULL ORDER BY sotre.Neighborhood NULLS LAST;
SELECT store.Store_ID, store.Name, store.Neighborhood FROM store sotre JOIN stock stok ON sotre.Store_ID = stok.Store_ID WHERE stok.Quantity = 0;
SELECT Author.title FROM Author;
SELECT Author.paper_id, COUNT(DISTINCT Author.author_id) AS num_authors FROM Author GROUP BY Author.paper_id;
SELECT paper_id FROM Paper;
SELECT paper_id FROM Paper;
SELECT Affiliation.paper_id, COUNT(DISTINCT Affiliation.affiliation_id) AS number_of_affiliations FROM Affiliation GROUP BY Affiliation.papier_id;
SELECT Affiliation.paper_id, COUNT(*) AS num_affiliations FROM Affiliation GROUP BY Affiliation.papier_id;
SELECT paper_id FROM Paper WHERE venue = 'NAACL 2000' AND year = 2000; COUNT(*) AS number_of_papers;
SELECT paper_id FROM Paper WHERE venue = 'NAACL 2000' GROUP BY paper_id; COUNT(*) AS number_of_papers;
SELECT paper_id FROM Paper WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University') AND year = 2009; COUNT(*) AS number_of_papers;
SELECT paper_id FROM Paper WHERE venue ilike '%Columbia University%' AND year = 2009; COUNT(*) AS number_of_papers; SELECT number_of_papers; NULLS LAST; SELECT COUNT(*) AS total_papers FROM Paper; NULLS LAST; SELECT total_papers - number_of_papers AS remaining_papers FROM Paper WHERE venue ilike '%Columbia University%' AND year = 2009; NULLS LAST; SELECT remaining_papers FROM Paper; NULLS LAST; SELECT COUNT(*) AS total_papers FROM Paper WHERE venue ilike '%Columbia University%'; NULLS LAST; SELECT total_papers - remaining_papers AS unpublished_papers FROM Paper WHERE venue ilike '%Columbia University%'; NULLS LAST; SELECT unpublished_papers FROM
SELECT Affiliation.title, AFFiliation.address FROM AFFiliation;
SELECT Affiliation.title, AFFiliation.address FROM AFFiliation;
SELECT paper_id, venue, year FROM Paper ORDER BY year NULLS LAST; SELECT DISTINCT venue, year FROM Paper ORDER BY year NULLS LAST; SELECT DISTINCT year FROM Paper ORDER BY year NULLS LAST; SELECT paper_id, venue, year FROM Paper WHERE venue = 'Venue' AND year = 2020 ORDER BY paper_id NULLS LAST; SELECT paper_id, venue, year FROM Paper WHERE venue = 'Venue' AND year BETWEEN 2010 AND 2020 ORDER BY paper_id NULLS LAST; SELECT paper_id, venue, year FROM Paper WHERE venue IN ('Venue1', 'Venue2') AND year BETWEEN 2010 AND 2020 ORDER BY paper_id NULLS LAST; SELECT paper
SELECT paper_id, venue, year FROM Paper WHERE venue IS NOT NULL ORDER BY year NULLS LAST; SELECT DISTINCT venue FROM Paper WHERE venue IS NOT NULL ORDER BY venue NULLS LAST; SELECT DISTINCT affiliation_id FROM Author_list; SELECT DISTINCT paper_id, author_id, affiliation_id FROM Author_list; SELECT DISTINCT paper_id, cited_paper_id FROM Citation; SELECT DISTINCT paper_id FROM Paper; SELECT DISTINCT paper_id, paper_id FROM Citation; SELECT DISTINCT paper_id, paper_id FROM Citation; SELECT DISTINCT paper_id, paper_id FROM Citation; SELECT DISTINCT paper_id, paper_id FROM Citation; SELECT DISTINCT paper_id, paper_id FROM Citation; SELECT DISTINCT paper_id, paper_id
SELECT paper_id, title FROM Paper JOIN Author_list ON paper_id = papeer_id JOIN Affiliation ON affiliation_id = author_list.affiliation_id WHERE name ilike '%Harvard%' ORDER BY title NULLS LAST;
SELECT paper_id, title FROM Paper JOIN Author_list ON paper.paper_id = author_list.paper_id JOIN Affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name ilike '%Harvard%University%' ORDER BY paper.year NULLS LAST;
SELECT paper_id, title FROM Paper WHERE author_id IN (SELECT author_id FROM Author WHERE name ILIKE '%Mckeown%');
SELECT paper_id, title FROM Paper JOIN Author_list ON paper.paper_id = author_list.paper_id WHERE author_list.author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown%');
SELECT paper_id, title FROM Paper JOIN Author_list ON paper_id = papeer_id JOIN Affiliation ON author_list.affiliation_id = affiliation_id WHERE affiliation_name IN ('Stanford University', 'Columbia University') ORDER BY title NULLS LAST;
SELECT paper_id, title FROM Paper JOIN Author_list ON paper.paper_id = author_list.paper_id JOIN Affiliation ON author_list.affiliation_id = affiliation.affiliation_id WHERE affiliation.name IN ('Stanford', 'Columbia') GROUP BY paper.paper_id, paper.title HAVING COUNT(DISTINCT affiliation.affiliation_id) >= 2;
SELECT paper_id, title FROM Paper JOIN Author_list ON paper.paper_id = author_list.paper_id WHERE author_list.author_id IN (SELECT author_id FROM Author WHERE name IN ('Mckeown', 'Kathleen', 'Rambow', 'Owen')) ORDER BY paper.paper_id NULLS LAST;
SELECT paper_id, title FROM Paper JOIN Author_list ON paper.paper_id = author_list.paper_id JOIN Author ON author_list.author_id = author.author_id WHERE author.name ilike '%Mckeown%' AND author.name ilike '%Kathleen%' AND author.name ilike '%Rambow%' AND author.name ilike '%Owen%';
SELECT paper_id, title FROM Paper WHERE papeer_id IN (SELECT DISTINCT a.paper_id FROM Author_list a JOIN Author a2 ON a.author_id = a2.author_id WHERE a2.name ILIKE '%Mckeown%' AND a2.name NOT ILIKE '%Rambow%');;
SELECT paper_id, title FROM Paper JOIN Author_list ON paper.paper_id = author_list.paper_id JOIN Author ON author_list.author_id = author.author_id WHERE author.name ilike '%Mckeown%' AND author.name not ilike '%Rambow%' ORDER BY paper.paper_id NULLS LAST;
SELECT paper_id, title FROM Paper JOIN Author_list ON paper.paper_id = author_list.paper_id JOIN Author ON author_list.author_id = author.author_id WHERE author.name ilike '%Mckeown%' OR author.name ilike '%Kathleen%' OR author.name ilike '%Rambow%' OR author.name ilike '%Owen%' ORDER BY paper.paper_id NULLS LAST;
SELECT paper_id, title FROM Paper WHERE paper_id IN (SELECT a.paper_id FROM Author_list a JOIN Author a2 ON a.author_id = a2.author_id WHERE a2.name ilike '%Mckeown%' OR a2.name ilike '%Kathleen%' OR a2.name ilike '%Rambow%' OR a2.name ilike '%Owen%') ORDER BY papre_id NULLS LAST;
SELECT Author.title, COUNT(Autor_list.paper_id) AS paper_count FROM Author JOIN Autor_list ON Author.author_id = Autor_list.author_id GROUP BY Author.title ORDER BY paper_count DESC;
SELECT Author.title, COUNT(*) AS paper_count FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.title ORDER BY paper_count DESC;
SELECT Affiliation.title, COUNT(Paper.paper_id) AS paper_count FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.title ORDER BY paper_count ASC;
SELECT Affiliation.title, COUNT(Paper.paper_id) AS paper_count FROM Affiliation JOIN Author_list ON Affiliation.affiliation_id = Author_list.affiliation_id JOIN Paper ON Author_list.paper_id = Paper.paper_id GROUP BY Affiliation.title ORDER BY paper_count DESC;
SELECT Author.title, COUNT(*) AS paper_count FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.title HAVING COUNT(*) > 50 ORDER BY paper_count DESC NULLS LAST;
SELECT Author.title FROM Author WHERE Author.author_id IN (SELECT Author_list.author_id FROM Author_list GROUP BY Author_list.author_id HAVING COUNT(Author_list.paper_id) > 50); SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.name HAVING COUNT(Author_list.paper_id) > 50; SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.name HAVING COUNT(Author_list.paper_id) > 50; SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.name HAVING COUNT(Author_list.paper_id) > 50; SELECT Author.name FROM Author
SELECT Author.title, COUNT(*) AS num_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id GROUP BY Author.title HAVING COUNT(*) = 1;
SELECT Author.title FROM Author WHERE Author.author_id IN (SELECT Author_list.author_id FROM Author_list GROUP BY Author_list.author_id HAVING COUNT(Author_list.paper_id) = 1);;
SELECT paper_id, venue, year, COUNT(*) AS publication_count FROM Paper GROUP BY paper_id, venue, year ORDER BY publication_count DESC LIMIT 1;
SELECT paper_id, venue, year, COUNT(*) AS publication_count FROM paper GROUP BY papier_id, venue, year ORDER BY publication_count DESC LIMIT 1;
SELECT paper_id, COUNT(*) AS publication_count FROM paper GROUP BY paper_id ORDER BY publication_count ASC LIMIT 1; SELECT venue FROM paper WHERE paper_id = 'the-minimum-publication-count';;
SELECT paper_id, COUNT(*) AS publication_count FROM paper GROUP BY paper_id ORDER BY publication_count ASC LIMIT 1; SELECT venue FROM paper WHERE paper_id = 'papere_id'; -- Replace 'papere_id' with the actual paper id.
SELECT paper_id FROM Citation WHERE cited_paper_id = 'A00-1002';  ORDER BY paper_id;
SELECT paper_id FROM Citation WHERE cited_paper_id = 'A00-1002'; COUNT(*) AS num_papers; SELECT num_papers; NULLS LAST;
SELECT paper_id, COUNT(cited_paper_id) AS citation_count FROM Citation WHERE paper_id = 'D12-1027' GROUP BY paper_id;
SELECT paper_id, COUNT(cited_paper_id) AS reference_count FROM Citation WHERE cited_paper_id = 'D12-1027' GROUP BY paper_id;
SELECT paper_id, COUNT(cited_paper_id) AS num_citations FROM Citation GROUP BY papern_id ORDER BY num_citations DESC LIMIT 1;
SELECT paper_id, COUNT(cited_paper_id) AS num_citations FROM Citation GROUP BY papern_id ORDER BY num_citations DESC LIMIT 1;
SELECT paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC LIMIT 1;
SELECT paper_id, COUNT(*) AS citation_count FROM Citation GROUP BY paper_id ORDER BY citation_count DESC LIMIT 1;
SELECT paper_id, COUNT(*) AS number_of_citations FROM Citation GROUP BY papern_id ORDER BY number_of_citations DESC LIMIT 10;
SELECT paper_id, COUNT(*) AS number_of_citations FROM Citation GROUP BY papern_id ORDER BY number_of_citations DESC LIMIT 10;
SELECT Author.title, COUNT(*) AS number_of_citations FROM Author JOIN Citation ON Author.author_id = Citation.paper_id WHERE Author.name ilike '%Mckeown%Kathleen%' GROUP BY Author.title;
SELECT Author.paper_id, COUNT(*) AS citation_count FROM Citation JOIN Author ON Citation.cited_paper_id = Author.paper_id WHERE Author.name ilike '%Mckeown%Kathleen%' GROUP BY Author.paper_id;
SELECT paper_id FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Paper WHERE title ilike '%Mckeown%Kathleen%'); ORDER BY paper_id;
SELECT paper_id, COUNT(*) AS num_citations FROM Citation WHERE cited_paper_id IN (SELECT paper_id FROM Paper WHERE title ilike '%Mckeown%Kathleen%' GROUP BY paper_id HAVING COUNT(DISTINCT author_id) > 1) GROUP BY papername_id;
SELECT Author.title, COUNT(Citation.cited_paper_id) AS citation_count FROM Citation JOIN Paper ON Citation.cited_paper_id = Paper.paper_id JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id GROUP BY Author.title ORDER BY citation_count DESC LIMIT 1;
SELECT Author.title, COUNT(Citation.cited_paper_id) AS citation_count FROM Author JOIN Citation ON Author.author_id = Citation.paper_id GROUP BY Author.title ORDER BY citation_count DESC LIMIT 1;
SELECT paper_id, title, venue, year FROM Paper WHERE author_id IN (SELECT author_id FROM Author WHERE name ilike '%Mckeown%Kathleen%') ORDER BY paper_id NULLS LAST;
SELECT paper_id, title, venue, year FROM Paper JOIN Author_list ON paper_id = papeer_id JOIN Author ON author_id = id WHERE name ilike '%Mckeown%' AND name ilike '%Kathleen%' ORDER BY venue, year;
SELECT paper_id, title, venue, year FROM Paper WHERE affiliations LIKE '%Columbia University%' ORDER BY venue, year;
SELECT paper_id, title, venue, year FROM Paper WHERE affiliations_id = (SELECT affiliation_id FROM Affiliation WHERE name ilike '%Columbia%University%'); SELECT DISTINCT venue, year FROM Paper WHERE affiliations_id = (SELECT affiliation_id FROM Affiliation WHERE name ilike '%Columbia%University%'); SELECT DISTINCT affiliation_id FROM Affiliation WHERE name ilike '%Columbia%University%' ORDER BY affiliation_id NULLS LAST; SELECT COUNT(*) FROM Paper WHERE affiliations_id = (SELECT affiliation_id FROM Affiliation WHERE name ilike '%Columbia%University%'); SELECT COUNT(DISTINCT paper_id) FROM Paper WHERE affiliations_id = (SELECT affiliation_id FROM Affiliation WHERE name ilike '%Columbia%University%'); SELECT COUNT(DI
SELECT Author.title, COUNT(*) AS paper_count FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Paper.year = 2009 GROUP BY Author.title ORDER BY paper_count DESC LIMIT 1;
SELECT Author.title, COUNT(*) AS paper_count FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Author ON Author_list.author_id = Author.author_id WHERE Paper.year = 2009 GROUP BY Author.title ORDER BY paper_count DESC LIMIT 1;
SELECT Affiliation.title, COUNT(*) AS paper_count FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Paper.year = 2009 GROUP BY Affiliation.title ORDER BY paper_count DESC LIMIT 3;
SELECT Affiliation.title, COUNT(*) AS paper_count FROM Paper JOIN Author_list ON Paper.paper_id = Author_list.paper_id JOIN Affiliation ON Author_list.affiliation_id = Affiliation.affiliation_id WHERE Paper.year = 2009 GROUP BY Affiliation.title ORDER BY paper_count DESC LIMIT 3;
SELECT paper_id FROM Paper WHERE affiliation_id IN (SELECT affiliation_id FROM Affiliation WHERE name ILIKE '%columbia%') AND year <= 2009;
SELECT paper_id FROM Paper WHERE venue ILIKE '%Columbia University%' AND year <= 2009; COUNT(*) AS total_papers; SELECT total_papers; ORDER BY year;
SELECT paper_id FROM Paper WHERE venue = 'Stanford University' AND year BETWEEN 2000 AND 2009; COUNT(*) AS number_of_papers.
SELECT paper_id FROM Paper WHERE venue ilike '%Stanford%' AND year BETWEEN 2000 AND 2009; COUNT(*) AS paper_count; SELECT paper_count; paper_count = 777.0; SELECT paper_count; paper_count = 777.0; SELECT paper_count; paper_count = 777.0; SELECT paper_count; paper_count = 777.0; SELECT paper_count; paper_count = 777.0; SELECT paper_count; paper_count = 777.0; SELECT paper_count; paper_count = 777.0; SELECT paper_count; paper_count = 777.0; SELECT paper_count; paper_count = 777.0; SELECT paper_count; paper_count = 777
SELECT paper_id, COUNT(author_id) AS author_count FROM Author_list GROUP BY paper_id ORDER BY author_count DESC LIMIT 1; SELECT title FROM Paper WHERE paper_id = (SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY author_count DESC LIMIT 1);
SELECT paper_id, COUNT(DISTINCT author_id) AS num_authors FROM Author_list GROUP BY paper_id ORDER BY num_authors DESC LIMIT 1;
SELECT Author_list.paper_id, COUNT(DISTINCT Author_list.author_id) AS number_of_authors FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name ilike '%Mckeown%Kathleen%' GROUP BY Author_list.paper_id;
SELECT Author_list.paper_id, COUNT(DISTINCT Author_list.author_id) AS num_authors FROM Author_list JOIN Author ON Author_list.author_id = Author.author_id WHERE Author.name ilike '%Mckeown%Kathleen%' GROUP BY Author_list.paper_id;
SELECT Author.title, COUNT(*) AS co_authorship_count FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id WHERE Author.name ilike '%Mckeown%Kathleen%' GROUP BY Author.title ORDER BY co_authorship_count DESC LIMIT 1;
SELECT Author.paper_id, COUNT(*) AS paper_count FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id WHERE Author.name IN ('Mckeown', 'Kathleen') GROUP BY Author.paperc_id ORDER BY paper_count DESC LIMIT 1;
SELECT paper_id FROM Paper WHERE title ilike '%translation%';
SELECT paper_id FROM Paper WHERE title ilike '%translation%';
SELECT paper_id, title FROM paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM citation);
SELECT paper_id, title FROM paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM citation);
SELECT Affiliation.title FROM Affiliation WHERE Affiliation.address ilike '%China%' ORDER BY COUNT(Paper.paper_id) DESC LIMIT 1;
SELECT Affiliation.title FROM Affiliation WHERE Affiliation.address ilike '%China%' ORDER BY COUNT(Paper.paper_id) DESC LIMIT 1;
SELECT paper_id, COUNT(*) AS num_papers FROM paper GROUP BY venue, year ORDER BY venue, year;
SELECT paper_id, venue, year, COUNT(*) AS number_of_papers FROM paper GROUP BY venue, year ORDER BY venue, year;
SELECT paper_id, COUNT(*) AS num_papers FROM Paper GROUP BY papert_id;
SELECT paper_id, COUNT(*) AS number_of_papers FROM paper GROUP BY papier_id;
SELECT paper_id, title FROM paper WHERE citation_count > 50;
SELECT paper_id, title FROM paper WHERE citation_count > 50;
SELECT Author.title, COUNT(*) AS num_papers FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id JOIN Paper ON Author_list.paper_id = Paper.paper_id WHERE EXISTS (SELECT 1 FROM Citation WHERE Citation.cited_paper_id = Paper.paper_id GROUP BY Citation.cited_paper_id HAVING COUNT(*) > 50) GROUP BY AuthoR.titel HAVING COUNT(*) = 0;
SELECT Author.title, COUNT(*) AS number_of_papers FROM Author LEFT JOIN Paper ON Author.author_id = Paper.author_id WHERE Paper.paper_id IN (SELECT cited_paper_id FROM Citation GROUP BY cited_paper_id HAVING COUNT(*) > 50) GROUP BY Author.name;
SELECT Author.title, Author.first_name, Author.last_name FROM Author JOIN Paper ON Author.author_id = Paper.author_id WHERE Paper.venue ilike '%NAACL%' OR Paper.venue ilike '%ACL%' AND Paper.year = 2009;
SELECT Author.title FROM Author_list WHERE Author_list.paper_id IN (SELECT Paper.paper_id FROM Paper WHERE Paper.year = 2009 AND Paper.venue IN ('NAACL', 'ACL')); SELECT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id WHERE Author_list.paper_id IN (SELECT Paper.paper_id FROM Paper WHERE Paper.year = 2009 AND Paper.venue IN ('NAACL', 'ACL')); SELECT DISTINCT Author.name FROM Author JOIN Author_list ON Author.author_id = Author_list.author_id WHERE Author_list.paper_id IN (SELECT Paper.paper_id FROM Paper WHERE Paper.year = 2009 AND Paper.venue IN ('NAACL', 'ACL'));
SELECT Author.title FROM Author WHERE Author.name NOT IN (SELECT Author.name FROM Author JOIN Paper ON Author.author_id = Paper.author_id WHERE Paper.venue = 'ACL') ORDER BY Author.title NULLS LAST;
SELECT Author.title FROM Author WHERE Author.name NOT IN (SELECT Author.name FROM Author JOIN Paper ON Author.author_id = Paper.author_id WHERE Paper.venue = 'ACL') ORDER BY Author.title NULLS LAST;
SELECT conference.Conference_ID FROM conference;
SELECT conference.Conference_ID FROM conference;
SELECT conference.Conference_ID, conference.Conference_Name FROM conference conference GROUP BY conference.Conference_ID, conference.Conference_Name ORDER BY conference.Conference_Name NULLS LAST;
SELECT conference.Conference_ID, conference.Conference_Name FROM conference ORDER BY conference.Conference_Name NULLS LAST;
SELECT conference.Conference_ID, conference.Conference_Name, conference.Year, conference.Location FROM conference ORDER BY conference.Conference_ID NULLS LAST;
SELECT conference.Conference_ID, conference.Conference_Name, conference.Year, conference.Location FROM conference ORDER BY conference.Conference_ID NULLS LAST;
SELECT conference.Conference_ID, conference.Conference_Name, COUNT(conference_participation.Conference_ID) AS number_of_times FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY conference.Conference_ID, conference.Conference_Name ORDER BY number_of_times DESC NULLS LAST;
SELECT conference.Conference_ID, conference.Conference_Name, COUNT(*) AS number_of_times FROM conference GROUP BY conference.Conference_ID, conference.Conference_Name ORDER BY number_of_times DESC NULLS LAST;
SELECT conference.Conference_ID, conference.Year, COUNT(conference.Conference_ID) AS number_of_conferences FROM conference GROUP BY conference.Year ORDER BY conference.Year NULLS LAST;
SELECT conference.Conference_ID, conference.Conference_Name, conference.Year, COUNT(*) OVER (PARTITION BY conference.Year ORDER BY conference.Conference_ID) AS conference_count FROM conference ORDER BY conference.Year NULLS LAST;
SELECT conference.Conference_ID, conference.Year FROM conference ORDER BY conference.Year ASC NULLS LAST LIMIT 1;
SELECT conference.Conference_ID, conference.Year FROM conference ORDER BY conference.Year ASC NULLS LAST LIMIT 1;
SELECT conference.Conference_ID, conference.Location FROM conference GROUP BY conference.Location HAVING COUNT(CONFERENCE_ID) >= 2;
SELECT conference.Conference_ID, conference.Location FROM conference GROUP BY conference.Location HAVING COUNT(CONFERENCE_ID) >= 2 ORDER BY conference.Location NULLS LAST;
SELECT institution.staff_ID, i.institution_name, l.location, i.founded FROM institution i JOIN staff s ON i.institution_id = s.institution_id JOIN conference_participation cp ON s.staff_id = cp.staff_id JOIN conference c ON cp.conference_id = c.conference_id;
SELECT institution.staff_ID, i.institution_name, l.location_name, i.founded FROM i.institution_id = s.institution_id JOIN LOCATION l ON i.location_id = l.location_id;
SELECT institution.Conference_ID, COUNT(iNStitution.Institution_ID) AS number_of_institutions FROM iNStitution JOIN conference ON iNStitution.Conference_ID = conference.Conference_ID WHERE conference.year BETWEEN 1850 AND 1900 GROUP BY iNStitution.Conference_ID;
SELECT institution.Conference_ID, COUNT(iNStitution.Institution_ID) AS number_of_institutions FROM iNStitution JOIN conference ON iNStitution.Conference_ID = conference.Conference_ID WHERE conference.year BETWEEN 1850 AND 1900 GROUP BY iNStitution.Conference_ID;
SELECT institution.staff_ID, i.institution_name, l.location FROM i.institution_id = s.institution_id JOIN conference_participation cp ON s.staff_id = cp.staff_id JOIN conference c ON cp.conference_id = c.conference_id JOIN staff st ON s.staff_id = st.staff_id JOIN institution i ON st.institution_id = i.institution_id JOIN location l ON i.location = l.location_id ORDER BY i.founded DESC LIMIT 1;
SELECT institution.staff_ID, i.institution_name, l.location FROM i.institution_id = s.staff_id JOIN institution i ON s.staff_id = i.institution_id JOIN location l ON i.location = l.location_id ORDER BY i.founded DESC LIMIT 1;
SELECT institution.staff_ID, i.institution_name, COUNT(s.staff_id) AS total_staff FROM staff s JOIN institution i ON s.institution_id = i.institution_id WHERE i.founded > 1800 GROUP BY i.institution_name;
SELECT institution.staff_ID, i.name FROM institution i JOIN staff s ON i.institution_id = s.institution_id WHERE i.founded > 1800;
SELECT institution.staff_ID FROM institution WHERE NOT EXISTS (SELECT 1 FROM staff s WHERE s.institution_id = institution.institution_id); ORDER BY institution.staff_ID;
SELECT institution.staff_ID FROM institution WHERE NOT EXISTS (SELECT 1 FROM staff s WHERE s.institution_id = institution.institution_id); ORDER BY institution.staff_ID;
SELECT staff.staff_ID, staff.name FROM staff WHERE staff.age > (SELECT AVG(staff.age) FROM staff);
SELECT staff.staff_ID, staff.name FROM staff WHERE staff.age > (SELECT AVG(staff.age) FROM staff);
SELECT staff.staff_ID, MAX(staff.age) AS max_age, MIN(staff.age) AS min_age FROM staff WHERE staff.nationality ILIKE '%United%States%' GROUP BY staff.staff_ID;
SELECT staff.staff_ID, MIN(staff.age) AS min_age, MAX(staff.age) AS max_age FROM staff GROUP BY staff.staff_ID;
SELECT conference.Conference_ID, conference.Conference_Name FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID JOIN staff ON conference_participation.staff_ID = staff.staff_ID WHERE staff.Nationality ilike '%Canadian%' ORDER BY conference.Conference_Name NULLS LAST;
SELECT conference.Conference_ID, conference.Conference_Name FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID JOIN staff ON conference_participation.staff_ID = staff.staff_ID WHERE staff.Nationality ilike '%Canadian%' ORDER BY conference.Conference_ID NULLS LAST;
SELECT staff.staff_ID, staff.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE conference_participation.role ilike '%speaker%' AND conference_participation.role ilike '%sponsor%' GROUP BY staff.staff_ID, staff.name;
SELECT staff.staff_ID, staff.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE conference_participation.role ilike '%speaker%' AND conference_participation.role ilike '%sponsor%' GROUP BY staff.staff_ID, staff.name;
SELECT staff.staff_ID, staff.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE conference_participation.role ilike '%ACL%' AND staff.name IN (SELECT name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE conference_participation.role ilike '%Naccl%') ORDER BY staff.staff_ID NULLS LAST;
SELECT staff.staff_ID, staff.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID WHERE conference_participation.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name ilike '%ACL%') AND conference_participation.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name ilike '%NACCL%');;
SELECT staff.staff_ID, staff.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference.year IN (2003, 2004);
SELECT staff.staff_ID, staff.name FROM staff JOIN conference_participation ON staff.staff_ID = conference_participation.staff_ID JOIN conference ON conference_participation.conference_id = conference.conference_id WHERE conference.year IN (2003, 2004) ORDER BY staff.staff_ID NULLS LAST;
SELECT conference.Conference_ID, conference.Conference_Name, conference.Year, COUNT(DISTINCT conference_participation.staff_ID) AS total_participants FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY conference.Conference_ID, conference.Conference_Name, conference.Year ORDER BY total_participants DESC NULLS LAST;
SELECT conference.Conference_ID, conferenc.Conference_Name, conferenc.Year, COUNT(DISTINCT conference_participation.staff_ID) AS total_participants FROM cONFERENCE JOIN conference_participation ON cONFERENCE.Conference_ID = conference_participation.Conference_ID GROUP BY cONFERENCE.Conference_ID, cONFERENCE.Conference_Name, cONFERENCE.Year ORDER BY total_participants DESC NULLS LAST;
SELECT conference.Conference_ID, conference.Conference_Name FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY conference.Conference_ID, conference.Conference_Name ORDER BY COUNT(conference_participation.staff_ID) DESC NULLS LAST LIMIT 2;
SELECT conference.Conference_ID, conference.Conference_Name, COUNT(conference_participation.staff_id) AS total_participants FROM conference JOIN conference_participation ON conference.Conference_ID = conference_participation.Conference_ID GROUP BY conference.Conference_ID, conference.Conference_Name ORDER BY total_participants DESC NULLS LAST LIMIT 2;
SELECT staff.staff_ID, staff.name, staff.nationality FROM staff LEFT JOIN conference_participation ON staff.staff_id = conference_participation.staff_id AND conference_participation.conference_id = 757071 WHERE conference_participation.staff_id IS NULL; -- Replace 757071 with the ACL conference ID.
SELECT staff.staff_ID, staff.name, staff.nationality FROM staff LEFT JOIN conference_participation ON staff.staff_id = conference_participation.staff_id AND conference_participation.conference_id = 757071 WHERE conference_participation.staff_id IS NULL; -- Replace 757071 with the ACL conference ID.
SELECT institution.staff_ID, i.institution_name, l.location FROM i.institution_id NOT IN (SELECT c.staff_id FROM c.conference_id) JOIN staff s ON i.institution_id = s.institution_id JOIN conference c ON s.staff_id = c.staff_id JOIN institution i ON s.institution_id = i.institution_id JOIN LOCATION l ON i.location = l.location_id WHERE c.year = 2004;
SELECT institution.staff_ID, i.institution_name, l.location FROM institution i JOIN conference_participation cp ON i.institution_id = cp.staff_id JOIN conference c ON cp.conference_id = c.conference_id WHERE c.year = 2004;
SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills);
SELECT plane_name FROM PilotSkills WHERE age = (SELECT MIN(age) FROM PilotSkills);
SELECT plane_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC;
SELECT plane_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC;
SELECT plane_name, h.location, ps.age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE ps.age < 30;
SELECT plane_name, pilot_name, age FROM PilotSkills WHERE age < 30;
SELECT plane_name FROM PilotSkills WHERE pplane_name = 'Piper Cub' AND age < 35;
SELECT plane_name FROM PilotSkills WHERE age < 35 AND pplane_name = 'Piper Cub';
SELECT Hangar.location FROM Hangar WHERE Hangar.plane_name = 'F-14 Fighter'; ORDER BY Hangar.location;
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter';
SELECT location, COUNT(*) AS number_of_planes FROM Hangar GROUP BY location;
SELECT location, COUNT(*) AS num_hangars FROM Hangar GROUP BY location ORDER BY num_hangars DESC NULLS LAST;
SELECT plane_name FROM PilotSkills WHERE pname = 'Jones' AND age = 32;
SELECT plane_name FROM PilotSkills WHERE pname = 'Jones' AND age = 32;
SELECT plane_name FROM PilotSkills WHERE age > 40; ORDER BY plane_name;
SELECT plane_name, COUNT(*) FROM PilotSkills ps WHERE ps.age > 40 GROUP BY plane_name;
SELECT plane_name FROM PilotSkills WHERE age < 35 AND pplane_name = 'B-52 Bomber';
SELECT plane_name, COUNT(*) AS number_of_planes FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE ps.age < 35 AND ptype_name = 'B-52' GROUP BY plane_name;
SELECT plane_name FROM PilotSkills WHERE pplane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1;
SELECT plane_name FROM PilotSkills WHERE pplane_name = 'Piper Cub' ORDER BY age ASC LIMIT 1;
SELECT plane_name FROM Hangar WHERE COUNT(*) OVER (PARTITION BY plane_name) = (SELECT MAX(COUNT(*)) FROM PilotSkills);
SELECT plane_name FROM PilotSkills WHERE COUNT(*) = (SELECT MAX(COUNT) FROM (SELECT ps.plane_name, COUNT(*) AS COUNT FROM PilotSkills GROUP BY ps.plane_name) AS subquery);
SELECT plane_name FROM Hangar WHERE plane_name NOT IN (SELECT ps.plane_name FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY COUNT(ps.plane_name) DESC LIMIT 1);
SELECT plane_name FROM Hangar WHERE plane_name NOT IN (SELECT ps.plane_name FROM PilotSkills ps GROUP BY ps.plane_name ORDER BY COUNT(ps.plane_name) DESC LIMIT 1);
SELECT plane_name FROM PilotSkills WHERE ploc_name = 'Chicago'; ORDER BY plane_name;
SELECT plane_name FROM Hangar WHERE location = 'Chicago' GROUP BY plane_name; SELECT COUNT(DISTINCT ps.pilot_name) AS pilot_count FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Chicago'; SELECT COUNT(DISTINCT ps.pilot_name) AS pilot_count FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Chicago'; SELECT COUNT(DISTINCT ps.pilot_name) AS pilot_count FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location = 'Chicago'; SELECT COUNT(DISTINCT ps.pilot_name) AS pilot_count FROM PilotSkills ps JOIN H
SELECT plane_name FROM PilotSkills WHERE pname = 'Smith' AND age = 41; ORDER BY plane_name;
SELECT plane_name FROM PilotSkills WHERE pname = 'Smith' AND age = 41;
SELECT plane_name FROM PilotSkills WHERE plane_name IS NOT NULL GROUP BY plane_name;  ORDER BY plane_name;
SELECT plane_name FROM PilotSkills WHERE pplane_name IS NOT NULL GROUP BY plane_name ORDER BY COUNT(pplane_name) DESC;
SELECT plane_name FROM PilotSkills WHERE pilot_name ILIKE '%Smith%' GROUP BY plane_name; ORDER BY plane_name;
SELECT plane_name, COUNT(*) AS number_of_planes FROM PilotSkills WHERE pilot_name ILIKE '%Smith%' GROUP BY plane_name;
SELECT plane_name FROM PilotSkills WHERE age > 40; ORDER BY plane_name;
SELECT plane_name, COUNT(*) AS num_planes FROM PilotSkills ps WHERE ps.age > 40 GROUP BY plane_name;
SELECT plane_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;
SELECT plane_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;
SELECT plane_name FROM PilotSkills WHERE ptype = 'P' ORDER BY age DESC;
SELECT plane_name FROM PilotSkills WHERE ptype = 'P' ORDER BY age DESC;
SELECT plane_name, location FROM Hangar h ORDER BY plane_name NULLS LAST;
SELECT plane_name, location FROM Hangar h ORDER BY plane_name NULLS LAST;
SELECT plane_name FROM PilotSkills WHERE pskill_name = 'fly' GROUP BY plane_name ORDER BY plane_name ASC;
SELECT plane_name FROM Hangar WHERE hplane_name IS NOT NULL ORDER BY plane_name ASC;
SELECT plane_name FROM PilotSkills WHERE age > 40 OR age < 30; ORDER BY plane_name;
SELECT plane_name, COUNT(*) FROM PilotSkills ps WHERE (ps.age > 40 OR ps.age < 30) GROUP BY plane_name;
SELECT plane_name, pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30);
SELECT plane_name, pilot_name, age FROM PilotSkills ps WHERE (ps.plane_name = 'Piper Cub' AND age > 35) OR (ps.plane_name = 'F-14 Fighter' AND age < 30);
SELECT plane_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND plane_name != 'B-52 Bomber'; ORDER BY plane_name;
SELECT plane_name FROM PilotSkills WHERE pplane_name = 'Piper Cub' AND plane_name NOT ILIKE '%B-52%';
SELECT plane_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY plane_name;
SELECT plane_name FROM PilotSkills WHERE pplane_name IN ('Piper Cub', 'B-52 Bomber') GROUP BY plane_name HAVING COUNT(DISTINCT pplane_name) = 2;
SELECT plane_name, AVG(age) AS average_age, MIN(age) AS minimum_age FROM PilotSkills GROUP BY plane_name;
SELECT plane_name, AVG(age) AS average_age, MIN(age) AS minimum_age FROM PilotSkills GROUP BY plane_name;
SELECT plane_name FROM PilotSkills WHERE ploc_name = 'Austin' AND hloc_name = 'Boston'; ORDER BY plane_name;
SELECT plane_name FROM PilotSkills WHERE plocation IN ('Austin', 'Boston') GROUP BY plane_name;
SELECT plane_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter') GROUP BY plane_name; ORDER BY plane_name;
SELECT plane_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter'); SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter'); SELECT pilot_name, pplane_name FROM PilotSkills; SELECT pilot_name, COUNT(*) AS num_skills FROM PilotSkills GROUP BY pilot_name HAVING COUNT(DISTINCT pplane_name) > 1; SELECT pilot_name, pplane_name FROM PilotSkills WHERE pplane_name IN ('Piper Cub', 'F-14 Fighter'); SELECT pilot_name, pplane_name FROM PilotSkills WHERE pilot_name IN ('John Doe', 'Jane Smith'); SELECT pilot_name, pplane_name FROM PilotSkills WHERE pilot_name = 'John Doe' AND pplane
SELECT plane_name, AVG(age) AS average_age FROM PilotSkills GROUP BY plane_name ORDER BY average_age DESC NULLS LAST;
SELECT plane_name, AVG(age) AS average_age FROM PilotSkills GROUP BY plane_name ORDER BY average_age DESC NULLS LAST;
SELECT plane_name, COUNT(*) AS number_of_planes FROM Hangar GROUP BY plane_name ORDER BY number_of_planes DESC;
SELECT plane_name, COUNT(*) AS COUNT FROM PilotSkills GROUP BY plane_name ORDER BY COUNT DESC;
SELECT plane_name, MIN(age) AS min_age FROM PilotSkills GROUP BY plane_name ORDER BY pplane_name ASC;
SELECT plane_name, MIN(p.age) AS min_age FROM PilotSkills p GROUP BY p.plane_name ORDER BY p.plane_name NULLS LAST;
SELECT plane_name, MIN(age) AS min_age FROM PilotSkills GROUP BY plane_name ORDER BY min_age ASC;
SELECT plane_name, ppilot_name FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name ORDER BY pplane_name;
SELECT plane_name, MAX(age) AS max_age FROM PilotSkills GROUP BY plane_name;
SELECT plane_name, MAX(age) AS max_age FROM PilotSkills GROUP BY plane_name ORDER BY max_age DESC;
SELECT plane_name, COUNT(ps.age) AS total_ages, AVG(ps.age) AS average_age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name GROUP BY plane_name;
SELECT location, COUNT(DISTINCT pilot_name) AS number_of_pilots, AVG(age) AS average_age FROM Hangar h JOIN PilotSkills ps ON h.plane_name = ps.plane_name GROUP BY location ORDER BY number_of_pilots DESC NULLS LAST;
SELECT plane_name, COUNT(*) AS num_pilots FROM PilotSkills ps WHERE AVG(age) < 35 GROUP BY plane_name ORDER BY num_pilots DESC NULLS LAST;
SELECT plane_name, COUNT(DISTINCT ps.pilot_name) AS num_pilots FROM PilotSkills ps GROUP BY plane_name HAVING AVG(age) < 35 ORDER BY num_pilots DESC;
SELECT plane_name, location FROM Hangar h JOIN PilotSkills ps ON h.plane_name = ps.plane_name ORDER BY age ASC LIMIT 1;
SELECT plane_name, location FROM Hangar h JOIN PilotSkills ps ON h.plane_name = ps.plane_name ORDER BY ps.age ASC LIMIT 1;
SELECT plane_name, ps.pilot_name, ps.age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location ilike '%Austin%' ORDER BY ps.pilot_name NULLS LAST;
SELECT plane_name, ps.pilot_name, ps.age FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.location ilike '%Austin%' ORDER BY ps.pilot_name NULLS LAST;
SELECT plane_name FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') ORDER BY pilot_name ASC;
SELECT plane_name FROM PilotSkills WHERE pplane_name = 'Piper Cub' ORDER BY age DESC;  ;
SELECT plane_name, COUNT(*) AS num_pilots FROM PilotSkills WHERE age < (SELECT MIN(age) FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE h.plane_name = 'F-14 Fighter') GROUP BY plane_name;
SELECT plane_name, SUM(age) AS total_age FROM PilotSkills WHERE plane_name = 'F-14 Fighter' GROUP BY plane_name; SELECT COUNT(*) FROM PilotSkills ps JOIN Hangar h ON ps.plane_name = h.plane_name WHERE ps.age < (SELECT total_age FROM PilotSkills WHERE pplane_name = 'F-14 Fighter');
SELECT plane_name FROM Hangar WHERE plane_name ILIKE '%Bomber%' GROUP BY plane_name; ORDER BY plane_name;
SELECT plane_name FROM Hangar WHERE plane_name ILIKE '%Bomber%' ORDER BY plane_name NULLS LAST; ORDER BY plane_name;
SELECT plane_name, COUNT(*) FROM PilotSkills WHERE age > (SELECT MAX(age) FROM PilotSkills WHERE plane_name = 'Piper Cub') GROUP BY plane_name;
SELECT plane_name, MAX(age) AS max_age FROM PilotSkills WHERE pplane_name = 'Piper Cub' GROUP BY plane_name ORDER BY max_age DESC LIMIT 1; SELECT COUNT(*) - 1 FROM PilotSkills ps JOIN (SELECT pplane_name, MAX(age) AS max_age FROM PilotSkills WHERE pplane_name = 'Piper Cub' GROUP BY pplane_name) AS subquery ON ps.age > subquery.max_age;
SELECT district.District_ID, district.Name FROM district ORDER BY district.Area_km DESC NULLS LAST LIMIT 1;
SELECT district.District_ID, district.Area_km, district.Government_website FROM district ORDER BY district.Population ASC LIMIT 1;
SELECT district.District_ID, district.Name, district.Population FROM district WHERE district.Area_km > (SELECT AVG(district.Area_km) FROM district);
SELECT district.District_ID, district.Name, MAX(district.Area_km) AS max_area, AVG(district.Area_km) AS avg_area FROM district GROUP BY district.District_ID, district.Name ORDER BY max_area DESC NULLS LAST;
SELECT district.District_ID, SUM(district.Population) AS total_population FROM district WHERE district.Area_km > (SELECT Area_km FROM district ORDER BY Area_km DESC LIMIT 3) GROUP BY district.District_ID;
SELECT district.District_ID, district.Name, district.Government_website FROM district ORDER BY district.Population DESC NULLS LAST;
SELECT district.District_ID, district.Name FROM district WHERE district.Government_website ilike '%.gov';
SELECT district.District_ID, district.Name FROM district WHERE (district.Population > 4000 OR district.Area_km > 3000) ORDER BY district.District_ID NULLS LAST;
SELECT spokesman.Spokesman_ID, s.name AS spokewoman_name, s.speach_title FROM spokesman s JOIN spokesman_district sd ON s.spokewoman_id = sd.spokesman_id;
SELECT spokesman.Spokesman_ID, AVG(spokesman.Points) AS Average_points, AVG(spokesman.Age) AS Average_age FROM spokesman WHERE spokesman.Rank_position = 1 GROUP BY spokesman.Spokesman_ID;
SELECT spokesman.Spokesman_ID, s.name AS spokewoman_name, s.points FROM spokesman JOIN spokesman_district sd ON spokesman.SpokeSm_ID = sd.Spokesman_ID JOIN district d ON sd.District_ID = d.District_ID WHERE spokesman.age < 40;
SELECT spokesman.Spokesman_ID, spokesman.Name, spokesman.Age FROM spokesman ORDER BY spokesman.Age ASC NULLS LAST LIMIT 1;
SELECT spokesman.Spokesman_ID, spokesman.Name, spokesman.Points FROM spokesman WHERE sspokesman.Points < (SELECT AVG(spokesman.Points) FROM spokesman);
SELECT district.District_ID, district.name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID, district.name ORDER BY COUNT(spokesman_district.spokesman_id) DESC LIMIT 1;
SELECT spokesman.Spokesman_ID, spokesman.Name FROM spokesman JOIN spokesman_district ON spokesman.SpokeSm_ID = spokesman_district.Spokesman_ID WHERE CAST(spokesman_district.Start_year AS INT) < 2004;
SELECT district.District_ID, district.name, COUNT(spokesman_district.spokesman_id) AS total_spokesmen FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.district_id GROUP BY district.District_ID, district.name ORDER BY total_spokesmen DESC NULLS LAST;
SELECT district.District_ID, district.name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID JOIN spokesman ON spokesman_district.Spokesman_ID = spokesman.Spokesman_ID WHERE spokesman.rank_position IN (1, 2) GROUP BY district.District_ID, district.name HAVING COUNT(DISTINCT spokesman.rank_position) = 2;
SELECT district.District_ID, district.name FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID, district.name HAVING COUNT(spokesman_district.spokesman_id) > 1 ORDER BY district.District_ID NULLS LAST;
SELECT district.District_ID FROM district WHERE district.District_ID NOT IN (SELECT spokesman_district.District_ID FROM spokesman_district); ORDER BY district.District_ID;
SELECT spokesman.Spokesman_ID, spokesman.Name FROM spokesman LEFT JOIN spokesman_district ON spokesman.Spokesman_ID = spokesman_district.Spokesman_ID WHERE spokesman_district.Spokesman_ID IS NULL;
SELECT district.District_ID, SUM(district.Population) AS total_population, AVG(district.Population) AS average_population FROM district JOIN spokesman_district ON district.District_ID = spokesman_district.District_ID GROUP BY district.District_ID ORDER BY total_population DESC NULLS LAST;
SELECT sculptureID, title FROM Sculptures WHERE year = EXTRACT(YEAR FROM CURRENT_DATE) ORDER BY title NULLS LAST LIMIT 1;
SELECT sculptureID, title FROM Sculptures ORDER BY year DESC LIMIT 1;
SELECT title, location FROM Paintings ORDER BY year ASC LIMIT 1;
SELECT title, location FROM Paintings ORDER BY year ASC LIMIT 1;
SELECT sculptureID, title FROM Sculptures WHERE location = 'gallery 226';
SELECT sculptureID, title FROM Sculptures WHERE location = 'gallery 226';
SELECT title, location FROM Paintings;
SELECT title, location FROM Paintings;
SELECT sculptureID, title, location FROM Sculptures;
SELECT sculptureID, title, location FROM Sculptures;
SELECT sculptureID, title, medium FROM Sculptures WHERE sculptureID = 80; SELECT paintingID, title, medium FROM Paintings WHERE paintingID = 80; -- Both queries return the same result. The first one is more specific. -- SELECT * FROM Paintings p JOIN Sculptures s ON p.mediumOn = s.title WHERE p.paintingID = 80; -- This query returns all the columns from both tables. -- SELECT p.title, s.medium FROM Paintings p JOIN Sculptures s ON p.mediumOn = s.title WHERE p.paintingID = 80; -- This query returns only the title and medium columns from both tables. -- SELECT p.title, s.medium FROM Paintings p JOIN Sculptures s ON p.mediumOn = s.title WHERE p.paintingID = 80 AND
SELECT sculptureID, title, medium FROM Sculptures WHERE sculptureID = 80;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists WHERE Artists.birthYear > 1850;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists WHERE Artists.birthYear > 1850;
SELECT sculptureID, title, year, medium, location FROM Sculptures WHERE location != 'gallery 226';
SELECT sculptureID, title, year, medium, location FROM Sculptures WHERE location != 'gallery 226';
SELECT sculptorID FROM Sculptures WHERE year < 1900; SELECT a.fname, a.lname FROM Artists a JOIN Sculptures s ON a.artistID = s.sculptorID WHERE s.year < 1900 GROUP BY a.fname, a.lname ORDER BY a.fname, a.lname NULLS LAST;
SELECT sculptorID, fname, lname FROM Sculptures JOIN Artists ON sculptorID = artistID WHERE year < 1900; SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year < 1900); SELECT DISTINCT fname, lname FROM Artists WHERE artistID NOT IN (SELECT sculptorID FROM Sculptures WHERE year < 1900); SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM Sculptures WHERE year >= 1900); SELECT DISTINCT fname, lname FROM Artists WHERE artistID NOT IN (SELECT sculptorID FROM Sculptures WHERE year >= 1900); SELECT DISTINCT fname, lname FROM Artists WHERE artistID IN (SELECT sculptorID FROM
SELECT sculptorID FROM Sculptures WHERE year > 1920 GROUP BY sculptorID ORDER BY COUNT(sculptorID) DESC NULLS LAST; ORDER BY sculptorID;
SELECT sculptorID, MIN(birthYear) AS min_birth_year FROM Sculptures WHERE year > 1920 GROUP BY sculptorID ORDER BY min_birth_year NULLS LAST;
SELECT medium, MAX(year) AS max_year FROM Paintings GROUP BY medium ORDER BY max_year DESC LIMIT 1; SELECT fname, lname FROM Artists WHERE artistID = (SELECT sculptorID FROM Sculptures WHERE year = max_year AND medium = 'Sculpture');
SELECT medium FROM Artists WHERE artistID = (SELECT MAX(artistID) FROM Artists); ORDER BY location;
SELECT Artists.location, Artists.fname, Artists.birthYear, Artists.deathYear, AGE(Artists.birthYear, Artists.deathYear) AS age FROM Artists ORDER BY age ASC LIMIT 1;
SELECT Artists.location, Artists.fname, Artists.birthYear, Artists.deathYear FROM Artists WHERE Artists.deathYear - Artists.birthYear = (SELECT MIN(A2.deathYear - A2.birthYear) FROM Artists A2);
SELECT Artists.location, Artists.fname, AGE(CURRENT_DATE, MIN(Artists.birthYear)) AS age FROM Artists GROUP BY Artists.llocatio, Artists.fname ORDER BY age DESC LIMIT 1;
SELECT medium, MAX(year) AS max_year FROM Paintings GROUP BY medium ORDER BY max_year DESC LIMIT 1; SELECT a.fname, EXTRACT(YEAR FROM CURRENT_DATE) - a.birthYear AS age FROM Artists a WHERE a.deathYear IS NULL ORDER BY age DESC LIMIT 1; SELECT s.title, EXTRACT(YEAR FROM CURRENT_DATE) - s.year AS age FROM Sculptures s WHERE s.sculptorID NOT IN (SELECT artistID FROM Artists WHERE deathYear IS NOT NULL) ORDER BY age DESC LIMIT 1; SELECT p.title, EXTRACT(YEAR FROM CURRENT_DATE) - p.year AS age FROM Paintings p WHERE p.painterID NOT IN (SELECT artistID FROM Artists WHERE deathYear IS NOT NULL) ORDER BY age DESC LIMIT 1
SELECT sculptureID FROM Sculptures WHERE location = 'gallery 240'; ORDER BY sculptureID;
SELECT Paintings.title, COUNT(*) AS total_exhibitions FROM Paintings JOIN Exhibitions ON Paintings.paintingID = Exhibitions.paintingID WHERE Exhibitions.galleryNumber = 240 GROUP BY Paintings.title;
SELECT medium, COUNT(*) AS number_of_paintings FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.birthYear IS NOT NULL AND a.deathYear IS NOT NULL GROUP BY medium ORDER BY number_of_paintings DESC LIMIT 1;
SELECT Artists.location, COUNT(Paintings.paintingID) AS number_of_paintings FROM ArtistS JOIN Paintings ON ArtistS.artistID = Paintings.painterID GROUP BY ArtistS.llocation ORDER BY number_of_paintings DESC LIMIT 1;
SELECT Artists.location, Paintings.year FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.fname ilike '%Mary%' ORDER BY Paintings.year NULLS LAST;
SELECT Artists.location, Paintings.title, Paintings.year FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.fname ilike '%Mary%' ORDER BY Artists.locaition NULLS LAST, Paintings.title NULLS LAST, Paintings.year NULLS LAST;
SELECT Paintings.title, Paintings.width_mm FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Artists.birthYear < 1850;
SELECT Artists.location, Paintings.width_mm FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Artists.birthYear < 1850;
SELECT location, medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname ilike '%Pablo%';
SELECT location, medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID WHERE a.fname ilike '%Pablo%';
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' AND Paintings.mediumOn = 'lithographic' ORDER BY Artists.llocation, Artists.fname, Artists.lname NULLS LAST;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' AND Paintings.mediumOn = 'lithographic' ORDER BY Artists.llocation NULLS LAST;
SELECT Artists.year FROM Artists WHERE Artists.painterID IN (SELECT Paintings.painterID FROM Paintings WHERE Paintings.year = 1884 AND Paintings.mediumOn = 'canvas');;
SELECT Artists.year FROM Artists WHERE EXISTS (SELECT 1 FROM Paintings WHERE Paintings.painterID = Artists.artistID AND Paintings.year = 1884);
SELECT Artists.location, Artists.fname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.medium = 'oil' AND Paintings.location = 'gallery 241' GROUP BY Artists.llocatioon, Artists.fname;
SELECT Artists.location, Artists.fname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.location = 'gallery 241' AND Paintings.medium = 'oil';
SELECT medium, COUNT(*) AS number_of_works FROM (SELECT p.medium FROM Paintings p UNION SELECT s.medium FROM Sculptures s) GROUP BY medium ORDER BY number_of_works DESC NULLS LAST;
SELECT medium, COUNT(*) AS number_of_works FROM (SELECT p.medium FROM Paintings p UNION SELECT s.medium FROM Sculptures s) GROUP BY medium ORDER BY number_of_works DESC NULLS LAST;
SELECT sculptureID, AVG(height_mm) AS average_height FROM Paintings GROUP BY medium;
SELECT sculptureID, AVG(height_mm) AS average_height FROM Paintings GROUP BY medium;
SELECT location, COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location ORDER BY COUNT(*) DESC NULLS LAST;
SELECT location, COUNT(*) FROM Paintings WHERE year < 1900 GROUP BY location ORDER BY COUNT(*) DESC NULLS LAST;
SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil'; ORDER BY title;
SELECT title FROM Paintings WHERE medium = 'oil' AND year > 1910 ORDER BY title NULLS LAST;
SELECT sculptorID FROM Sculptures WHERE medium = 'oil' AND location = 'gallery 240'; ORDER BY sculptorID;
SELECT sculptorID FROM Sculptures WHERE medium = 'oil' AND location = 'gallery 240'; ORDER BY sculptorID;
SELECT sculptureID, title FROM Sculptures WHERE medium = 'painting' AND EXISTS (SELECT 1 FROM Paintings p WHERE p.mediumOn = 'canvas' AND p.height_mm < sculptureID); SELECT DISTINCT p.title FROM Paintings p JOIN Sculptures s ON CAST(s.sculptureID AS TEXT) = p.year; SELECT DISTINCT p.title FROM Paintings p WHERE p.year IN (SELECT CAST(s.sculptureID AS TEXT) FROM Sculptures s WHERE s.medium = 'painting'); SELECT DISTINCT p.title FROM Paintings p WHERE p.year > (SELECT MAX(CAST(s.sculptureID AS TEXT)) FROM Sculptures s WHERE s.medium = 'painting'); SELECT DISTINCT p.title FROM Paintings p WHERE
SELECT sculptureID, p.title FROM Sculptures s JOIN Paintings p ON s.sculptureID = p.paintingID WHERE s.medium = 'sculpture' AND p.mediumOn = 'canvas' ORDER BY p.title NULLS LAST;
SELECT sculptureID FROM Sculptures WHERE location = 'gallery 240' ORDER BY year DESC LIMIT 1;
SELECT sculptureID FROM Sculptures WHERE sculptureID IN (SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240')); SELECT DISTINCT sculptureID FROM Sculptures;
SELECT medium FROM Paintings WHERE paintingID = (SELECT MIN(paintingID) FROM Paintings); ORDER BY year;
SELECT medium FROM Paintings WHERE paintingID = (SELECT MIN(paintingID) FROM Paintings); SELECT medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID ORDER BY a.lname, a.fname NULLS LAST; SELECT medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID ORDER BY a.lname, a.fname NULLS LAST; SELECT medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID ORDER BY a.lname, a.fname NULLS LAST; SELECT medium FROM Paintings p JOIN Artists a ON p.painterID = a.artistID ORDER BY a.lname, a.fname NULLS LAST; SELECT medium FROM Paintings p JOIN Artists a ON p
SELECT sculptorID FROM Sculptures WHERE title ilike '%female%' LIMIT 1; ORDER BY sculptorID;
SELECT sculptorID FROM Sculptures WHERE title ilike '%female%' LIMIT 1; ORDER BY sculptorID;
SELECT sculptureID, title FROM Sculptures ORDER BY title NULLS LAST;
SELECT sculptureID, title FROM Sculptures ORDER BY title NULLS LAST; SELECT paintingID, title FROM Paintings ORDER BY title NULLS LAST; SELECT DISTINCT title FROM Paintings ORDER BY title NULLS LAST; SELECT DISTINCT title FROM Sculptures ORDER BY title NULLS LAST; SELECT DISTINCT title FROM Paintings UNION SELECT DISTINCT title FROM Sculptures ORDER BY title NULLS LAST; SELECT DISTINCT title FROM Paintings EXCEPT SELECT DISTINCT title FROM Sculptures ORDER BY title NULLS LAST; SELECT DISTINCT title FROM Paintings INTERSECT SELECT DISTINCT title FROM Sculptures ORDER BY title NULLS LAST; SELECT DISTINCT title FROM Paintings WHERE title NOT IN (SELECT title FROM Sculptures) ORDER BY title NULLS LAST; SELECT DISTINCT title FROM Paint
SELECT title FROM Paintings WHERE title IS NOT NULL ORDER BY LENGTH(title) DESC;
SELECT title FROM Paintings WHERE height_mm = (SELECT MIN(height_mm) FROM Paintings) UNION SELECT title FROM Paintings WHERE height_mm = (SELECT MAX(height_mm) FROM Paintings) ORDER BY title NULLS LAST; SELECT title FROM Paintings WHERE height_mm > (SELECT MIN(height_mm) FROM Paintings) AND height_mm < (SELECT MAX(height_mm) FROM Paintings) ORDER BY title NULLS LAST; SELECT DISTINCT title FROM Paintings ORDER BY length(title) DESC; SELECT DISTINCT title FROM Paintings ORDER BY length(title) ASC; SELECT title FROM Paintings WHERE height_mm BETWEEN (SELECT MIN(height_mm) FROM Paintings) AND (SELECT MAX(height_mm) FROM Paintings) ORDER BY title NULLS LAST; SELECT title FROM Paintings WHERE
SELECT sculptureID, title FROM Sculptures WHERE year BETWEEN 1900 AND 1950 UNION SELECT paintingID, title FROM Paintings WHERE year BETWEEN 1900 AND 1950;
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950; ORDER BY title;
SELECT sculptureID, title FROM Sculptures WHERE sculptorID = 222 UNION SELECT paintingID, title FROM Paintings WHERE painterID = 222;
SELECT sculptureID, title FROM Sculptures WHERE sculptorID = 222 UNION ALL SELECT paintingID, title FROM Paintings WHERE painterID = 222;
SELECT Artists.location, COUNT(Paintings.paintingID) AS number_of_paintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID WHERE Paintings.year < 1900 GROUP BY Artists.locaition ORDER BY number_of_paintings DESC NULLS LAST LIMIT 1;
SELECT Artists.location, COUNT(Paintings.paintingID) AS number_of_paintings FROM Artistas JOIN Paintings ON Artistas.artistID = Paintings.painterID WHERE Paintings.year < 1900 GROUP BY Artistas.locaition ORDER BY number_of_paintings DESC LIMIT 1;
SELECT medium FROM Sculptures WHERE sculptorID = (SELECT artistID FROM artists ORDER BY COUNT(sculptureID) DESC LIMIT 1); ORDER BY medium;
SELECT sculptorID FROM Sculptures WHERE sculptorID IN (SELECT artistID FROM Sculptures GROUP BY artistID ORDER BY COUNT(sculptureID) DESC LIMIT 1); SELECT fname FROM Artists WHERE artistID = sculptorID;
SELECT title FROM Paintings WHERE (width_mm < 600 OR height_mm > 800); ORDER BY title;
SELECT title FROM Paintings WHERE (width_mm < 600 OR height_mm > 800); ORDER BY title;
SELECT sculptureID, title, year, medium, location FROM Sculptures WHERE year < 1885 OR year > 1930; SELECT paintingID, title, year, medium, location FROM Paintings WHERE year < 1885 OR year > 1930; SELECT COUNT(*) FROM Paintings p JOIN Sculptures s ON p.location = s.location WHERE p.year < 1885 OR p.year > 1930; SELECT COUNT(*) FROM Paintings p JOIN Sculptures s ON p.location = s.location WHERE p.year < 1885 OR p.year > 1930; SELECT p.title, p.year, p.medium, p.location FROM Paintings p WHERE p.year < 1885 OR p.year > 1930; SELECT s.title
SELECT sculptureID, title, year, medium, location FROM Sculptures WHERE year < 1885 OR year > 1930; SELECT paintingID, title, year, medium, location FROM Paintings WHERE year < 1885 OR year > 1930; SELECT COUNT(*) FROM Sculptures WHERE year < 1885 OR year > 1930; SELECT COUNT(*) FROM Paintings WHERE year < 1885 OR year > 1930; SELECT COUNT(*) FROM Sculptures WHERE year BETWEEN 1885 AND 1930; SELECT COUNT(*) FROM Paintings WHERE year BETWEEN 1885 AND 1930; SELECT COUNT(*) FROM Sculptures WHERE year NOT BETWEEN 1885 AND 1930; SELECT COUNT(*) FROM P
SELECT Paintings.title, Paintings.year, Paintings.height_mm, Paintings.width_mm, Paintings.medium, Paintings.mediumOn, Paintings.location, Paintings.painterID FROM Paintings WHERE Paintings.height_mm > 500 AND Paintings.height_mm < 2000;
SELECT Paintings.title, Paintings.paintingID FROM Paintings WHERE Paintings.height_mm > 500 AND Paintings.width_mm < 2000 ORDER BY Paintings.title NULLS LAST;
SELECT location FROM Paintings WHERE medium = 'panel' AND mediumOn = 'canvas'; ORDER BY location;
SELECT location FROM Paintings WHERE medium = 'panel' OR medium = 'canvas'; ORDER BY location;
SELECT sculptureID, title, year, medium, location FROM Sculptures WHERE year > 1930 AND year < 1885; SELECT paintingID, title, year, medium, location FROM Paintings WHERE year > 1930 AND year < 1885; SELECT DISTINCT location FROM Paintings WHERE year > 1930 AND year < 1885; SELECT DISTINCT location FROM Sculptures WHERE year > 1930 AND year < 1885; SELECT DISTINCT location FROM Paintings WHERE year > 1930 AND year < 1885 UNION SELECT DISTINCT location FROM Sculptures WHERE year > 1930 AND year < 1885; SELECT DISTINCT location FROM Paintings WHERE year > 1930 AND year < 1885 ORDER
SELECT sculptureID, title, year, medium, location FROM Sculptures WHERE year < 1885 AND year > 1930; SELECT paintingID, title, year, medium, location FROM Paintings WHERE year < 1885 AND year > 1930; SELECT COUNT(*) FROM Sculptures WHERE year < 1885 AND year > 1930; SELECT COUNT(*) FROM Paintings WHERE year < 1885 AND year > 1930; SELECT DISTINCT location FROM Sculptures WHERE year < 1885 AND year > 1930; SELECT DISTINCT location FROM Paintings WHERE year < 1885 AND year > 1930; SELECT DISTINCT location FROM Sculptures WHERE year < 1885 AND year > 1930 UNION SELECT DIST
SELECT Artists.location, AVG(Paintings.height_mm) AS average_height, AVG(Paintings.width_mm) AS average_width FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Paintings.medium = 'oil' AND Paintings.location = 'gallery 241' GROUP BY Artists.locaition;
SELECT Artists.location, AVG(Paintings.height_mm) AS average_height, AVG(Paintings.width_mm) AS average_width FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Paintings.medium = 'oil' AND Paintings.location = 'gallery 241' GROUP BY Artist.locaition;
SELECT medium, MAX(height_mm) AS max_height FROM Paintings WHERE year < 1900 GROUP BY medium ORDER BY max_height DESC NULLS LAST;
SELECT medium, MAX(height_mm) AS max_height FROM Paintings WHERE year < 1900 GROUP BY medium ORDER BY max_height DESC NULLS LAST LIMIT 1;
SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM Paintings GROUP BY year ORDER BY year NULLS LAST;
SELECT year, MAX(height_mm) AS max_height, MAX(width_mm) AS max_width FROM Paintings GROUP BY year ORDER BY year NULLS LAST;
SELECT Artists.location, Average(Paintings.height_mm) AS average_height, Average(Paintings.width_mm) AS average_width FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID GROUP BY Artists.locaition ORDER BY Artists.fname ASC; NULLS LAST;
SELECT Artists.location, Average(Paintings.height_mm) AS average_height, Average(Paintings.width_mm) AS average_width FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID GROUP BY Artists.locaition ORDER BY Artists.locaition NULLS LAST;
SELECT Artists.location, COUNT(Paintings.paintingID) AS num_paintings, Artists.fname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.llocatio, Artists.fname HAVING COUNT(Paintings.paintingID) >= 2 ORDER BY num_paintings DESC NULLS LAST;
SELECT Artists.location, COUNT(Paintings.paintingID) AS number_of_paintings FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.lname, Artists.fname HAVING COUNT(Paintings.paintingID) >= 2 ORDER BY number_of_paintings DESC NULLS LAST;
SELECT Artists.location, Artist.fname, Artist.lname, COUNT(Paintings.paintingID) AS number_of_paintings, Artist.deathYear FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artist.lname, Artist.fname, Artist.deathYear HAVING COUNT(Paintings.paintingID) <= 3 ORDER BY Artist.lname, Artist.fname NULLS LAST;
SELECT Artists.location, Artists.fname, Artists.lname, COUNT(Paintings.paintingID) AS number_of_paintings, Artists.deathYear FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID GROUP BY Artists.locaition, Artists.fname, Artists.lname, Artists.deathYear HAVING COUNT(Paintings.paintingID) < 4 ORDER BY Artists.deathYear NULLS LAST;
SELECT medium, COUNT(*) AS num_sculptures FROM Sculptures GROUP BY medium ORDER BY num_sculptures ASC LIMIT 1; SELECT d.deathYear FROM Artists d JOIN Sculptures s ON d.artistID = s.sculptorID WHERE d.medium = 'Medium' LIMIT 1; -- Replace 'Medium' with the actual name of the medium you want to use.
SELECT medium, COUNT(*) AS number_of_sculptures, MIN(a.deathYear) AS earliest_year_of_death FROM Sculptures s JOIN Artists a ON s.sculptorID = a.artistID GROUP BY medium ORDER BY number_of_sculptures ASC LIMIT 1;
SELECT medium, MAX(width_mm) AS max_width FROM Paintings WHERE location = 'gallery 240' GROUP BY medium ORDER BY max_width DESC NULLS LAST LIMIT 1;
SELECT medium, MAX(width_mm) AS max_width FROM Paintings WHERE location = 'gallery 240' GROUP BY medium ORDER BY max_width DESC NULLS LAST;
SELECT medium FROM Paintings WHERE paintingID IN (SELECT paintingID FROM Paintings p JOIN (SELECT MIN(year) AS min_year FROM Paintings WHERE gallery = 240) AS subquery ON p.year < subquery.min_year AND p.gallery = 240); SELECT paintingID FROM Paintings WHERE medium IN (SELECT medium FROM Paintings WHERE paintingID IN (SELECT paintingID FROM Paintings p JOIN (SELECT MIN(year) AS min_year FROM Paintings WHERE gallery = 240) AS subquery ON p.year < subquery.min_year AND p.gallery = 240)); SELECT paintingID FROM Paintings WHERE paintingID NOT IN (SELECT paintingID FROM Paintings WHERE gallery = 240); SELECT paintingID FROM Paintings WHERE paintingID IN (SELECT paintingID FROM Paintings WHERE gallery =
SELECT medium, COUNT(*) FROM Paintings p WHERE p.year < (SELECT MIN(year) FROM Paintings WHERE location = 'gallery 240') GROUP BY medium;
SELECT medium, MAX(height_mm) AS max_height FROM Paintings WHERE year > 1900 GROUP BY medium ORDER BY max_height DESC NULLS LAST;
SELECT location FROM Paintings WHERE height_mm > (SELECT MAX(height_mm) FROM Paintings WHERE year > 1900); ORDER BY location;
SELECT Artists.location, COUNT(Paintings.paintingID) AS number_of_paintings FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Paintings.medium = 'oil' GROUP BY Artists.locaition ORDER BY number_of_paintings DESC NULLS LAST LIMIT 3;
SELECT Artists.location, COUNT(*) AS number_of_paintings FROM Paintings JOIN Artists ON Paintings.painterID = Artists.artistID WHERE Paintings.medium = 'oil' GROUP BY Artists.locaition ORDER BY number_of_paintings DESC;
SELECT Paintings.year, Paintings.title, Paintings.location FROM Paintings WHERE Paintings.medium = 'oil' ORDER BY Paintings.year NULLS LAST;
SELECT sculptureID, title, location FROM Sculptures WHERE medium = 'oil' ORDER BY year DESC;
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title NULLS LAST;
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY year NULLS LAST, location NULLS LAST, title NULLS LAST;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID LEFT JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.sculptorID IS NULL;
SELECT Artists.location, Artists.fname, Artists.lname FROM Artists JOIN Paintings ON Artists.artistID = Paintings.painterID LEFT JOIN Sculptures ON Artists.artistID = Sculptures.sculptorID WHERE Sculptures.sculptorID IS NULL;
SELECT location FROM Paintings WHERE year < 1885 AND medium != 'canvas' GROUP BY location; ORDER BY location;
SELECT title FROM Paintings WHERE year < 1885 AND medium != 'canvas';
SELECT race.Road FROM race;
SELECT race.Road FROM race;
SELECT driver.Driver_ID, driver.Driver_name, race.Winning_team FROM driver JOIN race ON driver.Driver_id = race.Driver_id ORDER BY race.Winning_team ASC;
SELECT driver.Driver_ID, driver.Driver_Name, race.Winning_team FROM race JOIN driver ON race.Winning_driver = driver.Driver_ID ORDER BY race.Winning_team ASC;
SELECT driver.Driver_ID, driver.Driver_Name FROM race JOIN driver ON race.Winning_driver = driver.Driver_ID WHERE race.Pole_Position != 'Junior Strous' ORDER BY driver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID, drvier.Driver_Name FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE race.Pole_Position != 'Junior Strous' AND race.Winning_driver = 'Yes';;
SELECT driver.Driver_ID, driver.Constructor FROM driver ORDER BY driver.Age ASC;
SELECT driver.Driver_ID, driver.Constructor FROM driver ORDER BY driver.Age ASC;
SELECT driver.Driver_ID, driver.Entrant FROM driver WHERE driver.Age >= 20 ORDER BY driver.Entrant NULLS LAST;
SELECT driver.Driver_ID, driver.Entrant FROM driver WHERE driver.Age >= 20 ORDER BY driver.Entrant NULLS LAST;
SELECT driver.Driver_ID, MIN(driver.Age) AS min_age, MAX(driver.Age) AS max_age FROM driver GROUP BY driver.Driver_ID;
SELECT driver.Driver_ID, MIN(driver.Age) AS min_age, MAX(driver.Age) AS max_age FROM driver GROUP BY driver.Driver_ID;
SELECT driver.Driver_ID, driver.Engine FROM driver WHERE (driver.age > 30 OR driver.age < 20) GROUP BY driver.Driver_ID, driver.Engine ORDER BY COUNT(DISTINCT driver.Engine) DESC NULLS LAST;
SELECT driver.Driver_ID, COUNT(DISTINCT driver.Engine) AS num_engines FROM driver WHERE (driver.Age > 30 OR driver.Age < 20) GROUP BY driver.Driver_ID ORDER BY num_engines DESC NULLS LAST;
SELECT driver.Driver_ID, driver.Driver_Name FROM driver ORDER BY driver.Driver_Name DESC;
SELECT driver.Driver_ID, driver.Driver_Name FROM driver ORDER BY driver.Driver_Name DESC;
SELECT driver.Driver_ID, driver.Driver_name, race.Race_name FROM driver JOIN race ON driver.Driver_id = race.Driver_id;
SELECT driver.Driver_ID, driver.Driver_name, race.Race_name FROM driver JOIN race ON driver.Driver_id = race.Driver_id;
SELECT driver.Driver_ID, driver.Driver_name, COUNT(race.Driver_ID) AS race_count FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_id, driver.Driver_name ORDER BY race_count DESC NULLS LAST;
SELECT driver.Driver_ID, COUNT(race.Road) AS number_of_races FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID ORDER BY number_of_races DESC NULLS LAST;
SELECT driver.Driver_ID, driver.Age FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID, driver.Age ORDER BY COUNT(race.Driver_ID) DESC LIMIT 1;
SELECT driver.Driver_ID, driver.Age FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID GROUP BY driver.Driver_ID, driver.Age ORDER BY COUNT(race.Driver_ID) DESC LIMIT 1;
SELECT driver.Driver_ID, driver.Driver_name, driver.age FROM driver JOIN race ON driver.Driver_id = race.Driver_id GROUP BY driver.Driver_id, driver.Driver_name, driver.age HAVING COUNT(DISTINCT race.road) >= 2;
SELECT driver.Driver_ID, driver.Driver_name, driver.age FROM driver JOIN race ON driver.Driver_id = race.Driver_id GROUP BY driver.Driver_id, driver.Driver_name, driver.age HAVING COUNT(DISTINCT race.road) >= 2;
SELECT race.Race_Name FROM race WHERE race.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Age >= 26); SELECT driver.Driver_name, race.Race_name FROM driver JOIN race ON driver.Driver_id = race.Driver_id WHERE driver.age >= 26; SELECT d.driver_name, r.race_name FROM driver d JOIN race r ON d.driver_id = r.driver_id WHERE d.age >= 26; SELECT DISTINCT r.race_name FROM race r JOIN driver d ON r.driver_id = d.driver_id WHERE d.age >= 26; SELECT DISTINCT r.race_name FROM race r JOIN driver d ON r.driver_id = d.driver_id WHERE d.age >= 26; SELECT DISTINCT r.race_name FROM race r JOIN driver d ON
SELECT race.Race_Name FROM race WHERE age >= 26; ORDER BY race.Race_Name;
SELECT driver.Driver_ID, driver.Driver_Name FROM driver WHERE driver.Constructor NOT ILIKE '%Bugatti%';
SELECT driver.Driver_ID, driver.Driver_Name FROM driver WHERE driver.Constructor NOT ILIKE '%Bugatti%' ORDER BY driver.Driver_Name NULLS LAST;
SELECT driver.Driver_ID, COUNT(DISTINCT driver.Constructor) AS num_constructors FROM driver GROUP BY driver.Driver_ID ORDER BY num_constructors DESC NULLS LAST;
SELECT driver.Driver_ID, COUNT(driver.Driver_ID) AS number_of_drivers FROM driver GROUP BY driver.Driver_ID ORDER BY number_of_drivers DESC NULLS LAST;
SELECT driver.Driver_ID, driver.Engine FROM driver GROUP BY driver.Driver_ID, driver.Engine ORDER BY COUNT(driver.Engine) DESC LIMIT 1;
SELECT driver.Driver_ID, driver.Engine FROM driver GROUP BY driver.Driver_ID, driver.Engine ORDER BY COUNT(driver.Engine) DESC LIMIT 1;
SELECT driver.Driver_ID, driver.Engine FROM driver GROUP BY driver.Driver_ID, driver.Engine HAVING COUNT(DISTINCT race.Driver_ID) >= 2;
SELECT driver.Driver_ID, driver.Engine FROM driver GROUP BY driver.Driver_ID, driver.Engine HAVING COUNT(DISTINCT race.Driver_ID) >= 2;
SELECT driver.Driver_ID, driver.Driver_Name FROM driver LEFT JOIN race ON driver.Driver_ID = race.Driver_ID WHERE race.Driver_ID IS NULL;
SELECT driver.Driver_ID, driver.Driver_Name FROM driver LEFT JOIN race ON driver.Driver_ID = race.Driver_ID WHERE race.Driver_ID IS NULL;
SELECT driver.Driver_ID, driver.Constructor FROM driver WHERE driver.Age < 20 AND driver.Age > 30 GROUP BY driver.Driver_ID, driver.Constructor;
SELECT driver.Driver_ID, driver.Constructor FROM driver WHERE driver.Age < 20 AND driver.Age > 30 GROUP BY driver.Driver_ID, driver.Constructor;
SELECT race.Winning_team FROM race WHERE COUNT(DISTINCT race.Winning_team) > 1;
SELECT race.Winning_team FROM race WHERE COUNT(DISTINCT race.Winning_team) > 1;
SELECT driver.Driver_ID, driver.Driver_Name FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE race.Pole_Position ilike '%James%Hinchcliffe%' AND race.Pole_Position ilike '%Carl%Skerlong%' ORDER BY driver.Driver_Name NULLS LAST;
SELECT driver.Driver_ID, driver.Driver_Name FROM race JOIN driver ON race.Driver_ID = driver.Driver_ID WHERE race.Pole_Position ilike '%James%Hinchcliffe%' AND race.Pole_Position ilike '%Carl%Skerlong%' ORDER BY driver.Driver_Name NULLS LAST;
SELECT driver.Driver_ID, driver.Driver_Name FROM driver LEFT JOIN race ON driver.Driver_ID = race.Driver_ID AND race.Pole_Position ilike '%James%Hinchcliffe%' WHERE race.Driver_ID IS NULL ORDER BY driver.Driver_Name NULLS LAST;
SELECT driver.Driver_ID, driver.Driver_Name FROM driver JOIN race ON driver.Driver_ID = race.Driver_ID WHERE race.Pole_Position not ilike '%James%Hinchcliffe%' ORDER BY driver.Driver_Name NULLS LAST;
SELECT language_id FROM official_languages;
SELECT language_id FROM official_languages;
SELECT languages.language_id, languages.name FROM languages ORDER BY languages.name ASC;
SELECT languages.language_id, languages.name FROM languages ORDER BY languages.name NULLS LAST;
SELECT languages.language_id, languages.name FROM languages WHERE languages.name ilike '%ish%' ORDER BY languages.name NULLS LAST;
SELECT languages.language_id, languages.name FROM languages WHERE languages.name ilike '%ish%' ORDER BY languages.name NULLS LAST;
SELECT countries.country_id, countriees.name FROM countriees ORDER BY countriees.overall_score DESC;
SELECT countries.country_id, countriees.name FROM countriees ORDER BY countriees.overall_score DESC;
SELECT country_id, AVG(justice_score) AS average_justice_score FROM countries GROUP BY country_id ORDER BY average_justice_score DESC NULLS LAST;
SELECT country_id, AVG(justice_score) AS average_justice_score FROM countries GROUP BY country_id ORDER BY average_justice_score DESC NULLS LAST;
SELECT countries.country_id, MAX(countriees.health_score) AS max_health_score, MIN(countriees.health_score) AS min_health_score FROM countriees WHERE countriees.country_id != 'Norway' GROUP BY countriees.country_id;
SELECT countries.country_id, MAX(countriees.health_score) AS max_health_score, MIN(countriees.health_score) AS min_health_score FROM countriees WHERE countriees.country_id NOT ILIKE '%Norway%' GROUP BY countriees.country_id;'%Norway%' ORDER BY max_health_score DESC, min_health_score ASC NULLS LAST;'%Norway%' LIMIT 1;'%Norway%' OFFSET 0;'%Norway%' SELECT COUNT(*) FROM countriees WHERE countriees.country_id NOT ILIKE '%Norway%';'%Norway%' SELECT COUNT(*) FROM countriees WHERE countriees.country_id NOT ILIKE '%Nor
SELECT language_id FROM official_languages;
SELECT official_languages.country_id, COUNT(DISTINCT official_languages.language_id) AS num_languages FROM official_languages GROUP BY official_languages.country_id ORDER BY num_languages DESC NULLS LAST;
SELECT countries.country_id, countriees.name FROM countriees ORDER BY countriees.education_score DESC;
SELECT countries.country_id, countriees.name FROM countriees JOIN languages ON countriees.language_id = languages.id WHERE countriees.language_id = 1 ORDER BY countriees.education_score DESC;
SELECT countries.country_id, countriees.name FROM countries WHERE countries.politics_score = (SELECT MAX(politics_score) FROM countries);
SELECT countries.country_id, countriees.name FROM countries WHERE countries.politics_score = (SELECT MAX(politics_score) FROM countries);
SELECT countries.country_id, countriees.name AS country_name, languagess.name AS language_name FROM countriees JOIN official_languages ON countriees.country_id = official_languages.country_id JOIN languagess ON official_languages.language_id = languagess.id;
SELECT countries.country_id, languages.name AS language_name FROM countriees JOIN official_languages ON countriees.country_id = official_languages.country_id JOIN languages ON official_languages.language_id = languages.id;
SELECT languages.language_id, COUNT(official_languages.country_id) AS country_count FROM languages JOIN official_languages ON languages.language_id = official_languages.language_id GROUP BY languages.language_id ORDER BY country_count DESC NULLS LAST;
SELECT languages.language_id, COUNT(official_languages.country_id) AS country_count FROM languages JOIN official_languages ON languages.language_id = official_languages.language_id GROUP BY languages.language_id ORDER BY country_count DESC NULLS LAST;
SELECT languages.language_id, COUNT(official_languages.country_id) AS country_count FROM languages JOIN official_languages ON languages.language_id = official_languages.language_id GROUP BY languages.language_id ORDER BY country_count DESC LIMIT 1;
SELECT language_id FROM official_languages WHERE country_id = 276 GROUP BY languagE_id ORDER BY COUNT(languagE_id) DESC LIMIT 1;
SELECT languages.language_id FROM languages WHERE language_id IN (SELECT official_languages.language_id FROM official_languages GROUP BY official_languages.language_id HAVING COUNT(DISTINCT official_languages.country_id) >= 2); SELECT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name HAVING COUNT(DISTINCT official_languages.country_id) >= 2; SELECT DISTINCT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name HAVING COUNT(DISTINCT official_languages.country_id) >= 2; SELECT DISTINCT languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id GROUP BY languages.name HAVING COUNT(
SELECT languages.language_id FROM languages WHERE language_id IN (SELECT official_languages.language_id FROM official_languages GROUP BY official_languages.language_id HAVING COUNT(DISTINCT official_languages.country_id) >= 2); SELECT name FROM languages WHERE id = language_id; SELECT name FROM countries WHERE id IN (SELECT country_id FROM official_languages WHERE language_id = language_id); SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(DISTINCT country_id) >= 2); SELECT name FROM countries WHERE id IN (SELECT country_id FROM official_languages GROUP BY country_id HAVING COUNT(DISTINCT language_id) >= 2); SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages GROUP BY language_id HAVING COUNT(
SELECT countries.country_id, AVG(countriees.overall_score) AS average_overall_score FROM countriees JOIN official_languages ON countriees.country_id = official_languages.country_id WHERE official_languages.language_id IN (SELECT id FROM languages WHERE name ilike '%English%') GROUP BY countriees.country_id;
SELECT countries.country_id, AVG(countriees.overall_score) AS average_score FROM countriees JOIN official_languages ON countriees.country_id = official_languages.country_id WHERE official_languages.language_id = 1 GROUP BY countriees.country_id ORDER BY average_score DESC NULLS LAST;
SELECT languages.language_id, COUNT(*) AS frequency FROM languages JOIN official_languages ON languages.language_id = official_languages.language_id GROUP BY languages.language_id ORDER BY frequency DESC LIMIT 3;
SELECT languages.language_id, COUNT(official_languages.country_id) AS country_count FROM languages JOIN official_languages ON languages.language_id = official_languages.language_id GROUP BY languages.language_id ORDER BY country_count DESC LIMIT 3;
SELECT language_id FROM official_languages WHERE country_id IN (SELECT country_id FROM countries GROUP BY country_id HAVING AVG(overall_score) DESC); SELECT name FROM languages WHERE id IN (SELECT language_id FROM official_languages ORDER BY language_id NULLS LAST);;
SELECT language_id, country_id, name, AVG(overall_score) AS average_overall_score FROM official_languages JOIN languages ON official_languages.language_id = languages.id JOIN countries ON official_languages.country_id = countries.id GROUP BY language_id, country_id, name ORDER BY average_overall_score DESC;
SELECT countries.country_id, countriees.name FROM countries JOIN official_languages ON countries.id = official_languages.country_id GROUP BY countries.country_id, countries.name ORDER BY COUNT(official_languages.language_id) DESC LIMIT 1;
SELECT countries.language_id FROM countries WHERE countriees.languagese_id = (SELECT MAX(countriees.languagese_id) FROM countries); ORDER BY language_id;
SELECT languages.language_id, languages.name FROM languages LEFT JOIN official_languages ON languages.language_id = official_languages.language_id WHERE official_languages.language_id IS NULL;
SELECT languages.language_id, languages.name FROM languages LEFT JOIN official_languages ON languages.language_id = official_languages.language_id WHERE official_languages.language_id IS NULL;
SELECT countries.country_id, countriees.name FROM countriees LEFT JOIN official_languages ON countriees.country_id = official_languages.country_id WHERE official_languages.language_id IS NULL;
SELECT countries.country_id, countriees.name FROM countriees LEFT JOIN official_languages ON countriees.country_id = official_languages.country_id WHERE official_languages.language_id IS NULL;
SELECT languages.language_id, languages.name FROM languages JOIN official_languages ON languages.id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id WHERE (countries.overall_score > 95 AND COUNT(DISTINCT CASE WHEN countries.overall_score > 95 THEN languages.id END) = COUNT(DISTINCT languages.id)) OR (countries.overall_score < 90 AND COUNT(DISTINCT CASE WHEN countries.overall_score < 90 THEN languages.id END) = COUNT(DISTINCT languages.id)) GROUP BY languages.language_id, languages.name;
SELECT languages.language_id, languages.name FROM languages JOIN official_languages ON languages.language_id = official_languages.language_id JOIN countries ON official_languages.country_id = countries.id WHERE (countries.overall_score > 95 OR countries.overall_score < 90) ORDER BY languages.name NULLS LAST;
SELECT Addresses.user_id, COUNTRIES.country_name, CITIES.city_name FROM Addresses JOIN COUNTRIES ON Addresses.country = COUNTRIES.country_code JOIN CITIES ON Addresses.town_city = CITIES.city_name GROUP BY Addresses.user_id, COUNTRIES.country_name, CITIES.city_name ORDER BY COUNTRIES.country_name, CITIES.city_name;
SELECT Addresses.user_id, Addresses.country, Addresses.town_city FROM Addresses;
SELECT Properties.search_string, Addresses.county_state_province FROM Properties JOIN Addresses ON Properties.property_address_id = Addresses.address_id;
SELECT Properties.search_string, Addresses.county_state_province FROM Properties JOIN Addresses ON Properties.property_address_id = Addresses.address_id;
SELECT Features.user_id, Features.feature_name, Features.feature_description FROM Features WHERE Features.feature_name ilike '%rooftop%';
SELECT Features.user_id, Features.feature_description FROM Features WHERE Features.feature_name = 'rooftop';
SELECT Features.user_id, Features.feature_name, Features.feature_description FROM Features JOIN Property_Features ON Features.feature_id = Property_Features.feature_id GROUP BY Features.user_id, Features.feature_name, Features.feature_description ORDER BY COUNT(Property_Features.feature_id) DESC LIMIT 1;
SELECT Features.user_id, Features.feature_name, Features.feature_description FROM Features JOIN Property_Features ON Features.feature_id = Property_Features.feature_id GROUP BY Features.user_id, Features.feature_name, Features.feature_description ORDER BY COUNT(Property_Features.feature_id) DESC LIMIT 1;
SELECT Properties.search_string, MIN(Properties.room_count) AS min_rooms FROM Properties JOIN Addresses ON Properties.property_address_id = Addresses.address_id WHERE Properties.property_type_code = 'A' GROUP BY Properties.search_string ORDER BY min_rooms NULLS LAST;
SELECT Properties.search_string, MIN(Properties.room_count) AS min_room_count FROM Properties JOIN Addresses ON Properties.property_address_id = Addresses.address_id WHERE Properties.property_type_code = 'A' GROUP BY Properties.search_string ORDER BY min_room_count NULLS LAST;
SELECT Properties.search_string FROM Properties WHERE (Properties.parking_lots = '1' OR Properties.garage_yn = 'Y') GROUP BY Properties.seearch_string;
SELECT Properties.search_string, COUNT(*) AS total_properties FROM Properties WHERE (Properties.parking_lots = '1' OR Properties.garage_yn = 'Y') GROUP BY Properties.search_string;
SELECT user_id, age_category_code FROM users WHERE other_user_details ilike '%Mother%' ORDER BY age_category_code NULLS LAST;
SELECT user_id, age_categoey_code FROM users WHERE other_user_details ilike '%Mother%' ORDER BY age_categoey_code NULLS LAST;
SELECT user_id, firs_t_nme FROM users WHERE usr_id = (SELECT MAX(usr_id) FROM properties);
SELECT user_id, firs_t_nme FROM users WHERE usr_id = (SELECT MAX(usr_id) FROM properties);
SELECT Properties.user_id, AVG(cast(Properties.room_count AS FLOAT)) AS average_rooms FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id WHERE Property_Features.feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'garden') GROUP BY Properties.user_id;
SELECT Properties.search_string, AVG(cast(Properties.room_count AS FLOAT)) AS average_rooms FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id WHERE Property_Features.feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'garden') GROUP BY Properties.search_string;
SELECT Addresses.search_string FROM Properties    WHERE EXISTS (SELECT 1 FROM Property_Features WHERE Property_Features.feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'swimming pool') AND Property_Features.property_id = Properties.property_id)    ORDER BY Addresses.search_string;
SELECT Addresses.search_string FROM Properties    WHERE EXISTS (SELECT 1 FROM Property_Features WHERE Property_Features.feature_id = (SELECT feature_id FROM Features WHERE feature_name = 'swimming pool') AND Property_Features.property_id = Properties.property_id) GROUP BY Properties.property_address_id HAVING COUNT(DISTINCT Properties.property_id) > 0 ORDER BY Addresses.searcH_string NULLS LAST;
SELECT Properties.user_id, Prperties.vendor_requested_price FROM Properties ORDER BY Prperties.vendor_requested_price ASC LIMIT 1;
SELECT Properties.user_id, Prperties.property_id, Prperties.vendor_requested_price FROM Properties ORDER BY Prperties.vendor_requested_price ASC LIMIT 1;
SELECT Properties.search_string, AVG(cast(Properties.room_count AS FLOAT)) AS average_rooms FROM Properties JOIN User_Property_History ON Properties.property_id = User_Property_History.property_id GROUP BY Properties.sseach_string;
SELECT Properties.user_id, AVG(cast(Properties.room_count AS FLOAT)) AS average_rooms FROM Properties GROUP BY Properties.user_id;
SELECT Rooms.search_string FROM Rooms;
SELECT Rooms.search_string, COUNT(*) AS COUNT FROM Rooms GROUP BY Rooms.searcH_string ORDER BY COUNT DESC NULLS LAST;
SELECT user_id, COUNT(*) AS number_of_searches, array_agg(search_string) AS searches FROM user_searches GROUP BY user_id HAVING COUNT(*) >= 2 ORDER BY number_of_searches DESC NULLS LAST;
SELECT user_id, COUNT(*) AS number_of_searches, array_agg(search_seq) AS search_sequences FROM user_searches GROUP BY user_id HAVING COUNT(*) >= 2 ORDER BY number_of_searches DESC NULLS LAST;
SELECT user_id, MAX(search_datetime) AS last_search_time FROM User_Searches GROUP BY user_id;
SELECT user_id, MAX(search_datetime) AS latest_search_time FROM user_searches GROUP BY user_id;
SELECT user_id, search_seq, search_datetime, search_string FROM User_Searches ORDER BY search_string DESC;
SELECT user_id, s.search_string, s.search_datetime FROM User_Searches s ORDER BY s.search_string DESC;
SELECT Properties.user_id, Addresses.zip_postcode FROM Properties JOIN Addresses ON Properties.property_address_id = Addresses.address_id WHERE Properties.owner_user_id NOT IN (SELECT user_id FROM Properties GROUP BY user_id HAVING COUNT(property_id) > 2);; SELECT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Properties GROUP BY user_id HAVING COUNT(property_id) > 2));; SELECT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id FROM Properties WHERE owner_user_id IN (SELECT user_id FROM Properties GROUP BY user_id HAVING COUNT(property_id) > 2)) UNION SELECT zip_postcode FROM Addresses WHERE address_id IN (SELECT property_address_id
SELECT Properties.user_id, Addresses.zip_postcode FROM Properties JOIN Addresses ON Properties.property_address_id = Addresses.address_id WHERE EXISTS (SELECT 1 FROM Properties p2 WHERE p2.owner_user_id = Properties.user_id GROUP BY p2.owner_user_id HAVING COUNT(p2.property_id) <= 2) ORDER BY Properties.user_id NULLS LAST;
SELECT user_id, age_cat_code FROM users u JOIN user_searches us ON u.user_id = us.user_id WHERE us.search_seq = 1;
SELECT user_id, age_category_code FROM users WHERE user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) = 1);
SELECT user_id, ac.age_category_description FROM users u JOIN user_searches us ON u.user_id = us.user_id JOIN ref_age_categories ac ON u.age_category_code = ac.age_category_code WHERE us.search_seq = 1;
SELECT user_id, ac.age_category_description FROM User_Searches AS us JOIN Users AS u ON us.user_id = u.user_id JOIN Ref_Age_Categories AS ac ON u.age_category_code = ac.age_category_code ORDER BY us.search_seq ASC LIMIT 1;
SELECT user_id, login_name FROM users WHERE age_category_code = 'SENIOR' ORDER BY first_name ASC;
SELECT user_id, login_name FROM users WHERE age_category_code = 'Senior Citizen' ORDER BY first_name ASC;
SELECT user_id, COUNT(*) AS number_of_searches FROM user_searches WHERE is_buyer = 'Y' GROUP BY user_id;
SELECT user_id, COUNT(*) AS total_searches FROM user_searches WHERE user_category_code = 'B' GROUP BY user_id ORDER BY total_searches DESC NULLS LAST;
SELECT user_id, date_registered FROM users WHERE login_name = 'ratione';
SELECT user_id, date_registered FROM users WHERE login_name = 'ratione';
SELECT user_id, first_name, middle_name, last_name, login_name FROM users WHERE is_seller = '1';
SELECT user_id, first_name, middle_name, last_name, login_name FROM users WHERE is_seller = 'Y';
SELECT user_id, ad.line_1_number_building, ad.line_2_number_street, ad.town_city FROM users us JOIN addresses ad ON us.user_address_id = ad.address_id WHERE age_category_code = 'Senior Citizen';
SELECT user_id, a.line_1_number_building, a.line_2_number_street, a.line_3_area_locality FROM users u JOIN addresses a ON u.user_address_id = a.address_id WHERE age_category_code = 'Senior Citizen';
SELECT Properties.user_id, COUNT(*) AS number_of_properties FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id GROUP BY Properties.user_id HAVING COUNT(Property_Features.feature_id) >= 2;
SELECT Properties.user_id, COUNT(*) AS num_features FROM Properties JOIN Property_Features ON Properties.property_id = Property_Features.property_id GROUP BY Properties.user_id HAVING COUNT(Property_Features.feature_id) >= 2;
SELECT Properties.user_id, COUNT(Property_Photos.photo_seq) AS total_photos FROM Properties JOIN Property_Photos ON Properties.property_id = Property_Photos.property_id GROUP BY Properties.user_id ORDER BY total_photos DESC NULLS LAST;
SELECT Properties.search_string, COUNT(Property_Photos.photo_id) AS photo_count FROM Properties JOIN Property_Photos ON Properties.search_string = CAST(Property_Photos.property_id AS varchar) GROUP BY Properties.search_string ORDER BY photo_count DESC NULLS LAST;
SELECT user_id, COUNT(photo_id) AS total_photos FROM Property_Photos GROUP BY user_id ORDER BY total_photos DESC NULLS LAST;
SELECT user_id, COUNT(prop_pho.property_id) AS photo_count FROM users JOIN properties ON users.user_id = properties.owner_user_id LEFT JOIN property_photos prop_pho ON properties.property_id = prop_pho.property_id GROUP BY user_id ORDER BY photo_count DESC NULLS LAST;
SELECT user_id, SUM(price_max) AS total_max_price FROM users WHERE user_category_code IN ('S', 'M') GROUP BY user_id;
SELECT user_id, SUM(price_max) AS total_max_price FROM users WHERE user_category_code IN ('S', 'M') GROUP BY user_id;
SELECT user_id, prop_id, datestamp, prop_name FROM user_property_history ORDER BY datestamp NULLS LAST;
SELECT user_id, prop_id, datestamp, prop_name FROM user_property_history JOIN properties ON user_property_history.prop_id = properties.property_id WHERE user_id = 757071 ORDER BY datestamp NULLS LAST;
SELECT Ref_Property_Types.user_id, Ref_Property_Types.property_type_description FROM Ref_Property_Types GROUP BY Ref_Property_Types.user_id, Ref_Property_Types.property_type_description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Ref_Property_Types.search_string, COUNT(*) AS frequency FROM Ref_Property_Types GROUP BY Ref_Property_Types.searcch_string ORDER BY frequency DESC LIMIT 1; SELECT Ref_Property_Types.searcch_string, Ref_Property_Types.searcch_description FROM Ref_Property_Types WHERE Ref_Property_Types.searcch_string = 'Most Common Property Type'; -- Replace 'Most Common Property Type' with the actual value returned by the previous query.
SELECT user_id, age_category_description FROM users JOIN ref_age_categories ON users.age_category_code = ref_age_categories.age_category_code WHERE age_category_code = 'Over 60';
SELECT user_id, age_categoey_descripition FROM users JOIN ref_age_categories ON users.age_category_code = ref_age_categories.age_category_code WHERE age_category_code ilike '%over%60%' ; SELECT * FROM ref_age_categories WHERE age_category_code ilike '%over%60%' ; SELECT * FROM users WHERE age_category_code ilike '%over%60%' ; SELECT * FROM properties p JOIN rooms r ON p.property_id = r.property_id JOIN ref_room_types rt ON r.room_type_code = rt.room_type_code WHERE rt.room_type_description ilike '%bedroom%' ; SELECT * FROM properties p JOIN room_features rf ON p.property_id = rf.property_id JOIN features f ON rf.feature_id
SELECT search_string, COUNT(*) AS number_of_rooms FROM User_Searches WHERE search_string ilike '%room size%' GROUP BY searcH_string ORDER BY number_of_rooms DESC NULLS LAST;
SELECT Rooms.search_string, COUNT(*) AS total_rooms FROM Rooms GROUP BY Rooms.searcch_string ORDER BY total_rooms DESC NULLS LAST;
SELECT user_id, address_id, country FROM users WHERE first_name = 'Robbie';
SELECT user_id, cntry FROM users WHERE first_name = 'Robbie';
SELECT user_id, fst_name, midd_name, lst_name FROM users u JOIN properties p ON u.usr_id = p.own_usr_id;
SELECT user_id, first_name, last_name FROM Users WHERE user_id IN (SELECT p.owner_user_id FROM Properties p);
SELECT user_id, sear_ch, COUNT(*) AS num_searches FROM User_Searches JOIN Properties ON User_Searches.user_id = Properties.owner_user_id GROUP BY user_id, sear_ch HAVING COUNT(*) = 0 ORDER BY num_searches DESC NULLS LAST;
SELECT user_id, searh_str FROM user_searhes WHERE proprty_id IS NULL;
SELECT user_id, last_name FROM users WHERE user_id IN (SELECT user_id FROM properties GROUP BY user_id HAVING COUNT(property_id) >= 2) AND user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) <= 2); SELECT * FROM users WHERE user_id = 757071; SELECT * FROM users WHERE user_id = 757072; SELECT * FROM users WHERE user_id = 757073; SELECT * FROM users WHERE user_id = 757074; SELECT * FROM users WHERE user_id = 757075; SELECT * FROM users WHERE user_id = 757076; SELECT * FROM users WHERE user_id = 757077; SELECT * FROM users WHERE
SELECT user_id, lnast_nm FROM users WHERE user_id IN (SELECT user_id FROM user_searches GROUP BY user_id HAVING COUNT(search_seq) <= 2) AND user_id IN (SELECT owner_user_id FROM properties GROUP BY owner_user_id HAVING COUNT(property_id) >= 2);
SELECT bike.bike_id FROM bike WHERE bike.weight > 780;
SELECT bike.cyclist_id, bike.product_name, bike.weight FROM bike ORDER BY bike.price ASC;
SELECT cyclist.cyclist_id, cyclist.heat, cyclist.name, cyclist.nation FROM cyclist;
SELECT bike.bike_id, MIN(bike.weight) AS min_weight, MAX(bike.weight) AS max_weight FROM bike GROUP BY bike.bik_id;
SELECT bike.bike_id, AVG(bike.price) AS average_price FROM bike WHERE bike.material ilike '%Carbon%CC%' GROUP BY bike.bike_id;
SELECT cyclist.cyclist_id, cyclist.name, cyclist.result FROM cyclist WHERE cyclist.nation != 'Russian' ORDER BY cyclist.result DESC NULLS LAST;
SELECT bike.bike_id, biket.product_name FROM cyclists_own_bikes AS biket JOIN bike AS biket ON biket.id = biket.bike_id WHERE biket.purchase_year > 2015;
SELECT bike.bike_id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.bike_id = cyclists_own_bikes.bike_id GROUP BY bike.bike_id, bike.product_name HAVING COUNT(DISTINCT cyclists_own_bikes.cyclist_id) >= 4;
SELECT cyclist.cyclist_id, cyclist.name FROM cyclist JOIN cyclists_own_bikes ON cyclist.cyclist_id = cyclists_own_bikes.cyclist_id GROUP BY cyclist.cyclist_id, cyclist.name ORDER BY COUNT(cyclists_own_bikes.bike_id) DESC LIMIT 1;
SELECT bike.purchase_year, bike.product_name FROM cyclists_own_bikes AS cykle JOIN bike ON cykle.bike_id = bike.id JOIN cyclist ON cykle.cyclist_id = cyclist.id WHERE cyclist.nation IN ('Russian', 'British') GROUP BY bikle.purchase_year, bike.product_name;
SELECT cyclist.cyclist_id, cyclist.heat FROM cyclist ORDER BY cyclist.heat NULLS LAST;
SELECT cyclists_own_bikes.cyclist_id FROM cyclists_own_bikes WHERE cyclists_own_bikes.purchase_year > 2015; SELECT COUNT(DISTINCT cyclists_own_bikes.cyclist_id) AS number_of_cyclists FROM cyclists_own_bikes WHERE cyclists_own_bikes.purchase_year > 2015; SELECT COUNT(DISTINCT cyclist.id) AS number_of_cyclists FROM cyclist LEFT JOIN cyclists_own_bikes ON cyclist.id = cyclists_own_bikes.cyclist_id AND cyclists_own_bikes.purchase_year > 2015 WHERE cyclists_own_bikes.cyclist
SELECT bike.bike_id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id JOIN cyclist ON cyclists_own_bikes.cyclist_id = cyclist.id WHERE cyclist.result > 4.21558 AND bike.category_code = 'R' GROUP BY biket.bike_id, bike.product_name ORDER BY bike.product_name NULLS LAST;
SELECT bike.bike_id, bike.product_name, bike.price FROM cyclist AS bradley JOIN cyclists_own_bikes AS bradley_bikes ON bradley.id = bradley_bikes.cyclist_id JOIN bike ON bradley_bikes.bike_id = bike.id WHERE bradley.name ilike '%Bradley%Wiggins%' AND EXISTS (SELECT 1 FROM cyclist AS antonio JOIN cyclists_own_bikes AS antonio_bikes ON antonio.id = antonio_bikes.cyclist_id WHERE antonio.name ilike '%Antonio%Tauler%') ORDER BY bike.product_name NULLS LAST;
SELECT cyclist.cyclist_id, cyclist.name, cyclist.nation, cyclist.result FROM cyclist LEFT JOIN cyclists_own_bikes ON cyclist.cyclist_id = cyclists_own_bikes.cyclist_id AND cyclists_own_bikes.purchase_year IS NOT NULL WHERE cyclists_own_bikes.bike_id IS NULL;
SELECT bike.bike_id, bike.product_name FROM bike WHERE bike.material ilike '%fiber%' ORDER BY bike.product_name NULLS LAST;
SELECT cyclist.cyclist_id, COUNT(cyclists_own_bikes.bike_id) AS number_of_bikes FROM cyclist JOIN cyclists_own_bikes ON cyclist.cyclist_id = cyclists_own_bikes.cyclist_id GROUP BY cyclist.cyclist_id ORDER BY cyclist.cyclist_id NULLS LAST;
SELECT goods.CustomerId, goods.Flavor FROM goods ORDER BY goods.Price DESC LIMIT 1;
SELECT goods.CustomerId, goods.Flavor FROM goods ORDER BY goods.Price DESC LIMIT 1;
SELECT goods.CustomerId, goods.Flavor FROM goods ORDER BY goods.Price ASC LIMIT 1;
SELECT goods.CustomerId, goods.Flavor FROM goods ORDER BY goods.Price ASC LIMIT 1;
SELECT goods.CustomerId FROM goods WHERE goods.Flavor ilike '%apple%'; ORDER BY goods.CustomerId;
SELECT goods.ReceiptNumber FROM goods WHERE goods.Flavor ilike '%apple%';
SELECT goods.CustomerId FROM goods WHERE price < 3; ORDER BY CustomerId;
SELECT goods.CustomerId FROM goods WHERE price < 3; ORDER BY CustomerId;
SELECT Date, CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor ilike '%lemon%' ORDER BY DaTe NULLS LAST;
SELECT Date, CustomerId FROM receipts r JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor ilike '%lemon%' ORDER BY DaTe NULLS LAST; SELECT DISTINCT CustomerId FROM receipts r JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor ilike '%lemon%'; SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Flavor ilike '%lemon%'; SELECT DISTINCT c.Id FROM customers c JOIN receipts r ON c.Id = r.CustomerId JOIN items i ON r.Receipt = i
SELECT goods.CustomerId FROM items WHERE item = 'Goods' GROUP BY CustomerId; ORDER BY CustomerId;
SELECT goods.CustomerId, COUNT(*) AS number_of_customers FROM items JOIN goods ON items.item = goods.id GROUP BY goods.customeRid ORDER BY number_of_customers DESC NULLS LAST;
SELECT customers.CustomerId FROM customers WHERE customer.id IN (SELECT receipts.customerid FROM receipts GROUP BY receipts.customerid HAVING COUNT(receipts.receiptnumber) >= 15); SELECT customer.firstname, customer.lastname FROM customers JOIN receipts ON customers.id = receipts.customerid GROUP BY customers.firstname, customers.lastname HAVING COUNT(receipts.receiptnumber) >= 15; SELECT customers.id FROM customers JOIN receipts ON customers.id = receipts.customerid GROUP BY customers.id HAVING COUNT(receipts.receiptnumber) >= 15; SELECT customers.firstname, customers.lastname FROM customers JOIN receipts ON customers.id = receipts.customerid GROUP BY customers.firstname, customers.lastname HAVING COUNT(rece
SELECT customers.CustomerId FROM customers WHERE customers.CustomerId IN (SELECT receipts.CustomerId FROM receipts GROUP BY receipts.CustomerId HAVING COUNT(receipts.ReceiptNumber) >= 15);;
SELECT customers.CustomerId, customers.LastName FROM customers JOIN receipts ON customers.CusomerId = receipts.CustomerId GROUP BY customers.CusomerId, customers.LastName HAVING COUNT(receipts.ReceiptNumber) > 10;
SELECT customers.CustomerId, customers.LastName FROM customers JOIN receipts ON customers.CusomerId = receipts.CustomerId GROUP BY customers.CusomerId, customers.LastName HAVING COUNT(receipts.ReceiptNumber) > 10;
SELECT Date FROM receipts;
SELECT Date FROM receipts;
SELECT Date, Flavor FROM items i JOIN goods g ON i.item = g.id WHERE Food = 'Croissant' ORDER BY DaTe NULLS LAST;
SELECT Date, Flavor FROM items i JOIN goods g ON i.item = g.id JOIN receipts r ON i.receipt = r.receiptnumber WHERE Food = 'croissant' ORDER BY DaTe NULLS LAST;
SELECT Date, Item FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE r.CustomerId = 15; SELECT DISTINCT g.Food AS Item FROM goods g JOIN items i ON g.Id = i.Item WHERE i.Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15); SELECT DISTINCT g.Food AS Item FROM goods g JOIN items i ON g.Id = i.Item WHERE i.Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15); SELECT DISTINCT g.Food AS Item FROM goods g JOIN items i ON g.Id = i.Item WHERE i.Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId = 15); SELECT DISTINCT g.Food AS Item FROM goods g JOIN items i ON g.Id = i.Item
SELECT Date, Item FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE CustomerId = 15; SELECT DISTINCT Item FROM items i JOIN receipts r ON i.Receipt = r.Receipt WHERE r.CustomerId = 15; SELECT DISTINCT g.Food, g.Flavor FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt IN (SELECT Receipt FROM receipts WHERE CustomerId = 15); SELECT DISTINCT g.Food, g.Flavor FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt IN (SELECT Receipt FROM receipts WHERE CustomerId = 15); SELECT DISTINCT g.Food, g.Flavor FROM items i JOIN goods g ON i.Item = g.Id WHERE i.Receipt IN
SELECT goods.CustomerId, AVG(goods.Price) AS average_price, MAX(goods.Price) AS max_price, MIN(goods.Price) AS min_price FROM goods GROUP BY goods.CustomerId;
SELECT goods.CustomerId, AVG(goods.Price) AS average_price, MIN(goods.Price) AS minimum_price, MAX(goods.Price) AS maximum_price FROM goods GROUP BY goods.CustomerId;
SELECT Date, CustomerId, array_agg(Item) AS Items FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item IN ('Cake', 'Cookie') GROUP BY Date, CustomerId HAVING COUNT(DISTINCT Item) = 2;
SELECT Date, CustomerId, ReceiptNumber FROM receipts r JOIN items i1 ON r.ReceiptNumber = i1.Receipt JOIN items i2 ON i1.Ordinal = i2.Ordinal-1 WHERE i1.Item = 'Cake' AND i2.Item = 'Cookie';
SELECT receipts.ReceiptNumber FROM receipts WHERE receipts.CustomerId IN (SELECT customers.id FROM customers WHERE customers.lastname ilike '%LOGAN%') AND EXISTS (SELECT 1 FROM items JOIN goods ON items.item = goods.id WHERE items.receipt = receipts.ReceiptNumber AND goods.food ilike '%Croissant%');
SELECT receipts.ReceiptNumber FROM customers WHERE customers.LastName ilike '%Logan%' JOIN items ON customers.Id = items.CustomerId JOIN goods ON items.Item = goods.Id JOIN receipts ON customers.Id = receipts.CustomerId WHERE goods.Food ilike '%croissant%';
SELECT receipts.ReceiptNumber, receipts.Date, MAX(goods.Price) AS Maximum_price FROM items JOIN receipts ON items.Receipt = receipts.ReceiptNumber JOIN goods ON items.Item = goods.Id GROUP BY receipts.ReceiptNumber, receipts.Date ORDER BY Maximum_price DESC NULLS LAST LIMIT 1;
SELECT receipts.ReceiptNumber, receipts.Date, MAX(goods.Price) AS Maximum_price FROM items JOIN receipts ON items.Receipt = receipts.ReceiptNumber JOIN goods ON items.Item = goods.Id GROUP BY receipts.ReceiptNumber, receipts.Date ORDER BY Maximum_price DESC NULLS LAST LIMIT 1;
SELECT items.ReceiptNumber, COUNT(*) AS frequency FROM items JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY iTems.ReceiptNumber ORDER BY frequency ASC LIMIT 1;
SELECT items.ReceiptNumber, COUNT(*) AS frequency FROM items JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY iTems.ReceiptNumber ORDER BY frequency ASC LIMIT 1;
SELECT goods.CustomerId, COUNT(*) AS number_of_goods FROM goods GROUP BY goods.CustomerId ORDER BY number_of_goods DESC NULLS LAST;
SELECT goods.CustomerId, COUNT(*) AS total_goods FROM goods GROUP BY goods.CustomerId ORDER BY total_goods DESC NULLS LAST;
SELECT goods.CustomerId, AVG(goods.Price) AS average_price FROM goods GROUP BY goods.CustomerId;
SELECT goods.CustomerId, AVG(goods.Price) AS average_price FROM goods GROUP BY goods.CustomerId;
SELECT goods.CustomerId FROM goods WHERE goods.Flavor ilike '%Apricot%' AND goods.Price < 5;
SELECT goods.CustomerId FROM goods WHERE goods.Flavor ilike '%Apricot%' AND goods.Price < 5;
SELECT goods.CustomerId, goods.Flavor FROM goods WHERE goods.Price > 10;
SELECT goods.CustomerId, goods.Flavor FROM goods WHERE goods.Price > 10;
SELECT goods.CustomerId, AVG(goods.Price) AS average_price FROM goods GROUP BY goods.CustomerId HAVING AVG(goods.Price) > 10; SELECT DISTINCT goods.Id, goods.Price FROM goods WHERE goods.Price < average_price;
SELECT goods.CustomerId, AVG(goods.Price) AS average_price FROM goods GROUP BY goods.CustomerId HAVING AVG(goods.Price) > 10 ORDER BY average_price DESC NULLS LAST;
SELECT Date FROM receipts WHERE CustomerId IN (SELECT Id FROM customers); SELECT g.Id FROM goods g JOIN items i ON g.Id = i.Item WHERE g.Flavor = 'Tart' ORDER BY g.Price ASC LIMIT 1; SELECT DISTINCT i.Receipt FROM items i JOIN goods g ON i.Item = g.Id WHERE g.Flavor = 'Tart' AND g.Price < (SELECT Price FROM goods WHERE Flavor = 'Tart' LIMIT 1) ORDER BY i.Receipt NULLS LAST; SELECT r.ReceiptNumber FROM receipts r JOIN items i ON r.Receipt = i.Receipt WHERE i.Item IN (SELECT Id FROM goods WHERE Flavor = 'Tart' AND Price < (SELECT Price FROM goods WHERE Flavor = 'Tart' LIMIT 1)); SELECT DISTINCT i.Item FROM items i JOIN goods
SELECT Date FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName ILIKE '%Tart%'); SELECT g.Id FROM goods g JOIN items i ON g.Id = i.Item WHERE g.Price < (SELECT MIN(g2.Price) FROM goods g2 JOIN items i2 ON g2.Id = i2.Item WHERE i2.Receipt IN (SELECT ReceiptNumber FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE FirstName ILIKE '%Tart%'))) ORDER BY g.Id NULLS LAST;
SELECT Date, ReceiptNumber, CustomerId FROM receipts r JOIN items i ON r.ReceiptNumber = i.Receipt WHERE i.Item.Price > 13.00 ORDER BY Date NULLS LAST;
SELECT Date, ReceiptNumber FROM receipts r JOIN items i ON r.Receipt = i.Receipt JOIN goods g ON i.Item = g.Id WHERE g.Price > 13 GROUP BY Date, ReceiptNumber;
SELECT receipts.Date FROM receipts WHERE items.item = 'gold' AND CAST(goods.price AS REAL) > 15;
SELECT receipts.Date FROM receipts WHERE items.item::real > 15;
SELECT goods.CustomerId FROM goods WHERE goods.id ilike '%APP%';
SELECT goods.CustomerId FROM goods WHERE goods.id ilike '%APP%';
SELECT goods.CustomerId, goods.Food, goods.Flavor, goods.Price FROM goods WHERE goods.Id ilike '%70%';
SELECT goods.CustomerId, goods.Price FROM goods WHERE goods.Id ilike '%70%';
SELECT customers.CustomerId, customers.LastName FROM customers ORDER BY customers.LastName ASC;
SELECT customers.CustomerId, customers.LastName FROM customers ORDER BY customers.LastName ASC;
SELECT goods.ReceiptNumber, goods.Id FROM goods ORDER BY goods.ReceiptNumber NULLS LAST;
SELECT Date FROM receipts;
SELECT Date, CustomerId FROM Receipts r JOIN Items i ON r.ReceiptNumber = i.Receipt WHERE i.Item ilike '%apple%' OR r.CustomerId = 12;
SELECT Date, ReceiptNumber FROM receipts r JOIN items i ON r.Receipt = i.Receipt WHERE i.Item IN (SELECT Id FROM goods WHERE Flavor ilike '%apple%') OR r.CustomerId = 12;
SELECT receipts.ReceiptNumber, receipts.Date FROM receipts JOIN (SELECT MAX(Date) AS MaxDate FROM receipts) AS LatestDate ON receipts.Date = LatestDate.MaxDate;
SELECT receipts.ReceiptNumber, TO_DATE(receipts.Date, 'YYYY-MM-DD') AS Date FROM receipts ORDER BY TO_DATE(receipts.Date, 'YYYY-MM-DD') DESC LIMIT 1;
SELECT receipts.ReceiptNumber, receipts.Date, receipts.CustomerId FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE (goods.Price > 10 OR receipts.Date = (SELECT MIN(r2.Date) FROM r2)) ORDER BY r2.Date NULLS LAST;
SELECT receipts.ReceiptNumber FROM receipts WHERE EXISTS (SELECT 1 FROM items JOIN goods ON items.item = goods.id WHERE items.receipt = receipts.ReceiptNumber AND (goods.price > 10 OR receipts.date = MIN(receipts.date))) ORDER BY receipts.ReceiptNumber NULLS LAST;
SELECT goods.CustomerId FROM goods WHERE goods.Food ilike '%Cookie%' OR goods.Food ilike '%Cake%' AND goods.Price BETWEEN 3 AND 7;
SELECT goods.CustomerId FROM goods WHERE goods.Food ilike '%Cookie%' OR goods.Food ilike '%Cake%' AND goods.Price BETWEEN 3 AND 7;
SELECT customers.CustomerId, cusomers.Firstname, cusomers.Lastname FROM receipts JOIN cusomers ON receipts.CustomerId = cusomers.Id ORDER BY receipts.Date ASC LIMIT 1;
SELECT customers.CustomerId, cusomers.Firstname, cusomers.Lastname FROM receipts JOIN cusomers ON receipts.customerid = cusomers.id ORDER BY receipts.date ASC LIMIT 1;
SELECT goods.CustomerId, AVG(goods.Price) AS average_price FROM goods WHERE goods.Flavor ilike '%blackberry%' OR goods.Flavor ilike '%blueberry%' GROUP BY goods.CustomerId;
SELECT goods.CustomerId, AVG(goods.Price) AS average_price FROM goods WHERE goods.Flavor ilike '%blackberry%' OR goods.Flavor ilike '%blueberry%' GROUP BY goods.CustomerId;
SELECT goods.CustomerId, MIN(goods.Price) AS min_price FROM goods WHERE goods.Flavor ilike '%cheese%' GROUP BY goods.CustomerId ORDER BY min_price NULLS LAST;
SELECT goods.ReceiptNumber, goods.Food, goods.Price FROM goods WHERE goods.Flavor ilike '%cheese%' ORDER BY goods.Price ASC NULLS LAST LIMIT 1;
SELECT goods.CustomerId, goods.Flavor, MAX(goods.Price) AS max_price, MIN(goods.Price) AS min_price, AVG(goods.Price) AS avg_price FROM goods GROUP BY goods.CustomerId, goods.Flavor ORDER BY goods.Flavor NULLS LAST;
SELECT goods.CustomerId, MAX(goods.Price) AS max_price, MIN(goods.Price) AS min_price, AVG(goods.Price) AS avg_price FROM goods GROUP BY goods.CustomerId ORDER BY max_price DESC NULLS LAST;
SELECT goods.CustomerId, MIN(goods.Price) AS min_price, MAX(goods.Price) AS max_price FROM goods GROUP BY goods.CustomerId ORDER BY min_price NULLS LAST, max_price NULLS LAST;
SELECT goods.CustomerId, MIN(goods.Price) AS min_price, MAX(goods.Price) AS max_price FROM goods GROUP BY goods.CustomerId ORDER BY min_price NULLS LAST, max_price NULLS LAST;
SELECT receipts.Date, COUNT(*) AS ReceiptCount FROM receipts GROUP BY receipts.Date ORDER BY ReceiptCount DESC NULLS LAST LIMIT 3;
SELECT receipts.Date, COUNT(*) AS ReceiptCount FROM receipts GROUP BY receipts.Date ORDER BY ReceiptCount DESC LIMIT 3;
SELECT customers.CustomerId, COUNT(*) AS total_purchases FROM receipts JOIN items ON receipts.Receipt = items.Receipt JOIN customers ON receipts.CustomerId = customers.CustomerId GROUP BY customers.CustomerId ORDER BY total_purchases DESC LIMIT 1;
SELECT customers.CustomerId, COUNT(*) AS purchase_count FROM receipts JOIN customers ON receipts.CustomerId = customers.CustomerId GROUP BY customers.CustomerId ORDER BY purchase_count DESC LIMIT 1;
SELECT receipts.Date, COUNT(DISTINCT receipts.CustomerId) AS unique_customer_count FROM receipts GROUP BY receipts.Date ORDER BY receipts.Date NULLS LAST;
SELECT receipts.Date, COUNT(DISTINCT receipts.CustomerId) AS number_of_customers FROM receipts GROUP BY receipts.Date ORDER BY receipts.Date NULLS LAST;
SELECT customers.CustomerId, cusomers.Firstname, cusomers.Lastname FROM cusomers JOIN receipts ON cusomers.CustomeerId = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt AND items.Ordinal = 0 JOIN goods ON items.Item = goods.Id WHERE goods.Flavor ilike '%apple%' AND goods.Food ilike '%Tart%';
SELECT customers.CustomerId, cusomers.Firstname, cusomers.Lastname FROM cusomers JOIN receipts ON cusomers.CustomerId = receipts.CustomerId JOIN items ON receipts.ReceiptNumber = items.Receipt AND items.Ordinal = 0 JOIN goods ON items.Item = goods.Id WHERE goods.Flavor ilike '%apple%' AND goods.Food ilike '%Tart%';
SELECT customers.CustomerId FROM customers WHERE custoomers.CustomeerId IN (SELECT items.Receipt FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'Croissant') AND EXISTS (SELECT 1 FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Food = 'Cookie' AND CAST(goods.Price AS text) < (SELECT MIN(cast(g.price AS text)) FROM goods g)); SELECT custoomers.customeerid FROM custoomers JOIN items ON custoomers.customeerid = items.receipt JOIN goods ON items.item = goods.id WHERE goods.food = 'Cookie' AND CAST(goods.price AS text) < (SELECT MIN(cast(g.price AS text)) FROM goods g); SELECT
SELECT customers.CustomerId FROM customers WHERE customers.price < (SELECT MIN(goods.price) FROM goods WHERE goods.food = 'croissant');
SELECT customers.CustomerId, customers.Firstname, customers.Lastname, AVG(goods.price) AS average_price FROM customers JOIN items ON customers.customerid = items.receipt JOIN goods ON items.item = goods.id WHERE food = 'Tart' GROUP BY customers.customerid, customers.firstname, customers.lastname HAVING price >= average_price;
SELECT goods.CustomerId FROM goods WHERE goods.Food = 'Tart' AND goods.Price >= (SELECT AVG(price) FROM items JOIN goods ON items.item = goods.id);
SELECT goods.CustomerId FROM goods WHERE goods.price > (SELECT AVG(price) * 2 FROM goods);
SELECT goods.CustomerId FROM goods WHERE goods.Price > 2 * (SELECT AVG(price) FROM goods);
SELECT goods.ReceiptNumber, goods.Flavor, goods.Food, goods.Price FROM goods JOIN items ON goods.Id = items.Item ORDER BY goods.Price DESC;
SELECT goods.CustomerId, goods.Flavor, goods.Food, goods.Price FROM goods ORDER BY goods.Price NULLS LAST;
SELECT goods.ReceiptNumber, goods.Flavor FROM goods JOIN items ON goods.Id = items.Item ORDER BY goods.Flavor NULLS LAST;
SELECT goods.ReceiptNumber, goods.Flavor FROM goods ORDER BY goods.Flavor NULLS LAST;
SELECT items.ReceiptNumber, COUNT(*) AS number_of_purchases FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Flavor ilike '%chocolate%' GROUP BY iTems.ReceiptNumber HAVING COUNT(*) <= 10;
SELECT items.ReceiptNumber, COUNT(*) AS frequency FROM items JOIN goods ON items.Item = goods.Id WHERE goods.Flavor ilike '%chocolate%' GROUP BY iTems.ReceiptNumber ORDER BY frequency DESC LIMIT 10;
SELECT Date FROM receipts WHERE CustomerId IN (SELECT Id FROM customers WHERE LastName = 'Smith') AND Item IN (SELECT Id FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Cake')) AND NOT EXISTS (SELECT 1 FROM items WHERE Item IN (SELECT Id FROM goods WHERE Food = 'Tart'));
SELECT Date FROM receipts;
SELECT goods.CustomerId, COUNT(*) AS frequency FROM items JOIN goods ON items.item = goods.id GROUP BY goods.customeRid ORDER BY frequency DESC LIMIT 3;
SELECT items.ReceiptNumber, COUNT(*) AS frequency FROM items JOIN receipts ON items.Receipt = receipts.ReceiptNumber GROUP BY iTems.ReceiptNumber ORDER BY frequency DESC LIMIT 3;
SELECT customers.CustomerId FROM customers WHERE customers.id IN (SELECT receipts.customerid FROM receipts JOIN items ON receipts.receiptnumber = items.receipt JOIN goods ON items.item = goods.id WHERE SUM(goods.price) > 150);;
SELECT customers.CustomerId FROM customers WHERE customers.CustomerId IN (SELECT receipts.CustomerId FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.Item = goods.Id WHERE SUM(goods.Price) > 150);;
SELECT customers.CustomerId, AVG(goods.price) AS average_spend FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.item = goods.id JOIN cusomers ON receipts.customerid = cusomers.customeerid GROUP BY cusomers.customeerid HAVING AVG(goods.price) > 5;
SELECT customers.CustomerId, AVG(goods.price) AS average_price FROM receipts JOIN items ON receipts.ReceiptNumber = items.Receipt JOIN goods ON items.item = goods.id JOIN cusomers ON receipts.customerid = cusomers.customeerid GROUP BY cusomers.customeerid HAVING AVG(goods.price) > 5 ORDER BY average_price DESC NULLS LAST;
SELECT receipts.Date FROM receipts WHERE SUM(goods.Price) > 100 GROUP BY receipts.Date ORDER BY COUNT(*) DESC NULLS LAST LIMIT 1;
SELECT receipts.Date FROM receipts WHERE SUM(goods.Price) > 100; ORDER BY receipts.Date;
SELECT driver.Driver_ID FROM driver;
SELECT driver.Driver_ID FROM driver;
SELECT team.Team_ID, COUNT(DISTINCT driver.Driver_ID) AS total_drivers FROM team JOIN driver ON team.Team_ID = driver.Team_ID WHERE CAST(driver.Points AS INT) > 150 GROUP BY team.Team_ID ORDER BY total_drivers DESC NULLS LAST;
SELECT team.Team_ID, tdriver.Driver_ID, driver.Make, COUNT(*) AS number_of_drivers FROM team JOIN team_driver ON team.Team_ID = team_driver.Team_ID JOIN driver ON team_driver.Driver_ID = driver.Driver_ID WHERE CAST(driver.Points AS integer) > 150 GROUP BY tteam.Team_ID, tdriver.Driver_ID, driver.Make ORDER BY number_of_drivers DESC NULLS LAST;
SELECT team.Team_ID, tdriver.Driver_ID, AVG(tdriver.Age) AS Average_Age FROM team tteam JOIN team_driver tdriver ON tteam.Team_ID = tdriver.Team_ID GROUP BY tteam.Team_ID, tdriver.Driver_ID ORDER BY tteam.Team_ID, tdriver.Driver_ID NULLS LAST;
SELECT driver.Driver_ID, driver.Make, AVG(driver.Age) AS Average_Age FROM driver GROUP BY driver.Driver_ID, driver.Make ORDER BY Average_Age DESC NULLS LAST;
SELECT driver.Driver_ID, AVG(driver.Laps) AS Average_Laps FROM driver WHERE driver.Age < 20 GROUP BY driver.Driver_ID ORDER BY Average_Laps DESC NULLS LAST;
SELECT driver.Driver_ID, AVG(driver.Laps) AS Average_Laps FROM driver WHERE driver.Age < 20 GROUP BY driver.Driver_ID ORDER BY Average_Laps DESC NULLS LAST;
SELECT team.Team_ID, t.Manager, t.Sponsor, t.Car_Owner FROM team AS t JOIN tteam_driver AS td ON t.Team_ID = td.Team_ID;
SELECT team.Team_ID, t.Manager, t.Sponsor, t.Car_Owner FROM team AS t JOIN tteam_driver AS td ON t.Team_ID = td.Team_ID JOIN driver AS d ON td.Driver_ID = d.Driver_ID ORDER BY t.Car_Owner NULLS LAST;
SELECT team.Team_ID, t.make FROM t eam JOIN team t ON eam.team_id = t.team_id GROUP BY t.make HAVING COUNT(t.team_id) > 1;
SELECT team.Team_ID, t.make FROM t eam JOIN team t ON eam.team_id = t.team_id GROUP BY t.make HAVING COUNT(t.team_id) > 1;
SELECT team.Team_ID, t.Make FROM team t JOIN driver d ON t.Car_Owner = d.Driver WHERE d.Driver = 'Buddy Arrington';
SELECT team.Team_ID, t.Make FROM team t JOIN t.car_owner c ON c.name = 'Buddy Arrington';
SELECT driver.Driver_ID, MAX(driver.Points) AS max_points, MIN(driver.Points) AS min_points FROM driver GROUP BY driver.Driver_ID;
SELECT driver.Driver_ID, MAX(driver.Points) AS max_points, MIN(driver.Points) AS min_points FROM driver GROUP BY driver.Driver_ID ORDER BY max_points DESC, min_points ASC;
SELECT driver.Driver_ID FROM driver WHERE CAST(driver.Points AS INT) < 150; ORDER BY driver.Driver_ID;
SELECT driver.Driver_ID FROM driver WHERE CAST(driver.Points AS INT) < 150; ORDER BY driver.Driver_ID;
SELECT driver.Driver_ID, driver.Driver, country.Country, driver.Age FROM driver JOIN country ON driver.Country = country.Country_Id ORDER BY driver.Age ASC;
SELECT driver.Driver_ID, driver.Driver, country.Country, driver.Age FROM driver JOIN country ON driver.Country = country.Country_Id ORDER BY driver.Age ASC;
SELECT driver.Driver_ID, driver.Driver FROM driver ORDER BY driver.Points DESC;
SELECT driver.Driver_ID, driver.Driver, country.Country, driver.Points FROM driver JOIN country ON driver.Country = country.Country_Id ORDER BY driver.Points DESC;
SELECT driver.Driver_ID, driver.Driver, country.Country FROM driver JOIN country ON driver.Country = country.Country_Id;
SELECT driver.Driver_ID, driver.Driver, country.Country FROM driver JOIN country ON driver.Country = country.Country_Id;
SELECT driver.Driver_ID, MAX(driver.Points) AS max_points FROM country JOIN driver ON country.Country_Id = driver.Country WHERE country.Capital ilike '%Dublin%' GROUP BY driver.Driver_ID ORDER BY max_points DESC NULLS LAST;
SELECT driver.Driver_ID, MAX(driver.Points) AS max_points FROM driver JOIN country ON driver.Country = country.Country_Id WHERE country.Capital ilike '%Dublin%' GROUP BY driver.Driver_ID ORDER BY max_points DESC NULLS LAST;
SELECT country.Driver_ID, AVG(country.Age) AS Average_Age FROM country JOIN driver ON country.Country_Id = driver.Country WHERE country.Official_native_language ilike '%English%' GROUP BY country.Driver_Id;
SELECT country.Driver_ID, AVG(country.Age) AS average_age FROM country JOIN driver ON country.Country_Id = driver.Country WHERE country.Official_native_language ilike '%English%' GROUP BY country.Driver_Id;
SELECT country.Driver_ID FROM country WHERE CAST(driver.points AS integer) > 150;
SELECT country.Driver_ID FROM country WHERE country.Points > '150';
SELECT country.Driver_ID, country.Capital FROM country JOIN driver ON country.Country_Id = driver.Country ORDER BY driver.Points DESC LIMIT 1;
SELECT country.Driver_ID, country.Capital FROM driver JOIN country ON driver.Country = country.Country_Id ORDER BY driver.Points DESC LIMIT 1;
SELECT team.Team_ID, COUNT(DISTINCT driver.Driver_ID) AS total_drivers FROM team JOIN team_driver ON team.Team_ID = team_driver.Team_ID JOIN driver ON team_driver.Driver_ID = driver.Driver_ID GROUP BY team.Team_ID ORDER BY total_drivers DESC NULLS LAST;
SELECT driver.Driver_ID, driver.Make FROM driver GROUP BY driver.Driver_ID, driver.Make ORDER BY COUNT(driver.Driver_ID) DESC;
SELECT team.Team_ID, t.Make FROM team AS t JOIN team_driver AS td ON t.Team_ID = td.Team_ID GROUP BY t.Make ORDER BY COUNT(td.Driver_ID) DESC LIMIT 1;
SELECT team.Team_ID, t.Make, COUNT(DISTINCT td.Driver_ID) AS Driver_Count FROM team_driver td JOIN team t ON td.Team_ID = t.Team_ID GROUP BY t.Team_ID, t.Make ORDER BY Driver_Count DESC LIMIT 1;
SELECT driver.Driver_ID, driver.Make FROM driver JOIN team_driver ON driver.Driver_ID = team_driver.Driver_ID GROUP BY driver.Driver_ID, driver.Make HAVING COUNT(DISTINCT team_driver.Driver_ID) >= 3;
SELECT team.Team_ID, team.Make FROM team JOIN team_driver ON team.Team_ID = team_driver.Team_ID GROUP BY team.Team_ID, team.Make HAVING COUNT(DISTINCT team_driver.Driver_ID) >= 3;
SELECT team.Team_ID, t.Team FROM team AS t LEFT JOIN team_driver AS td ON t.Team_ID = td.Team_ID WHERE td.Team_ID IS NULL;
SELECT team.Team_ID, team.Team FROM team LEFT JOIN team_driver ON team.Team_ID = team_driver.Team_ID WHERE team_driver.Team_ID IS NULL;
SELECT country.Driver_ID FROM driver WHERE driver.make ilike '%Dodge%' AND EXISTS (SELECT 1 FROM driver WHERE driver.country = country.country_id AND driver.make ilike '%Chevrolet%');;
SELECT country.Driver_ID FROM country WHERE country.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Make = 'Dodge') AND country.Driver_ID IN (SELECT driver.Driver_ID FROM driver WHERE driver.Make = 'Chevrolet');;
SELECT driver.Driver_ID, SUM(cast(drivier.Points AS INT)) AS total_points, AVG(cast(drivier.Points AS INT)) AS average_points FROM driver GROUP BY driver.Driver_ID;
SELECT driver.Driver_ID, SUM(cast(diver.Points AS INT)) AS total_points, AVG(cast(diver.Points AS INT)) AS average_points FROM driver GROUP BY diver.Driver_ID;
SELECT country.Driver_ID FROM country WHERE country.Driver_ID IS NULL; ORDER BY country.Driver_ID;
SELECT country.Driver_ID FROM country WHERE country.Driver_ID IS NULL; ORDER BY country.Driver_ID;
SELECT team.Team_ID, t.manager, t.sponsor FROM team AS t JOIN (SELECT Team_ID, COUNT(Driver_ID) AS num_drivers FROM team_driver GROUP BY Team_ID ORDER BY num_drivers DESC LIMIT 1) AS tc ON t.Team_ID = tc.Team_ID;
SELECT team.Team_ID, t.manager, t.sponsor FROM team AS t JOIN (SELECT team_id, COUNT(driver_id) AS num_drivers FROM team_driver GROUP BY team_id ORDER BY num_drivers DESC LIMIT 1) AS td ON t.team_id = td.team_id;
SELECT team.Team_ID, t.manager, t.car_owner FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.team_id, t.manager, t.car_owner HAVING COUNT(td.driver_id) >= 2;
SELECT team.Team_ID, t.manager, t.car_owner FROM team t JOIN team_driver td ON t.team_id = td.team_id GROUP BY t.team_id, t.manager, t.car_owner HAVING COUNT(td.driver_id) >= 2;
SELECT institution.Institution_ID FROM institution;
SELECT institution.Institution_ID FROM institution;
SELECT institution.Institution_ID, i.name FROM institution i ORDER BY i.name ASC;
SELECT institution.Institution_ID, i.name FROM institution i ORDER BY i.name NULLS LAST;
SELECT institution.Institution_ID, i.name FROM institution i ORDER BY i.founded ASC;
SELECT institution.Institution_ID, i.name FROM institution i JOIN (SELECT Institution_ID, MIN(founded) AS min_founded FROM institution GROUP BY Institution_ID) AS min_founded ON i.Institution_ID = min_founded.Institution_ID ORDER BY min_founded.min_founded NULLS LAST;
SELECT institution.Institution_ID, i.city, i.province FROM institution i;
SELECT institution.Institution_ID, i.city, i.province FROM institution i; SELECT c.Institution_ID, c.city, c.province FROM championship c JOIN institution i ON c.Institution_ID = i.Institution_ID; SELECT d.Institution_ID, d.city, d.province FROM department d JOIN institution i ON d.Institution_ID = i.Institution_ID; SELECT p.Institution_ID, p.city, p.province FROM program p JOIN institution i ON p.Institution_ID = i.Institution_ID; SELECT s.Institution_ID, s.city, s.province FROM school s JOIN institution i ON s.Institution_ID = i.Institution_ID; SELECT v.Institution_ID, v.city, v.province FROM venue v JOIN institution i ON v.Institution_
SELECT institution.Institution_ID, MIN(iNStitution.enrollment) AS min_enrollment, MAX(iNStitution.enrollment) AS max_enrollment FROM institution GROUP BY iNStitution.Institution_ID;
SELECT institution.Institution_ID, MIN(iNStitution.Enrollment) AS Minimum_Enrollment, MAX(iNStitution.Enrollment) AS Maximum_Enrollment FROM institution iNStitution GROUP BY iNStitution.Institution_ID;
SELECT institution.Institution_ID, iinsstitution.Name, iinsstitution.Affiliation FROM institution iinsstitution WHERE iinsstitution.City != 'Vancouver';
SELECT institution.Institution_ID, iinsstitution.Name, iinsstitution.Affiliation FROM institution iinsstitution WHERE iinsstitution.City != 'Vancouver';
SELECT institution.Institution_ID, i.name AS institution_name, s.name AS stadium_name, c.capacity FROM institution i JOIN stadium s ON i.stadium = s.Stadium_ID JOIN city c ON i.city = c.City_ID ORDER BY c.capacity DESC;
SELECT institution.Institution_ID, i.name AS institution_name, s.name AS stadium_name, i.capacity FROM institution i JOIN stadium s ON i.stadium = s.Stadium_ID JOIN country c ON i.country = c.Country_ID ORDER BY i.capacity DESC;
SELECT institution.Institution_ID, iinsstitution.Stadium FROM institution iinsstitution WHERE iinsstitution.Enrollment = (SELECT MAX(enrollment) FROM institution);
SELECT institution.Institution_ID, i.name, i.stadium FROM institution AS i JOIN (SELECT Institution_ID, MAX(enrollment) AS max_enrollment FROM institution GROUP BY Institution_ID) AS ins ON i.Institution_ID = ins.Institution_ID;
SELECT institution.Institution_ID, institution.Name, championship.Nickname FROM institution JOIN championship ON institution.Institution_ID = championship.Institution_ID;
SELECT institution.Institution_ID, i.name AS institution_name, c.nickname AS championship_nickname FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID;
SELECT institution.Nickname FROM institution WHERE Enrollment = (SELECT MIN(Enrollment) FROM institution);
SELECT institution.Nickname FROM institution WHERE Enrollment = (SELECT MIN(Enrollment) FROM institution); ORDER BY institution.Nickname;
SELECT institution.Institution_ID, i.name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC;
SELECT institution.Institution_ID, i.name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID ORDER BY c.Number_of_Championships DESC;
SELECT institution.Institution_ID, i.name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID;
SELECT institution.Institution_ID, i.name FROM institution i JOIN Championship c ON i.Institution_ID = c.Institution_ID GROUP BY i.Institution_ID, i.name HAVING COUNT(c.Institution_ID) >= 1 ORDER BY i.Institution_ID NULLS LAST;
SELECT institution.Institution_ID, SUM(championship.Number_of_Championships) AS total_championships FROM institution JOIN championship ON institution.Institution_ID = championship.Institution_ID WHERE institution.Affiliation ilike '%public%' GROUP BY iinstitution.Institution_ID ORDER BY total_championships DESC NULLS LAST;
SELECT institution.Institution_ID, SUM(championship.Number_of_Championships) AS total_championships FROM institution JOIN championship ON institution.Institution_ID = championship.Institution_ID WHERE institution.Affiliation ilike '%Public%' GROUP BY iinstitution.Institution_ID ORDER BY total_championships DESC NULLS LAST;
SELECT institution.Institution_ID, i.affiliation, COUNT(i.affiliation) AS COUNT FROM institution i GROUP BY i.affiliation ORDER BY COUNT DESC NULLS LAST;
SELECT institution.Institution_ID, i.name, COUNT(i.affiliation) AS number_of_institutions FROM institution i GROUP BY i.affiliation ORDER BY number_of_institutions DESC NULLS LAST;
SELECT institution.Institution_ID, i.Affiliation FROM institution i JOIN (SELECT Affiliation, COUNT(*) AS COUNT FROM institution GROUP BY Affiliation ORDER BY COUNT DESC LIMIT 1) AS iinstitution ON i.Affiliation = iinstitution.Affiliation;
SELECT institution.Institution_ID, i.Affiliation FROM institution i JOIN (SELECT Affiliation, COUNT(*) AS COUNT FROM institution GROUP BY Affiliation ORDER BY COUNT DESC LIMIT 1) AS iin ON i.Affiliation = iin.Affiliation;
SELECT institution.Institution_ID, i.founded FROM institution i JOIN (SELECT YEAR(founded) AS founded, COUNT(*) AS num_institutions FROM institution GROUP BY YEAR(founded) HAVING COUNT(*) > 1) AS i ON i.founded = i.Institution_ID;
SELECT institution.Institution_ID, COUNT(*) AS number_of_institutions FROM institution i GROUP BY i.founded HAVING COUNT(*) > 1 ORDER BY i.founded NULLS LAST;
SELECT institution.Nickname FROM institution WHERE institution.Capacity IS NOT NULL ORDER BY institution.Capacity DESC;
SELECT institution.Nickname, i.capacity FROM institution i JOIN championship institution ON i.institution_id = institution.institution_id ORDER BY i.capacity DESC;
SELECT institution.Institution_ID, SUM(insitution.Enrollment) AS total_enrollment FROM insitution WHERE insitution.City IN ('Vancouver', 'Cagary') GROUP BY insitution.Institution_ID ORDER BY total_enrollment DESC NULLS LAST;
SELECT institution.Institution_ID, iinsstitution.Name, iinsstitution.City, iinsstitution.Enrollment FROM institution iinsstitution WHERE iinsstitution.City ilike '%Vancouver%' OR iinsstitution.City ilike '%Calgary%';;
SELECT institution.Institution_ID, i.name, i.province FROM institution i JOIN (SELECT province FROM institution WHERE founded < 1920) AS i1 ON i.province = i1.province JOIN (SELECT province FROM institution WHERE founded > 1950) AS i2 ON i.province = i2.province;
SELECT institution.Institution_ID, i.name, i.province FROM institution i JOIN (SELECT province FROM institution WHERE founded < 1920) AS i1 ON i.province = i1.province JOIN (SELECT province FROM institution WHERE founded > 1950) AS i2 ON i.province = i2.province;
SELECT institution.Institution_ID, COUNT(DISTINCT i.Province) AS number_of_provinces FROM institution i JOIN championship c ON i.Institution_ID = c.Institution_ID GROUP BY i.Institution_ID ORDER BY number_of_provinces DESC NULLS LAST;
SELECT institution.Institution_ID, i.province FROM institution i GROUP BY i.province ORDER BY COUNT(i.province) DESC NULLS LAST;
SELECT Code, Location, Capacity FROM Warehouses;
SELECT Code, Location, Capacity FROM Warehouses;
SELECT Boxes.Contents FROM Boxes WHERE Boxes.Warehouse IN (SELECT Code FROM Warehouses WHERE Location ilike '%New York%') GROUP BY Boxes.Contents ORDER BY COUNT(Boxes.Contents) DESC NULLS LAST;
SELECT Boxes.Contents FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location ilike '%New York%');;
SELECT Boxes.Contents FROM Boxes WHERE Boxes.Value > 150; ORDER BY Boxes.Contents;
SELECT Boxes.Contents FROM Boxes WHERE Boxes.Value > 150; ORDER BY Boxes.Contents;
SELECT Boxes.Warehouse, AVG(Boxes.Value) AS Average_value FROM Boxes GROUP BY Boxes.Warehouse ORDER BY Average_value DESC NULLS LAST;
SELECT Boxes.Warehouse, AVG(Boxes.Value) AS Average_value FROM Boxes GROUP BY Boxes.Warehouse ORDER BY Average_value DESC NULLS LAST;
SELECT Boxes.Value, AVG(Boxes.Value) AS Average_value, SUM(Boxes.Value) AS Total_value FROM BoxeS GROUP BY BoxeS.Value;
SELECT Boxes.Value FROM Boxes;
SELECT Warehouses.Code, AVG(Warehouses.Capacity) AS Average_Capacity, SUM(Warehouses.Capacity) AS Total_Capacity FROM Warehouses GROUP BY Warehouses.Code;
SELECT Warehouses.Code, AVG(Warehouses.Capacity) AS Average_Capacity, SUM(Warehouses.Capacity) AS Total_Capacity FROM Warehouses GROUP BY Warehouses.Code;
SELECT Boxes.Contents, AVG(Boxe.Value) AS Average_value, MAX(Boxe.Value) AS Maximum_value FROM Boxes GROUP BY Boxe.Contents;
SELECT Boxes.Contents, AVG(Boxes.Value) AS Average_value, MAX(Boxes.Value) AS Maximum_value FROM BoxeS GROUP BY BoxeS.Contents;
SELECT Boxes.Contents, SUM(Boxes.Value) AS Total_Value FROM Boxes GROUP BY Boxes.Contents ORDER BY Total_Value DESC LIMIT 1;
SELECT Boxes.Contents, MAX(Boxes.Value) AS max_value FROM Boxes GROUP BY Boxes.Contents ORDER BY max_value DESC NULLS LAST LIMIT 1;
SELECT Boxes.Value FROM Boxes;
SELECT Boxes.Value FROM Boxes;
SELECT Boxes.Contents FROM Boxes;
SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Contents IS NOT NULL GROUP BY BoxeS.Contents ORDER BY COUNT(BoxeS.Contents) DESC;
SELECT Boxes.Contents FROM Boxes WHERE Boxes.Contents IS NOT NULL GROUP BY Boxes.Contents ORDER BY COUNT(Boxes.Contents) DESC NULLS LAST;
SELECT Boxes.Contents FROM Boxes WHERE Boxes.Contents IS NOT NULL GROUP BY Boxes.Contents ORDER BY COUNT(Boxes.Contents) DESC;
SELECT Warehouses.Code, Warehouses.Location FROM Warehouses ORDER BY Warehouses.Location NULLS LAST;
SELECT Warehouses.Code, Warehouses.Location FROM Warehouses ORDER BY Warehouses.Location NULLS LAST;
SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location IN ('Chicago', 'New York'));
SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location ilike '%Chicago%' OR Warehouses.Location ilike '%New York%');;
SELECT Boxes.Value FROM Boxes WHERE Boxes.Warehouse IN (SELECT Code FROM Warehouses WHERE Location IN ('Chicago', 'New York')); ORDER BY Boxes.Value;
SELECT Boxes.Value FROM Boxes WHERE Boxes.Warehouse IN (SELECT Code FROM Warehouses WHERE Location ilike '%Chicago%' OR Location ilike '%New York%');  ORDER BY Boxes.Value;
SELECT Boxes.Contents FROM Boxes WHERE Boxe.Warehouse IN (SELECT Code FROM Warehouses WHERE Location ilike '%Chicago%' OR Location ilike '%New York%') ORDER BY Boxe.Contents NULLS LAST;
SELECT Boxes.Contents FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location IN ('Chicago', 'New York'));
SELECT Boxes.Contents FROM Boxes WHERE Boxeas.Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location ilike '%New York%') ORDER BY Boxeas.Contents NULLS LAST;
SELECT Boxes.Contents FROM Boxes WHERE Boxe.Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location ILIKE '%New%York%') ORDER BY Boxe.Contents NULLS LAST;
SELECT Warehouses.Code, Warehouses.Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents ilike '%Rocks%' AND Boxes.Contents not ilike '%Scissors%' ORDER BY Warehouses.Location NULLS LAST;
SELECT Warehouses.Code, Warehouses.Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents ilike '%Rock%' AND Boxes.Contents not ilike '%Scissors%' ORDER BY Warehouses.Location NULLS LAST;
SELECT Warehouses.Code, Warehouses.Location FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse WHERE Boxes.Contents ilike '%Rocks%' OR Boxes.Contents ilike '%Scissors%' ORDER BY Warehouses.Code NULLS LAST;
SELECT Boxes.Warehouse FROM Boxes WHERE Boxes.Contents ilike '%Rocks%' OR Boxes.Contents ilike '%Scissors%' GROUP BY Boxes.Warehouse ORDER BY Boxes.Warehouse NULLS LAST;
SELECT Warehouses.Code, Warehouses.Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Boxes.Contents ilike '%Rocks%' OR Boxes.Contents ilike '%Scissors%' ORDER BY Warehouses.Location NULLS LAST;
SELECT Warehouses.Code, Warehouses.Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Boxes.Contents ilike '%Rocks%' AND Boxes.Contents ilike '%Scissors%' ORDER BY Warehouses.Location NULLS LAST;
SELECT Boxes.Code, Boxes.Contents, Boxes.Value FROM Boxes ORDER BY Boxes.Value DESC;
SELECT Boxes.Code, Boxes.Contents, Boxes.Value FROM Boxes ORDER BY Boxes.Value DESC;
SELECT Boxes.Code, Boxes.Contents FROM Boxes ORDER BY Boxes.Value ASC LIMIT 1;
SELECT Boxes.Code, Boxes.Contents FROM Boxes ORDER BY Boxes.Value ASC LIMIT 1;
SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Value > (SELECT AVG(Boxes.Value) FROM BoxeS); SELECT DISTINCT BoxeS.Contents FROM BoxeS WHERE BoxeS.Value > (SELECT AVG(Boxes.Value) FROM BoxeS); SELECT BoxeS.Contents FROM BoxeS WHERE BoxeS.Value > (SELECT AVG(Boxes.Value) FROM BoxeS) ORDER BY BoxeS.Contents NULLS LAST; SELECT DISTINCT BoxeS.Contents FROM BoxeS WHERE BoxeS.Value > (SELECT AVG(Boxes.Value) FROM BoxeS) ORDER BY BoxeS.Contents NULLS LAST; SELECT BoxeS.Contents FROM BoxeS WHERE BoxeS.Value > (SELECT AVG(Boxes.Value) FROM BoxeS) ORDER BY BoxeS.Contents NULLS LAST
SELECT Boxes.Contents FROM Boxes WHERE Boxes.Value > (SELECT AVG(B.Value) FROM Boxes B); ORDER BY Boxes.Contents NULLS LAST;
SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Contents IS NOT NULL GROUP BY BoxeS.Contents ORDER BY BoxeS.Contents NULLS LAST;
SELECT Boxes.Contents FROM Boxes WHERE BoxeS.Contents IS NOT NULL GROUP BY BoxeS.Contents ORDER BY BoxeS.Contents ASC;
SELECT Boxes.Code FROM Boxes WHERE Boxes.Value > (SELECT MAX(Boxes.Value) FROM Boxes WHERE Boxes.Contents = 'Rocks');
SELECT Boxes.Code FROM Boxes WHERE Boxes.Value > (SELECT MAX(Boxes.Value) FROM Boxes WHERE Boxes.Contents ilike '%Rocks%');
SELECT Boxes.Code, Boxes.Contents, Boxes.Value FROM Boxes WHERE Boxes.Value > ALL (SELECT Boxes.Value FROM Boxes WHERE Boxes.Contents = 'Scissors');
SELECT Boxes.Code, Boxes.Contents FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Boxes.Value > (SELECT MAX(Boxes.Value) FROM Boxes WHERE Boxes.Contents ilike '%Scissors%') ORDER BY Boxes.Value DESC NULLS LAST;
SELECT Boxes.Value FROM Boxes WHERE Boxes.Warehouse = (SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1); ORDER BY Value;
SELECT Boxes.Value FROM Boxes WHERE Boxes.Warehouse = (SELECT Warehouses.Code FROM Warehouses ORDER BY Warehouses.Capacity DESC LIMIT 1); ORDER BY Boxes.Value;
SELECT Warehouses.Code, AVG(Boxes.Value) AS Average_Value FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code HAVING AVG(Boxes.Value) > 150 ORDER BY Average_Value DESC NULLS LAST;
SELECT Boxes.Warehouse, AVG(Boxes.Value) AS Average_value FROM Boxes GROUP BY Boxes.Warehouse HAVING AVG(Boxes.Value) > 150 ORDER BY Average_value DESC NULLS LAST;
SELECT Boxes.Contents, SUM(Boxes.Value) AS Total_value, COUNT(Boxes.Code) AS Number_of_boxes FROM BoxeS GROUP BY BoxeS.Contents ORDER BY Number_of_boxes DESC; NULLS LAST;
SELECT Boxes.Contents, SUM(Boxes.Value) AS total_value, COUNT(Boxes.Code) AS total_boxes FROM Boxes GROUP BY Boxes.Contents ORDER BY total_value DESC NULLS LAST;
SELECT Warehouses.Code, SUM(Warehouses.Capacity) AS total_capacity, AVG(Warehouses.Capacity) AS average_capacity, MAX(Warehouses.Capacity) AS max_capacity FROM Warehouses GROUP BY Warehouses.Location;
SELECT Warehouses.Code, Warehouses.Location, SUM(Warehouses.Capacity) AS total_capacity, AVG(Warehouses.Capacity) AS average_capacity, MAX(Warehouses.Capacity) AS max_capacity FROM Warehouses GROUP BY Warehouses.Code, Warehouses.Location ORDER BY Warehouses.Location NULLS LAST;
SELECT Code, SUM(Capacity) AS total_capacity FROM Warehouses GROUP BY Code;
SELECT Code, SUM(Capacity) AS total_capacity FROM Warehouses GROUP BY Code;
SELECT Warehouses.Code, MAX(Boxes.Value) AS max_value FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY max_value DESC;
SELECT Warehouses.Code, MAX(Boxes.Value) AS max_value FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code GROUP BY Warehouses.Code ORDER BY max_value DESC;
SELECT Warehouses.Code, COUNT(Boxes.Code) AS number_of_boxes FROM Warehouses JOIN Boxes ON Warehouses.Code = Boxes.Warehouse GROUP BY Warehouses.Code ORDER BY number_of_boxes DESC NULLS LAST;
SELECT Boxes.Warehouse, COUNT(*) AS number_of_boxes FROM Boxes GROUP BY Boxes.Warehouse ORDER BY number_of_boxes DESC NULLS LAST;
SELECT Value FROM Boxes WHERE Contents ilike '%Rock%' GROUP BY Warehouse HAVING COUNT(DISTINCT Location) > 1;
SELECT Boxes.Warehouse FROM Boxes WHERE BoxeS.Contents ilike '%Rock%' GROUP BY BoxeS.Warehouse ORDER BY COUNT(BoxeS.Warehouse) DESC;
SELECT Boxes.Code, Warehouses.Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code;
SELECT Boxes.Code, Warehouses.Location FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code;
SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location ilike '%Chicago%');
SELECT Boxes.Code FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location ilike '%Chicago%') ORDER BY Boxes.Code NULLS LAST;
SELECT Boxes.Warehouse, COUNT(*) AS total_boxes FROM Boxes GROUP BY Boxes.Warehouse ORDER BY total_boxes DESC NULLS LAST;
SELECT Boxes.Warehouse, COUNT(*) AS number_of_boxes FROM Boxes GROUP BY Boxes.Warehouse ORDER BY number_of_boxes DESC NULLS LAST;
SELECT Boxes.Warehouse, COUNT(DISTINCT BoxeS.Contents) AS num_distinct_contents FROM BoxeS JOIN Warehouses ON BoxeS.Warehouse = Warehouses.Code GROUP BY BoxeS.Warehouse ORDER BY num_distinct_contents DESC NULLS LAST;
SELECT Boxes.Warehouse, COUNT(DISTINCT Boxes.Contents) AS number_of_distinct_contents FROM Boxes GROUP BY Boxes.Warehouse ORDER BY number_of_distinct_contents DESC NULLS LAST;
SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Capacity < (SELECT COUNT(*) FROM Boxes WHERE Boxes.Warehouse = Warehouses.Code);
SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Capacity < (SELECT COUNT(*) FROM Boxes WHERE Boxes.Warehouse = Warehouses.Code);
SELECT Boxes.Value FROM Boxes WHERE Boxes.Warehouse NOT IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location ilike '%Chicago%'); SELECT SUM(Boxes.Value) AS total_value FROM Boxes WHERE Boxes.Warehouse NOT IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location ilike '%Chicago%'); SELECT COUNT(*) FROM Boxes WHERE Boxes.Warehouse NOT IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location ilike '%Chicago%'); SELECT Boxes.Value FROM Boxes JOIN Warehouses ON Boxes.Warehouse = Warehouses.Code WHERE Warehouses.Location not ilike '%Chicago%'; SELECT SUM(Boxes.Value) AS total_value FROM Boxes JOIN Warehouses ON
SELECT Boxes.Value FROM Boxes WHERE Boxes.Warehouse IN (SELECT Warehouses.Code FROM Warehouses WHERE Warehouses.Location != 'Chicago'); ORDER BY Boxes.Value;
SELECT university.University_ID, university.University_Name, university.City, university.State FROM university ORDER BY university.University_Name ASC;
SELECT university.University_ID, university.University_Name, university.City, university.State FROM university ORDER BY university.University_Name ASC;
SELECT university.University_ID, university.University_Name, university.City, university.State FROM university WHERE university.State IN ('Illinois', 'Ohio');
SELECT university.University_ID, COUNT(*) AS total_universities FROM univversity WHERE univversity.State IN ('Illinois', 'Ohio') GROUP BY univversity.University_ID;
SELECT Major_ID, MAX(Enrollment) AS max_enrollment, AVG(Enrollment) AS avg_enrollment, MIN(Enrollment) AS min_enrollment FROM university GROUP BY Major_ID;
SELECT Major_ID, MAX(Enrollment) AS max_enrollment, AVG(Enrollment) AS avg_enrollment, MIN(Enrollment) AS min_enrollment FROM university GROUP BY Major_ID;
SELECT university.University_ID, u.team_name FROM university u JOIN overall_ranking o ON u.university_id = o.university_id WHERE o.total > (SELECT AVG(total) FROM overall_ranking);
SELECT university.University_ID, u.team_name FROM university u JOIN overall_ranking r ON u.university_id = r.university_id WHERE r.total > (SELECT AVG(total) FROM overall_ranking);
SELECT university.University_ID, university.Home_Conference FROM university ORDER BY university.Home_Conference NULLS LAST;
SELECT university.University_ID, university.Home_Conference FROM university GROUP BY university.University_ID, university.Home_Conference ORDER BY university.Home_Conference NULLS LAST;
SELECT university.University_ID, u.Home_Conference, COUNT(u.Home_Conference) AS num_universities FROM university u GROUP BY u.Home_Conference; SELECT u.Home_Conference, NULL AS University_ID, COUNT(u.Home_Conference) AS num_universities FROM university u GROUP BY u.Home_Conference; UNION ALL SELECT NULL AS University_ID, u.Home_Conference, COUNT(u.Home_Conference) AS num_universities FROM university u GROUP BY u.Home_Conference; ORDER BY num_universities DESC NULLS LAST;
SELECT university.University_ID, COUNT(DISTINCT u.University_ID) AS number_of_universities FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID GROUP BY u.University_ID ORDER BY number_of_universities DESC NULLS LAST;
SELECT university.University_ID, university.State FROM university GROUP BY university.State ORDER BY COUNT(university.University_ID) DESC LIMIT 1;
SELECT university.University_ID, university.State FROM university GROUP BY university.State ORDER BY COUNT(university.University_ID) DESC LIMIT 1;
SELECT university.University_ID, u.Home_Conference FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID WHERE o.Total > 2000 GROUP BY u.University_ID, u.Home_Conference ORDER BY u.University_ID NULLS LAST;
SELECT university.University_ID, u.Home_Conference FROM University u JOIN (SELECT Home_Conference, AVG(Enrollment) AS Average_Enrollment FROM University GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000) AS university ON u.Home_Conference = university.Home_Conference;
SELECT university.University_ID, u.University_Name, SUM(u.Enrollment) AS total_enrollment FROM university u JOIN overall_ranking r ON u.University_ID = r.University_ID GROUP BY u.University_ID, u.University_Name ORDER BY total_enrollment ASC LIMIT 1;
SELECT university.University_ID, university.Home_Conference FROM university WHERE university.Enrollment = (SELECT MIN(university.Enrollment) FROM university);
SELECT major.Major_ID, major.Major_Name, major.Major_Code FROM major ORDER BY major.Major_Code NULLS LAST;
SELECT major.Major_ID, major.Major_Name, major.Major_Code FROM major ORDER BY major.Major_Code NULLS LAST;
SELECT major.Major_ID, major.Major_Name, rank() OVER (PARTITION BY major_ranking.University_ID ORDER BY major_ranking.Rank DESC) AS Major_Rank FROM major JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID JOIN university ON major_ranking.University_ID = university.University_ID WHERE university.University_Name ilike '%Augustana%College%' ORDER BY Major_Rank NULLS LAST;
SELECT major_ranking.Rank, major.Major_Name FROM major JOIN major_ranking ON major.Major_ID = major_ranking.Major_ID WHERE major_ranking.University_ID = 1055970 ORDER BY major_ranking.Rank NULLS LAST;
SELECT university.University_ID, u.University_Name, u.City, u.State FROM university u JOIN major_ranking mr ON u.University_ID = mr.University_ID WHERE mr.Major_ID = (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') ORDER BY mr.Rank ASC LIMIT 1;
SELECT university.University_ID, u.University_Name, u.City, u.State FROM university u JOIN major m ON u.University_ID = m.Major_ID JOIN major_ranking r ON m.Major_ID = r.Major_ID WHERE m.Major_Name = 'Accounting' ORDER BY r.Rank ASC LIMIT 1;
SELECT university.University_ID, uuniversity.University_Name FROM university uuniversity JOIN major_ranking mr ON uuniversity.University_ID = mr.University_ID WHERE mr.Rank = 1 GROUP BY uuniversity.University_ID, uuniversity.University_Name ORDER BY COUNT(mr.Major_ID) DESC LIMIT 1;
SELECT university.University_ID, u.University_Name, COUNT(mr.Major_ID) AS Major_Count FROM overall_ranking OR ON UNIVERSITY.University_ID = OR.University_ID JOIN major_ranking mr ON OR.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID JOIN university u ON u.University_ID = mr.University_ID GROUP BY u.University_ID, u.University_Name ORDER BY Major_Count DESC LIMIT 1;
SELECT university.University_ID, university.University_Name FROM university WHERE university.University_ID NOT IN (SELECT DISTINCT major_ranking.University_ID FROM major_ranking WHERE major_ranking.Rank = 1);
SELECT university.University_ID, university.University_Name FROM university WHERE university.University_ID NOT IN (SELECT major_ranking.University_ID FROM major_ranking WHERE major_ranking.Rank = 1);
SELECT university.University_ID, university.University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID WHERE major_ranking.Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name ilike '%Accounting%') AND major_ranking.Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name ilike '%Urban%Education%') ORDER BY university.University_ID NULLS LAST;
SELECT university.University_ID, university.University_Name FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID WHERE major_ranking.Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name ilike '%Accounting%') AND university.University_ID IN (SELECT University_ID FROM university JOIN major_ranking ON university.University_ID = major_ranking.University_ID WHERE major_ranking.Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name ilike '%Urban%Education%'));
SELECT university.University_ID, u.University_Name, o.Rank FROM university AS u JOIN overall_ranking AS o ON u.University_ID = o.University_ID WHERE u.State = 'Wisconsin' ORDER BY o.Rank NULLS LAST;
SELECT university.University_ID, u.University_Name, o.Rank FROM university AS u JOIN overall_ranking AS o ON u.University_ID = o.University_ID WHERE u.State = 'Wisconsin' ORDER BY o.Rank NULLS LAST;
SELECT university.University_ID, u.University_Name FROM overall_ranking r JOIN university u ON r.University_ID = u.University_ID ORDER BY r.Research_point DESC LIMIT 1;
SELECT university.University_ID, uuniversity.University_Name, SUM(overall_ranking.Research_point) AS total_research_points FROM overall_ranking JOIN uuniversity ON overall_ranking.University_ID = uuniversity.University_ID GROUP BY uuniversity.University_ID, uuniversity.University_Name ORDER BY total_research_points DESC LIMIT 1;
SELECT university.University_ID, u.University_Name FROM overall_ranking r JOIN university u ON r.University_ID = u.University_ID ORDER BY r.Reputation_point ASC;
SELECT university.University_ID, u.University_Name FROM overall_ranking r JOIN university u ON r.University_ID = u.University_ID ORDER BY r.Reputation_point ASC;
SELECT university.University_ID, u.University_Name FROM university u JOIN overall_ranking o ON u.University_ID = o.University_ID JOIN major_ranking mr ON u.University_ID = mr.University_ID JOIN major m ON mr.Major_ID = m.Major_ID WHERE m.Major_Name = 'Accounting' AND mr.Rank >= 3 ORDER BY o.Rank DESC;
SELECT university.University_ID, uuniversity.University_Name FROM uuniversity JOIN major_ranking ON uuniversity.University_ID = major_ranking.University_ID WHERE major_ranking.Rank >= 3 AND major_ranking.Major_ID IN (SELECT Major_ID FROM major WHERE Major_Name = 'Accounting') ORDER BY uuniversity.University_ID NULLS LAST;
SELECT university.University_ID, SUM(university.Enrollment) AS total_enrollment FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank <= 5 GROUP BY university.University_ID ORDER BY total_enrollment DESC NULLS LAST;
SELECT university.University_ID, SUM(university.Enrollment) AS total_enrollment FROM university JOIN overall_ranking ON university.University_ID = overall_ranking.University_ID WHERE overall_ranking.Rank <= 5 GROUP BY university.University_ID ORDER BY total_enrollment DESC NULLS LAST;
SELECT university.University_ID, u.University_Name, o.Citation_point FROM overall_ranking o JOIN university u ON o.University_ID = u.University_ID WHERE o.Reputation_point > 3 ORDER BY o.Reputation_point DESC NULLS LAST;
SELECT university.University_ID, u.University_Name, o.Citation_point FROM overall_ranking o JOIN university u ON o.University_ID = u.University_ID ORDER BY o.Reputation_point DESC NULLS LAST LIMIT 3;
SELECT university.University_ID, university.State FROM univversity WHERE univversity.Enrollment < 3000 GROUP BY univversity.State HAVING COUNT(univversity.University_ID) > 2;
SELECT university.University_ID, univversity.State FROM univversity WHERE univversity.Enrollment < 3000 GROUP BY univversity.State HAVING COUNT(univversity.University_ID) > 2;
SELECT Movies.Code, Movies.Title FROM Movies WHERE Movies.Rating IS NULL;
SELECT Movies.Name FROM Movies WHERE Movies.Rating IS NULL; ORDER BY Movies.Name;
SELECT Movies.Name FROM Movies WHERE Movies.Rating = 'G'; ORDER BY Movies.Name;
SELECT Movies.Name FROM Movies WHERE Movies.Rating ilike '%G%'; ORDER BY Movies.Name;
SELECT Movies.Name FROM MovieTheaters WHERE MovieTheaters.Name = 'Odeon' LIMIT 1;
SELECT Movies.Name FROM MovieTheaters WHERE MovieTheaters.Name = 'Odeon' JOIN Movies ON MovieTheaters.Movie = Movies.Code;
SELECT Movies.Name, MovieTheaters.Name AS Theater_Name FROM Moviestheaters JOIN Moviestheaters ON Moviestheaters.Movie = Moviestheaters.Movie;
SELECT Movies.Name, MovieTheaters.Name AS Theater_Name FROM Moviestheaters JOIN Moviestheaters ON Moviestheaters.Movie = Moviestheaters.Movie;
SELECT Movies.Code FROM Movies WHERE Movies.Rating ilike '%G%' ; ORDER BY Movies.Code;
SELECT Movies.Code, Movies.Title FROM Movies WHERE Movies.Rating ilike '%G%' ORDER BY Movies.Title NULLS LAST;
SELECT MovieTheaters.Name, COUNT(*) AS number_of_movies FROM MovieTheaters GROUP BY MovieTheaters.Name;
SELECT MovieTheaters.Name, COUNT(*) AS number_of_movies FROM MovieTheaters GROUP BY MovieTheaters.Name;
SELECT MovieTheaters.Name, COUNT(DISTINCT Movies.Code) AS number_of_movies FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code GROUP BY MovieTheaters.Name;
SELECT MovieTheaters.Name, COUNT(DISTINCT Movies.Code) AS number_of_movies FROM MovieTheaters JOIN Movies ON MovieTheaters.Movie = Movies.Code GROUP BY MovieTheaters.Name;
SELECT MovieTheaters.Name FROM MovieTheaters WHERE MovieTheaters.Movie IS NOT NULL GROUP BY MovieTheaters.Name ORDER BY COUNT(DISTINCT MovieTheaters.Movie) DESC;
SELECT MovieTheaters.Name FROM MovieTheaters WHERE MovieTheaters.Movie IS NULL GROUP BY MovieTheaters.Name ORDER BY COUNT(MovieTheaters.Name) DESC NULLS LAST; ORDER BY MovieTheaters.Name;
SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies WHERE Movies.Title ilike '%Citizen%' ORDER BY Movies.Title NULLS LAST;
SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name ilike '%Citizen%' ORDER BY Movies.Code NULLS LAST;
SELECT Movies.Code, Moviestheaters.Name FROM Moviestheaters JOIN Moviies ON Moviestheaters.Movie = Moviies.Code WHERE Moviies.Rating ilike '%G%' OR Moviies.Rating ilike '%PG%';
SELECT Movies.Code, Moviestheaters.Name FROM Moviestheaters JOIN Moviestheaters ON Moviestheaters.Movie = Moviestheaters.Movie WHERE Moviestheaters.Rating IN ('G', 'PG');;
SELECT Movies.Name FROM Movies WHERE Movies.Code IN (SELECT MovieTheaters.Movie FROM MovieTheaters WHERE MovieTheaters.Name IN ('Odeon', 'Imperial'));
SELECT Movies.Code, Moviies.Title FROM Moviies JOIN MovieTheaters ON Moviies.Code = MovieTheaters.Movie WHERE MovieTheaters.Name IN ('Odeon', 'Imperial') ORDER BY Moviies.Title NULLS LAST;
SELECT Movies.Name FROM Movies WHERE Movies.Code IN (SELECT MovieTheaters.Movie FROM MovieTheaters JOIN MovieTheaters AS T ON MovieTheaters.Movie = T.Movie AND MovieTheaters.Name != T.Name GROUP BY MovieTheaters.Movie HAVING COUNT(DISTINCT MovieTheaters.Name) >= 2); SELECT Movies.Title FROM Movies;
SELECT Movies.Code, Moviies.Title FROM Moviies JOIN MovieTheaters AS Odeon ON Moviies.Code = Odeon.Movie JOIN MovieTheaters AS Imperial ON Moviies.Code = Imperial.Movie WHERE Odeon.Name = 'Odeon' AND Imperial.Name = 'Imperial' GROUP BY Moviies.Code, Moviies.Title;
SELECT Movies.Name FROM Movies WHERE Movies.Code NOT IN (SELECT MovieTheaters.Movie FROM MovieTheaters JOIN Theaters ON MovieTheaters.Name = Theaters.Name WHERE Theaters.Name = 'Odeon') ORDER BY Movies.Name NULLS LAST;
SELECT Movies.Name FROM Movies WHERE Movies.Code NOT IN (SELECT MovieTheaters.Movie FROM MovieTheaters WHERE MovieTheaters.Name = 'Odeon') ORDER BY Movies.Name NULLS LAST;
SELECT Movies.Code, Movies.Title FROM Movies ORDER BY Movies.Title ASC;
SELECT Movies.Name FROM Movies WHERE Movies.Title IS NOT NULL ORDER BY Movies.Title ASC;
SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies ORDER BY Movies.Rating DESC;
SELECT Movies.Code, Movies.Title, Movies.Rating FROM Movies ORDER BY Movies.Rating DESC;
SELECT Movies.Name FROM MovieTheaters WHERE MovieTheaters.Code = (SELECT MAX(COUNT) FROM (SELECT Movie, COUNT(*) AS COUNT FROM MovieTheaters GROUP BY Movie) AS SUBQUERY);
SELECT Movies.Name FROM MovieTheaters WHERE MovieTheaters.Code = (SELECT MAX(Movie) FROM MovieTheaters);
SELECT Movies.Name FROM Movies WHERE Movies.Code = (SELECT MovieTheaters.Movie FROM MovieTheaters GROUP BY MovieTheaters.Movie ORDER BY COUNT(MovieTheaters.Movie) DESC LIMIT 1);;
SELECT Movies.Name FROM Movies WHERE Movies.Code = (SELECT Movie FROM MovieTheaters GROUP BY Movie ORDER BY COUNT(Movie) DESC LIMIT 1);
SELECT Movies.Code, COUNT(*) AS number_of_movies FROM Moviestheaters JOIN Moviestheaters ON Moviestheaters.Movie = Moviestheaters.Movie GROUP BY Moviestheaters.Movie ORDER BY number_of_movies DESC NULLS LAST;
SELECT Movies.Code, COUNT(*) AS number_of_movies FROM Moviestheaters JOIN Moviestheaters ON Moviestheaters.Movie = Moviestheaters.Movie GROUP BY Moviestheaters.Movie ORDER BY number_of_movies DESC NULLS LAST;
SELECT Movies.Code FROM Movies WHERE Movies.Rating IS NOT NULL; COUNT(*) AS number_of_movies; SELECT number_of_movies FROM number_of_movies; SELECT COUNT(*) FROM Movies m WHERE m.Rating IS NOT NULL; SELECT COUNT(*) FROM Movies m WHERE m.Rating IS NOT NULL AND m.Title ILIKE '%the%matrix%' ; SELECT COUNT(*) FROM Movies m WHERE m.Rating IS NOT NULL AND m.Title ILIKE '%the%matrix%' AND m.Title ILIKE '%revolution%' ; SELECT COUNT(*) FROM Movies m WHERE m.Rating IS NOT NULL AND m.Title ILIKE '%the%matrix%' AND m.Title ILIKE '%revolution%' AND m.Title ILIKE '%war%' ; SELECT COUNT(*) FROM Movies m WHERE m.Rating IS NOT NULL AND m.Title ILIKE
SELECT Movies.Code FROM Movies WHERE Movies.Rating IS NOT NULL; ORDER BY Movies.Code;
SELECT Movies.Name FROM MovieTheaters WHERE MovieTheaters.Movie IS NOT NULL; ORDER BY MovieTheaters.Name;
SELECT Movies.Name FROM MovieTheaters WHERE MovieTheaters.Movie IS NOT NULL;
SELECT Movies.Name FROM MovieTheaters WHERE MovieTheaters.Movie IS NULL;
SELECT Movies.Name FROM MovieTheaters WHERE MovieTheater.Movie IS NULL;
SELECT Movies.Code, Movies.Title, MovieTheaters.Name FROM Movies JOIN MovieTheaters ON Movies.Code = MovieTheaters.Movie WHERE Movies.Rating = 'G';
SELECT Movies.Code, Moviestheaters.Name FROM Moviestheaters JOIN Moviies ON Moviestheaters.Movie = Moviies.Code WHERE Moviies.Rating = 'G';
SELECT Movies.Code, Moviies.Title FROM Moviies;
SELECT Movies.Name FROM Movies;
SELECT Movies.Code, Moviestheaters.Name, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, M
SELECT Movies.Code, Moviestheaters.Name, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, Moviestheaters.Movie, M
SELECT Movies.Code, Moviestheaters.Name AS Theater_Name, Moviestheaters.Movie AS Movie_Code, Moviestheaters.Movie::TEXT AS Movie_Title FROM Moviestheaters JOIN Moviestheaters ON Moviestheaters.Movie = Moviestheaters.Movie JOIN Movies ON Movies.Code = Moviestheaters.Movie WHERE Movies.Rating IS NULL;
SELECT Movies.Code, Moviestitle, Rating FROM Moviestable WHERE Rating IS NULL;
SELECT Movies.Code, Moviies.Title FROM Moviies LEFT JOIN MovieTheaters ON Moviies.Code = MovieTheaters.Movie WHERE MovieTheaters.Movie IS NULL;
SELECT Movies.Name FROM Movies WHERE Movies.Code NOT IN (SELECT MovieTheaters.Movie FROM MovieTheaters);
SELECT Client.Recipient FROM Package WHERE Package.Weight = (SELECT MAX(Package.Weight) FROM Package);; SELECT Employee.Name FROM Employee JOIN Client ON Employee.EmployeeID = Client.Recipient; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
SELECT Client.Recipient, MAX(Package.Weight) AS max_weight FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber GROUP BY Client.Recipient ORDER BY max_weight DESC LIMIT 1;
SELECT Package.Weight FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'Leo Wong');; SELECT SUM(Package.Weight) AS total_weight FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'Leo Wong');; SELECT SUM(Package.Weight) AS total_weight FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name = 'Leo Wong';; SELECT SUM(Package.Weight) AS total_weight FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Client ON Shipment.Manager = Client.EmployeeID WHERE Client.Name = 'Leo Wong';; SELECT SUM(Package.Weight) AS total_weight FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Client ON Shipment
SELECT Package.Weight FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'Leo Wong'); ORDER BY Package.Weight;
SELECT Employee.PackageNumber FROM Employee WHERE Employee.Name = 'Amy Wong'; ORDER BY Employee.PackageNumber;
SELECT Employee.PackageNumber FROM Employee WHERE Employee.Name = 'Amy Wong'; ORDER BY Employee.PackageNumber;
SELECT Employee.Sender, Employee.Position, Employee.Salary FROM Employee WHERE Employee.Name = 'Turanga Leela';
SELECT Employee.Sender, Employe.Position, Employe.Salary FROM Employe WHERE Employe.Name = 'Turanga Leela';
SELECT Employee.Sender FROM Employee WHERE Employee.Position = 'Intern'; SELECT AVG(Employee.Salary) AS AverageSalary FROM Employee WHERE Employee.Position = 'Intern'; SELECT COUNT(*) AS TotalInterns FROM Employee WHERE Employee.Position = 'Intern'; SELECT SUM(Employee.Salary) AS TotalSalaries FROM Employee WHERE Employee.Position = 'Intern'; SELECT MIN(Employee.Salary) AS MinimumSalary FROM Employee WHERE Employee.Position = 'Intern'; SELECT MAX(Employee.Salary) AS MaximumSalary FROM Employee WHERE Employee.Position = 'Intern'; SELECT stddev(Employee.Salary) AS StandardDeviation FROM Employee WHERE Employee.Position = 'Intern'; SELECT variance(Employee.Salary) AS Variance FROM Employee WHERE Employee.Position = 'Intern'; SELECT percentile_cont(0.75) within GROUP (ORDER BY Employee.Salary) AS Percentile75 FROM Employee WHERE
SELECT Employee.Sender FROM Employee WHERE Employee.Position = 'Intern' GROUP BY Employee.Sennder ORDER BY Employee.Senner DESC;
SELECT Has_Clearance.Contents FROM Has_Clearance WHERE Has_Clearance.Level = 1 AND Has_Clearance.Contensts ILIKE '%Physician%' LIMIT 1;
SELECT Has_Clearance.PackageNumber, Has_Clearance.Level FROM Has_Clearance JOIN Employee ON Has_Clearance.Employee = Employee.EmployeeID WHERE Employee.Position ilike '%physician%' ORDER BY Has_Clearance.Level DESC NULLS LAST;
SELECT Package.PackageNumber FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'Leo Wong'); ORDER BY Package.PackageNumber;
SELECT Package.PackageNumber FROM Package WHERE Package.Sender = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name = 'Leo Wong'); ORDER BY Package.PackageNumber;
SELECT Package.PackageNumber FROM Employee WHERE Employee.Name ilike '%Leo%Wong%' JOIN Package ON Employee.EmployeeID = Package.Sender;
SELECT Package.PackageNumber FROM Employee WHERE Employee.Name ilike '%Leo%Wong%' JOIN Package ON Employee.EmployeeID = Package.Sender;
SELECT Package.PackageNumber, Package.Contents, Package.Weight, Package.Sender, Package.Recipient FROM Package JOIN Client ON Package.Sender = Client.AccountNumber OR Package.Recipient = Client.AccountNumber WHERE Client.Name ilike '%Leo%Wong%' ORDER BY Package.PackageNumber NULLS LAST;
SELECT Package.PackageNumber FROM Package WHERE Package.Sender = 1 OR Package.Recipient = 1; SELECT DISTINCT Package.PackageNumber FROM Package WHERE Package.Sender = 1 OR Package.Recipient = 1; SELECT Package.PackageNumber FROM Package WHERE Package.Sender = 1 UNION SELECT Package.PackageNumber FROM Package WHERE Package.Recipient = 1; SELECT DISTINCT Package.PackageNumber FROM Package WHERE Package.Sender = 1 UNION SELECT Package.PackageNumber FROM Package WHERE Package.Recipient = 1; SELECT Package.PackageNumber FROM Package WHERE Package.Sender = 1 AND Package.Recipient = 1; SELECT DISTINCT Package.PackageNumber FROM Package WHERE Package.Sender = 1 AND Package.Recipient = 1; SELECT Package.PackageNumber FROM Package WHERE Package.Sender = 1 OR Package.Recipient = 1 ORDER BY Package.PackageNumber NULLS
SELECT Package.PackageNumber FROM Package WHERE Package.Sender = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name ilike '%Ogden%Wernstrom%') AND Package.Recipient = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name ilike '%Leo%Wong%'); ORDER BY Package.PackageNumber;
SELECT Package.PackageNumber FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'Ogden Wernstrom') AND Package.Recipient = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'Leo Wong');
SELECT Package.Contents FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client WHERE Client.Name ilike '%John%Zoidfarb%');
SELECT Package.Contents FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client WHERE Client.Name ilike '%John%Zoidfarb%');
SELECT Package.PackageNumber, Package.Weight FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name ilike '%John%' ORDER BY Package.Weight DESC NULLS LAST LIMIT 1;
SELECT Package.PackageNumber, Package.Weight FROM Package JOIN Client ON Package.Sender = Client.AccountNumber WHERE Client.Name ilike '%John%' ORDER BY Package.Weight DESC LIMIT 1;
SELECT Package.PackageNumber, Package.Weight FROM Package ORDER BY Package.Weight ASC NULLS LAST LIMIT 3;
SELECT Package.PackageNumber, Package.Weight FROM Package ORDER BY Package.Weight ASC NULLS LAST LIMIT 3;
SELECT Client.Sender, COUNT(*) AS total_packages FROM Package GROUP BY Client.Sender ORDER BY total_packages DESC LIMIT 1; SELECT Client.Name, total_packages FROM Client JOIN Package ON Client.AccountNumber = Package.Sender JOIN (SELECT Client.Sender, COUNT(*) AS total_packages FROM Package GROUP BY Client.Sender ORDER BY total_packages DESC LIMIT 1) AS max_client ON Client.AccountNumber = max_client.Sender WHERE total_packages = max_client.total_packages;
SELECT Client.Sender, COUNT(*) AS total_packages FROM Package GROUP BY Client.Sender ORDER BY total_packages DESC LIMIT 1;
SELECT Client.Contents, COUNT(*) AS total_packages FROM Package JOIN Client ON Package.Recipient = Client.AccountNumber GROUP BY Client.Contents ORDER BY total_packages ASC LIMIT 1;
SELECT Client.Sender, COUNT(*) AS total_packages FROM Package JOIN Client ON Package.Sender = Client.AccountNumber GROUP BY Client.Sender ORDER BY total_packages ASC LIMIT 1;
SELECT Client.Sender, COUNT(*) AS number_of_packages FROM Package GROUP BY Client.Sender HAVING COUNT(*) > 1 ORDER BY number_of_packages DESC NULLS LAST;
SELECT Client.Sender FROM Package WHERE Package.Sender IN (SELECT Client.AccountNumber FROM Package GROUP BY Client.AccountNumber HAVING COUNT(Package.PackageNumber) > 1); SELECT Client.Name FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.Name HAVING COUNT(Package.PackageNumber) > 1; SELECT Client.Name FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.Name HAVING COUNT(Package.PackageNumber) > 1; SELECT Client.Name FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.Name HAVING COUNT(Package.PackageNumber) > 1; SELECT Client.Name FROM Client JOIN Package ON Client.AccountNumber = Package.Sender GROUP BY Client.Name HAVING COUNT(Package.PackageNumber) > 1; SELECT Client.Name FROM Client JOIN Package ON Client.AccountNumber = Package.Sender
SELECT Planet.Contents FROM Planet WHERE PlaneT.Name = 'Mars'; ORDER BY Planet.Contents;
SELECT Planet.Contents FROM Planet WHERE Planet.Name = 'Mars'; ORDER BY Planet.Contents;
SELECT Planet.Contents, Planet.Name, Planet.Coordinates FROM Planet ORDER BY Planet.Name ASC;
SELECT Planet.Contents, Planet.Name, Planet.Coordinates FROM Planet ORDER BY Planet.Name ASC;
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name ilike '%Phillip%J%Fry%'); ORDER BY Shipment.Shipment;
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name ilike '%Phillip%J%Fry%'); ORDER BY Shipment.Shipment;
SELECT Shipment.Shipment, Shipment.Date FROM Shipment ORDER BY Shipment.Date NULLS LAST;
SELECT Shipment.Shipment, Shipment.Date FROM Shipment ORDER BY Shipment.Date NULLS LAST;
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Planet = (SELECT Planet.PlanetID FROM Planet WHERE Planet.Name = 'Mars'); ORDER BY Shipment.Shipment;
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Planet = (SELECT Planet.PlanetID FROM Planet WHERE Planet.Name = 'Mars'); ORDER BY Shipment.Shipment;
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Planet = (SELECT Planet.PlanetID FROM Planet WHERE Planet.Name = 'Mars') AND Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name = 'Turanga Leela');
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name = 'Turanga Leela') AND Shipment.Planet = (SELECT Planet.PlanetID FROM Planet WHERE Planet.Name = 'Mars');
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Planet = (SELECT Planet.PlanetID FROM Planet WHERE Planet.Name = 'Mars') OR Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name = 'Turanga Leela');;
SELECT Shipment.Shipment FROM Shipment WHERE Shipment.Manager = (SELECT Employee.EmployeeID FROM Employee WHERE Employee.Name = 'Turanga Leela') AND Shipment.Planet = (SELECT Planet.PlanetID FROM Planet WHERE Planet.Name = 'Mars');
SELECT Planet.PackageNumber, COUNT(*) AS total_shipments FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.Name ORDER BY total_shipments DESC NULLS LAST;
SELECT Planet.PackageNumber, COUNT(*) AS number_of_shipments FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.PackaageNumber ORDER BY number_of_shipments DESC NULLS LAST;
SELECT Planet.PackageNumber, Planet.Name FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet ORDER BY COUNT(Shipment.ShipmentID) DESC LIMIT 1;
SELECT Planet.PackageNumber, COUNT(*) AS number_of_shipments FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.PacakageNumber ORDER BY number_of_shipments DESC LIMIT 1;
SELECT Employee.Sender, COUNT(*) AS number_of_shipments FROM Shipment JOIN Employee ON Shipment.Manager = Employee.EmployeeID GROUP BY Employee.Sennder;
SELECT Employee.Shipment, COUNT(*) AS number_of_shipments, Employee.Name FROM Employee JOIN Shipment ON Employee.EmployeeID = Shipment.Manager GROUP BY Employee.Shipment, Employee.Name ORDER BY number_of_shipments DESC;
SELECT Package.Weight FROM Package WHERE Package.Shipment IN (SELECT Shipment.ShipmentID FROM Shipment WHERE Shipment.Planet = (SELECT Planet.PlanetID FROM Planet WHERE Planet.Name = 'Mars')); ORDER BY Package.Weight;
SELECT Package.Weight FROM Package WHERE Package.Shipment IN (SELECT Shipment.ShipmentID FROM Shipment WHERE Shipment.Planet = (SELECT Planet.PlanetID FROM Planet WHERE Planet.Name = 'Mars')); SELECT SUM(Package.Weight) AS total_weight FROM Package; SELECT Package.Weight FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'; SELECT SUM(Package.Weight) AS total_weight FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'; SELECT SUM(Package.Weight) AS total_weight FROM Package JOIN Shipment ON Package.Shipment = Shipment.
SELECT Planet.PackageNumber, Planet.Name, SUM(Package.Weight) AS total_weight FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.PackageNumber, Planet.Name ORDER BY total_weight DESC NULLS LAST;
SELECT Planet.PackageNumber, SUM(Package.Weight) AS total_weight FROM Package JOIN Shipment ON Package.Shipment = Shipment.ShipmentID JOIN Planet ON Shipment.Planet = Planet.PlanetID GROUP BY Planet.Name ORDER BY total_weight DESC NULLS LAST;
SELECT Planet.PackageNumber, Planet.Name FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet WHERE SUM(Package.Weight) > 30;
SELECT Planet.PackageNumber, SUM(Package.Weight) AS total_weight FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet JOIN Package ON Shipment.ShipmentID = Package.Shipment GROUP BY Planet.PacakgeNumber HAVING SUM(Package.Weight) > 30;
SELECT Package.PackageNumber FROM Package WHERE Package.Sender = 1001 AND Package.Shipment IN (SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Omicron Persei 8');
SELECT Package.PackageNumber FROM Package WHERE Package.Sender = (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'Zapp Brannigan') AND Package.Shipment = (SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Omicron Persei 8');
SELECT Package.PackageNumber FROM Package WHERE Package.Shipment IN (SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Omicron Persei 8') OR Package.Sender IN (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'Zapp Brannigan');;
SELECT Package.PackageNumber FROM Package WHERE Package.Shipment IN (SELECT Shipment.ShipmentID FROM Shipment JOIN Planet ON Shipment.Planet = Planet.PlanetID WHERE Planet.Name = 'Omicron Persei 8') OR Package.Sender IN (SELECT Client.AccountNumber FROM Client WHERE Client.Name = 'Zapp Brannigan');
SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight BETWEEN 10 AND 30;
SELECT Package.PackageNumber, Package.Weight FROM Package WHERE Package.Weight BETWEEN 10 AND 30;
SELECT Employee.Sender FROM Employee WHERE Employe.Sender NOT IN (SELECT Has_Clearance.Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars') ORDER BY Employe.Sender NULLS LAST;
SELECT Employee.Sender FROM Employee WHERE Employee.Sennder NOT IN (SELECT Has_Clearance.Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars');
SELECT Employee.Sender FROM Employee WHERE Employee.Name = 'Omega III'; ORDER BY Employee.Sender;
SELECT Employee.Sender FROM Employee WHERE Employee.Name = 'Omega III' AND EXISTS (SELECT 1 FROM Has_Clearance WHERE Has_Clearance.Employee = Employee.EmployeeID);
SELECT Planet.PackageNumber, Planet.Name FROM Planet JOIN Shipment ON Planet.PlanetID = Shipment.Planet JOIN Has_Clearance ON Shipment.Manager = Has_Clearance.Employee GROUP BY Planet.PackageNumber, Planet.Name HAVING COUNT(Has_Clearance.Employee) = 1;
SELECT Planet.PackageNumber, Employee.Name FROM Employee JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE EXISTS (SELECT 1 FROM Shipment s WHERE s.Manager = Employee.EmployeeID AND s.Planet = Planet.PlanetID); SELECT p.Name FROM Planet p; SELECT e.Name FROM Employee e; SELECT h.Level FROM Has_Clearance h; SELECT s.Date FROM Shipment s; SELECT c.AccountNumber FROM Client c; SELECT v.Contents, v.Weight, v.Sender, v.Recipient FROM Package v; SELECT i.InvoiceNumber, i.Customer, i.AmountPaid FROM Invoice i; SELECT o.OrderNumber, o.Customer, o.Quantity, o.PricePerUnit FROM Order o; SELECT d.DeliveryNoteNumber,
SELECT Employee.Sender FROM Employee WHERE Employe.Salary BETWEEN 5000 AND 10000;
SELECT Employee.Sender FROM Employee WHERE Employee.Salary BETWEEN 5000 AND 10000; ORDER BY Employee.Sender;
SELECT Employee.Sender FROM Employee WHERE Employee.Salary > (SELECT AVG(EMPLOYEE.Salary) FROM EMPLOYEE) OR Employee.Salary > 5000;
SELECT Employee.Sender, Employe.Name, Employe.Position, Employe.Salary FROM Employe JOIN Package ON Employe.EmployeeID = Package.Sender WHERE Employe.Salary > (SELECT AVG(Employe.Salary) FROM Employe) OR Employe.Salary > 5000;
SELECT Employee.Sender FROM Employee WHERE Employee.Sennder NOT IN (SELECT Has_Clearance.Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'); SELECT COUNT(*) AS number_of_employees FROM Employee e LEFT JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee AND hc.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') WHERE hc.Employee IS NULL; SELECT COUNT(*) AS number_of_employees FROM Employee e LEFT JOIN Has_Clearance hc ON e.EmployeeID = hc.Employee AND hc.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') WHERE hc.Employee IS NULL; SELECT COUNT(*) AS number_of_employees FROM Employee e LEFT JOIN Has_Clearance hc ON e.Employee
SELECT Employee.Contents FROM Employee WHERE Employee.EmployeeID NOT IN (SELECT Has_Clearance.Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'); SELECT COUNT(*) AS number_of_employees FROM Employee WHERE Employee.EmployeeID NOT IN (SELECT Has_Clearance.Employee FROM Has_Clearance JOIN Planet ON Has_Clearance.Planet = Planet.PlanetID WHERE Planet.Name = 'Mars'); SELECT COUNT(*) AS number_of_employees FROM Employee LEFT JOIN Has_Clearance ON Employee.EmployeeID = Has_Clearance.Employee AND Has_Clearance.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') WHERE Has_Clearance.Employee IS NULL; SELECT COUNT(*) AS number_of_employees FROM Employee WHERE Employee.EmployeeID NOT IN (SELECT Has_Clear
SELECT game.Game_ID FROM game;
SELECT game.Game_ID FROM game;
SELECT game.Game_ID, game.Title, game.Developers FROM game ORDER BY game.Units_sold_Millions DESC;
SELECT game.Game_ID, game.Title, game.Developers FROM game ORDER BY game.Units_sold_Millions DESC;
SELECT game.Game_ID, AVG(gamme.Units_sold_Millions) AS Average_units_sold FROM game WHERE game.Developers NOT ILIKE '%Nintendo%' GROUP BY game.Game_ID;'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';
SELECT game.Game_ID, AVG(gamme.Units_sold_Millions) AS Average_units_sold FROM game WHERE game.Developers NOT ILIKE '%Nintendo%' GROUP BY game.Game_ID;'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';'%';
SELECT platform.Player_ID, platform.Platfrom_name, platform.Market_district FROM platform;
SELECT platform.Player_ID, platform.Platfrom_name, platform.Market_district FROM platform;
SELECT platform.Player_ID, platform.Platfrom_name FROM platform WHERE platform.Download_rank = 1;
SELECT platform.Player_ID, platform.Platfrom_name FROM platform WHERE platform.Download_rank = 1;
SELECT player.Player_ID, payer.Rank_of_the_year FROM player ORDER BY payer.Rank_of_the_year DESC NULLS LAST LIMIT 1; -- Maximum rank
SELECT player.Player_ID, payer.Player_name, MIN(player.Rank_of_the_year) AS min_rank, MAX(player.Rank_of_the_year) AS max_rank FROM player JOIN game_player ON player.Player_ID = game_player.Player_ID GROUP BY payer.Player_ID, payer.Player_name ORDER BY min_rank NULLS LAST, max_rank NULLS LAST;
SELECT player.Player_ID, player.Player_name FROM player WHERE player.Rank_of_the_year < 3;
SELECT player.Player_ID, COUNT(*) FROM player pplayer WHERE pplayer.Rank_of_the_year <= 3 GROUP BY pplayer.Player_ID;
SELECT player.Player_ID, player.Player_name FROM player ORDER BY player.Player_name ASC;
SELECT player.Player_ID, player.Player_name FROM player player ORDER BY player.Player_name ASC;
SELECT player.Player_ID, player.Player_name, player.College FROM player ORDER BY player.Rank_of_the_year DESC;
SELECT player.Player_ID, player.Player_name, player.College FROM player ORDER BY player.Rank_of_the_year DESC;
SELECT player.Player_ID, payer.Player_name, payer.Rank_of_the_year FROM game_player JOIN game ON game_player.Game_ID = game.Game_ID JOIN payer ON game_player.Player_ID = payer.Player_ID WHERE game.Title ilike '%Super%Mario%World%' ORDER BY payer.Rank_of_the_year NULLS LAST;
SELECT player.Player_ID, payer.Player_name, payer.Rank_of_the_year FROM game_player JOIN game ON game_player.Game_ID = game.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE game.Title ilike '%Super%Mario%World%' ORDER BY player.Rank_of_the_year NULLS LAST;
SELECT game.Game_ID, game.Developers FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College ilike '%Auburn%' GROUP BY game.Game_ID, game.Developers;
SELECT game.Game_ID, game.Developers FROM game JOIN game_player ON game.Game_ID = game_player.Game_ID JOIN player ON game_player.Player_ID = player.Player_ID WHERE player.College ilike '%Auburn%' GROUP BY game.Game_ID, game.Developers;
SELECT player.Player_ID, AVG(game.Units_sold_Millions) AS Average_units_sold FROM player JOIN game_player ON player.Player_ID = game_player.Player_ID JOIN game ON game_player.Game_ID = game.Game_ID WHERE player.Position = 'Guard' GROUP BY player.Player_ID;
SELECT game.Game_ID, AVG(gamu.Units_sold_Millions) AS Average_units_sold FROM game gamu JOIN game_player gape ON gamu.Game_ID = gape.Game_ID JOIN player p ON gape.Player_ID = p.Player_ID WHERE p.Position = 'Guard' GROUP BY gamu.Game_ID;
SELECT game.Game_ID, game.Title, platform.Platform_name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID;
SELECT game.Game_ID, game.Title, platform.Platform_name FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID;
SELECT game.Game_ID, game.Title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district ilike '%Asia%' OR platform.Market_district ilike '%USA%';
SELECT game.Game_ID, game.Title FROM game JOIN platform ON game.Platform_ID = platform.Platform_ID WHERE platform.Market_district ilike '%Asia%' OR platform.Market_district ilike '%USA%';
SELECT game.Game_ID, game.franchise FROM game GROUP BY game.franchise ORDER BY COUNT(game.Gaem_ID) DESC NULLS LAST;
SELECT game.Game_ID, game.Franchise FROM game GROUP BY game.Gamge_ID, game.Franchise ORDER BY game.Franchise NULLS LAST;
SELECT game.Game_ID, game.Franchise FROM game GROUP BY game.Gaem_ID, game.Franchise ORDER BY COUNT(game.Gaem_ID) DESC LIMIT 1;
SELECT game.Game_ID, game.Franchise FROM game GROUP BY game.Gaem_ID, game.Franchise ORDER BY COUNT(game.Gaem_ID) DESC LIMIT 1;
SELECT game.Game_ID, game.franchise FROM game GROUP BY game.franchise HAVING COUNT(game.Gaem_ID) >= 2;
SELECT game.Game_ID, game.franchise FROM game GROUP BY game.Gaem_ID, game.franchise HAVING COUNT(game.Gaem_ID) >= 2;
SELECT player.Player_ID, player.Player_name FROM player LEFT JOIN game_player ON player.Player_ID = game_player.Player_ID WHERE game_player.Player_ID IS NULL;
SELECT platform.Player_ID, platform.Player_name FROM player p LEFT JOIN game_player gp ON p.Player_ID = gp.Player_ID WHERE gp.Player_ID IS NULL;
SELECT game.Game_ID, gamelist.Title FROM game AS gamelist JOIN game_player AS gameplay ON gamelist.Game_ID = gameplay.Game_ID JOIN player AS player1 ON gameplay.Player_ID = player1.Player_ID JOIN player AS player2 ON gameplay.Player_ID = player2.Player_ID WHERE player1.College ilike '%Oklahoma%' AND player2.College ilike '%Auburn%' GROUP BY gamelist.Title;
SELECT game.Game_ID, gamelist.Title FROM game AS gamelist JOIN game_player AS gameplay ON gamelist.Game_ID = gameplay.Game_ID JOIN player AS playerlist ON gameplay.Player_ID = playerlist.Player_ID WHERE playerlist.College ilike '%Oklahoma%' OR playerlist.College ilike '%Auburn%' GROUP BY gamelist.Title;
SELECT game.Game_ID, game.Franchise FROM game GROUP BY game.Game_ID, game.Franchise ORDER BY game.Franchise NULLS LAST;
SELECT game.Game_ID, game.Title, game.Franchise FROM game ORDER BY game.Franchise NULLS LAST; SELECT DISTINCT game.Franchise FROM game; SELECT COUNT(DISTINCT game.Franchise) AS number_of_franchises FROM game; SELECT game.Franchise, COUNT(*) AS games_with_this_franchise FROM game GROUP BY game.Franchise ORDER BY games_with_this_franchise DESC NULLS LAST; SELECT game.Franchise, COUNT(*) AS games_with_this_franchise FROM game GROUP BY game.Franchise ORDER BY games_with_this_franchise DESC NULLS LAST; SELECT game.Franchise, COUNT(*) AS games_with_this_franchise FROM game GROUP BY game.Franchise ORDER BY games_with_this_franchise DESC NULLS LAST
SELECT game.Game_ID, game.Title FROM game LEFT JOIN game_player ON game.Game_ID = game_player.Game_ID WHERE game_player.Player_ID IS NULL OR player.Position != 'Guard';
SELECT game.Game_ID, game.Title FROM game LEFT JOIN game_player ON game.Game_ID = game_player.Game_ID AND game_player.Player_ID IN (SELECT player.Player_ID FROM player WHERE player.Position = 'Guard') WHERE game_player.Player_ID IS NULL;
SELECT press.Press_ID, p.name FROM press JOIN author p ON press.Press_ID = p.Press_ID WHERE press.Year_Profits_billion IS NOT NULL ORDER BY press.Year_Profits_billion DESC;
SELECT press.Press_ID, p.name FROM press p JOIN (SELECT Press_ID, SUM(Year_Profits_billion) AS total_profit FROM press GROUP BY Press_ID ORDER BY total_profit DESC) AS p ON p.Press_ID = press.Press_ID;
SELECT press.Press_ID, press.Name FROM press JOIN book ON press.Press_ID = book.Press_ID GROUP BY press.Press_ID, press.Name HAVING SUM(book.Sale_Amount::int) > 1500000000 OR press.Month_Profits_billion > 1000000 ORDER BY press.Press_ID NULLS LAST;
SELECT press.Press_ID, press.Name FROM press WHERE (press.Year_Profits_billion > 15 OR press.Month_Profits_billion > 1) ORDER BY press.Press_ID NULLS LAST;
SELECT press.Press_ID, AVG(press.Year_Profits_billion) AS Average_Profit, MAX(press.Year_Profits_billion) AS Maximum_Profit FROM press GROUP BY pRESS.Press_ID;
SELECT press.Press_ID, p.name AS press_name, SUM(year_profits_billion) OVER (PARTITION BY p.press_id ORDER BY YEAR ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS cumulative_year_profit FROM press JOIN (SELECT Press_ID, Name FROM press) AS p ON press.Press_ID = p.Press_ID; SELECT press_id, press_name, MAX(cumulative_year_profit) FROM (SELECT * FROM cumulative_year_profit) GROUP BY press_id, press_name;';' SELECT press_id, press_name, AVG(cumulative_year_profit) FROM (SELECT * FROM cumulative_year_profit) GROUP BY press_id, press_name;';' SELECT press_id, press_name, MIN(
SELECT press.Press_ID, press.Name, press.Month_Profits_billion FROM press ORDER BY press.Month_Profits_billion DESC NULLS LAST LIMIT 1;
SELECT press.Press_ID, p.name FROM press p ORDER BY p.month_profits_billion DESC NULLS LAST LIMIT 1;
SELECT press.Press_ID, press.Name, press.Month_Profits_billion FROM press ORDER BY press.Month_Profits_billion DESC NULLS LAST LIMIT 1;
SELECT press.Press_ID, press.Name, press.Month_Profits_billion FROM press press ORDER BY press.Month_Profits_billion DESC NULLS LAST LIMIT 1;
SELECT author.Author_ID FROM author WHERE author.age < 30; ORDER BY author.Author_ID;
SELECT author.Author_ID FROM author WHERE author.age < 30; COUNT(author.Author_ID);'; SELECT COUNT(*) FROM author WHERE age < 30; SELECT COUNT(a.Author_ID) AS total_authors FROM author a WHERE a.age < 30; SELECT COUNT(DISTINCT a.Author_ID) AS distinct_authors FROM author a WHERE a.age < 30; SELECT COUNT(DISTINCT b.Author_ID) AS distinct_authors FROM book b JOIN author a ON b.Author_ID = a.Author_ID WHERE a.age < 30; SELECT COUNT(DISTINCT p.Author_ID) AS distinct_authors FROM press p JOIN book b ON p.Press_ID = b.Press_ID JOIN author a ON b.Author_ID = a.Author_ID WHERE a.age <
SELECT author.Sale_Amount, a.name AS author_name, p.name AS press_name, b.title AS book_title, row_number() OVER(PARTITION BY b.author_id ORDER BY b.book_id DESC) AS recent_book_rank FROM book b JOIN author a ON b.author_id = a.author_id JOIN press p ON b.press_id = p.press_id; SELECT g.gender_name, AVG(a.age) AS average_age FROM author a JOIN gender g ON a.gender = g.gender_code GROUP BY g.gender_name; SELECT g.gender_name, COUNT(*) AS total_authors FROM author a JOIN gender g ON a.gender = g.gender_code GROUP BY g.gender_name; SELECT g.gender_name, SUM(CASE WHEN a.age BETWEEN 0 AND
SELECT author.Sale_Amount, AVG(a.age) AS average_age FROM author a JOIN book b ON a.author_id = b.author_id GROUP BY a.gender;
SELECT author.Sale_Amount, COUNT(*) FROM author WHERE age > 30 GROUP BY a.gender;
SELECT author.Sale_Amount, COUNT(*) FROM author WHERE age > 30 GROUP BY a.gender;   FROM book;
SELECT book.Title FROM book WHERE book.Release_date IS NOT NULL ORDER BY book.Release_date DESC; ORDER BY book.Release_date;
SELECT book.Title FROM book WHERE book.Release_date IS NOT NULL ORDER BY book.Release_date DESC;
SELECT book.Book_Series, COUNT(book.Book_ID) AS book_count FROM book GROUP BY book.Book_Series ORDER BY book_count DESC NULLS LAST;
SELECT book.Book_Series, COUNT(book.Book_ID) AS COUNT FROM book GROUP BY book.Book_Series ORDER BY COUNT DESC NULLS LAST;
SELECT book.Title, b.Release_date FROM book b JOIN (SELECT Book_ID, SUM(Sale_Amount::int) AS total_sales FROM book GROUP BY Book_ID ORDER BY total_sales DESC LIMIT 5) AS bk ON b.Book_ID = bk.Book_ID;
SELECT book.Title, book.Release_date FROM book book ORDER BY book.Sale_Amount DESC NULLS LAST LIMIT 5;
SELECT book.Book_Series FROM book WHERE CAST(book.Sale_Amount AS INT) > 1000 AND CAST(book.Sale_Amount AS INT) < 500 GROUP BY book.Book_Series;
SELECT book.Book_Series FROM book WHERE CAST(book.Sale_Amount AS INT) > 1000 AND CAST(book.Sale_Amount AS INT) < 500 GROUP BY book.Book_Series;
SELECT author.Author_ID, author.Name FROM book JOIN author ON book.Author_ID = author.Author_ID WHERE book.Book_Series ilike '%MM%' AND book.Book_Series ilike '%LT%' GROUP BY author.Author_ID, author.Name;
SELECT author.Author_ID, author.Name FROM book JOIN author ON book.Author_ID = author.Author_ID WHERE book.Book_Series ilike '%MM%' AND book.Book_Series ilike '%LT%' GROUP BY author.Author_ID, author.Name;
SELECT author.Author_ID, author.name, author.age FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID WHERE book.Author_ID IS NULL;
SELECT author.Author_ID, author.name FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID WHERE book.Author_ID IS NULL;
SELECT author.Author_ID, author.name FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID, author.name HAVING COUNT(book.book_id) > 1 ORDER BY author.name NULLS LAST;
SELECT author.Author_ID, author.Name FROM author JOIN book ON author.Author_ID = book.Author_ID GROUP BY author.Author_ID, author.Name HAVING COUNT(book.Book_ID) > 1 ORDER BY author.Name NULLS LAST;
SELECT book.Title, aut.Name AS Author_name, pre.Name AS Publisher_name FROM book JOIN author AS aut ON book.Author_ID = aut.Author_ID JOIN press AS pre ON book.Press_ID = pre.Press_ID ORDER BY sale_amount DESC NULLS LAST LIMIT 3;
SELECT book.Title, author.Name AS Author_Name, press.Name AS Press_Name FROM book JOIN author ON book.Author_ID = author.Author_ID JOIN press ON book.Press_ID = press.Press_ID ORDER BY book.Sale_Amount DESC NULLS LAST LIMIT 3;
SELECT press.Press_ID, p.name AS Press_Name, SUM(book.sale_amount::int) OVER (PARTITION BY p.Press_ID) AS Total_Sales FROM book JOIN p ON book.Press_ID = p.Press_ID;
SELECT press.Press_ID, p.name AS Press_Name, SUM(book.sale_amount::int) AS total_sales FROM book JOIN author ON book.author_id = author.author_id JOIN p ON book.press_id = p.Press_ID GROUP BY p.name;
SELECT press.Press_ID, p.name AS Press_Name, COUNT(*) AS total_books FROM book b JOIN pess ON b.Press_ID = prss.Press_ID WHERE CAST(b.Sale_Amount AS INT) > 1000 GROUP BY p.name;
SELECT press.Press_ID, p.name AS Press_Name, COUNT(b.Book_ID) AS num_books FROM book b JOIN author a ON b.Author_ID = a.Author_ID JOIN press p ON b.Press_ID = p.Press_ID WHERE CAST(b.Sale_Amount AS FLOAT) > 1000 GROUP BY p.Press_ID, p.name;
SELECT author.Author_ID, author.Name FROM book JOIN author ON book.Author_ID = author.Author_ID ORDER BY sale_amount DESC LIMIT 1;
SELECT author.Author_ID, author.name FROM book JOIN author ON book.Author_ID = author.Author_ID ORDER BY sale_amount DESC LIMIT 1;
SELECT author.Author_ID, author.Name, author.Gender FROM book JOIN author ON book.Author_ID = author.Author_ID GROUP BY author.Author_ID, author.Name, author.Gender ORDER BY COUNT(book.Book_ID) DESC LIMIT 1;
SELECT author.Author_ID, author.Name, author.Gender FROM book JOIN author ON book.Author_ID = author.Author_ID GROUP BY author.Author_ID, author.Name, author.Gender ORDER BY COUNT(book.Book_ID) DESC LIMIT 1;
SELECT author.Author_ID, author.Name FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID AND book.Press_ID = 1 WHERE book.Author_ID IS NULL; -- 1 stands for Accor Press_ID.
SELECT author.Author_ID, author.Name FROM author LEFT JOIN book ON author.Author_ID = book.Author_ID AND book.Press_ID = 1 WHERE book.Author_ID IS NULL;
SELECT press.Press_ID, p.name AS Press_Name, SUM(p.year_profits_billion) OVER (PARTITION BY p.Press_ID ORDER BY p.year_profits_billion ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS cumulative_profit FROM press p JOIN book b ON p.Press_ID = b.Press_ID GROUP BY p.Press_ID, p.name HAVING COUNT(b.Book_ID) > 2; SELECT * FROM cumulative_profit cp; SELECT cp.press_id, cp.press_name, cp.cumulative_profit FROM cumulative_profit cp WHERE cp.cumulative_profit > 1000000000; SELECT cp.press_id, cp.press_name, cp.cumulative_
SELECT press.Press_ID, p.name AS Press_Name, SUM(p.year_profits_billion) OVER (PARTITION BY p.Press_ID ORDER BY p.year_profits_billion ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS cumulative_profit FROM book b JOIN p ON b.Press_ID = p.Press_ID GROUP BY p.Press_ID, p.name HAVING COUNT(b.Book_ID) > 2;
SELECT Authors.other_details FROM Authors;
SELECT Documents.document_id, Authors.author_name FROM Docs JOIN Authors ON Docs.author_name = Authors.author_name;
SELECT Authors.other_details FROM Authors;
SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik';  ORDER BY other_details;
SELECT document_id FROM Documents;
SELECT date_from, date_to, other_details FROM Staff_in_Processes sp JOIN Documents_Processes dp ON sp.document_id = dp.document_id AND sp.process_id = dp.process_id WHERE sp.staff_id = 4;
SELECT date_from, da_to, staff_id, staff_role_code FROM Staff_in_Processes sp JOIN Documents_Processes dp ON sp.document_id = dp.document_id AND sp.process_id = dp.process_id JOIN Staff s ON sp.staff_id = s.staff_id WHERE dp.process_outcome_code = 'Approved' AND dp.process_status_code = 'Completed' AND dp.da_to >= CURRENT_DATE AND dp.da_from <= CURRENT_DATE AND dp.process_id IN (SELECT process_id FROM Business_Processes WHERE process_name = 'Document Approval') AND dp.document_id IN (SELECT document_id FROM Documents WHERE document_name = 'Travel to Brazil'); SELECT s.staff_details AS author_details
SELECT document_id FROM Documents WHERE author_name ilike '%Era%Kerluke%' ; COUNT(*) AS number_of_documents ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ; ;
SELECT document_id, document_name, document_description FROM documents;
SELECT document_id, document_name FROM documents WHERE author_name ilike '%Bianka%Cummings%' ORDER BY document_id NULLS LAST;
SELECT date_from, date_to, other_details FROM Staff_in_Processes sp JOIN Documents_Processes dp ON sp.document_id = dp.document_id AND sp.process_id = dp.process_id JOIN Documents d ON dp.document_id = d.document_id WHERE d.document_name ilike '%Travel%to%China%' ORDER BY date_from NULLS LAST;
SELECT date_from, COUNT(d.document_id) AS total_documents FROM Documents d JOIN Staff_in_Processes sip ON d.document_id = sip.document_id WHERE date_trunc('month', d.date_created) = date_trunc('month', CURRENT_DATE) GROUP BY d.author_name, d.date_created;
SELECT date_from, COUNT(*) AS total_documents FROM Documents_Processes GROUP BY dte_from ORDER BY total_documents DESC LIMIT 1;
SELECT Documents.document_id, Documents.author_name FROM Documents GROUP BY Documents.document_id, Documents.author_name HAVING COUNT(D.document_id) >= 2;
SELECT process_id FROM Business_Processes;
SELECT process_id, process_name, process_description FROM business_processes WHERE process_id = 9;
SELECT process_id, process_name FROM business_processes WHERE next_process_id = 9;
SELECT process_id, COUNT(*) AS number_of_outcomes FROM Process_Outcomes GROUP BY pprocest_id;
SELECT process_id, process_outcome_code, process_outcome_description FROM Process_Outcomes;
SELECT process_id, pr.process_outcome_description FROM Process_Outcomes pr WHERE pr.process_outcome_code = 'working';
SELECT process_id, COUNT(*) AS number_of_status FROM Process_Status GROUP BY pprocest_id;
SELECT process_id, p.process_name, ps.process_status_code, ps.process_status_description FROM Process_Status ps JOIN Business_Processes p ON ps.process_status_code = p.process_status_code;
SELECT process_id, process_description FROM Process_Status WHERE process_status_code = 'ct';
SELECT staff_id FROM Staff;
SELECT staff_id, staff_details FROM Staff;
SELECT staff_id, staf_details FROM Staff WHERE staff_id = 100;
SELECT staff_role_code, COUNT(*) AS COUNT FROM Ref_Staff_Roles GROUP BY staff_role_code;
SELECT staff_role_code, staff_role_description FROM ref_staff_roles;
SELECT staff_role_code, staff_role_description FROM ref_staff_roles WHERE staff_role_code = 'HR';
SELECT document_id FROM Documents_Processes;
SELECT Documents_Processes.process_id FROM Documents_Processes WHERE Documents_Processes.document_id IN (SELECT Documents.document_id FROM Documents); SELECT Business_Processes.process_id FROM Business_Processes JOIN Documents_Processes ON Business_Processes.process_id = Documents_Processes.process_id; SELECT Business_Processes.process_id FROM Business_Processes JOIN Documents_Processes ON Business_Processes.process_id = Documents_Processes.process_id; SELECT Business_Processes.process_id FROM Business_Processes JOIN Documents_Processes ON Business_Processes.process_id = Documents_Processes.process_id; SELECT Business_Processes.process_id FROM Business_Processes JOIN Documents_Processes ON Business_Processes.process_id = Documents_Processes.process_id;
SELECT document_id FROM Documents WHERE document_id NOT IN (SELECT document_id FROM Documents_Processes); ORDER BY document_id;
SELECT Documents_Processes.process_id FROM Documents_Processes WHERE Documents_Processes.document_id IS NULL; ORDER BY Documents_Processes.process_id;
SELECT document_id, process_id, process_outcome_code, process_status_code FROM documents_processes WHERE document_id = 0;
SELECT process_id, process_name FROM Business_Processes WHERE process_name ilike '%Travel%to%Brazil%' LIMIT 1;
SELECT process_id, COUNT(document_id) AS document_count FROM business_processes bp JOIN documents_processes dp ON bp.process_id = dp.process_id GROUP BY bp.process_id ORDER BY bp.process_id NULLS LAST;
SELECT staff_id FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9; ORDER BY staff_id;
SELECT staff_id, COUNT(document_id) AS num_documents FROM Staff_in_Processes GROUP BY staff_id ORDER BY num_documents DESC NULLS LAST;
SELECT staff_role_code, COUNT(*) AS num_processes FROM Staff_in_Processes GROUP BY staff_role_code ORDER BY num_processes DESC NULLS LAST;
SELECT staff_id, COUNT(DISTINCT staff_role_code) AS number_of_roles FROM Staff_in_Processes WHERE staff_id = 3 GROUP BY staff_id;
SELECT Agencies.staff_id FROM Agencies;
SELECT Agencies.staff_id FROM Agencies;
SELECT Agencies.staff_id, Agencies.agency_details FROM Agencies;
SELECT Agencies.staff_id, Agencies.agency_details FROM Agencies;
SELECT Clients.staff_id, COUNT(*) AS total_clients FROM Clients GROUP BY Clientes.staff_id;
SELECT Clients.staff_id FROM Clients;
SELECT Clients.staff_id, Clients.client_details FROM Clients;
SELECT Clients.staff_id, Clients.client_details FROM Clients;
SELECT Agencies.staff_id, COUNT(Clients.client_id) AS client_count FROM Agencies JOIN Staff ON Agencies.staff_id = Staff.staff_id JOIN Clients ON Staff.staff_id = Clients.agency_id GROUP BY Agencies.staff_id ORDER BY client_count DESC NULLS LAST;
SELECT Agencies.staff_id, COUNT(Clients.client_id) AS number_of_clients FROM Agencies JOIN Staff ON Agencies.staff_id = Staff.staff_id JOIN Clients ON Staff.staff_id = Clients.agency_id GROUP BY Agencies.staff_id ORDER BY number_of_clients DESC NULLS LAST;
SELECT Agencies.staff_id, COUNT(*) AS client_count FROM Clients JOIN Agencies ON Clients.agency_id = Agencies.agency_id GROUP BY Agencies.staff_id ORDER BY client_count DESC LIMIT 1;
SELECT meeting_id, COUNT(*) AS client_count FROM Meetings GROUP BY mt.mt_id ORDER BY client_count DESC LIMIT 1;
SELECT Agencies.staff_id, Agencies.agency_details FROM Agencies JOIN Staff ON Agencies.agency_id = Staff.agency_id WHERE Staff.staff_id IN (SELECT Client_id FROM Clients GROUP BY Client_id HAVING COUNT(Client_id) >= 2);
SELECT Agencies.staff_id, Agencies.agency_details FROM Agencies JOIN Staff ON Agencies.agency_id = Staff.agency_id WHERE Staff.staff_id IN (SELECT Client.client_id FROM Client GROUP BY Client.client_id HAVING COUNT(Client.client_id) >= 2);
SELECT staff_id FROM Staff WHERE staff_details ilike '%Mac%' ; SELECT c.agency_details FROM Clients c JOIN Agencies a ON c.agency_id = a.agency_id WHERE c.client_details ilike '%Mac%'; SELECT m.meeting_outcome, m.meeting_type, m.billable_yn, m.start_date_time, m.end_date_time, m.purpose_of_meeting, m.other_details FROM Meetings m JOIN Clients cl ON m.client_id = cl.client_id WHERE cl.client_details ilike '%Mac%'; SELECT p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id WHERE i.invoice_details ilike '%Mac%'; SELECT si.staff_id FROM
SELECT staff_id FROM Staff WHERE staff_details ilike '%Mac%' ; SELECT agency_details FROM Agencies WHERE agency_id = (SELECT staff.agency_id FROM Staff WHERE staff_details ilike '%Mac%') ; SELECT client_details FROM Clients WHERE agency_id = (SELECT staff.agency_id FROM Staff WHERE staff_details ilike '%Mac%') ; SELECT invoice_details FROM Invoices WHERE client_id = (SELECT client_id FROM Clients WHERE agency_id = (SELECT staff.agency_id FROM Staff WHERE staff_details ilike '%Mac%')) ; SELECT meeting_outcome, meeting_type, billable_yn, start_date_time, end_date_time, purpose_of_meeting, other_details FROM Meetings WHERE client_id = (SELECT client_id FROM Clients WHERE agency_id =
SELECT staff_id, agency_id, staff_details FROM Staff JOIN Agencies ON staff_id = agency_id; SELECT client_id, agency_id, client_details FROM Clients JOIN Agencies ON agency_id = client_id; SELECT meeting_id, client_id, staff_id, meeting_outcome, meeting_type, billable_yn, start_date_time, end_date_time, purpose_of_meeting, other_details FROM Meetings m JOIN Clients c ON c.client_id = m.client_id JOIN Staff s ON s.staff_id = m.staff_id; SELECT invoice_id, client_id, payment_details FROM Payments p JOIN Invoices i ON i.invoice_id = p.invoice_id; SELECT invoice_id, client_id, invoice
SELECT meeting_id, c.client_details AS client_info, s.staff_details AS staff_info, a.agency_details AS agency_info FROM Meetings m JOIN Clients c ON m.client_id = c.client_id JOIN Staff s ON m.staff_id = s.staff_id JOIN Agencies a ON c.agency_id = a.agency_id;
SELECT staff_id, COUNT(*) AS client_count FROM Clients GROUP BY sstaff_id ORDER BY client_count DESC NULLS LAST;
SELECT staff_id, COUNT(*) AS number_of_clients FROM Clients GROUP BY staff_id ORDER BY number_of_clients DESC NULLS LAST;
SELECT Clients.staff_id, Clientes.client_details FROM Clientes WHERE Clientes.sic_code ilike '%Bad%';
SELECT staff_id, c.client_details FROM Clients c JOIN Staff s ON c.agency_id = s.agency_id WHERE c.sic_code ilike '%Bad%' ORDER BY c.client_details NULLS LAST;
SELECT staff_id, agency_details FROM Agencies JOIN Staff ON agency_id = staff_id WHERE EXISTS (SELECT 1 FROM Clients WHERE agency_id = staff_id); SELECT agency_id, agency_details FROM Agencies; SELECT staff_id, agency_details FROM Agencies JOIN Staff ON agency_id = staff_id; SELECT meeting_id, client_id, staff_id, other_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id JOIN Staff s ON m.staff_id = s.staff_id; SELECT p.payment_id, p.invoice_id, p.payment_details FROM Payments p JOIN Invoices i ON p.invoice_id = i.invoice_id; SELECT invoice_id, client_id, invoice_status,
SELECT staff_id, agency_details FROM Agencies JOIN Staff ON agency_id = staff_id WHERE staff_id IN (SELECT staff_id FROM Clients);
SELECT Agencies.staff_id FROM Agencies WHERE Agencies.staff_id NOT IN (SELECT Clients.agency_id FROM Clients);
SELECT Agencies.staff_id FROM Agencies WHERE Agencies.staff_id NOT IN (SELECT Clients.agency_id FROM Clients);
SELECT Invoices.staff_id, COUNT(*) AS number_of_invoices FROM Invoices GROUP BY Invoice.staff_id;
SELECT Invoices.staff_id, COUNT(*) AS total_invoices FROM Invoices GROUP BY Invoices.staff_id;
SELECT staff_id, client_id, invoice_id, invoice_status, invoice_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id JOIN Staff s ON c.agency_id = s.agency_id;
SELECT Invoices.staff_id, Invoices.invoice_id, Invoices.invoice_status, Invoices.invoice_details FROM Invoices JOIN Staff ON Invoices.staff_id = Staff.staff_id; SELECT * FROM Invoices; SELECT * FROM Staff; SELECT * FROM Clients; SELECT * FROM Agencies; SELECT * FROM Meetings; SELECT * FROM Payments; SELECT * FROM Staff_in_Meetings; SELECT * FROM Invoices JOIN Client_Projects ON Invoices.client_id = Client_Projects.client_id JOIN Projects ON Client_Projects.project_id = Projects.project_id; SELECT * FROM Invoices JOIN Client_Projects ON Invoices.client_id = Client_Projects.client_id JOIN Projects ON Client_Projects.project_id = Projects.project_id
SELECT Clients.staff_id, COUNT(Invoices.invoice_id) AS total_invoices FROM Clients JOIN Invoices ON Clients.client_id = Invoices.client_id GROUP BY Clients.staff_id ORDER BY total_invoices DESC NULLS LAST;
SELECT staff_id, COUNT(*) AS number_of_invoices FROM Staff JOIN Meetings ON staff.staff_id = meetings.staff_id JOIN Invoices ON meetings.client_id = invoices.client_id GROUP BY staff_id;
SELECT meeting_id, COUNT(*) AS invoice_count FROM Meetings m JOIN Invoices i ON m.client_id = i.client_id GROUP BY m.client_id ORDER BY invoice_count DESC LIMIT 1;
SELECT meeting_id, COUNT(*) AS number_of_invoices FROM Invoices i GROUP BY i.client_id ORDER BY number_of_invoices DESC LIMIT 1; SELECT c.client_id, c.client_details FROM Clients c JOIN Meetings m ON c.client_id = m.client_id WHERE m.meeting_id = (SELECT MAX(meeting_id) FROM Meetings);
SELECT staff_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Meetings GROUP BY staff_id HAVING COUNT(DISTINCT invoice_id) >= 2); SELECT client_id FROM Invoices i JOIN Clients c ON i.client_id = c.client_id WHERE c.agency_id IN (SELECT agency_id FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings)); SELECT DISTINCT client_id FROM Invoices i JOIN Clients c ON i.client_id = c.client_id WHERE c.agency_id IN (SELECT agency_id FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings)) GROUP BY client_id HAVING COUNT(DISTINCT invoice_id) >= 2; SELECT DIST
SELECT staff_id FROM Staff_in_Meetings WHERE meeting_id IN (SELECT meeting_id FROM Meetings m GROUP BY meeting_id HAVING COUNT(DISTINCT invoice_id) >= 2); SELECT c.client_id FROM Clients c JOIN Invoices i ON c.client_id = i.client_id GROUP BY c.client_id HAVING COUNT(DISTINCT i.invoice_id) >= 2; SELECT DISTINCT client_id FROM Invoices GROUP BY client_id HAVING COUNT(DISTINCT invoice_id) >= 2; SELECT DISTINCT client_id FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id GROUP BY client_id HAVING COUNT(DISTINCT invoice_id) >= 2; SELECT DISTINCT client_id FROM Invo
SELECT staff_id, COUNT(*) AS total_invoices FROM Invoices i GROUP BY staff_id ORDER BY total_invoices DESC NULLS LAST;
SELECT staff_id, COUNT(*) AS total_invoices FROM Invoices i JOIN Staff_in_Meetings sm ON i.client_id = sm.staff_id GROUP BY staff_id;
SELECT staff_id, COUNT(*) AS COUNT FROM Invoices GROUP BY staff_id ORDER BY COUNT DESC LIMIT 1;
SELECT Invoices.staff_id, COUNT(*) AS COUNT FROM Invoices GROUP BY Invoices.staff_id ORDER BY COUNT DESC LIMIT 1;
SELECT staff_id, invoice_status, invoice_details, client_id, client_details, agency_id, agency_details FROM Staff JOIN Invoices ON staff.staff_id = invoices.client_id JOIN Clients ON invoices.client_id = clients.client_id JOIN Agencies ON clients.agency_id = agencies.agency_id;
SELECT staff_id, invoice_status, invoice_details, client_id, client_details, agency_id, agency_details FROM Staff JOIN Invoices ON staff.staff_id = invoices.client_id JOIN Clients ON invoices.client_id = clients.client_id JOIN Agencies ON clients.agency_id = agencies.agency_id;
SELECT meeting_id, meeting_type, other_details FROM Meetings;
SELECT meeting_id, client_id, meeting_outcome, meeting_type, billable_yn, start_date_time, end_date_time, purpose_of_meeting, other_details FROM meetings;
SELECT meeting_id, meeting_outcome, purpose_of_meeting FROM meetings; SELECT m.meeting_id, s.staff_first_name, s.staff_last_name FROM meetings m JOIN staff_in_meetings sm ON m.meeting_id = sm.meeting_id JOIN staff s ON sm.staff_id = s.staff_id; SELECT c.client_first_name, c.client_last_name, m.meeting_outcome, m.purpose_of_meeting FROM clients c JOIN meetings m ON c.client_id = m.client_id; SELECT m.meeting_id, m.meeting_outcome, m.purpose_of_meeting, p.payment_method FROM meetings m JOIN invoices i ON m.client_id = i.client_id JOIN pay
SELECT meeting_id, meeting_outcome, purpose_of_meeting FROM Meetings; SELECT s.staff_first_name, s.staff_last_name, sm.staff_id FROM Staff s JOIN Staff_in_Meetings sm ON s.staff_id = sm.staff_id; SELECT c.client_first_name, c.client_last_name, cm.client_id FROM Clients c JOIN Meetings cm ON c.client_id = cm.client_id; SELECT i.invoice_number, p.payment_method, pi.product_name, si.staff_id FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id JOIN Products pi ON p.product_id = pi.product_id JOIN Staff_in_Meetings si ON si.staff_
SELECT Payments.staff_id, Payments.payment_id, Payments.payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status ilike '%Working%';
SELECT Payments.staff_id, Payments.payment_id, Payments.payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id WHERE Invoices.invoice_status ilike '%Working%';
SELECT Invoices.staff_id, Invoices.invoice_id, Invoices.invoice_status FROM Invoices LEFT JOIN Payments ON Invoices.invoice_id = Payments.invoice_id WHERE Payments.invoice_id IS NULL;
SELECT Invoices.staff_id, Invoices.invoice_id, Invoices.invoice_status FROM Invoices LEFT JOIN Payments ON Invoices.invoice_id = Payments.invoice_id WHERE Payments.invoice_id IS NULL;
SELECT Payments.staff_id, COUNT(*) AS number_of_payments FROM Payments GROUP BY Payments.staff_id;
SELECT Payments.staff_id, COUNT(*) AS total_payments FROM Payments GROUP BY Payments.staff_id; SELECT Staff.staff_first_name, Staff.staff_last_name, total_payments FROM Staff JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id JOIN Meetings ON Staff_in_Meetings.meeting_id = Meetings.meeting_id WHERE Meetings.billable_yn = 'Y' GROUP BY Staff.staff_first_name, Staff.staff_last_name, total_payments ORDER BY total_payments DESC NULLS LAST; SELECT COUNT(*) AS total_payments FROM Payments; SELECT SUM(total_payments) AS total_payments_sum FROM (SELECT total_payments FROM Payments) AS subquery;
SELECT Payments.staff_id, Payments.payment_id, Payments.invoice_id, Payments.payment_details FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id; SELECT Staff.staff_first_name, Staff.staff_last_name, Payments.payment_id, Payments.invoice_id, Payments.payment_details FROM Payments JOIN Staff ON Payments.sstaff_id = Staff.staff_id; SELECT Staff.staff_first_name, Staff.staff_last_name, Payments.payment_id, Payments.invoice_id, Payments.payment_details FROM Payments JOIN Staff ON Payments.sstaff_id = Staff.staff_id; SELECT Staff.staff_first_name, Staff.staff_last_name,
SELECT Payments.staff_id, Payments.payment_id, Payments.invoice_id, Payments.payment_details FROM Payments; SELECT Invoices.invoice_id, Invoices.client_id, Invoices.invoice_status, Invoices.invoice_details FROM Invoices; SELECT Staff.staff_id, Staff.first_name, Staff.last_name FROM Staff JOIN Staff_in_Meetings ON Staff.staff_id = Staff_in_Meetings.staff_id JOIN Meetings ON Staff_in_Meetings.meeting_id = Meetings.meeting_id; SELECT Clients.client_id, Clients.agency_id, Clients.sic_code, Clients.client_details FROM Clients; SELECT Agencies.agency_id
SELECT staff_id, invoice_id, invoice_status FROM Staff_in_Meetings JOIN Meetings ON staff_in_meetings.meeting_id = meetings.meeting_id JOIN Payments ON meetings.client_id = payments.invoice_id JOIN Invoices ON payments.invoice_id = invoices.invoice_id WHERE staff_in_meetings.staff_id = 757071; SELECT DISTINCT invoice_id, invoice_status FROM Payments; SELECT invoice_id, invoice_status FROM Invoices; SELECT invoice_id, invoice_status FROM Payments JOIN Invoices ON payments.invoice_id = invoices.invoice_id; SELECT invoice_id, invoice_status FROM Payments JOIN Invoices ON payments.invoice
SELECT staff_id, invoice_id, invoice_status FROM Payments p JOIN Staff_in_Meetings sm ON p.invoice_id = sm.meeting_id JOIN Meetings m ON sm.meeting_id = m.meeting_id WHERE m.staff_id = 757071; SELECT DISTINCT i.invoice_id, i.invoice_status FROM Invoices i JOIN Payments p ON i.invoice_id = p.invoice_id; SELECT DISTINCT p.invoice_id, p.invoice_status FROM Payments p; SELECT DISTINCT i.invoice_id, i.invoice_status FROM Invoices i; SELECT DISTINCT s.staff_id, i.invoice_id, i.invoice_status FROM Staff s JOIN Payments p ON s.staff
SELECT Invoices.staff_id, COUNT(Payments.payment_id) AS total_payments FROM Invoices JOIN Payments ON Invoices.invoice_id = Payments.invoice_id GROUP BY Invoices.sstaff_id ORDER BY total_payments DESC NULLS LAST;
SELECT Payments.staff_id, COUNT(*) AS number_of_payments FROM Payments GROUP BY Payments.sstaff_id;
SELECT meeting_id, COUNT(*) AS total_payments FROM Payments GROUP BY invoice_id ORDER BY total_payments DESC LIMIT 1;
SELECT Invoices.staff_id, COUNT(*) AS number_of_payments FROM Payments JOIN Invoices ON Payments.invoice_id = Invoices.invoice_id GROUP BY Invoices.sstaff_id ORDER BY number_of_payments DESC LIMIT 1;
SELECT staff_id FROM Staff;
SELECT staff_id FROM Staff;
SELECT staff_id, COUNT(*) AS total_staff FROM Staff GROUP BY staff_id ORDER BY total_staff DESC NULLS LAST;
SELECT staff_id, COUNT(*) AS total_staff FROM Staff GROUP BY staff_id;
SELECT staff_id, agency_details FROM Staff JOIN Agencies ON staff.agency_id = agencies.agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1;
SELECT meeting_id, COUNT(*) AS total_staff FROM Staff_in_Meetings GROUP BY meeting_id ORDER BY total_staff DESC LIMIT 1; SELECT meeting_id, staff_id FROM Staff_in_Meetings WHERE meeting_id = <meeting_id>; SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id JOIN Meetings m ON c.client_id = m.client_id JOIN Staff_in_Meetings s ON m.meeting_id = s.meeting_id WHERE s.staff_id = <staff_id> ; SELECT a.agency_id, a.agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id JOIN Meetings
SELECT meeting_id, COUNT(*) AS number_of_meetings FROM Meetings GROUP BY meeting_outcome ORDER BY number_of_meetings DESC;
SELECT meeting_id, COUNT(*) AS number_of_meetings FROM Meetings GROUP BY meeting_id ORDER BY number_of_meetings DESC NULLS LAST;
SELECT meeting_id, COUNT(*) AS number_of_meetings FROM Meetings GROUP BY meeting_id; SELECT c.client_id, m.number_of_meetings FROM Clients c JOIN (SELECT m.client_id, COUNT(*) AS number_of_meetings FROM Meetings m GROUP BY m.client_id) AS m ON c.client_id = m.client_id; SELECT s.staff_first_name, s.staff_last_name, c.client_id, m.number_of_meetings FROM Staff s JOIN Clients c ON s.staff_id IN (SELECT staff_id FROM Meetings) JOIN (SELECT m.client_id, COUNT(*) AS number_of_meetings FROM Meetings m GROUP BY m.client_id) AS m ON c.client_
SELECT meeting_id, COUNT(*) AS number_of_meetings FROM Meetings GROUP BY meeting_id ORDER BY number_of_meetings DESC NULLS LAST;
SELECT meeting_id, client_id, meeting_type, COUNT(*) AS number_of_meetings FROM meetings GROUP BY meeting_id, client_id, meeting_type ORDER BY number_of_meetings DESC NULLS LAST;
SELECT meeting_id, COUNT(*) AS number_of_meetings FROM Meetings GROUP BY mt.meeting_type ORDER BY number_of_meetings DESC;
SELECT meeting_id, meeting_outcome, meeting_type, c.client_details FROM meetings m JOIN clients c ON m.client_id = c.client_id;
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id;
SELECT meeting_id, COUNT(staff_id) AS total_staff FROM staff_in_meetings GROUP BY meeting_id ORDER BY total_staff DESC NULLS LAST;
SELECT meeting_id, COUNT(staff_id) AS total_staff FROM staff_in_meetings GROUP BY meeting_id ORDER BY total_staff DESC NULLS LAST;
SELECT staff_id, COUNT(*) AS num_meetings FROM staff_in_meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0 ORDER BY num_meetings ASC LIMIT 1;
SELECT staff_id FROM Staff_in_Meetings WHERE staff_id IN (SELECT staff_id FROM Meetings GROUP BY staff_id HAVING COUNT(meeting_id) > 0) ORDER BY COUNT(meeting_id) ASC LIMIT 1;
SELECT staff_id FROM Staff_in_Meetings;
SELECT staff_id FROM Staff_in_Meetings;
SELECT staff_id FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings); ORDER BY staff_id;
SELECT staff_id FROM Staff WHERE staff_id NOT IN (SELECT staff_id FROM Staff_in_Meetings); ORDER BY staff_id;
SELECT meeting_id, client_id, client_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id WHERE m.billable_yn = 'Y' OR m.billable_yn IS NULL; SELECT invoice_id, client_id, invoice_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id; SELECT staff_id, meeting_id, staff_first_name, staff_last_name FROM Staff_in_Meetings s JOIN Meetings m ON s.meeting_id = m.meeting_id JOIN Staff st ON s.staff_id = st.staff_id; SELECT agency_id, agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id; SELECT
SELECT meeting_id, client_id, client_details FROM Meetings m JOIN Clients c ON m.client_id = c.client_id WHERE m.billable_yn = 'Y' OR m.billable_yn IS NULL; SELECT invoice_id, client_id, invoice_details FROM Invoices i JOIN Clients c ON i.client_id = c.client_id; SELECT staff_id, meeting_id, staff_first_name, staff_last_name FROM Staff_in_Meetings s JOIN Meetings m ON s.meeting_id = m.meeting_id JOIN Staff st ON s.staff_id = st.staff_id; SELECT agency_id, agency_details FROM Agencies a JOIN Clients c ON a.agency_id = c.agency_id; SELECT
SELECT staff_id, staff_details FROM Staff WHERE agency_id IN (SELECT agency_id FROM Meetings) AND staff_details ilike '%s%' GROUP BY staff_id, staff_details;
SELECT staff_id, staff_details FROM Staff WHERE staff_id IN (SELECT staff_id FROM Staff_in_Meetings) AND staff_details ilike '%s%' ORDER BY staff_id NULLS LAST;
SELECT meeting_id, c.client_id, c.sic_code, c.agency_id FROM clients c JOIN meetings m ON c.client_id = m.client_id WHERE m.billable_yn = 'Y' GROUP BY m.client_id, c.sic_code, c.agency_id HAVING COUNT(DISTINCT m.meeting_id) >= 1;
SELECT meeting_id, client_id, agency_id, sic_code FROM Meetings m JOIN Clients c ON m.client_id = c.client_id WHERE m.billable_yn = 'Y' GROUP BY m.meeting_id, c.client_id, c.agency_id, c.sic_code HAVING COUNT(DISTINCT m.meeting_id) = 1;
SELECT meeting_id, start_date_time, end_date_time, c.client_details AS client_info, s.staff_details AS staff_info FROM Meetings m JOIN Clients c ON m.client_id = c.client_id JOIN Staff_in_Meetings sm ON m.meeting_id = sm.meeting_id JOIN Staff s ON sm.staff_id = s.staff_id;
SELECT meeting_id, start_date_time, end_date_time, c.client_details AS client_name, s.staff_details AS staff_name FROM meetings m JOIN clients c ON m.client_id = c.client_id JOIN staff_in_meetings sm ON m.meeting_id = sm.meeting_id JOIN staff s ON sm.staff_id = s.staff_id;
