### Database Schema\ n\n['CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL ,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What is the order status code that is most common?[SQL]\nSELECT order_status_code FROM customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL ,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Give the order status code that is most frequent across customer orders.[SQL]\nSELECT order_status_code FROM customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL ,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many customers do not have an order?[SQL]\nSELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_orders )
### Database Schema\ n\n['CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL ,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of customers who have not made an order.[SQL]\nSELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_orders )
### Database Schema\ n\n['CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL ,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show all product names without an order.[SQL]\nSELECT DISTINCT product_name FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items)
### Database Schema\ n\n['CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL ,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of products that have not been ordered?[SQL]\nSELECT product_name FROM products WHERE product_id NOT IN ( SELECT product_id FROM order_items )
### Database Schema\ n\n['CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL ,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many products named Monitor have been ordered?[SQL]\nSELECT count(*) FROM order_items AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  "Monitor"
### Database Schema\ n\n['CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL ,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What is the total number of Monitor products that have been ordered?[SQL]\nSELECT sum(ti.order_quantity) FROM order_items AS ti JOIN products AS t1 ON ti.product_id  =  t1.product_id WHERE t1.product_type_code  =  'Monitor'
### Database Schema\ n\n['CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL ,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many customers have ordered the product named Monitor?[SQL]\nSELECT count(*) FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  'Monitor'
### Database Schema\ n\n['CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL ,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of different customers who have bought a Monitor Product.[SQL]\nSELECT count(DISTINCT customer_id) FROM order_items AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  'Monitor'
### Database Schema\ n\n['CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL ,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many customers have an order?[SQL]\nSELECT count(DISTINCT customer_id) FROM Customer_Orders
### Database Schema\ n\n['CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL ,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of differnt customers who have made an order.[SQL]\nSELECT count(DISTINCT customer_id) FROM Customer_Orders
### Database Schema\ n\n['CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL ,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show all customer ids without an order.[SQL]\nSELECT customer_id FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_orders)
### Database Schema\ n\n['CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL ,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of customers who have not made an order?[SQL]\nSELECT customer_id FROM customers EXCEPT SELECT customer_id FROM customer_orders
### Database Schema\ n\n['CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL ,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.[SQL]\nSELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING sum(T2.order_quantity)  >  3'
### Database Schema\ n\n['CREATE TABLE `Products` (`product_id` INTEGER PRIMARY KEY,`product_type_code` VARCHAR(15),`product_name` VARCHAR(80),`product_price` DOUBLE NULL)CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`address_details` VARCHAR(255))CREATE TABLE `Customers` (`customer_id` INTEGER PRIMARY KEY,`address_id` INTEGER NOT NULL,`payment_method_code` VARCHAR(15),`customer_number` VARCHAR(20),`customer_name` VARCHAR(80),`customer_address` VARCHAR(255),`customer_phone` VARCHAR(80),`customer_email` VARCHAR(80))CREATE TABLE `Customer_Orders` (`order_id` INTEGER PRIMARY KEY,`customer_id` INTEGER NOT NULL,`order_date` DATETIME NOT NULL,`order_status_code` VARCHAR(15),FOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` ))CREATE TABLE `Order_Items` (`order_item_id` INTEGER NOT NULL ,`order_id` INTEGER NOT NULL,`product_id` INTEGER NOT NULL,`order_quantity` VARCHAR(80),FOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),FOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?[SQL]\nSELECT T1.order_id ,  T1.order_date FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING sum(T2.order_quantity)  >  6 UNION SELECT T1.order_id ,  T1.order_date FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, How many buildings are there?[SQL]\nSELECT count(*) FROM building
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of buildings.[SQL]\n SELECT count(*) FROM building
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of buildings in ascending order of number of stories.[SQL]\nSELECT Name FROM building ORDER BY Number_of_Stories ASC
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the list of building names, sorted by the number of stories of each building in ascending order?[SQL]\nSELECT Name FROM building ORDER BY Number_of_Stories ASC
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the addresses of buildings in descending order of building completion year.[SQL]\nSELECT Address FROM building ORDER BY Completed_Year DESC
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Sort the buildings in descending order of building completion year, and return the building addresses.[SQL]\nSELECT Address FROM building ORDER BY Completed_Year DESC
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the maximum number of stories of buildings not completed in 1980?[SQL]\nSELECT max(Number_of_Stories) FROM building WHERE Completed_Year != 1980
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Among the buildings not completed in 1980, what is the maximum number of stories?[SQL]\nSELECT max(Number_of_Stories) FROM building WHERE Completed_Year != 1980
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average population for all regions?[SQL]\nSELECT avg(population) FROM region
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Compute the average population of a region.[SQL]\nSELECT avg(population) FROM region
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of regions in ascending alphabetical order?[SQL]\nSELECT Name FROM region ORDER BY Name ASC
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of regions in alphabetical order.[SQL]\nSELECT Name FROM region ORDER BY Name ASC
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the capitals of the regions with area bigger than 10000?[SQL]\n SELECT capital FROM region WHERE area  >  10000
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Give me the capitals of the regions whose area is larger than 10000.[SQL]\n SELECT t1.capital FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id WHERE t1.area  >  10000
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the capital of the region with the largest population.[SQL]\nSELECT capital FROM region ORDER BY population DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Which region has the largest population? Give me the capital of the region.[SQL]\n SELECT capital FROM region ORDER BY population DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of the regions with the top 5 largest areas.[SQL]\nSELECT Name FROM region ORDER BY Area DESC LIMIT 5
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the 5 largest regions in terms of area?[SQL]\nSELECT Name FROM region ORDER BY Area DESC LIMIT 5
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the names of buildings and the names of regions they are in.[SQL]\nSELECT T1.name ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, For each building, return the name of the building and the name of the region it belongs to.[SQL]\nSELECT T1.name ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the names of regions that have more than one building.[SQL]\nSELECT t1.name FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t1.region_id HAVING count(*)  >  1
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Which regions have more than one building? Give me the names of the regions.[SQL]\nSELECT T1.name FROM region AS T1 JOIN building AS T2 ON T1.region_id  =  T2.region_id GROUP BY T1.region_id HAVING count(*)  >  1
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the capital of the region that has the most buildings.[SQL]\nSELECT t1.capital FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t1.region_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Which region has the largest number of buildings? Show me the capital of the region.[SQL]\nSELECT t1.capital FROM region AS t1 JOIN building AS t2 ON t1.region_id  =  t2.region_id GROUP BY t2.region_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show addresses of buildings and the capitals of regions they are in.[SQL]\nSELECT address ,  capital FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, For each building, return the address of the building and the name of the region it belongs to.[SQL]\nSELECT T1.address ,  T2.name FROM building AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the number of stories of buildings in the region with name "Abruzzo".[SQL]\nSELECT Number_of_Stories FROM building WHERE region_id  =  (SELECT region_id FROM region WHERE name  =  "Abruzzo")
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the number of stories for each building in the region named "Abruzzo".[SQL]\nSELECT Number_of_Stories FROM building WHERE region_id  =  (SELECT region_id FROM region WHERE name  =  'Abruzzo')
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Please show each completion year and the number of buildings completed in that year.[SQL]\nSELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, For completion year, return the year and the number of buildings completed.[SQL]\nSELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year ORDER BY Completed_Year
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the year in which the most buildings are completed.[SQL]\nSELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, In which year did the most building constructions complete?[SQL]\nSELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of regions that do not have any buildings.[SQL]\nSELECT name FROM region WHERE region_id NOT IN (SELECT region_id FROM building)
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of regions in which there are no buildings?[SQL]\nSELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.[SQL]\nSELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?[SQL]\nSELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the distinct addresses of buildings.[SQL]\nSELECT DISTINCT address FROM building
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Give me a list of distinct building addresses.[SQL]\nSELECT DISTINCT address FROM building
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the completed years of buildings in descending order of the number of stories.[SQL]\nSELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
### Database Schema\ n\n['CREATE TABLE "building" ("Building_ID" int,"Region_ID" int,"Name" text,"Address" text,"Number_of_Stories" int,"Completed_Year" int,PRIMARY KEY ("Building_ID"),FOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID"))CREATE TABLE "region" ("Region_ID" int,"Name" text,"Capital" text,"Area" int,"Population" int,PRIMARY KEY ("Region_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Sort buildings in descending order of the number of stories, and return their completion years.[SQL]\nSELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List details of all the channel in alphabetical order .[SQL]\nSELECT channel_details FROM channels ORDER BY channel_details ASC
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the list of channel details ordered alphabetically ?[SQL]\nSELECT channel_details FROM channels ORDER BY channel_details ASC
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, How many services are there?[SQL]\nSELECT count(*) FROM Services
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of services.[SQL]\nSELECT count(*) FROM Services
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the most common analytical layer type code?[SQL]\nSELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the analytical layer type code that appears most often.[SQL]\nSELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Find all the services that has been used by the customer with details "Hardy Kutch".[SQL]\nSELECT T3.service_details FROM customers AS T1 JOIN customerdetails AS T2 ON T1.customer_id  =  T2.customer_id JOIN customers_and_services AS T3 ON T1.customer_id  =  T3.customer_id WHERE T2.customer_details  =  "Hardy Kutch"
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which services were used by the customer with details "Hardy Kutch"? Give me the service details.[SQL]\nSELECT T3.Service_details FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID  =  T2.Customer_ID JOIN Services AS T3 ON T2.Service_ID  =  T3.Service_ID WHERE T1.Customer_Details  =  "Hardy Kutch"
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the details of the services that have been used by more than 3 times .[SQL]\nSELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T2.service_id HAVING count(*)  >  3
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which services were used by customers by more than 3 times? Give me the service details.[SQL]\nSELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id GROUP BY T1.service_id HAVING count(*)  >  3
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the details of the customer who has used services the most times.[SQL]\nSELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, return the details of the customer with largest count of used services.[SQL]\nSELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of the customer who has used the most types of services .[SQL]\nSELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which customer has used the most types of services ? Give me the customer details .[SQL]\nSELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the details of the customer who has never used any services .[SQL]\nSELECT customer_details FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customers_and_services)
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which customers never used any services ? Give me the customer details .[SQL]\nSELECT customer_details FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customers_and_services)
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the details of the customers who have used the least-used service .[SQL]\nSELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which customers used the least commonly-used service ? Give me the distinct customer details .[SQL]\nSELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_details ORDER BY count(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, How many distinct customer and services details are there?[SQL]\nSELECT count(DISTINCT customer_details) ,  count(DISTINCT service_details) FROM customers_and_services
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Count the total number of available customers and services details.[SQL]\nSELECT count(*) FROM Customers UNION SELECT count(*) FROM Services
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Find all the customers whose name contains "Kutch".[SQL]\nSELECT customer_details FROM customers WHERE customer_details LIKE "%Kutch%"
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the details of the customers who have "Kutch" in part of their details?[SQL]\nSELECT customer_details FROM customers WHERE customer_details LIKE "%Kutch%"
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of all the services which either have been used by customer "Hardy Kutch" or have been rated as "good" in one of the customer interactions.[SQL]\nSELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id JOIN customers AS T3 ON T2.customer_id  =  T3.customer_id JOIN customer_interactions AS T4 ON T3.customer_id  =  T4.customer_id WHERE T3.customer_details  =  "Hardy Kutch" OR T4.Status_Code  =  "good"
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which services are used by the customer "Hardy Kutch" or are rated as "good" in a customer interaction? Give me the service details.[SQL]\nSELECT T3.Service_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id JOIN services AS T3 ON T2.service_id  =  T3.service_id WHERE T1.customer_details  =  "Hardy Kutch" OR T3.rating  =  "good"'
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the names of all the services which both have been used by customer "Hardy Kutch" and have been rated "bad" in one of the customer interactions.[SQL]\nSELECT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id JOIN customer_interactions AS t3 ON t2.customers_and_services_id  =  t3.customers_and_services_id WHERE t2.customer_id  =  (SELECT customer_id FROM customers WHERE customer_details  =  "Hardy Kutch") AND t3.status_code  =  "bad"'
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which services are both used by the customer "Hardy Kutch" and are rated as "bad" in a customer interaction? Give me the service details.[SQL]\nSELECT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id JOIN customer_interactions AS t3 ON t2.customers_and_services_id  =  t3.customers_and_services_id WHERE t3.Status_Code  =  "bad" AND t2.customer_id  =  (SELECT customer_id FROM customers WHERE customer_details  =  "Hardy Kutch")
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Find details of all the services that have interacted with `` 15 ij '' for the the channel details.[SQL]\nSELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id JOIN customer_interactions AS T3 ON T2.customers_and_services_id  =  T3.customers_and_services_id JOIN channels AS T4 ON T3.channel_id  =  T4.channel_id WHERE T4.channel_details  =  '15 ij'
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Give me the details of all the services that have interacted with the channel with detail "15 ij".[SQL]\nSELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id JOIN customer_interactions AS T3 ON T2.customers_and_services_id  =  T3.customers_and_services_id JOIN channels AS T4 ON T3.channel_id  =  T4.channel_id WHERE T4.channel_details  =  '15 ij'
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .[SQL]\nSELECT T1.customer_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id JOIN customer_interactions AS T3 ON T2.service_id  =  T3.service_id WHERE T3.Status_Code  =  'Stuck' AND T3.Services_and_Channels_Details  =  'bad'
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which customers have experienced status "Stuck" and service and channel detail "bad" in  an interaction? Give me the customer details.[SQL]\nSELECT T1.customer_details FROM customers AS T1 JOIN customer_interactions AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.status_code  =  "Stuck" AND T2.services_and_channels_details  =  "bad"
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, How many integration platforms are successful?[SQL]\nSELECT count(*) FROM customer_interactions WHERE status_code  =  'Successful'
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of integration platforms that have "Success" in the details.[SQL]\nSELECT count(*) FROM integration_platform WHERE Services_and_Channels_Details  =  'Success'
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List the details of all the customers who are associated with a failed integration platform .[SQL]\nSELECT T1.customer_details FROM customers AS T1 JOIN customer_interactions AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.status_code  =  'Failed'
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which customers have integration platform details "Fail" in interactions? Give me the customer details.[SQL]\nSELECT T1.customer_details FROM customers AS T1 JOIN customer_interactions AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.status_code  =  "Fail" AND T2.services_and_channels_details LIKE "%Integration Platform%"""    },    {        'chapter': 7, "task": "Based on the provided database schema information, Which services are not being used by any customer? [SQL] SELECT service_id FROM services EXCEPT SELECT service_id FROM customers_and_services"    },    {        'chapter': 7, "task": "Based on the provided database schema information, Which channels are not being used by any customer? [SQL] SELECT channel_id FROM channels EXCEPT SELECT channel_id FROM customer_interactions"    }]
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which service ( s ) has never been used by any customer ? List their details .[SQL]\nSELECT service_details FROM services EXCEPT SELECT T1.service_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Find details of the services that no customer has ever used . Return the service details .[SQL]\nSELECT service_details FROM services EXCEPT SELECT T1.service_details FROM customers AS T1 JOIN customers_and_services AS T2 ON T1.customer_id  =  T2.customer_id
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Find all the layer type codes with their corresponding usage count.[SQL]\nSELECT T1.Analytical_Layer_Type_Code ,  COUNT(*) FROM Analytical_Layer AS T1 JOIN Customers_and_Services AS T2 ON T1.Customers_and_Services_ID  =  T2.Customers_and_Services_ID GROUP BY T1.Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC"
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, For each analytical layer, return the analytical layer type code and the number of times it was used.[SQL]\nSELECT Analytical_Layer_Type_Code ,  COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .[SQL]\nSELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id WHERE T2.customers_and_services_details  =  'unsatisfied'
### Database Schema\ n\n['CREATE TABLE Services (Service_ID INTEGER NOT NULL,Service_Details VARCHAR(255),PRIMARY KEY (Service_ID))CREATE TABLE Customers (Customer_ID INTEGER NOT NULL,Customer_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Customer_ID))CREATE TABLE Channels (Channel_ID INTEGER NOT NULL,Channel_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Channel_ID))CREATE TABLE Customers_and_Services (Customers_and_Services_ID INTEGER NOT NULL,Customer_ID INTEGER,Service_ID INTEGER,Customers_and_Services_Details CHAR(15) NOT NULL,PRIMARY KEY (Customers_and_Services_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Customer_Interactions (Customer_Interaction_ID INTEGER NOT NULL,Channel_ID INTEGER,Customer_ID INTEGER,Service_ID INTEGER,Status_Code CHAR(15),Services_and_Channels_Details VARCHAR(255),PRIMARY KEY (Customer_Interaction_ID),FOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),FOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),FOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID))CREATE TABLE Integration_Platform (Integration_Platform_ID INTEGER NOT NULL,Customer_Interaction_ID INTEGER NOT NULL,Integration_Platform_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Integration_Platform_ID),FOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID))CREATE TABLE Analytical_Layer (Analytical_ID INTEGER NOT NULL,Customers_and_Services_ID VARCHAR(40) NOT NULL,Pattern_Recognition VARCHAR(255) NOT NULL,Analytical_Layer_Type_Code CHAR(15),PRIMARY KEY (Analytical_ID),FOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which services have been rated as "unsatisfied" in customers and services details? Give me the service_details.[SQL]\nSELECT T1.service_details FROM services AS T1 JOIN customers_and_services AS T2 ON T1.service_id  =  T2.service_id WHERE T2.customers_and_services_details LIKE "%unsatisfied%"
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, How many vehicles do we have?[SQL]\nSELECT count(*) FROM Vehicles
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of vehicles.[SQL]\n SELECT count(*) FROM Vehicles
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show names for all vehicles in descending order of model year.[SQL]\nSELECT name FROM vehicles ORDER BY Model_year DESC
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all vehicles, ordered by model year descending?[SQL]\n SELECT name FROM Vehicles ORDER BY Model_year DESC
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, List all distinct types of powertrain of vehicles.[SQL]\nSELECT DISTINCT Type_of_powertrain FROM Vehicles
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the different types of powertrains?[SQL]\n SELECT DISTINCT Type_of_powertrain FROM Vehicles
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.[SQL]\nSELECT name ,  TYPE_of_powertrain ,  annual_fuel_cost FROM Vehicles WHERE Model_year  =  2013 OR Model_year  =  2014
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?[SQL]\n SELECT name ,  Type_of_powertrain ,  cost_per_25_miles FROM Vehicles WHERE Model_year IN (2013 ,  2014)
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show types of powertrain with vehicles both from 2014 and 2013.[SQL]\n SELECT Type_of_powertrain FROM Vehicles WHERE Model_year  =  2014 INTERSECT SELECT Type_of_powertrain FROM Vehicles WHERE Model_year  =  2013
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the types of powertrains that have vehicles that were made in both 2013 and 2014?[SQL]\n SELECT Type_of_powertrain FROM Vehicles WHERE Model_year BETWEEN 2013 AND 2014
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show all types of powertrain and the number of vehicles in each type.[SQL]\nSELECT Type_of_powertrain ,  COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, How many vehicles have each type of powertrain?[SQL]\nSELECT TYPE_OF_POWERTRAIN ,  count(*) FROM Vehicles GROUP BY TYPE_OF_POWERTRAIN
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the type of powertrain with most number of vehicles.[SQL]\n SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Which type of powertrain is most common?[SQL]\nSELECT TYPE_of_powertrain FROM Vehicles GROUP BY TYPE_of_powertrain ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show minimum, maximum, and average annual fuel cost for all vehicles.[SQL]\nSELECT avg(annual_fuel_cost) FROM vehicles
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the minimum, maximum, and average annual fuel costs across all vehicles?[SQL]\n SELECT avg(annual_fuel_cost) FROM vehicles
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.[SQL]\nSELECT name ,  model_year FROM Vehicles WHERE City_fuel_economy_rate  <= Highway_fuel_economy_rate
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?[SQL]\n SELECT name ,  model_year FROM vehicles WHERE City_fuel_economy_rate  <= Highway_fuel_economy_rate
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.[SQL]\nSELECT TYPE_of_powertrain ,  avg(Annual_fuel_cost) FROM Vehicles GROUP BY TYPE_of_powertrain HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?[SQL]\n SELECT TYPE_of_powertrain ,  avg(Annual_fuel_cost) FROM Vehicles GROUP BY TYPE_of_powertrain HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the name, age, membership credit for all customers?[SQL]\nSELECT name ,  age ,  membership_credit FROM Customers
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names, ages, and membership credits for all customers?[SQL]\nSELECT name ,  age ,  membership_credit FROM Customers
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the name and age of the customer with maximum membership credit.[SQL]\nSELECT T1.name ,  T1.age FROM Customers AS T1 JOIN Discount AS T2 ON T1.id  =  T2.customer_id GROUP BY T1.id ORDER BY max(T2.membership_credit) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name and age of the customer with the most membership credit?[SQL]\nSELECT name ,  age FROM Customers ORDER BY membership_credit DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average age for customers with a membership credit above the average?[SQL]\nSELECT avg(age) FROM Customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM Customers)
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the average age for customers who have membership above the average across all customers.[SQL]\nSELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show all information for all discounts.[SQL]\n SELECT * FROM Discount
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Return all information about discounts.[SQL]\nSELECT * FROM Discount
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the name and total hours of renting for each vehicle.[SQL]\n SELECT T1.name ,  sum(T2.total_hours) FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T2.vehicles_id
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and total rental hours for each vehicle?[SQL]\n SELECT T1.name ,  sum(T2.total_hours) FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.id
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the name of vehicles with no renting history.[SQL]\n SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of vehicles that have never been rented?[SQL]\n SELECT name FROM Vehicles WHERE id NOT IN (SELECT vehicles_id FROM Renting_history)
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the name of customer with at least two renting history records.[SQL]\nSELECT T1.name FROM Customers AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.customer_id GROUP BY T1.id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of customers who have two or more records of rental history?[SQL]\nSELECT T1.name FROM customers AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.customer_id GROUP BY T1.id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the name and model year of the vehicle with most number of renting history records.[SQL]\nSELECT T1.name ,  T1.model_year FROM vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name and model year of the vehicle which has been rented the most times?[SQL]\n SELECT T1.name ,  T1.model_year FROM vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the vehicle name with a descending order of total hours of renting.[SQL]\n SELECT T1.name FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id ORDER BY total_hours DESC
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of vehicles, sorted descending by total hours of renting?[SQL]\n SELECT T1.name FROM Vehicles AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.vehicles_id GROUP BY T2.vehicles_id ORDER BY sum(T2.total_hours) DESC
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the discount name with most number of renting history records?[SQL]\nSELECT T1.name FROM Discount AS T1 JOIN Renting_history AS T2 ON T1.id  =  T2.discount_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the name of the discount that corresponds to the most rental history records.[SQL]\nSELECT T1.name FROM discount AS T1 JOIN renting_history AS T2 ON T1.id  =  T2.discount_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name and powertrain type of the cars that rented for more than 30 total hours.[SQL]\nSELECT T2.name ,  T2.Type_of_powertrain FROM Renting_history AS T1 JOIN Vehicles AS T2 ON T1.vehicles_id  =  T2.id WHERE T1.total_hours  >  30
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and powertrain types of cars that have more than 30 total rental hours?[SQL]\n SELECT T2.name ,  T2.type_of_powertrain FROM Renting_history AS T1 JOIN Vehicles AS T2 ON T1.vehicles_id  =  T2.id WHERE T1.total_hours  >  30
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the average city and highway fuel rates for cars with different powertrain types.[SQL]\nSELECT avg(city_fuel_economy_rate) ,  avg(highway_fuel_economy_rate) FROM Vehicles WHERE TYPE_of_powertrain  =  'Car'
### Database Schema\ n\n['CREATE TABLE "Customers" ("id" int,"name" text,"age" int,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Discount" ("id" int,"name" text,"membership_credit" int,PRIMARY KEY ("id"))CREATE TABLE "Vehicles" ("id" int,"name" text,"Model_year" int,"Type_of_powertrain" text,"Combined_fuel_economy_rate" int,"City_fuel_economy_rate" int,"Highway_fuel_economy_rate" int,"Cost_per_25_miles" real,"Annual_fuel_cost" real,"Notes" text,PRIMARY KEY ("id"))CREATE TABLE "Renting_history" ("id" int,"customer_id" int,"discount_id" int,"vehicles_id" int,"total_hours" int,PRIMARY KEY ("id"),FOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),FOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),FOREIGN KEY ("discount_id") REFERENCES "Discount"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?[SQL]\n SELECT avg(city_fuel_economy_rate) ,  avg(highway_fuel_economy_rate) FROM Vehicles GROUP BY Type_of_powertrain
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average amount of a student loan?[SQL]\nSELECT avg(amount_of_loan) FROM Student_Loans
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Compute the average amount of student loans.[SQL]\nSELECT avg(amount_of_loan) FROM Student_Loans
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.[SQL]\nSELECT bio_data ,  student_id FROM STUDENTS WHERE student_id IN ( SELECT student_id FROM CLASSES GROUP BY student_id HAVING count(*)  >=  2 ) UNION SELECT bio_data ,  student_id FROM STUDENTS WHERE student_id IN ( SELECT student_id FROM Detention GROUP BY student_id HAVING count(*)  <  2 )
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?[SQL]\nSELECT bio_data ,  student_id FROM STUDENTS WHERE student_id IN ( SELECT T1.student_id FROM CLASSES AS T1 JOIN CLASSES AS T2 ON T1.student_id  =  T2.student_id WHERE T1.class_id != T2.class_id ) OR student_id IN ( SELECT student_id FROM Detention GROUP BY student_id HAVING count(*)  <  2 )
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'[SQL]\nSELECT T2.teacher_details FROM CLASS AS T1 JOIN TEACHERS AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.class_details LIKE '%data%' EXCEPT SELECT T2.teacher_details FROM CLASS AS T1 JOIN TEACHERS AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.class_details LIKE 'net%'
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.[SQL]\nSELECT teacher_details FROM TEACHERS WHERE teacher_id IN (SELECT teacher_id FROM CLASSES WHERE class_details LIKE '%data%' EXCEPT SELECT teacher_id FROM CLASSES WHERE class_details LIKE 'net%')
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, List the biographical data of the students who never had a detention or student loan .[SQL]\nSELECT bio_data FROM Students WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans)
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Which students never had a detention or student loan ? Find their biographical data .[SQL]\nSELECT bio_data FROM STUDENTS WHERE student_id NOT IN (SELECT student_id FROM Detention) AND student_id NOT IN (SELECT student_id FROM Student_Loans)
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the loan amounts and loan dates of the students who have at least 2 achievements?[SQL]\nSELECT T1.amount_of_loan ,  T1.date_of_loan FROM Student_Loans AS T1 JOIN Achievements AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, List the amount and date of loan for the students who have two or more achievements.[SQL]\nSELECT T1.student_id ,  T1.date_of_loan FROM Student_Loans AS T1 JOIN Achievements AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, List the detail and id of the teacher who teaches the most courses.[SQL]\nSELECT T1.teacher_id ,  COUNT(*) FROM CLASS AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the detail and id of the teacher who teaches the largest number of courses?[SQL]\nSELECT T1.teacher_details ,  T1.teacher_id FROM TEACHERS AS T1 JOIN CLASSES AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the distinct descriptions of all the detentions which have ever happened?[SQL]\nSELECT DISTINCT T1.detention_type_description FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Return the distinct descriptions of all the detentions that have happened.[SQL]\nSELECT DISTINCT T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, List the personal details and the address type descriptions of all the students.[SQL]\nSELECT T1.bio_data ,  T2.address_type_description FROM Students AS T1 JOIN Ref_Address_Types AS T2 ON T1.student_id = T2.student_id"
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the personal details and the address type descriptions of each student?[SQL]\nSELECT T1.bio_data ,  T2.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, List the the address details and the biographical information of the students.[SQL]\nSELECT T1.address_details ,  T2.bio_data FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.student_address_id WHERE T1.address_type_code  =  'Home'
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the address details and biographical information of each student?[SQL]\nSELECT T1.address_details ,  T2.bio_data FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.student_address_id WHERE T1.address_type_code  =  'Home' UNION SELECT T1.address_details ,  T2.bio_data FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.student_address_id WHERE T1.address_type_code  =  'School'
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, List the biographical data and the date of the transcript of all the students.[SQL]\nSELECT bio_data ,  date_of_transcript FROM TRANSCRIPTS
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the biographical data and the date of transcript issuance of each student?[SQL]\nSELECT bio_data ,  date_of_transcript FROM TRANSCRIPTS
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, How many students got the most common result in the behavioral monitoring details? Also list the result details.[SQL]\nSELECT count(*) ,  T1.behaviour_monitoring_details FROM Behaviour_Monitoring AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the most common result in the behavioral monitoring details. What are the count and the details of this result?[SQL]\nSELECT count(*) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.[SQL]\nSELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  (SELECT max(count(*) ) FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  3
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.[SQL]\nSELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id GROUP BY T2.behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 UNION SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details  =  (SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 OFFSET 2) LIMIT 3
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.[SQL]\nSELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What is the biographical information of the students who got the most common result for their behaviour monitoring details ?[SQL]\nSELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id GROUP BY T2.behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Which students have gone through any event? List the students' biographical data and event date.[SQL]\nSELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the biographical data and event date for students who participated in any events.[SQL]\nSELECT T1.bio_data ,  T2.event_date FROM STUDENTS AS T1 JOIN STUDENT_EVENTS AS T2 ON T1.student_id  =  T2.student_id
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, How many students have joined in the most common type of event? List the number, the event type and description.[SQL]\nSELECT count(*) ,  T1.event_type_code ,  T2.event_type_description FROM STUDENT_EVENTS AS T1 JOIN Ref_Event_Types AS T2 ON T1.event_type_code  =  T2.event_type_code GROUP BY T1.event_type_code ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What is the type of event the most students joined? Give me the number of students, and the event type code and description.[SQL]\nSELECT T1.other_details ,  T1.event_type_code FROM STUDENT_EVENTS AS T1 JOIN Ref_Event_Types AS T2 ON T1.event_type_code  =  T2.event_type_code GROUP BY T1.event_type_code ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, How are all the achievements described? List the achievement detail and the type description.[SQL]\nSELECT achievement_details ,  T1.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the achievement detail and the type description of each achievements?[SQL]\nSELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, How many teachers have taught a student who has not won any achievements?[SQL]\nSELECT count(*) FROM CLASSES AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id EXCEPT SELECT count(*) FROM Achievements AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of teachers who have taught students who have never won an achievement.[SQL]\nSELECT count(*) FROM TEACHERS AS T1 JOIN CLASSES AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN STUDENTS AS T3 ON T2.student_id  =  T3.student_id EXCEPT SELECT count(*) FROM TEACHERS AS T1 JOIN CLASSES AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN STUDENTS AS T3 ON T2.student_id  =  T3.student_id JOIN Achievements AS T4 ON T3.student_id  =  T4.student_id
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, List the date of the transcripts and the transcript details.[SQL]\nSELECT date_of_transcript ,  transcript_details FROM TRANSCRIPTS
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the date and detail of each transcript?[SQL]\nSELECT date_of_transcript ,  transcript_details FROM TRANSCRIPTS
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, List the achievement type code, achievement details and the date of the achievements.[SQL]\nSELECT T1.achievement_type_code ,  T2.achievement_details ,  T2.date_achievement FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code ORDER BY T2.date_achievement DESC"
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the type code, details, and date of each achievement?[SQL]\nSELECT T1.achievement_type_code ,  T2.achievement_type_description ,  T1.date_achievement FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show the detention start time and end time of the detentions.[SQL]\nSELECT datetime_detention_start ,  datetime_detention_end FROM Detention
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the starting time and ending time of each detention record?[SQL]\nSELECT datetime_detention_start ,  datetime_detention_end FROM Detention
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show the biographical information of the students whose details include the substring 'Suite'.[SQL]\nSELECT bio_data FROM Students WHERE bio_data LIKE '%Suite%'
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Which students have 'Suite' as a substring in their details? Give me their biographical information.[SQL]\nSELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, List the details for all the pairs of teachers and students who are in the same class.[SQL]\nSELECT T1.teacher_details ,  T2.student_details FROM TEACHERS AS T1 JOIN CLASSES AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN STUDENTS AS T3 ON T2.student_id  =  T3.student_id
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.[SQL]\nSELECT T1.teacher_details ,  T2.student_details FROM TEACHERS AS T1 JOIN CLASSES AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN STUDENTS AS T3 ON T2.student_id  =  T3.student_id
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.[SQL]\nSELECT teacher_id ,  count(*) FROM CLASSES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.[SQL]\nSELECT teacher_id ,  count(*) FROM CLASSES GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, How many courses do students take at most? Also find the id of the student who takes the most courses.[SQL]\nSELECT T1.student_id ,  count(*) FROM CLASS AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.[SQL]\nSELECT T1.student_id ,  count(*) FROM CLASS AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Which students take 2 courses? List student id and details.[SQL]\nSELECT T1.student_id ,  T1.bio_data FROM Students AS T1 JOIN TRANSCRIPTS AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids and details of the students who take 2 courses?[SQL]\nSELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN CLASSES AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What is the least common detention type? Show the type code and the description.[SQL]\nSELECT detention_type_code ,  detention_type_description FROM Ref_Detention_Type GROUP BY detention_type_code ORDER BY count(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Give me the type code and description of the least common detention type.[SQL]\nSELECT detention_type_code ,  detention_type_description FROM Ref_Detention_Type GROUP BY detention_type_code ORDER BY count(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Which students have a student loan more than the average amount? List the students' biographical data and the details.[SQL]\nSELECT T1.bio_data ,  T2.student_id ,  T2.date_of_loan ,  T2.amount_of_loan FROM STUDENTS AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the biographical data and details for students whose student loan is above the average amount.[SQL]\nSELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING avg(T2.amount_of_loan)  <  T2.amount_of_loan
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, When was the earliest date of loan?[SQL]\nSELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Return the earliest date of loan in the record.[SQL]\nSELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Which student has the loan with the minimum value? List the student's biographical information.[SQL]\nSELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY amount_of_loan ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the biographical information of the student with the smallest student loan.[SQL]\nSELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY amount_of_loan ASC LIMIT 1"
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, When was the transcript issued for the student with loan of maximum value?[SQL]\nSELECT T2.date_of_loan FROM Student_Loans AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id ORDER BY amount_of_loan DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What is the transcript issuance date for the student with the largest amount of loan?[SQL]\nSELECT T2.date_of_loan FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Which teachers have taught the student with the earliest transcript issuance? List the teacher details.[SQL]\nSELECT T2.teacher_details FROM TRANSCRIPTS AS T1 JOIN CLASSES AS T2 ON T1.student_id  =  T2.student_id JOIN TEACHERS AS T3 ON T2.teacher_id  =  T3.teacher_id ORDER BY T1.date_of_transcript ASC LIMIT 1"}query2 = {    'question': "Which students have received at least one detention?",    'answer': "SELECT DISTINCT student_id FROM Detention"}query3 = {    'question': "For each student ID that has received at least one detention, list the number of detentions they have received.",    'answer': "SELECT T1.student_id ,  count(*) FROM Detention AS T1 JOIN STUDENTS AS T2 ON T1.student
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the details of the teachers who have taught the student with the earliest transcript issuance.[SQL]\nSELECT T1.teacher_id FROM CLASS AS T1 JOIN STUDENTS AS T2 ON T1.student_id  =  T2.student_id JOIN TRANSCRIPTS AS T3 ON T3.student_id  =  T2.student_id ORDER BY T3.date_of_transcript LIMIT 1"}query2 = {    'question': "Find the names of all the students who have received at least one detention.", 'answer': "SELECT T1.student_name FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  1"}query3 = {    'question': "Find the names of all the students who have received at least two detentions.", 'answer':
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, How much total loan does each student have ? List the student ids and the amounts .[SQL]\nSELECT T1.student_id ,  sum(T2.amount_of_loan) FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, For each student, find the student id and the total amount of loan he or she has.[SQL]\nSELECT T1.student_id ,  sum(T2.amount_of_loan) FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, How many courses does each student take? List the student id, the student biographical data and the course count.[SQL]\nSELECT T1.student_id ,  T1.bio_data ,  COUNT(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, For each student, find the student id, student biographical data, and the number of courses he or she takes.[SQL]\nSELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN TRANSCRIPTS AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, How many students have gone through a detention?[SQL]\nSELECT count(*) FROM Detention
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of students who have a detention record.[SQL]\nSELECT count(*) FROM Detention
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What is the code and description of the most common student address type?[SQL]\nSELECT T1.address_type_code ,  T1.address_type_description FROM Ref_Address_Types AS T1 JOIN Students_Addresses AS T2 ON T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What is the most common student address type? Give me the code and description of the address type.[SQL]\nSELECT T1.address_type_code ,  T1.address_type_description FROM Ref_Address_Types AS T1 JOIN Students_Addresses AS T2 ON T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, For those students who have gone through an event, who do not have a student loan? List the students' biographical data[SQL]\nSELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id EXCEPT SELECT bio_data FROM Students WHERE student_id IN (SELECT student_id FROM Student_Loans)
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Among the students who have an event record, who do not have a student loan? Return the students' biographical data.[SQL]\nSELECT bio_data FROM STUDENTS AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id EXCEPT SELECT bio_data FROM STUDENTS AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, List the start time and the end time of the students' addresses for the students who have 2 transcripts.[SQL]\nSELECT T1.date_from ,  T1.date_to FROM Student_Events AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the start time and end time of addresses for the students who receive 2 transcripts?[SQL]\nSELECT T1.date_from ,  T1.date_to FROM Student_Events AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.student_id IN (SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2)
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, When did all the detentions start?[SQL]\nSELECT min(datetime_detention_start) FROM Detention
### Database Schema\ n\n['CREATE TABLE Students (`student_id` INTEGER NOT NULL,`bio_data` VARCHAR(255) NOT NULL,`student_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`student_id`))CREATE TABLE Transcripts (`transcript_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_transcript` DATETIME(3),`transcript_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`transcript_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Behaviour_Monitoring (`behaviour_monitoring_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`behaviour_monitoring_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`behaviour_monitoring_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Addresses (`address_id` INTEGER NOT NULL,`address_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_id`))CREATE TABLE Ref_Event_Types (`event_type_code` CHAR(10) NOT NULL,`event_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_type_code`))CREATE TABLE Ref_Achievement_Type (`achievement_type_code` CHAR(15) NOT NULL,`achievement_type_description` VARCHAR(80),PRIMARY KEY (`achievement_type_code`))CREATE TABLE Ref_Address_Types (`address_type_code` CHAR(10) NOT NULL,`address_type_description` VARCHAR(255) NOT NULL,PRIMARY KEY (`address_type_code`))CREATE TABLE Ref_Detention_Type (`detention_type_code` CHAR(10) NOT NULL,`detention_type_description` VARCHAR(80),PRIMARY KEY (`detention_type_code`))CREATE TABLE Student_Events (`event_id` INTEGER NOT NULL,`event_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`event_date` DATETIME(3),`other_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`event_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code))CREATE TABLE Teachers (`teacher_id` INTEGER NOT NULL,`teacher_details` VARCHAR(255),PRIMARY KEY (`teacher_id`))CREATE TABLE Student_Loans (`student_loan_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`date_of_loan` DATETIME(3),`amount_of_loan` DECIMAL(15,4),`other_details` VARCHAR(255),PRIMARY KEY (`student_loan_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id))CREATE TABLE Classes (`class_id` INTEGER NOT NULL,`student_id` INTEGER NOT NULL,`teacher_id` INTEGER NOT NULL,`class_details` VARCHAR(255) NOT NULL,PRIMARY KEY (`class_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id))CREATE TABLE Students_Addresses (`student_address_id` INTEGER NOT NULL,`address_id` INTEGER NOT NULL,`address_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`date_from` DATETIME(3),`date_to` DATETIME(3),PRIMARY KEY (`student_address_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (address_id) REFERENCES Addresses (address_id),FOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code))CREATE TABLE Detention (`detention_id` INTEGER NOT NULL,`detention_type_code` CHAR(10) NOT NULL,`student_id` INTEGER NOT NULL,`datetime_detention_start` DATETIME(3),`datetime_detention_end` DATETIME(3),`detention_summary` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`detention_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code))CREATE TABLE Achievements (`achievement_id` INTEGER NOT NULL,`achievement_type_code` CHAR(15) NOT NULL,`student_id` INTEGER NOT NULL,`date_achievement` DATETIME(3),`achievement_details` VARCHAR(255),`other_details` VARCHAR(255),PRIMARY KEY (`achievement_id`),FOREIGN KEY (student_id) REFERENCES Students (student_id),FOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code))']\n\n\n### Task \n\nBased on the provided database schema information, Give me the detention start date for all the detention records.[SQL]\nSELECT datetime_detention_start FROM Detention
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, List all the author names.[SQL]\nSELECT T1.Name FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all the authors?[SQL]\nSELECT name FROM author
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show all Client names and their addresses.[SQL]\nSELECT name ,  address FROM client
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and addressed of all clients?[SQL]\nSELECT name ,  address FROM client
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, List all Book titles, ISBNs, and sale prices.[SQL]\nSELECT title ,  isbn ,  saleprice FROM book
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles, ISBNs, and sale prices for all books?[SQL]\nSELECT title ,  isbn ,  saleprice FROM book
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, How many books do we have?[SQL]\nSELECT count(*) FROM book
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of books.[SQL]\n SELECT count(*) FROM book
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, How many authors are there?[SQL]\nSELECT count(*) FROM author
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of authors.[SQL]\n SELECT count(*) FROM author
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, How many clients are there?[SQL]\nSELECT count(*) FROM Client
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Return the number of clients.[SQL]\nSELECT count(*) FROM Client
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, List names and addresses of all clients in alphabetical order by their names.[SQL]\nSELECT name ,  address FROM client ORDER BY name ASC
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and addressed of all clients, ordered alphabetically by name?[SQL]\nSELECT name ,  address FROM client ORDER BY name ASC
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show all book titles and corresponding author names.[SQL]\nSELECT T1.title ,  T2.name FROM book AS T1 JOIN author_book AS T2 ON T1.isbn = T2.isbn
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all books and their corresponding authors?[SQL]\nSELECT T1.title ,  T3.name FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idauthor
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show all order ids and their client names.[SQL]\nSELECT T1.idorder ,  T2.name FROM orders AS T1 JOIN client AS T2 ON T1.idclient  =  T2.idclient
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of all orders and the corresponding client names?[SQL]\nSELECT T1.idorder ,  T2.name FROM orders AS T1 JOIN client AS T2 ON T1.idclient  =  T2.idclient
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show all author names and the numbers of books each has written.[SQL]\nSELECT T1.name ,  count(*) FROM author AS T1 JOIN book AS T2 ON T1.idauthor = T2.author GROUP BY T1.name
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all the authors, and how many books has each written?[SQL]\nSELECT T2.Name ,  COUNT(*) FROM author_book AS T1 JOIN author AS T2 ON T1.author  =  T2.idAuthorA GROUP BY T2.Name ORDER BY COUNT(*) DESC"
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show all book isbns and the numbers of orders for each.[SQL]\nSELECT T1.isbn ,  COUNT(*) FROM books_order AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder GROUP BY T1.isbn
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are all isbns for each book, and how many times has each been ordered?[SQL]\nSELECT T1.isbn ,  count(*) FROM books AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show all book isbns and the total amount ordered for each.[SQL]\nSELECT T1.isbn ,  sum(T1.amount) FROM books_order AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder GROUP BY T1.isbn
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the isbns for all books, and what is the total amount ordered for each?[SQL]\nSELECT T1.isbn ,  sum(T2.amount) FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show the book title corresponding to the book with the most number of orders.[SQL]\nSELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What is the title of the book that has been ordered the greatest number of times?[SQL]\nSELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show the book title and purchase price of the book that has had the greatest amount in orders.[SQL]\nSELECT T1.title ,  T1.purchaseprice FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.title ,  T1.purchaseprice ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What is the title and purchase price of the book that has the highest total order amount?[SQL]\nSELECT T1.title ,  T1.purchaseprice FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn WHERE T2.amount  =  (SELECT max(amount) FROM books_order)
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show the titles of books that have been ordered.[SQL]\nSELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the different titles of books that have been ordered in the past?[SQL]\nSELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn = T2.isbn
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show the names of clients who have ordered at least once.[SQL]\nSELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient HAVING count(*)  >=  1
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the different clients who have made an order?[SQL]\nSELECT DISTINCT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show all client names and the number of orders each has made.[SQL]\nSELECT T1.name ,  count(*) FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all the clients, and how many times has each of them ordered?[SQL]\nSELECT T1.name ,  count(*) FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the client with the most number of orders?[SQL]\nSELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Give the name of the client who has made the most orders.[SQL]\nSELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient  =  T2.idclient GROUP BY T1.idclient ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show the client names and their total amounts of books ordered.[SQL]\nSELECT T1.name ,  sum(T2.amount) FROM client AS T1 JOIN books_order AS T2 ON T1.idclient  =  T2.idorder GROUP BY T1.idclient
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all the clients, and the total amount of books ordered by each?[SQL]\nSELECT T1.name ,  sum(T2.amount) FROM client AS T1 JOIN books_order AS T2 ON T1.idclient  =  T2.idorder GROUP BY T1.idclient
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show the client name who has the most total amount of books ordered.[SQL]\nSELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient GROUP BY T1.idclient ORDER BY sum(amount) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the client who has ordered the greatest total amount of books?[SQL]\nSELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient JOIN books_order AS T3 ON T2.idorder = T3.idorder GROUP BY T1.idclient ORDER BY sum(T3.amount) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show all book titles for books that have no orders.[SQL]\nSELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T2.idorder != '' WHERE T2.idorder  =  ''
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles of books that have never been ordered?[SQL]\nSELECT title FROM book WHERE isbn NOT IN (SELECT isbn FROM books_order)
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show all client names for clients who have not made orders.[SQL]\nSELECT name FROM client WHERE idclient NOT IN (SELECT idclient FROM orders)
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of clients who have never made an order?[SQL]\nSELECT name FROM client WHERE idclient NOT IN (SELECT idclient FROM orders)
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What is the maximum and the minimum sale price?[SQL]\nSELECT max(saleprice) ,  min(saleprice) FROM book
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Give the maximum and minimum sale price of books.[SQL]\nSELECT max(saleprice) ,  min(saleprice) FROM book
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What is the average purchase price and the average sale price?[SQL]\nSELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Give the average purchase price and average sale price for books.[SQL]\nSELECT avg(purchaseprice) ,  avg(saleprice) FROM BOOK
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What is the maximum difference between the sale price and purchase price?[SQL]\nSELECT max(saleprice - purchaseprice) FROM book
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Return the largest difference in sale price and purchase price.[SQL]\nSELECT max(saleprice - purchaseprice) FROM book
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, List all book titles which have sale prices higher than the average.[SQL]\nSELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles of books with sale prices above the average sale price across all books?[SQL]\nSELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, List all book titles which have the lowest sale price .[SQL]\nSELECT title FROM book ORDER BY saleprice ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles of books that have a sale price equal to the lowest sale price across all books ?[SQL]\nSELECT title FROM book WHERE saleprice  =  (SELECT min(saleprice) FROM book)
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, List all book titles which have highest purchase prices .[SQL]\nSELECT title FROM book ORDER BY purchaseprice DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles of books with the highest purchase price across all books ?[SQL]\nSELECT title FROM book ORDER BY purchaseprice DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What is the average sale price of books written by George Orwell?[SQL]\nSELECT avg(T1.saleprice) FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idauthor WHERE T3.name  =  'George Orwell'
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Give the average sale price of books authored by George Orwell.[SQL]\nSELECT avg(T1.saleprice) FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.author  =  T3.idauthor WHERE T3.name  =  'George Orwell'
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are sale prices of books written by Plato?[SQL]\nSELECT T1.saleprice FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idauthor WHERE T3.name  =  'Plato'
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Return the sale prices of books authored by Plato.[SQL]\nSELECT T1.saleprice FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idauthor WHERE T3.name  =  'Plato'
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What is the title of the book written by George Orwell that has the lowest sale price?[SQL]\nSELECT title FROM book WHERE saleprice  =  (SELECT min(saleprice) FROM book) AND author  =  (SELECT name FROM author WHERE idauthor  =  george.idauthor)
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Give the title of book by George Orwell that has the lowest saleprice.[SQL]\nSELECT title FROM book WHERE saleprice  =  (SELECT min(saleprice) FROM book) AND author  =  'George Orwell'
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What is the title of the book written by Plato has price lower than the average sale price of all books?[SQL]\nSELECT T1.title FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idAuthor WHERE T3.name  =  'Plato' AND T1.saleprice  <  (SELECT avg(T1.saleprice) FROM book AS T1)
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.[SQL]\nSELECT T1.title FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idAuthor WHERE T3.name  =  'Plato' AND T1.saleprice  <  (SELECT avg(T1.saleprice) FROM book AS T1)
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Who is the author of the book "Pride and Prejudice"?[SQL]\nSELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.idauthor  =  T2.author WHERE T2.title  =  'Pride and Prejudice'
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Give the name of the author who wrote the book titled Pride and Prejudice.[SQL]\nSELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.idauthor = T2.author WHERE T2.title  =  'Pride and Prejudice'
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, List titles of all books published by an author whose name contains the string 'Plato'?[SQL]\nSELECT T1.title FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idAuthor WHERE T3.name LIKE '%Plato%'
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles of all books written by an author with a name that contains Plato?[SQL]\nSELECT T1.title FROM book AS T1 JOIN author_book AS T2 ON T1.isbn  =  T2.isbn JOIN author AS T3 ON T2.author  =  T3.idAuthor WHERE T3.name LIKE '%Plato%'
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, How many orders do we have for "Pride and Prejudice"?[SQL]\nSELECT count(*) FROM books_order AS T1 JOIN book AS T2 ON T1.isbn  =  T2.isbn WHERE T2.title  =  "Pride and Prejudice"
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Return the number of orders received for Pride and Prejudice.[SQL]\nSELECT count(*) FROM books_order AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder JOIN book AS T3 ON T3.isbn  =  T1.isbn WHERE T3.title  =  'Pride and Prejudice'
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show ids for orders including both "Pride and Prejudice" and "The Little Prince".[SQL]\nSELECT T1.idorder FROM orders AS T1 JOIN books_order AS T2 ON T1.idorder  =  T2.idorder JOIN book AS T3 ON T2.isbn  =  T3.isbn WHERE T3.title  =  "Pride and Prejudice" AND T3.title  =  "The Little Prince"
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the order ids for orders that include both Pride and Prejudice and The Little Prince?[SQL]\nSELECT T1.idorder FROM orders AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder JOIN book AS T3 ON T3.isbn  =  T1.isbn JOIN book AS T4 ON T4.isbn  =  T2.isbn WHERE T3.title  =  'Pride and Prejudice' AND T4.title  =  'The Little Prince'
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show all book isbns which were ordered by both client Peter Doe and client James Smith.[SQL]\nSELECT T1.isbn FROM books_order AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder JOIN client AS T3 ON T3.IdClient  =  T2.IdClient WHERE T3.Name  =  'Peter Doe' INTERSECT SELECT T1.isbn FROM books_order AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder JOIN client AS T3 ON T3.IdClient  =  T2.IdClient WHERE T3.Name  =  'James Smith'
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the isbns of books ordered by both clients named Peter Doe and James Smith?[SQL]\nSELECT T1.isbn FROM book AS T1 JOIN orders AS T2 ON T1.idorder  =  T2.idorder WHERE T2.dateorder  =  (SELECT min(dateorder) FROM orders WHERE idclient  =  (SELECT idclient FROM client WHERE name  =  'Peter Doe')) AND T2.dateorder  =  (SELECT min(dateorder) FROM orders WHERE idclient  =  (SELECT idclient FROM client WHERE name  =  'James Smith'))
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Find the title of books which are ordered by client Peter Doe but not client James Smith.[SQL]\nSELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn WHERE T2.idclient  =  (SELECT idclient FROM client WHERE name  =  'Peter Doe') EXCEPT SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn WHERE T2.idclient  =  (SELECT idclient FROM client WHERE name  =  'James Smith')
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?[SQL]\nSELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn WHERE T2.idclient  =  'Doe' EXCEPT SELECT T1.title FROM book AS T1 JOIN orders AS T2 ON T1.isbn  =  T2.isbn WHERE T2.idclient  =  'Smith'
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, Show all client names who have orders for "Pride and Prejudice".[SQL]\nSELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient JOIN books_order AS T3 ON T2.idorder = T3.idorder JOIN book AS T4 ON T3.isbn = T4.isbn WHERE T4.title  =  "Pride and Prejudice"
### Database Schema\ n\n['CREATE TABLE Client(IdClient CHAR(10) PRIMARY KEY, Name VARCHAR(25) NOT NULL, Address VARCHAR(60) NOT NULL, NumCC CHAR(16) NOT NULL)CREATE TABLE Orders(IdOrder CHAR(10) PRIMARY KEY, IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade, DateOrder DATE, DateExped DATE)CREATE TABLE Author( idAuthor NUMBER PRIMARY KEY,  Name VARCHAR(25))CREATE TABLE Book(ISBN CHAR(15) PRIMARY KEY,Title VARCHAR(60) NOT NULL,Author CHAR(4) NOT NULL,PurchasePrice NUMBER(6,2) DEFAULT 0,SalePrice NUMBER(6,2) DEFAULT 0)CREATE TABLE Author_Book(ISBN CHAR(15),Author NUMBER,CONSTRAINT al_PK PRIMARY KEY (ISBN, Author),CONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA))CREATE TABLE Books_Order(ISBN CHAR(15),IdOrder CHAR(10),amount NUMBER(3) CHECK (amount >0),CONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),CONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,CONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade)']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of clients who have ordered Pride and Prejudice?[SQL]\nSELECT T1.name FROM client AS T1 JOIN orders AS T2 ON T1.idclient = T2.idclient JOIN books_order AS T3 ON T2.idorder = T3.idorder JOIN book AS T4 ON T3.isbn = T4.isbn WHERE T4.title  =  'Pride and Prejudice'
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, How many books are there?[SQL]\nSELECT count(*) FROM book
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the titles of books in ascending alphabetical order.[SQL]\nSELECT Title FROM book ORDER BY Title ASC
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the titles of books in descending order of pages.[SQL]\nSELECT title FROM book ORDER BY pages DESC
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the types and release dates of books?[SQL]\nSELECT TYPE ,  Release FROM book
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the maximum and minimum number of chapters for each book?[SQL]\nSELECT max(Chapters) ,  min(Chapters) FROM book
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles of books that are not "Poet"?[SQL]\n SELECT Title FROM book WHERE TYPE != 'Poet'
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average rating in reviews?[SQL]\nSELECT avg(Rating) FROM review
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles and ratings of books?[SQL]\nSELECT T2.title ,  T1.rating FROM review AS T1 JOIN book AS T2 ON T1.book_id  =  T2.book_id
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the rating of the book with the largest number of chapters?[SQL]\nSELECT T1.Rating FROM review AS T1 JOIN book AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Chapters DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the rank of the book with the smallest number of pages?[SQL]\nSELECT Rank FROM review AS T1 JOIN book AS T2 ON T1.book_id  =  T2.book_id ORDER BY T2.pages LIMIT 1
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the title of the book with the highest rank in the review?[SQL]\nSELECT T1.title FROM book AS T1 JOIN review AS T2 ON T1.book_id  =  T2.book_id ORDER BY rank DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average number of readers for books of type "Novel"?[SQL]\nSELECT avg(Readers_in_Million) FROM review WHERE book_id IN (SELECT book_id FROM book WHERE TYPE  =  "Novel")
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, For each book type return the type and the number of books of that type.[SQL]\nSELECT TYPE ,  COUNT(*) FROM book GROUP BY TYPE
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the most common type of books?[SQL]\nSELECT TYPE FROM book GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the types of books that have at least three books belonging to?[SQL]\nSELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the titles of books in ascending order of the ratings in review?[SQL]\nSELECT T1.title FROM book AS T1 JOIN review AS T2 ON T1.book_id  =  T2.book_id ORDER BY T2.rating ASC
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the title and audio length for all the books in descending order of the number of readers.[SQL]\nSELECT Title ,  Audio FROM book ORDER BY Audio DESC
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, How many books do not have reviews?[SQL]\nSELECT count(*) FROM book WHERE book_id NOT IN (SELECT book_id FROM review)
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.[SQL]\nSELECT TYPE FROM book WHERE Chapters  >  75 INTERSECT SELECT TYPE FROM book WHERE Chapters  <  50
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, How many distinct types of book are there?[SQL]\nSELECT count(DISTINCT TYPE) FROM book
### Database Schema\ n\n['CREATE TABLE "book" ("Book_ID" int,"Title" text,"Type" text,"Pages" int,"Chapters" int,"Audio" text,"Release" text,PRIMARY KEY ("Book_ID"))CREATE TABLE "review" ("Review_ID" int,"Book_ID" int,"Rating" real,"Readers_in_Million" real,"Rank" int,PRIMARY KEY ("Review_ID"),FOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the type and title of the books that are not rated?[SQL]\nSELECT TYPE ,  Title FROM book WHERE book_id NOT IN (SELECT book_id FROM review)
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, How many customers are there?[SQL]\nSELECT count(*) FROM customer
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of customers.[SQL]\nSELECT count(*) FROM customer
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of customers in ascending order of level of membership.[SQL]\nSELECT name FROM customer ORDER BY Level_of_Membership ASC
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Sort all the customers by the level of membership in ascending order, and return the customer names.[SQL]\nSELECT Name FROM customer ORDER BY Level_of_Membership ASC
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the nationalities and card credits of customers?[SQL]\nSELECT Nationality ,  Card_Credit FROM customer
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the nationality and card credit of each customer.[SQL]\nSELECT Nationality ,  Card_Credit FROM customer
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the names of customers with nationality "England" or "Australia".[SQL]\nSELECT Name FROM customer WHERE Nationality  =  "England" OR Nationality  =  "Australia"
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Which customers have nationality "England" or "Australia"? Give me their names.[SQL]\nSELECT Name FROM customer WHERE Nationality  =  "England" OR Nationality  =  "Australia"
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average card credit of customers with membership level higher than 1?[SQL]\nSELECT avg(card_credit) FROM customer WHERE Level_of_Membership  >  1
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the average card credit customers whose membership level is above 1.[SQL]\nSELECT avg(card_credit) FROM customer WHERE Level_of_Membership  >  1
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the card credit of the customer with the highest membership level?[SQL]\nSELECT Card_Credit FROM customer ORDER BY LEVEL_of_Membership DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the customer with the highest membership level and return his or her card credit.[SQL]\nSELECT Card_Credit FROM customer ORDER BY LEVEL_of_Membership DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show different nationalities of customers, along with the number of customers of each nationality.[SQL]\nSELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, How many customers are associated with each nationality? List the nationality and the number of customers.[SQL]\nSELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the most common nationality of customers.[SQL]\nSELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Which nationality does the most customers have?[SQL]\nSELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.[SQL]\nSELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Which nations have both customers with card credit above 50 and customers with card credit below 75.[SQL]\nSELECT Nationality FROM customer WHERE card_credit  >  50 INTERSECT SELECT Nationality FROM customer WHERE card_credit  <  75
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the names of customers and names of dishes they order.[SQL]\nSELECT T1.Name ,  T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID JOIN dish AS T3 ON T2.Dish_Name  =  T3.Dish_Name
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, For each order, return the customer name and the dish name.[SQL]\nSELECT T1.Name ,  T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID JOIN dish AS T3 ON T2.Dish_Name  =  T3.Dish_Name
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the names of customers and names of dishes they order, in descending order of the quantity of dish.[SQL]\nSELECT T1.name ,  T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id  =  T2.customer_id JOIN dish AS T3 ON T2.dish_name  =  T3.dish_name ORDER BY T2.quantity DESC
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.[SQL]\nSELECT T1.Name ,  T3.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID JOIN dish AS T3 ON T2.Dish_Name  =  T3.Dish_Name ORDER BY T2.Quantity DESC
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show each customer name and the total quantities of dishes ordered by that customer.[SQL]\nSELECT T1.Name ,  sum(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .[SQL]\nSELECT T1.Name ,  sum(T2.quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the customers with total quantity of order bigger than 1.[SQL]\nSELECT T1.name FROM customer AS T1 JOIN customer_order AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING sum(T2.quantity)  >  1
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Which customers have total order quantity greater than 1? Give me the customer names.[SQL]\nSELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Customer_ID HAVING SUM(T2.quantity)  >  1
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show distinct managers of branches.[SQL]\nSELECT DISTINCT manager FROM branch
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Who are the distinct managers of branches?[SQL]\nSELECT DISTINCT manager FROM branch
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of customers that do not have any order.[SQL]\nSELECT name FROM customer WHERE customer_id NOT IN (SELECT customer_id FROM customer_order)
### Database Schema\ n\n['CREATE TABLE "customer" ("Customer_ID" int,"Name" text,"Nationality" text,"Card_Credit" real,"Level_of_Membership" int,PRIMARY KEY ("Customer_ID"))CREATE TABLE "branch" ("Branch_ID" int,"Manager" text,"Years_opened" int,"Location_of_office" text,PRIMARY KEY ("Branch_ID"))CREATE TABLE "customer_order" ("Customer_ID" int,"Branch_ID" int,"Dish_Name" text,"Quantity" int,PRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),FOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),FOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Which customers do not have any order? Give me the customer names.[SQL]\nSELECT name FROM customer WHERE customer_id NOT IN (SELECT customer_id FROM customer_order)
### Database Schema\ n\n['CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, How many members are there?[SQL]\nSELECT count(*) FROM member
### Database Schema\ n\n['CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of members in ascending order of age.[SQL]\nSELECT Name FROM member ORDER BY Age ASC
### Database Schema\ n\n['CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and nationalities of the members?[SQL]\nSELECT Name ,  Nationality FROM member
### Database Schema\ n\n['CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of members whose nationality is not `` England '' .[SQL]\nSELECT Name FROM member WHERE Nationality != 'England'
### Database Schema\ n\n['CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the names of members whose age is either 19 or 20.[SQL]\nSELECT Name FROM member WHERE Age  =  19 OR Age  =  20
### Database Schema\ n\n['CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the oldest member?[SQL]\nSELECT Name FROM member ORDER BY Age DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show different nationalities along with the number of members of each nationality.[SQL]\nSELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality
### Database Schema\ n\n['CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Please show the most common nationality of members.[SQL]\nSELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the nations that have at least two members.[SQL]\nSELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the names of club leaders and the names of clubs they joined.[SQL]\nSELECT T2.Name ,  T1.year_join FROM club_leader AS T1 JOIN club AS T2 ON T1.club_id  =  T2.club_id
### Database Schema\ n\n['CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the names of club leaders of clubs with overall ranking higher than 100.[SQL]\nSELECT T2.Name FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN club AS T3 ON T1.Club_ID  =  T3.Club_ID WHERE T3.Overall_Ranking  >  100
### Database Schema\ n\n['CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the names of club leaders that joined their club before 2018.[SQL]\nSELECT T2.Name FROM club_leader AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN club AS T3 ON T1.Club_ID  =  T3.Club_ID WHERE T1.Year_Join  <  2018
### Database Schema\ n\n['CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the name of the leader of the club named "Houston".[SQL]\nSELECT t2.Name FROM club AS t1 JOIN club_leader AS t2 ON t1.Club_ID  =  t2.Club_ID WHERE t1.Club_Name  =  "Houston"
### Database Schema\ n\n['CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of members that are not club leaders.[SQL]\nSELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)
### Database Schema\ n\n['CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the nations that have both members older than 22 and members younger than 19.[SQL]\nSELECT Nationality FROM member WHERE age  >  22 INTERSECT SELECT Nationality FROM member WHERE age  <  19
### Database Schema\ n\n['CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average age of all the club leaders?[SQL]\nSELECT avg(T1.age) FROM member AS T1 JOIN club_leader AS T2 ON T1.Member_ID  =  T2.Member_ID
### Database Schema\ n\n['CREATE TABLE "member" ("Member_ID" int,"Name" text,"Nationality" text,"Age" int,PRIMARY KEY ("Member_ID"))CREATE TABLE "club" ("Club_ID" int,"Overall_Ranking" int,"Team_Leader" text,"Club_Name" text,PRIMARY KEY ("Club_ID"))CREATE TABLE "club_leader" ("Club_ID" int,"Member_ID" int,"Year_Join" text,PRIMARY KEY ("Club_ID","Member_ID"),FOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),FOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Which club name contains the string 'state'?[SQL]\nSELECT club_name FROM club WHERE club_name LIKE '%state%'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List all collections' subset. List the subsets' names.[SQL]\nSELECT t1.collection_subset_name FROM collection_subsets AS t1 JOIN collection_subset_members AS t2 ON t1.collection_subset_id  =  t2.collection_subset_id GROUP BY t2.collection_subset_id
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the collection susbset names?[SQL]\nSELECT collection_subset_name FROM collection_subsets
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is detail of collection subset with name 'Top collection'?[SQL]\nSELECT collecrtion_subset_details FROM collection_subsets WHERE collection_subset_name  =  'Top collection'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What collection details are there on the subset named 'Top collection'?[SQL]\nSELECT T1.collection_description FROM collections AS T1 JOIN collection_subset_members AS T2 ON T1.collection_id  =  T2.collection_id JOIN collection_subsets AS T3 ON T2.collection_subset_id  =  T3.collection_subset_id WHERE T3.collection_subset_name  =  'Top collection'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List all documents's subset. List the subset's name.[SQL]\nSELECT t1.Document_Subset_Name FROM Document_Subsets AS t1 JOIN Document_Subset_Members AS t2 ON t1.Document_Subset_ID  =  t2.Document_Subset_ID GROUP BY t1.Document_Subset_Name
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the document subset names?[SQL]\nSELECT Document_Subset_Name FROM Document_Subsets
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the detail of document subset with name 'Best for 2000'?[SQL]\nSELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name  =  'Best for 2000'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the details on the document subsets that are named 'Best for 2000'?[SQL]\nSELECT Document_Subset_Name ,  Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name  =  'Best for 2000'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List document id of all documents.[SQL]\nSELECT document_id FROM Documents
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the object id of the document objects?[SQL]\nSELECT document_object_id FROM document_objects
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the parent document of document owned by Marlin? List the document id.[SQL]\nSELECT T1.document_object_id FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.document_object_id  =  T2.related_document_object_id WHERE T1.Owner  =  "Marlin"
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the document object ids of the objects owned by Marlin?[SQL]\nSELECT document_object_id FROM document_objects WHERE Owner  =  'Marlin'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the owner of document with the Description 'Braeden Collection'?[SQL]\nSELECT Owner FROM Document_Objects WHERE Description  =  'Braeden Collection'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the owners of the document objects described as the 'Braeden Collection'?[SQL]\nSELECT T1.owner FROM Document_Objects AS T1 JOIN Documents_in_Collections AS T2 ON T1.document_object_id  =  T2.document_object_id JOIN Collections AS T3 ON T2.collection_id  =  T3.collection_id WHERE T3.collection_name  =  "Braeden Collection"
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the owner of the parent document of document owned by 'Marlin'?[SQL]\nSELECT T1.owner FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.document_object_id  =  T2.related_document_object_id JOIN Document_Subsets AS T3 ON T3.document_subset_id  =  T2.document_subset_id WHERE T3.Document_Subset_Name  =  "Parent" AND T1.description  =  "Marlin"
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Who is the owner of the parent document of every documents where 'Marlin' is the owner?[SQL]\nSELECT t1.owner FROM Document_Objects AS t1 JOIN Document_Subset_Members AS t2 ON t1.document_object_id  =  t2.related_document_object_id WHERE t1.owner  =  'Marlin'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the different descriptions of all the parent documents?[SQL]\nSELECT T1.Description FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID  =  T2.Document_Object_ID WHERE T1.Parent_Document_Object_ID  =  -1
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the unique description of every parent document?[SQL]\nSELECT T1.Description FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID  =  T2.Document_Object_ID WHERE T2.related_document_object_id  =  -1
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, How many documents owned by Marlin?[SQL]\nSELECT count(*) FROM Document_Objects WHERE Owner  =  'Marlin'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the count of documents owned by Marlin?[SQL]\nSELECT count(*) FROM Document_Objects WHERE Owner  =  'Marlin'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List all documents ids that are not the parent of other documents.[SQL]\nSELECT document_object_id FROM document_objects WHERE document_object_id NOT IN (SELECT parent_document_object_id FROM document_objects)
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of the documents that are not parent documents?[SQL]\nSELECT document_object_id FROM document_objects WHERE parent_document_object_id  =  \"null\"
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, How many child documents does each parent document has? List the document id and the number.[SQL]\nSELECT T1.document_object_id ,  count(*) FROM Document_objects AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id  =  T2.related_document_object_id GROUP BY T1.document_object_id
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the number of child documents for each parent document, and what are the ids of the parent documents?[SQL]\nSELECT T1.document_object_id ,  count(*) FROM Document_objects AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id  =  T2.related_document_object_id GROUP BY T1.document_object_id
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List the name of all collections.[SQL]\nSELECT collection_name FROM COLLECTIONS
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, what are the collection names?[SQL]\nSELECT collection_name FROM COLLECTIONS
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the description of collection named Best?[SQL]\nSELECT collection_description FROM COLLECTIONS WHERE collection_name  =  "Best"
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the collection descriptions that are named as 'Best'?[SQL]\n SELECT collection_description FROM collections WHERE collection_name  =  'Best'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the parent collection of the collection named Nice?[SQL]\nSELECT t1.collection_name FROM collections AS t1 JOIN documentsincollections AS t2 ON t1.collection_id  =  t2.collection_id WHERE t1.collection_name  =  "Nice"
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all parent collections of the collection named Nice?[SQL]\nSELECT T1.collection_name FROM Collections AS T1 JOIN documents_in_collections AS T2 ON T1.collection_id  =  T2.collection_id WHERE T2.document_object_id IN (SELECT document_object_id FROM Documents WHERE collection_name  =  'Nice' )
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which collection is not the parent of other collection? List the collection's name.[SQL]\nSELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT parent_collection_id FROM collections)
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the collections that are not the parent of the other collections?[SQL]\nSELECT collection_name FROM collections WHERE collection_id NOT IN (SELECT parent_collection_id FROM collections)
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List document that have more than one child. List the document id.[SQL]\nSELECT parent_document_object_id FROM document_objects GROUP BY parent_document_object_id HAVING count(*)  >  1
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of the documents that have more than one child?[SQL]\nSELECT document_object_id FROM document_subset_members GROUP BY document_object_id HAVING count(*)  >  1
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, How many child collection does the collection named Best has?[SQL]\nSELECT count(*) FROM Collections WHERE parent_collection_id IN ( SELECT collection_id FROM collections WHERE collection_name  =  "Best" )
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the number of child collections belonging to the collection named Best?[SQL]\nSELECT count(*) FROM Collections WHERE Parent_Collection_ID IN ( SELECT collection_id FROM Collections WHERE collection_name  =  "Best" )
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List all document which is related to document owned by Ransom . List the document id .[SQL]\nSELECT T1.Document_id FROM Document_objects AS T1 JOIN Document_subset_members AS T2 ON T1.document_object_id  =  T2.related_document_object_id WHERE T1.owner  =  'Ransom'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the document object ids of the related to the document owned by Ransom ?[SQL]\nSELECT T1.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID  =  T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T3.Document_Subset_ID  =  T2.Document_Subset_ID WHERE T1.Owner  =  'Ransom' AND T3.Document_Subset_Name  =  'Directly Related'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List collection subset id, name and number of collections in each subset.[SQL]\nSELECT T1.collection_subset_id ,  T1.collection_subset_name ,  count(*) FROM collection_subsets AS T1 JOIN collections AS T2 ON T1.collection_subset_id  =  T2.collection_subset_id GROUP BY T1.collection_subset_id
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the collection subset ids, names, and number of collections for each subset?[SQL]\nSELECT T1.collection_subset_id ,  T1.collection_subset_name ,  count(*) FROM collection_subsets AS T1 JOIN collections AS T2 ON T1.collection_subset_id  =  T2.collection_subset_id GROUP BY T1.collection_subset_id
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which document has most of child? List the document id and the number of child.[SQL]\nSELECT document_object_id ,  count(*) FROM document_objects GROUP BY document_object_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, For each document object id, how many children do they have?[SQL]\nSELECT document_object_id ,  count(*) FROM document_objects WHERE parent_document_object_id IS NOT NULL GROUP BY document_object_id ORDER BY count(*) DESC"
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which document has least number of related documents? List the document id and the number of related documents.[SQL]\nSELECT document_object_id ,  count(*) FROM Document_subset_members GROUP BY document_object_id ORDER BY count(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the document object id with the least number of documents ?[SQL]\nSELECT document_object_id FROM documents_in_collections GROUP BY document_object_id ORDER BY count(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which document has between 2 and 4 number of documents ? List the document id and the number of related documents .[SQL]\nSELECT t1.document_id ,  count(*) FROM Document_subset_members AS t1 JOIN Document_subsets AS t2 ON t1.document_subset_id  =  t2.document_subset_id GROUP BY t1.document_id HAVING count(*) BETWEEN 2 AND 4
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?[SQL]\nSELECT T1.document_object_id ,  count(*) FROM Document_subset_members AS T1 JOIN document_subsets AS T2 ON T1.document_subset_id  =  T2.document_subset_id WHERE T2.document_subset_name  =  'related' GROUP BY T1.document_object_id HAVING count(*) BETWEEN 2 AND 4
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List all owner of documents that is related to documents owned by Braeden.[SQL]\nSELECT T1.owner FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.document_object_id  =  T2.related_document_object_id WHERE T2.document_subset_id  =  (SELECT document_subset_id FROM document_subsets WHERE document_subset_name  =  'Braeden')
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the different owners of documents that are related to ones owned by Braeden?[SQL]\nSELECT DISTINCT T1.owner FROM Document_Objects AS T1 JOIN Document_Subset_Members AS T2 ON T1.document_object_id  =  T2.related_document_object_id JOIN Document_Subsets AS T3 ON T2.document_subset_id  =  T3.document_subset_id WHERE T3.Document_Subset_Name  =  "Braeden"
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which unique subset does document owned by Braeden belong to? List the subset name.[SQL]\nSELECT t3.Document_Subset_Name FROM Document_objects AS t1 JOIN document_subset_members AS t2 ON t1.document_object_id  =  t2.document_object_id JOIN document_subsets AS t3 ON t2.document_subset_id  =  t3.document_subset_id WHERE t1.owner  =  "Braeden"
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the different subset names of all documents owned by Braeden?[SQL]\nSELECT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID  =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.Owner  =  'Braeden'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List subset id, name and number of different documents in each subset.[SQL]\nSELECT T1.document_subset_id ,  T1.document_subset_name ,  count(DISTINCT T3.document_object_id) FROM document_subsets AS T1 JOIN document_subset_members AS T2 ON T1.document_subset_id  =  T2.document_subset_id JOIN document_objects AS T3 ON T2.related_document_object_id  =  T3.document_object_id GROUP BY T1.document_subset_id
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the subset id, name, and number of different documents for each subset?[SQL]\nSELECT T1.document_subset_id ,  T1.document_subset_name ,  count(DISTINCT T3.document_object_id) FROM document_subsets AS T1 JOIN document_subset_members AS T2 ON T1.document_subset_id  =  T2.document_subset_id JOIN document_objects AS T3 ON T2.document_object_id  =  T3.document_object_id GROUP BY T1.document_subset_id
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which document subset has most of number of distinct documents ? List subset id , name and number of documents .[SQL]\nSELECT t1.document_subset_id ,  t1.document_subset_name ,  count(*) FROM document_subsets AS t1 JOIN document_subset_members AS t2 ON t1.document_subset_id  =  t2.document_subset_id GROUP BY t1.document_subset_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?[SQL]\nSELECT T1.Document_Subset_ID ,  T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID  =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, For document subset named 'Best for 2000', List all document id that in this subset.[SQL]\nSELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =   (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name  =  'Best for 2000')
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, For the document subset named 'Best for 2000', what are the document ids in that subset?[SQL]\nSELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =   (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name  =  'Best for 2000')
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List all document subsets of documents that related to each document id. List the name of document subset and the document id.[SQL]\nSELECT T1.Document_Subset_Name ,  T2.document_id FROM Document_subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.document_subset_id  =  T2.document_subset_id WHERE T2.document_id  =  4
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?[SQL]\nSELECT T1.Document_Subset_Name ,  T2.Document_Subset_ID FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID  =  T2.Document_Subset_ID WHERE T2.Document_Object_ID  =  4
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List the Collection Name that document owned by 'Ransom ' belong to .[SQL]\nSELECT T1.collection_name FROM collections AS T1 JOIN documents_in_collections AS T2 ON T1.collection_id  =  T2.collection_id JOIN document_objects AS T3 ON T2.document_object_id  =  T3.document_object_id WHERE T3.owner  =  'Ransom'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the collection name of a document owned by 'Ransom'?[SQL]\nSELECT t3.collection_name FROM Document_Objects AS t1 JOIN documents_in_collections AS t2 ON t1.document_object_id  =  t2.document_object_id JOIN Collections AS t3 ON t2.collection_id  =  t3.collection_id WHERE t1.owner  =  "Ransom"
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, How many collections does each document belong to? List the count and the document id.[SQL]\nSELECT count(*) ,  T1.collection_id FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.collection_id  =  T2.collection_id GROUP BY T1.document_object_id
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, For each document object id, how many collections does it belong to?[SQL]\nSELECT count(*) FROM Documents_in_Collections GROUP BY Document_Object_ID
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, How many documents does collection named 'Best' has?[SQL]\nSELECT count(*) FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name  =  'Best'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the number of documents in the collection named 'Best'?[SQL]\nSELECT count(*) FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.collection_id  =  T2.collection_id WHERE T2.Collection_name  =  'Best'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List the document id of all documents in collection named Best.[SQL]\nSELECT t1.document_id FROM Documents_in_Collections AS t2 JOIN Document_Objects AS t1 ON t2.document_object_id  =  t1.document_object_id JOIN Collections AS t3 ON t3.collection_id  =  t2.collection_id WHERE t3.Collection_Name  =  "Best"
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the number of document object ids in the collection named Best?[SQL]\nSELECT COUNT (DISTINCT document_object_id) FROM Documents_in_Collections WHERE collection_id  =  (SELECT collection_id FROM Collections WHERE collection_name  =  "Best")
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which collection have most number of documents? List collection name, id and number of documents.[SQL]\nSELECT T1.collection_name ,  T1.collection_id ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.collection_id  =  T2.collection_id GROUP BY T1.collection_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?[SQL]\nSELECT T1.collection_name ,  T1.collection_id FROM COLLECTIONS AS T1 JOIN Documents_in_Collections AS T2 ON T1.collection_id  =  T2.collection_id WHERE T1.collection_name  =  "Best" GROUP BY T1.collection_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List id of documents that in document subset Best for 2000 and collection named Best.[SQL]\nSELECT T1.document_object_id FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.document_subset_id  =  T2.document_subset_id WHERE T2.document_subset_name  =  "Best" AND T1.year  =  2000 UNION SELECT T3.document_object_id FROM Collections AS T2 JOIN Documents_in_Collections AS T3 ON T2.collection_id  =  T3.collection_id WHERE T2.collection_name  =  "Best"
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?[SQL]\nSELECT T1.document_object_id FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.document_subset_id  =  T2.document_subset_id WHERE T2.document_subset_name  =  "Best for 2000" INTERSECT SELECT T3.document_object_id FROM Documents_in_Collections AS T3 JOIN Collections AS T4 ON T3.collection_id  =  T4.collection_id WHERE T4.collection_name  =  "Best"
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List id of documents that in collection named Best but not in document subset Best for 2000.[SQL]\nSELECT Document_Object_ID FROM Documents_in_Collections AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name  =  "Best" EXCEPT SELECT Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID  =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name  =  "Best" FOR 2000
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?[SQL]\nSELECT DO1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Objects AS DO1 ON T1.Document_Object_ID  =  DO1.Document_Object_ID JOIN Document_Subsets AS DS ON T1.Document_Subset_ID  =  DS.Document_Subset_ID WHERE DS.Document_Subset_Name  =  'Best for 2000' EXCEPT SELECT DO2.Document_Object_ID FROM Documents_in_Collections AS T2 JOIN Collection_subset_members AS T3 ON T2.collection_id  =  T3.collection_id JOIN Collections AS C1 ON T2.document_object_id  =  C1.collection_id JOIN Collection_Subsets AS CS ON T3.collection_subset_id  =  CS.collection_subset_id JOIN Document_
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List id of documents that in document subset Best for 2000 or in collection named Best.[SQL]\nSELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID  =   ( SELECT document_subset_id FROM document_subsets WHERE document_subset_name  =  'Best' ) OR Document_Object_ID IN ( SELECT document_object_id FROM collections WHERE collection_name  =  'Best' AND collection_description LIKE '%2000%' )
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?[SQL]\nSELECT T1.document_id FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.document_subset_id  =  T2.document_subset_id WHERE T2.document_subset_name  =  "Best for 2000" UNION SELECT T3.document_id FROM Documents_in_Collections AS T2 JOIN Collection_Subset_Members AS T3 ON T2.collection_id  =  T3.collection_id JOIN Collections AS T4 ON T4.collection_id  =  T2.collection_id WHERE T4.collection_name  =  "Best"
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, List all name of collections that are related to collection named Best.[SQL]\nSELECT T1.collection_name FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.collection_id  =  T2.collection_id JOIN Collection_Subsets AS T3 ON T2.collection_subset_id  =  T3.collection_subset_id WHERE T3.collecrtion_subset_name  =  "Best"'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the collections that are related to the collection named Best?[SQL]\nSELECT T1.collection_name FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.collection_id  =  T2.collection_id JOIN Collection_Subsets AS T3 ON T2.collection_subset_id  =  T3.collection_subset_id WHERE T3.collecrtion_subset_name  =  'Best'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, How many collections that are related to collection named Best?[SQL]\nSELECT count(*) FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.collection_id  =  T2.related_collection_id JOIN Collection_Subsets AS T3 ON T2.collection_subset_id  =  T3.collection_subset_id WHERE T3.Collection_Subset_Name  =  "Best"
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, How many different collections are related to the one named 'Best'?[SQL]\nSELECT COUNT(*) FROM Collections AS T1 JOIN Collection_Subset_Members AS T2 ON T1.collection_id  =  T2.collection_id JOIN Collection_Subsets AS T3 ON T3.collection_subset_id  =  T2.collection_subset_id WHERE T1.collection_name  =  'Best'
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, Which collection subset does collection name Best in? List collection subset name.[SQL]\nSELECT t1.collection_subset_name FROM collection_subsets AS t1 JOIN collections AS t2 ON t1.collection_subset_id  =  t2.collection_subset_id WHERE t2.collection_name  =  "Best"
### Database Schema\ n\n['CREATE TABLE Document_Subsets (Document_Subset_ID INTEGER NOT NULL,Document_Subset_Name VARCHAR(255) NOT NULL,Document_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Document_Subset_ID))CREATE TABLE Collection_Subsets (Collection_Subset_ID INTEGER NOT NULL,Collection_Subset_Name VARCHAR(255) NOT NULL,Collecrtion_Subset_Details VARCHAR(255) NOT NULL,PRIMARY KEY (Collection_Subset_ID))CREATE TABLE Document_Objects (Document_Object_ID INTEGER NOT NULL,Parent_Document_Object_ID INTEGER,Owner VARCHAR(255),Description VARCHAR(255),Other_Details VARCHAR(255),PRIMARY KEY (Document_Object_ID))CREATE TABLE Collections (Collection_ID INTEGER NOT NULL,Parent_Collection_ID INTEGER,Collection_Name VARCHAR(255),Collection_Description VARCHAR(255),PRIMARY KEY (Collection_ID))CREATE TABLE Documents_in_Collections (Document_Object_ID INTEGER NOT NULL,Collection_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Collection_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID))CREATE TABLE Document_Subset_Members (Document_Object_ID INTEGER NOT NULL,Related_Document_Object_ID INTEGER NOT NULL,Document_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),FOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),FOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects(Document_Object_ID),FOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID))CREATE TABLE Collection_Subset_Members (Collection_ID INTEGER NOT NULL,Related_Collection_ID INTEGER NOT NULL,Collection_Subset_ID INTEGER NOT NULL,PRIMARY KEY (Collection_ID, Related_Collection_ID),FOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),FOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the collection subsets that the collection named 'Best' in?[SQL]\nSELECT T1.collection_subset_name FROM collection_subsets AS T1 JOIN collections AS T2 ON T1.collection_subset_id  =  T2.collection_subset_id WHERE T2.collection_name  =  'Best'
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, How many songs contain "Love" in their names?[SQL]\nSELECT count(*) FROM songs WHERE name LIKE "%Love%"
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, List the name of the songs in ascending, lexicographical order.[SQL]\nSELECT name FROM songs ORDER BY name ASC
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, List the names and languages of the songs .[SQL]\nSELECT name ,  language FROM songs
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the maximum and minimum voice sound quality score of the performances?[SQL]\nSELECT max(voice_sound_quality) ,  min(voice_sound_quality) FROM performance_score
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?[SQL]\nSELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the id, language and original artist of the songs whose name is not 'Love'?[SQL]\nSELECT id ,  language ,  original_artist FROM songs WHERE name != 'Love'
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and original artists of the song whose English translation is 'All the streets of love'?[SQL]\nSELECT name ,  original_artist FROM songs WHERE english_translation  =  'All the streets of love'
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the distinct stage presence scores for all the songs that are in language 'English' ?[SQL]\nSELECT DISTINCT T1.stage_presence FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id  =  T2.id WHERE T2.language  =  'English'
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids and names of the participants who have performed at least two songs?[SQL]\nSELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id GROUP BY T1.id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids, names and popularity of the participants, order by the number of songs they perform?[SQL]\nSELECT T1.id ,  T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id GROUP BY T1.id ORDER BY count(*) DESC
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?[SQL]\nSELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id WHERE T2.voice_sound_quality  =  5 OR T2.rhythm_tempo  =  5
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?[SQL]\nSELECT T1.voice_sound_quality FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id  =  T2.id WHERE T2.name  =  'The Balkan Girls' AND T2.language  =  'English'
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the id and name of the song sung by the most participants?[SQL]\nSELECT T1.id ,  T1.name FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, How many performances have a stage presence score less than 7 or higher than 9?[SQL]\nSELECT count(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, How many songs listed are not performed?[SQL]\nSELECT count(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score )
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the average rhythm scores for the songs in each different language?[SQL]\nSELECT avg(rhythm_tempo) ,  language FROM songs GROUP BY language
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the distinct names of the participants who have sung a song in 'English'?[SQL]\nSELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id JOIN songs AS T3 ON T2.songs_id  =  T3.id WHERE T3.language  =  'English'
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?[SQL]\nSELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id JOIN songs AS T3 ON T2.songs_id  =  T3.id WHERE T3.language  =  'Croatian' INTERSECT SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.participant_id JOIN songs AS T3 ON T2.songs_id  =  T3.id WHERE T3.language  =  'English'
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Which song names have the substring "Is"?[SQL]\nSELECT name FROM songs WHERE name LIKE "%Is%"
### Database Schema\ n\n['CREATE TABLE "participants" ("id" int,"name" text,"popularity" real,primary key ("id"))CREATE TABLE "songs" ("id" int,"language" text,"original_artist" text,"name" text,"english_translation" text,primary key ("id"))CREATE TABLE "performance_score" ("participant_id" int,"songs_id" int,"voice_sound_quality" real,"rhythm_tempo" real,"stage_presence" real,primary key ("participant_id", "songs_id"),foreign key("participant_id") references `participants`("id"),foreign key("songs_id") references `songs`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality .[SQL]\nSELECT T1.original_artist FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T2.rhythm_tempo  >  5 ORDER BY T2.voice_sound_quality DESC
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, How many cities do we have?[SQL]\nSELECT count(*) FROM city
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of cities.[SQL]\n SELECT count(*) FROM city
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, List all different states .[SQL]\n\nSELECT DISTINCT state FROM city
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What are all the distinct states?[SQL]\nSELECT DISTINCT state FROM city
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, How many countries do we have?[SQL]\nSELECT count(DISTINCT country) FROM city
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of coutries.[SQL]\n SELECT count(DISTINCT country) FROM city
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show names, codes, states, countries for all cities.[SQL]\nSELECT city_name ,  city_code ,  state ,  country FROM city
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What are the names, codes, states, and countries for all cities?[SQL]\nSELECT city_name ,  city_code ,  state ,  country FROM city
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What is the latitude and longitude for Baltimore?[SQL]\nSELECT latitude ,  longitude FROM city WHERE city_name  =  "Baltimore"
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What latitude and longitude correspond to Baltimore?[SQL]\nSELECT latitude ,  longitude FROM city WHERE city_name  =  "Baltimore"
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show names for all cities in state PA.[SQL]\nSELECT city_name FROM city WHERE state  =  'PA'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all cities in PA?[SQL]\nSELECT city_name FROM City WHERE state  =  'PA'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, How many cities are in Canada?[SQL]\nSELECT count(*) FROM city WHERE country  =  'Canada'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of cities in Canada.[SQL]\n\nSELECT count(*) FROM city WHERE country  =  'Canada'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show names for all USA city ordered by latitude.[SQL]\nSELECT city_name FROM city WHERE country  =  'USA' ORDER BY latitude
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What are all the city names for cities in the USA, ordered by latitude?[SQL]\nSELECT city_name FROM city WHERE country  =  'USA' ORDER BY latitude
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show all states and number of cities in each state.[SQL]\nSELECT state ,  count(*) FROM city GROUP BY state
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, How many cities are in each state?[SQL]\nSELECT count(*) ,  state FROM city GROUP BY state
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show all countries and number of cities in each .[SQL]\n SELECT country ,  count(*) FROM city GROUP BY country
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, How many cities are there in each country?[SQL]\nSELECT count(*) ,  country FROM city GROUP BY country
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, List all states with at least two cities.[SQL]\nSELECT DISTINCT state FROM city GROUP BY state HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Which states have at least two cities?[SQL]\nSELECT DISTINCT state FROM city GROUP BY state HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Which state has most number of cities?[SQL]\nSELECT state FROM city GROUP BY state ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Give the state that has the most cities.[SQL]\nSELECT state FROM city GROUP BY state ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Which country has fewest number of cities?[SQL]\nSELECT country FROM city GROUP BY country ORDER BY count(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Give the country with the fewest number of cities.[SQL]\nSELECT country FROM city GROUP BY country ORDER BY count(*) LIMIT 1
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show the first name and the last name for students living in state MD.[SQL]\nSELECT Fname , Lname FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE state  =  'MD')
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What are the full names of students living in MD?[SQL]\nSELECT Fname ,  Lname FROM Student WHERE city_code  =  "MD"
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, How many students live in China?[SQL]\nSELECT count(*) FROM student WHERE city_code IN (SELECT city_code FROM city WHERE country  =  'China')
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of students living in China.[SQL]\n\nSELECT count(*) FROM Student WHERE city_code IN (SELECT city_code FROM city WHERE country  =  'China')
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Return the first name and major of students are living in Baltimore?[SQL]\nSELECT fname ,  major FROM Student WHERE city_code  =  'baltimore'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What are the first names and majors of students living in Baltimore?[SQL]\nSELECT fname ,  major FROM Student WHERE city_code  =  'baltimore'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show the number of students living in each country.[SQL]\nSELECT count(*) ,  country FROM student GROUP BY country
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, How many students live in each country?[SQL]\nSELECT count(*) ,  country FROM student GROUP BY country
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of students living in each city.[SQL]\nSELECT count(*) ,  city_code FROM Student GROUP BY city_code
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, How many students live in each city?[SQL]\nSELECT count(*) ,  city_name FROM Student AS T1 JOIN city AS T2 ON T1.city_code  =  T2.city_code GROUP BY T2.city_name
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Which state has most number of students?[SQL]\nSELECT state FROM student GROUP BY state ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Give the state that has the most students.[SQL]\nSELECT T1.state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Which country has least number of students?[SQL]\nSELECT T1.country FROM city AS T1 JOIN student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Give the country with the fewest students.[SQL]\nSELECT T1.country FROM city AS T1 JOIN student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show names for all cities where at least three students live.[SQL]\nSELECT DISTINCT T1.city_name FROM city AS T1 JOIN student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_name HAVING count(*)  >=  3
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of cities with at least three students?[SQL]\nSELECT T1.city_name FROM city AS T1 JOIN student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_name HAVING count(*)  >=  3
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show all states where more than 5 students live.[SQL]\nSELECT DISTINCT state FROM student GROUP BY state HAVING count(*)  >  5
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What are the states with more than 5 students?[SQL]\nSELECT T1.state FROM student AS T1 JOIN city AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show ids for all students who don't live in USA.[SQL]\nSELECT StuID FROM Student EXCEPT SELECT StuID FROM Student WHERE city_code IN (SELECT city_code FROM city WHERE country != 'USA')
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What the the student ids for students not living in the USA?[SQL]\nSELECT StuID FROM Student WHERE city_code != '860'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show ids for all female (sex is F) students living in state PA.[SQL]\nSELECT StuID FROM Student WHERE sex  =  'F' AND city_code IN (SELECT city_code FROM City WHERE state  =  'PA')
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What are the student ids for female students in the state of PA?[SQL]\nSELECT StuID FROM Student WHERE sex  =  'F' AND city_code IN (SELECT city_code FROM city WHERE state  =  'PA')
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show ids for all male students living outside of USA.[SQL]\nSELECT StuID FROM Student WHERE sex  =  'M' AND city_code != 'USA'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids for male students not in the USA?[SQL]\nSELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Student WHERE country != 'USA'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What is the distance between BAL and CHI?[SQL]\nSELECT distance FROM direct_distance WHERE city1_code  =  'BAL' AND city2_code  =  'CHI'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Give the distance between BAL and CHI?[SQL]\nSELECT distance FROM direct_distance WHERE city1_code  =  'BAL' AND city2_code  =  'CHI'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show me the distance between Boston and Newark.[SQL]\nSELECT distance FROM direct_distance WHERE city1_code  =  'Boston' AND city2_code  =  'Newark'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What is the distance between Boston and Newark?[SQL]\nSELECT distance FROM direct_distance WHERE city1_code  =  'Boston' AND city2_code  =  'Newark'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What is the average, minimum, maximum distance between two cities?[SQL]\nSELECT avg(distance) ,  min(distance) ,  max(distance) FROM direct_distance
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Give the average, minimum, and maximum distances between two cities.[SQL]\nSELECT avg(distance) ,  min(distance) ,  max(distance) FROM direct_distance
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show me the city code of two cities with maximum distance.[SQL]\nSELECT city1_code FROM direct_distance UNION SELECT city2_code FROM direct_distance ORDER BY distance DESC LIMIT 2'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What are the city codes of the cities with the maximum distance?[SQL]\nSELECT city1_code FROM direct_distance ORDER BY distance DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show me the city code of two cities with a distance greater than the average.[SQL]\nSELECT city1_code FROM direct_distance WHERE distance  >  (SELECT avg(distance) FROM direct_distance) UNION SELECT city2_code FROM direct_distance WHERE distance  >  (SELECT avg(distance) FROM direct_distance)
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What are the city codes of cities with distance greater than average?[SQL]\nSELECT city1_code FROM direct_distance WHERE distance  >  (SELECT avg(distance) FROM direct_distance) UNION SELECT city2_code FROM direct_distance WHERE distance  >  (SELECT avg(distance) FROM direct_distance)
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show me the city code of two cities with a distance less than 1000.[SQL]\nSELECT city1_code FROM direct_distance WHERE distance  <  1000 UNION SELECT city2_code FROM direct_distance WHERE distance  <  1000
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What are the city codes corresponding to cities with distances less than 1000?[SQL]\nSELECT city1_code FROM direct_distance WHERE distance  <  1000 UNION SELECT city2_code FROM direct_distance WHERE distance  <  1000
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What is the total distance between city BAL and all other cities.[SQL]\nSELECT sum(distance) FROM direct_distance WHERE city1_code  =  'BAL'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What is the sum of distances between BAL and other cities?[SQL]\nSELECT sum(T1.distance) FROM direct_distance AS T1 JOIN city AS T2 ON T1.city2_code  =  T2.city_code WHERE T2.city_name  =  'BAL'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What is the average distance between Boston and all other cities.[SQL]\nSELECT avg(distance) FROM direct_distance WHERE city1_code  =  'BSN'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Give the average distance between Boston and other cities.[SQL]\n\nSELECT avg(distance) FROM direct_distance WHERE city1_code  =  '247'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the city closest to Chicago?[SQL]\nSELECT city_name FROM city WHERE city_name != 'Chicago' AND distance  =  (SELECT min(distance) FROM direct_distance WHERE city1_code != 'Chicago')
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Give the name of the nearest city to Chicago.[SQL]\n\nSELECT city_name FROM city WHERE city_code IN ( SELECT city_code FROM direct_distance WHERE city_code  =  'CHI' ORDER BY distance LIMIT 1 )
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the city furthest to Boston?[SQL]\nSELECT city_name FROM city WHERE city_code != 'bos' ORDER BY distance DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Give the city name of the city with greatest distance from Boston.[SQL]\nSELECT city_name FROM city WHERE city_code NOT IN (SELECT city1_code FROM direct_distance WHERE city2_code  =  'BSN') ORDER BY distance DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show all city codes and the total distance to all other cities.[SQL]\nSELECT city_code ,  sum(distance) FROM direct_distance GROUP BY city_code
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, For each city, what is the the city code and sum of distances from each?[SQL]\nSELECT city1_code ,  sum(distance) FROM direct_distance GROUP BY city1_code
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Show all city names and the average distance to all other cities.[SQL]\nSELECT city_name ,  avg(distance) FROM direct_distance GROUP BY city_name
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What are the city name and average distances from each city?[SQL]\nSELECT T1.city_name ,  avg(T2.distance) FROM city AS T1 JOIN direct_distance AS T2 ON T1.city_code  =  T2.city1_code GROUP BY T2.city1_code
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?[SQL]\nSELECT distance FROM direct_distance WHERE city1_code  =  (SELECT city_code FROM student WHERE firstname  =  'Linda' AND lastname  =  'Smith') AND city2_code  =  (SELECT city_code FROM student WHERE firstname  =  'Tracy' AND lastname  =  'Kim')
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What is the distance between the cities where Linda Smith and Tracy Kim live?[SQL]\nSELECT T1.distance FROM direct_distance AS T1 JOIN city AS T2 ON T1.city1_code  =  T2.city_code JOIN city AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  (SELECT LName FROM student WHERE Fname  =  "Linda") AND T3.city_name  =  (SELECT LName FROM student WHERE Fname  =  "Tracy")
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What is the first name and last name of the student living furthest to Linda Smith?[SQL]\nSELECT fname ,  lname FROM Student WHERE city_code IN (SELECT city_code FROM Student WHERE fname  =  "Linda" AND lname  =  "Smith") ORDER BY distance DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, What is the full name of the student who lives furthest from Linda Smith?[SQL]\nSELECT fname ,  lname FROM Student WHERE city_code IN ( SELECT city_code FROM Student WHERE fname  =  "Linda" AND lname  =  "Smith") ORDER BY distance DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Which state does the student whose first name is Linda live in?[SQL]\nSELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.fname  =  'Linda'
### Database Schema\ n\n['CREATE TABLE Student (        StuID        INTEGER PRIMARY KEY,        LName        VARCHAR(12),        Fname        VARCHAR(12),        Age      INTEGER,        Sex      VARCHAR(1),        Major        INTEGER,        Advisor      INTEGER,        city_code    VARCHAR(3),        FOREIGN KEY(city_code) REFERENCES City(city_code) )CREATE TABLE Direct_distance (  city1_code varchar(3) ,  city2_code varchar(3) ,  distance INTEGER,  FOREIGN KEY(city1_code) REFERENCES City(city_code),  FOREIGN KEY(city2_code) REFERENCES City(city_code)  )CREATE TABLE City (       city_code  	VARCHAR(3) PRIMARY KEY,       city_name  	VARCHAR(25),       state		VARCHAR(2),       country		VARCHAR(25),       latitude		FLOAT,       longitude	FLOAT)']\n\n\n### Task \n\nBased on the provided database schema information, Give the state that the student with first name Linda lives in.[SQL]\nSELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.fname  =  'Linda'
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Return all details of sailors who are older than 30.[SQL]\nSELECT * FROM Sailors WHERE age  >  30
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What can you tell me about sailors who are older than age 30?[SQL]\nSELECT name FROM sailors WHERE age  >  30
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Return name and age for sailors who are younger than 30.[SQL]\nSELECT name ,  age FROM Sailors WHERE age  <  30
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name and age of every sailor who is younger than age 30?[SQL]\nSELECT name ,  age FROM Sailors WHERE age  <  30
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find boats reserved by Sailor with id 1.[SQL]\nSELECT T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid JOIN Sailors AS T3 ON T1.sid  =  T3.sid WHERE T3.id  =  1
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the different boat ids reserved by the sailor whose id is 1?[SQL]\nSELECT DISTINCT T1.bid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T2.name  =  "adam"
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Who reserved boat 102?[SQL]\nSELECT DISTINCT sid FROM Reserves WHERE bid  =  102
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the sailor who reserved boat 102?[SQL]\nSELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Return the unique boat ids (bid) of all reserved boats.[SQL]\nSELECT DISTINCT bid FROM Reserves
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of all boats that are reserved by someone?[SQL]\nSELECT DISTINCT bid FROM Reserves
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of sailors whose names contain letter e?[SQL]\nSELECT name FROM sailors WHERE name LIKE '%e%'
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of every sailor whose name contains the letter e?[SQL]\nSELECT name FROM sailors WHERE name LIKE '%e%'
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, return the unique ids of sailors who are older than any sailors.[SQL]\nSELECT sid FROM sailors WHERE age  >  (SELECT max(age) FROM sailors)
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is the different id of every sailor who is not the youngest?[SQL]\nSELECT DISTINCT sid FROM sailors WHERE rating != (SELECT min(rating) FROM sailors)
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Return the unique names of sailors who are older than any sailors whose rating is larger than 7.[SQL]\nSELECT DISTINCT name FROM sailors WHERE age  >  (SELECT min(age) FROM sailors WHERE rating  >  7)
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the different names of sailors who are older than some other sailor with a rating larger than 7?[SQL]\nSELECT name FROM sailors WHERE age  >  (SELECT max(age) FROM sailors WHERE rating  >  7)
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name and id of the sailors who reserved at least one boat?[SQL]\nSELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T1.sid HAVING count(*)  >=  1
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name and id of every sailor who reserved one or more boats?[SQL]\nSELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid'
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the id and name of the sailors who reserved more than one boat.[SQL]\nSELECT T1.sid ,  T2.name FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid GROUP BY T1.sid HAVING count(*)  >  1
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the different names of sailors who reserved two or more boats ?[SQL]\n SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T1.name HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the id of Sailors (sid) that reserved red or blue boat.[SQL]\nSELECT t1.sid FROM Reserves AS t1 JOIN Boats AS t2 ON t1.bid  =  t2.bid WHERE t2.color  =  "red" OR t2.color  =  "blue"
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the sids for sailors who reserved red or blue boats?[SQL]\nSELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color  =  'Red' OR color  =  'Blue')
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name and id of Sailors (sid) that reserved red or blue boat.[SQL]\n\nSELECT T2.name ,  T1.sid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T1.bid IN (SELECT T3.bid FROM Boats AS T3 WHERE T3.color  =  "red" OR T3.color  =  "blue")
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and ids of sailors who reserved red or blue boats?[SQL]\nSELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid IN (SELECT T3.bid FROM Boats AS T3 WHERE T3.color  =  'red' UNION SELECT T4.bid FROM Boats AS T4 WHERE T4.color  =  'blue')
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the id of Sailors (sid) that reserved red and blue boat.[SQL]\nSELECT t1.sid FROM Reserves AS t1 JOIN Boats AS t2 ON t1.bid  =  t2.bid WHERE t2.color  =  "red" INTERSECT SELECT t1.sid FROM Reserves AS t1 JOIN Boats AS t2 ON t1.bid  =  t2.bid WHERE t2.color  =  "blue"
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of sailors who reserved red and blue boats?[SQL]\nSELECT t1.sid FROM Reserves AS t1 JOIN Boats AS t2 ON t1.bid  =  t2.bid WHERE t2.color  =  "red" INTERSECT SELECT t1.sid FROM Reserves AS t1 JOIN Boats AS t2 ON t1.bid  =  t2.bid WHERE t2.color  =  "blue"
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name and id of Sailors (sid) that reserved red and blue boat.[SQL]\n\nSELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid IN (SELECT bid FROM boats WHERE color  =  'red' ) OR T2.bid IN (SELECT bid FROM boats WHERE color  =  'blue' )
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and ids of sailors who reserved red and blue boats?[SQL]\nSELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid IN (SELECT id FROM Boats WHERE name  =  'red' OR name  =  'blue')
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is the ids of sailors that haven’t reserved a boat?[SQL]\nSELECT sid FROM sailors EXCEPT SELECT sid FROM reserves
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of sailors who have not reserved a boat?[SQL]\nSELECT sid FROM sailors EXCEPT SELECT sid FROM reserves
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, what is the name and id of sailors who do not have a reservation of a boat?[SQL]\nSELECT name ,  sid FROM sailors WHERE sid NOT IN (SELECT sid FROM reserves)
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and ids of all sailors who do not have boat reservations?[SQL]\nSELECT name ,  sid FROM sailors EXCEPT SELECT T1.name ,  T1.sid FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid  =  T2.sid
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find id for the sailors who do not have a reservation of a boat?[SQL]\nSELECT sid FROM sailors EXCEPT SELECT sid FROM reserves
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is id about sailors who do not have boat reservations?[SQL]\nSELECT sid FROM sailors EXCEPT SELECT sid FROM reserves
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the sailors who reserved boat with id 103?[SQL]\nSELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  103
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of the sailors who reserved boat with id 103.[SQL]\n SELECT T2.name FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T1.bid  =  103
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of all sailors whose rating is higher than any sailor named Luis?[SQL]\nSELECT name FROM sailors WHERE rating  >  (SELECT max(rating) FROM sailors WHERE name  =  "Luis")
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the sailors' names, the ones whose rating is higher than any sailor named Luis?[SQL]\n SELECT name FROM sailors WHERE rating  >  (SELECT max(rating) FROM sailors WHERE name  =  "Luis")
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of all sailors whose rating is higher than all sailors named Luis?[SQL]\nSELECT name FROM sailors WHERE rating  >  (SELECT max(rating) FROM sailors WHERE name  =  "Luis")
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all sailors with a higher rating than every sailor named Luis?[SQL]\nSELECT name FROM sailors WHERE rating  >  (SELECT max(rating) FROM sailors WHERE name  =  "Luis")
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.[SQL]\nSELECT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T1.rating  >  2
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?[SQL]\nSELECT T2.name ,  T1.sid FROM Reserves AS T1 JOIN Sailors AS T2 ON T1.sid  =  T2.sid WHERE T2.rating  >=  3
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name and age of the oldest sailor.[SQL]\n SELECT name ,  age FROM Sailors ORDER BY age DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name and age of the sailor with maximum age?[SQL]\nSELECT name ,  age FROM Sailors ORDER BY age DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, how many sailors in total?[SQL]\nSELECT count(*) FROM sailors
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, How many sailors exist?[SQL]\n SELECT count(*) FROM sailors
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average age of sailors whose rating is 7?[SQL]\nSELECT avg(age) FROM sailors WHERE rating  =  7
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is average age of all sailors who have a rating of 7?[SQL]\nSELECT avg(age) FROM Sailors WHERE rating  =  7
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, How many sailors whose name starts with letter D exist ?[SQL]\nSELECT count(*) FROM sailors WHERE name LIKE 'D%'
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is the count of the sailors whose name starts with letter D ?[SQL]\nSELECT COUNT(*) FROM SAILORS WHERE name LIKE 'D%'
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the average rating and max age of all sailors?[SQL]\nSELECT avg(rating) ,  max(age) FROM Sailors
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the average rating and largest age for the sailors[SQL]\n\nSELECT avg(rating) ,  max(age) FROM Sailors
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of reservations for each boat.[SQL]\nSELECT count(*) ,  T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid GROUP BY T1.name
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, How many reservations exist for each boat?[SQL]\nSELECT count(*) ,  T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid GROUP BY T1.name
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of reservations for each boat with id greater than 50.[SQL]\nSELECT count(*) ,  bid FROM Reserves WHERE bid  >  50 GROUP BY bid
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, How many reservations exist for each boat with an id greater than 50?[SQL]\nSELECT count(*) ,  T1.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid WHERE T2.bid  >  50 GROUP BY T1.bid
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of reservations for each boat with more than 1 reservation.[SQL]\nSELECT count(*) ,  T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid GROUP BY T1.name HAVING count(*)  >  1
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, How many reservations exist for each boat that has more than 1 reservation already?[SQL]\nSELECT count(*) ,  T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid GROUP BY T1.name HAVING count(*)  >  1
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of reservations by sailors with id greater than 1 for each boat.[SQL]\nSELECT count(*) ,  T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid WHERE T1.sid  >  1 GROUP BY T2.name
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, How many reservations for each boat did the sailors with an id greater than 1 make?[SQL]\nSELECT count(*) ,  T2.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid WHERE T1.sid  >  1 GROUP BY T2.name
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is the rating and average age for sailors who have reserved red boat grouped by rating?[SQL]\nSELECT T1.rating ,  avg(T2.age) FROM sailors AS T1 JOIN reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  1 GROUP BY T1.rating
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the rating and average age for sailors who reserved red boats for each rating?[SQL]\nSELECT T1.rating ,  AVG (T2.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T2.bid  =  T3.bid WHERE T3.color  =  'red' GROUP BY T1.rating
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name, rating and age of all sailors ordered by rating and age.[SQL]\nSELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name, rating, and age for every sailor? And order them by rating and age.[SQL]\nSELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the total number of boats.[SQL]\nSELECT count(*) FROM Boats
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, How many boats are there?[SQL]\nSELECT count(*) FROM Boats
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, How many boats are red?[SQL]\nSELECT count(*) FROM Boats WHERE color  =  'red'
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, How many red boats exist?[SQL]\nSELECT count(*) FROM Boats WHERE color  =  'red'
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the names of boats booked by sailors whose age is between 20 and 30.[SQL]\nSELECT T1.name FROM boats AS T1 JOIN reserves AS T2 ON T1.bid  =  T2.bid JOIN sailors AS T3 ON T2.sid  =  T3.sid WHERE T3.age BETWEEN 20 AND 30
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the boats booked by people between age 20 and 30?[SQL]\nSELECT T1.name FROM Reserves AS T1 JOIN Boats AS T2 ON T1.bid  =  T2.bid JOIN Sailors AS T3 ON T1.sid  =  T3.sid WHERE T3.age BETWEEN 20 AND 30
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.[SQL]\n\nSELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T2.bid  =  T3.bid WHERE T3.color  =  'red' AND T1.rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T2.bid  =  T3.bid WHERE T3.color  =  'red')
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?[SQL]\nSELECT name FROM sailors WHERE rating  >  (SELECT max(t1.rating) FROM reserves AS T1 JOIN boats AS T2 ON T1.bid  =  T2.bid WHERE T2.color  =  "Red")
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is highest rating between sailors?[SQL]\nSELECT max(rating) FROM Sailors
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What is the maximum rating for sailors?[SQL]\nSELECT max(rating) FROM Sailors
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, Find the names of sailors who reserved boat with the name Melon.[SQL]\n\nSELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of sailors who reserved a boat with the name Melon?[SQL]\nSELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, List the names and ages of all sailors sorted by rating in descending order.[SQL]\nSELECT name ,  age FROM Sailors ORDER BY rating DESC
### Database Schema\ n\n['CREATE TABLE Sailors (sid INTEGER primary key,name TEXT,rating INTEGER,age INTEGER)CREATE TABLE Boats (  bid INTEGER primary key,  name TEXT,  color TEXT)CREATE TABLE Reserves (  sid INTEGER,  bid INTEGER,  day TEXT,  foreign key (sid) references Sailors(sid),  foreign key (bid) references Boats(bid))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and ages of all sailors sorted by decreasing rating?[SQL]\nSELECT name ,  age FROM Sailors ORDER BY rating DESC
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the model of the most expensive headphone.[SQL]\nSELECT Model FROM headphone ORDER BY Price DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which headphone model has the highest price?[SQL]\nSELECT model FROM headphone ORDER BY price DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List all different headphone models in the alphabetical order.[SQL]\nSELECT Model FROM headphone ORDER BY Model ASC
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Return the list of distinct headphone models ordered alphabetically.[SQL]\nSELECT DISTINCT Model FROM headphone ORDER BY Model ASC
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which headphone class is the most common one?[SQL]\nSELECT CLASS FROM headphone GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which headphone class contains the most headphones?[SQL]\nSELECT CLASS FROM headphone GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which headphone class does have more than two headphones?[SQL]\nSELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the headphone class that does not contain more than two headphones.[SQL]\nSELECT Class FROM headphone GROUP BY Class HAVING count(*)  <=  2
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of headphones with a price higher than 200 for each class.[SQL]\nSELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many headphones cost more than 200 for each headphone class?[SQL]\nSELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, how many different earpads are there?[SQL]\nSELECT count(DISTINCT Earpads) FROM headphone
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of different earpads.[SQL]\nSELECT count(DISTINCT Earpads) FROM headphone
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the top 2 earpads that are mostly used.[SQL]\nSELECT Earpads FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the top 2 earpads in terms of the number of headphones using them?[SQL]\nSELECT Earpads ,  COUNT(*) FROM headphone GROUP BY Earpads ORDER BY COUNT(*) DESC LIMIT 2
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the model, class, and construction of the cheapest headphone?[SQL]\nSELECT Model ,  CLASS ,  Construction FROM headphone ORDER BY price LIMIT 1
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the model, class, and construction of the headphone with the lowest price.[SQL]\nSELECT Model ,  CLASS ,  Construction FROM headphone ORDER BY Price ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the average price for each headphone construction.[SQL]\nSELECT avg(price) ,  Construction FROM headphone GROUP BY Construction
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How much does headphones cost on average for each headphone construction?[SQL]\nSELECT avg(price) ,  CONSTRUCTION FROM headphone GROUP BY CONSTRUCTION
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which headphone classes have both headphones with "Bowls" and headphones with "Comfort Pads" earpads?[SQL]\nSELECT DISTINCT T1.class FROM headphone AS T1 JOIN headphone AS T2 ON T1.Headphone_ID != T2.Headphone_ID WHERE T1.Earpads  =  "Bowls" AND T2.Earpads  =  "Comfort Pads"
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the headphone classes that contain both headphones using "Bowls" earpads and headphones using "Comfort Pads" earpads.[SQL]\nSELECT DISTINCT class FROM headphone WHERE Earpads  =  "Bowls" INTERSECT SELECT DISTINCT class FROM headphone WHERE Earpads  =  "Comfort Pads"'
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which earpads never use plastic construction?[SQL]\nSELECT Earpads FROM headphone EXCEPT SELECT Construction FROM headphone WHERE Construction  =  'Plastic'
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find all earpads that do not use plastic construction.[SQL]\nSELECT Earpads FROM headphone WHERE Construction != 'Plastic'
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the headphone models whose price is below the average price.[SQL]\nSELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the headphone models that cost less than the average price?[SQL]\nSELECT Model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Sort all store names by store open date.[SQL]\nSELECT name FROM store ORDER BY date_opened
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Give me a list of store names, sorted by store open date.[SQL]\nSELECT name FROM store ORDER BY date_opened
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List name and parking info for the stores in the Tarzana neighborhood.[SQL]\nSELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which stores are located in the "Tarzana" neighborhood? Return their names and parking information.[SQL]\nSELECT t1.name ,  t1.parking FROM store AS t1 JOIN neighborhood AS t2 ON t1.neighborhood  =  t2.neighborhood WHERE t2.name  =  "Tarzana"
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many different neighborhoods are there for all stores?[SQL]\nSELECT count(DISTINCT neighborhood) FROM store
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of distinct neighborhoods stores are located.[SQL]\nSELECT count(DISTINCT Neighborhood) FROM store
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, find the number of stores in each neighborhood.[SQL]\n SELECT count(*) ,  Neighborhood FROM store GROUP BY Neighborhood
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many stores are there in each neighborhood?[SQL]\nSELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of the store which has the most headphones in stock. List the number of headphones as well.[SQL]\nSELECT T2.name ,  count(*) FROM stock AS T1 JOIN headphone AS T2 ON T1.headphone_id  =  T2.headphone_id GROUP BY T1.store_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which store has the headphones in stock? Give me the store name and the total quantity.[SQL]\nSELECT T1.name ,  sum(T2.quantity) FROM store AS T1 JOIN stock AS T2 ON T1.store_id  =  T2.store_id JOIN headphone AS T3 ON T2.headphone_id  =  T3.headphone_id GROUP BY T1.store_id
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of stores which have no headphone in stock.[SQL]\nSELECT Name FROM store WHERE Store_ID NOT IN (SELECT Store_ID FROM stock)
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which stores do not have any headphones in stock? Give me the store names.[SQL]\nSELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which headphone models do not have any stock in any store?[SQL]\nSELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the headphone models that are not in stock in any store.[SQL]\nSELECT Model FROM headphone WHERE Headphone_ID NOT IN (SELECT Headphone_ID FROM stock)
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which headphone model has the largest quantity of stock across all the stores?[SQL]\nSELECT T1.model FROM headphone AS T1 JOIN stock AS T2 ON T1.headphone_id  =  T2.headphone_id GROUP BY T2.headphone_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the headphone model whose total quantity in stock is the largest.[SQL]\nSELECT T1.model FROM headphone AS T1 JOIN stock AS T2 ON T1.headphone_id  =  T2.headphone_id GROUP BY T1.headphone_id ORDER BY sum(T2.quantity) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many headphones are stored in the Woodman store?[SQL]\nSELECT count(*) FROM stock AS T1 JOIN headphone AS T2 ON T1.headphone_id  =  T2.headphone_id JOIN store AS T3 ON T1.store_id  =  T3.store_id WHERE T3.name  =  'Woodman'
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the total quantity of headphones stored in the Woodman store.[SQL]\nSELECT sum(t3.quantity) FROM stock AS t3 JOIN headphone AS t1 ON t3.headphone_id  =  t1.headphone_id JOIN store AS t2 ON t2.store_id  =  t3.store_id WHERE t2.name  =  'Woodman'
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which neighborhood does not have any headphone in stock?[SQL]\n SELECT T2.neighborhood FROM stock AS T1 JOIN store AS T2 ON T1.store_id  =  T2.store_id GROUP BY T2.neighborhood HAVING sum(T1.quantity)  =  0
### Database Schema\ n\n['CREATE TABLE "headphone" ("Headphone_ID" int,"Model" text,"Class" text,"Driver-matched_dB" real,"Construction" text,"Earpads" text,"Price" int,PRIMARY KEY ("Headphone_ID"))CREATE TABLE "store" ("Store_ID" int,"Name" text,"Neighborhood" text,"Parking" text,"Date_Opened" text,PRIMARY KEY ("Store_ID"))CREATE TABLE "stock" ("Store_ID" int,"Headphone_ID" int,"Quantity" int,PRIMARY KEY ("Store_ID","Headphone_ID"),FOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),FOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the neighborhood where no headphones are in stock.[SQL]\n SELECT T2.neighborhood FROM stock AS T1 JOIN store AS T2 ON T1.store_id  =  T2.store_id EXCEPT SELECT T2.neighborhood FROM headphone AS T1 JOIN stock AS T2 ON T1.headphone_id  =  T2.headphone_id
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, How many authors do we have?[SQL]\nSELECT count(*) FROM author
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of authors.[SQL]\n SELECT count(*) FROM author
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, How many papers do we have?[SQL]\nSELECT DISTINCT COUNT ( DISTINCT paper_id ) FROM paper
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of papers.[SQL]\n SELECT DISTINCT COUNT ( paper_id ) FROM paper
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, How many affiliations do we have?[SQL]\nSELECT count(*) FROM Affiliation
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of affiliations.[SQL]\n SELECT count(*) FROM Affiliation
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, How many papers do we have in NAACL 2000?[SQL]\nSELECT COUNT ( DISTINCT paper_id ) FROM paper WHERE venue  =  "NAACL 2000"
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of papers in NAACL 2000.[SQL]\nSELECT DISTINCT COUNT ( t1.paper_id ) FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id WHERE t1.venue  =  "NAACL" AND t1.year  =  2000
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, How many papers are published in year 2009 by Columbia University?[SQL]\nSELECT COUNT ( DISTINCT t3.paper_id ) FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  "Columbia University" AND t3.year  =  2009
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of papers published by Columbia University in 2009.[SQL]\nSELECT COUNT ( DISTINCT t3.paper_id ) FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  "Columbia University" AND t3.year  =  2009
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, List names and addresses for all affiliations.[SQL]\nSELECT name ,  address FROM Affiliation
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and addresses for all affiliations?[SQL]\nSELECT name ,  address FROM Affiliation
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, List all venues and years for papers ordered by year.[SQL]\nSELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the distinct venues for papers, ordered by year?[SQL]\nSELECT DISTINCT venue FROM paper ORDER BY YEAR
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the titles and paper IDs for papers written by Harvard University.[SQL]\nSELECT DISTINCT t3.title  ,  t3.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id JOIN affiliation AS t4 ON t2.affiliation_id  =  t4.affiliation_id WHERE t4.name  =  "Harvard University"";
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles and paper ids for papers written in affiliation with Harvard University?[SQL]\nSELECT DISTINCT t1.title  ,  t3.paper_id FROM paper AS t1 JOIN author_list AS t2 ON t1.paper_id  =  t2.paper_id JOIN affiliation AS t3 ON t2.affiliation_id  =  t3.affiliation_id WHERE t3.name  =  "Harvard University";
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Find all papers with titles and paper IDs written by Mckeown.[SQL]\nSELECT DISTINCT t3.title ,  t3.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =  t2.paper_id WHERE t1.name  =  "Mckeown";
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles and paper ids for papers written by Mckeown?[SQL]\nSELECT DISTINCT t3.paper_id ,  t3.title FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  "Mckeown";
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.[SQL]\nSELECT DISTINCT t3.paper_id FROM author_list AS t2 JOIN affiliation AS t1 ON t2.affiliation_id  =  t1.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  "Stanford University" INTERSECT SELECT DISTINCT t3.paper_id FROM author_list AS t2 JOIN affiliation AS t1 ON t2.affiliation_id  =  t1.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  "Columbia University"
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?[SQL]\nSELECT DISTINCT t3.paper_id FROM author_list AS t2 JOIN affiliation AS t1 ON t2.affiliation_id  =  t1.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  "Stanford" INTERSECT SELECT DISTINCT t3.paper_id FROM author_list AS t2 JOIN affiliation AS t1 ON t2.affiliation_id  =  t1.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  "Columbia"
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.[SQL]\nSELECT DISTINCT t3.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =  t2.paper_id WHERE t1.name  =  "Mckeown" AND t2.affiliation_id IN ( SELECT affiliation_id FROM author_list WHERE t1.name  =  "Rambow" ) AND t2.affiliation_id IN ( SELECT affiliation_id FROM author_list WHERE t1.name  =  "Kathleen" );
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?[SQL]\nSELECT DISTINCT t3.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  "Mckeown" AND t2.name  =  "Kathleen" INTERSECT SELECT DISTINCT t3.paper_id FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  "Rambow" AND t2.name  =  "Owen"
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.[SQL]\nSELECT DISTINCT t3.paper_id ,  t3.title FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  "Mckeown" EXCEPT SELECT DISTINCT t3.paper_id ,  t3.title FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  "Rambow"
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles and paper ids which have Mckeown as an author, but not Rambow?[SQL]\nSELECT DISTINCT t3.paper_id ,  t4.title FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t4 ON t2.paper_id  =  t4.paper_id JOIN author AS t3 ON t3.author_id  =  t2.author_id WHERE t1.name  =  "Mckeown" EXCEPT SELECT DISTINCT t3.paper_id ,  t4.title FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t4 ON t2.paper_id  =  t4.paper_id JOIN author AS t3 ON t3.author_id  =  t2.author_id WHERE t1.name  =  "Rambow
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.[SQL]\nSELECT DISTINCT t3.paper_id ,  t3.title FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  "Mckeown, Kathleen" OR t1.name  =  "Rambow, Owen"';
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?[SQL]\nSELECT DISTINCT t3.paper_id ,  t3.title FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  "Mckeown, Kathleen" OR t1.name  =  "Rambow, Owen"';
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of all authors and their number of papers in descending order by number of papers.[SQL]\nSELECT t1.name ,  COUNT(*) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id GROUP BY t1.name ORDER BY COUNT(*) DESC"
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, How many papers did each author publish, ordered by number of papers?[SQL]\nSELECT t1.name ,  COUNT(*) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id GROUP BY t1.name ORDER BY COUNT(*) DESC"
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, List all affiliations with ascending ordered number of papers.[SQL]\nSELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.paper_id ) ASC"
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all affiliations, ordered by number of papers?[SQL]\nSELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id GROUP BY t1.name ORDER BY count(*) DESC"
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, List names of all authors who have more than 50 papers.[SQL]\nSELECT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING COUNT ( DISTINCT t2.paper_id )  >  50
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all authors who have more than 50 papers?[SQL]\nSELECT DISTINCT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING COUNT ( DISTINCT t2.paper_id )  >  50
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, List names of all authors who have only 1 paper.[SQL]\nSELECT DISTINCT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE paper_id IN ( SELECT paper_id FROM author_list GROUP BY paper_id HAVING COUNT  ( DISTINCT author_id )  =  1 )
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of authors who have exactly 1 paper?[SQL]\nSELECT DISTINCT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE paper_id IN ( SELECT DISTINCT t3.paper_id FROM paper AS t3 JOIN citation AS t4 ON t3.paper_id  =  t4.cited_paper_id GROUP BY t3.paper_id HAVING COUNT ( DISTINCT t4.paper_id )  =  1 )
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the venue and year with the most number of publications?[SQL]\nSELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What was the venue and year with the most publications?[SQL]\nSELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the venue with the least number of publications?[SQL]\nSELECT venue FROM paper GROUP BY venue ORDER BY COUNT ( DISTINCT paper_id ) LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Which venue has the fewest publications?[SQL]\nSELECT venue FROM paper GROUP BY venue ORDER BY COUNT ( DISTINCT paper_id ) ASC LIMIT 1\n"]
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, How many papers cite paper with id A00-1002?[SQL]\nSELECT COUNT ( DISTINCT tapepapercitation.paper_id ) FROM paper AS t3 JOIN citation AS tapepapercitation ON t3.paper_id  =  tapepapercitation.cited_paper_id WHERE tapepapercitation.paper_id  =  "A00-1002";
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of papers which cited a paper with id A00-1002.[SQL]\nSELECT COUNT ( DISTINCT t2.paper_id ) FROM citation AS t1 JOIN paper AS t2 ON t1.cited_paper_id  =  t2.paper_id JOIN citation AS t1a ON t1.paper_id  =  t1a.cited_paper_id WHERE t1a.paper_id  =  "A00-1002"
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, How many reference papers does paper with id D12-1027 have?[SQL]\nSELECT COUNT ( DISTINCT t2.cited_paper_id ) FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id WHERE t1.paper_id  =  "D12-1027"
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of references the paper with id D12-1027 has.[SQL]\nSELECT COUNT ( DISTINCT t2.cited_paper_id ) FROM citation AS t2 JOIN paper AS t1 ON t2.paper_id  =  t1.paper_id WHERE t1.paper_id  =  "D12-1027"
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the id and the number of citations of the most cited paper?[SQL]\nSELECT t1.cited_paper_id ,  COUNT(*) FROM Citation AS t1 JOIN Paper AS t2 ON t1.paper_id  =  t2.paper_id GROUP BY t1.cited_paper_id ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Give the id and the number of citations of the most cited paper.[SQL]\nSELECT t2.cited_paper_id ,  COUNT(*) FROM Citation AS t1 JOIN Citation AS t2 ON t1.paper_id  =  t2.cited_paper_id GROUP BY t2.cited_paper_id ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Give the title of the paper which cites most number of papers?[SQL]\nSELECT DISTINCT t2.title FROM paper AS t2 JOIN citation AS t1 ON t2.paper_id  =  t1.cited_paper_id GROUP BY t1.cited_paper_id ORDER BY COUNT ( DISTINCT t1.cited_paper_id ) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the title of the paper which cites the most other papers?[SQL]\nSELECT DISTINCT t2.title FROM paper AS t2 JOIN citation AS t1 ON t2.paper_id  =  t1.cited_paper_id GROUP BY t1.cited_paper_id ORDER BY COUNT ( DISTINCT t1.paper_id ) DESC LIMIT 1";
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, List top 10 most cited papers and their numbers of citations.[SQL]\nSELECT t2.cited_paper_id  ,  COUNT ( * ) FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id GROUP BY t2.cited_paper_id ORDER BY COUNT ( * ) DESC LIMIT 10
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the 10 most cited papers, and how many citations did each have?[SQL]\nSELECT t2.cited_paper_id ,  COUNT (*) FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id GROUP BY t2.cited_paper_id ORDER BY COUNT (*) DESC LIMIT 10
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, How many citations does Mckeown , Kathleen have ?[SQL]\nSELECT COUNT ( DISTINCT t3.paper_id ) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =  t2.paper_id WHERE t1.name  =  "Mckeown , Kathleen";
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of citations Mckeown , Kathleen has .[SQL]\n SELECT COUNT ( DISTINCT t3.paper_id ) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =  t2.paper_id WHERE t1.name  =  "Mckeown , Kathleen";
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, How many papers does Mckeown , Kathleen cite ?[SQL]\nSELECT COUNT ( DISTINCT t2.paper_id ) FROM Citation AS t2 JOIN Paper AS t1 ON t2.cited_paper_id  =  t1.paper_id JOIN Author_list AS t3 ON t3.paper_id  =  t2.paper_id JOIN Author AS t4 ON t4.author_id  =  t3.author_id WHERE t4.name  =  "Mckeown , Kathleen";
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of papers Mckeown , Kathleen has cited .[SQL]\nSELECT COUNT ( DISTINCT t4.cited_paper_id ) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id JOIN citation AS t4 ON t3.paper_id  =  t4.paper_id WHERE t1.name  =  "Mckeown , Kathleen";
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name and number of citations of the author who has most citations among all authors?[SQL]\nSELECT t1.name ,  COUNT (t3.paper_id) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =  t2.paper_id WHERE t1.author_id  =  ( SELECT author_id FROM author_list GROUP BY author_id ORDER BY COUNT ( DISTINCT paper_id ) DESC LIMIT 1 ) GROUP BY t1.name ORDER BY COUNT ( t3.paper_id ) DESC"
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name and number of citations of the author with the greatest number of citations among authors?[SQL]\nSELECT t1.name ,  COUNT (t3.paper_id) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t3.paper_id  =  t2.paper_id GROUP BY t1.author_id ORDER BY COUNT (t3.paper_id) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the venues and years where Mckeown , Kathleen had papers ?[SQL]\nSELECT DISTINCT t3.venue  ,  t3.year FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  "Mckeown , Kathleen" ORDER BY t3.venue  ,  t3.year DESC;
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Which venues and years did Mckeown , Kathleen have papers ?[SQL]\nSELECT DISTINCT t3.venue ,  t3.year FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  "Mckeown , Kathleen" ORDER BY t3.venue ASC ,  t3.year DESC;
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the venues and years where Columbia University had papers ?[SQL]\nSELECT DISTINCT t3.venue  ,  t3.year FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id JOIN affiliation AS t4 ON t2.affiliation_id  =  t4.affiliation_id WHERE t4.name  =  'Columbia University' GROUP BY t3.venue  ,  t3.year ORDER BY t3.venue  ,  t3.year DESC"
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Which venues and years did Columbia University have papers ?[SQL]\nSELECT DISTINCT t3.venue  ,  t3.year FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id JOIN affiliation AS t4 ON t2.affiliation_id  =  t4.affiliation_id WHERE t4.name  =  "Columbia University" ORDER BY t3.venue  ,  t3.year DESC;
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Which author had the most papers in the year 2009?[SQL]\nSELECT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE t2.paper_id IN ( SELECT t3.paper_id FROM paper AS t3 WHERE t3.year  =  2009 ) GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the author with the most papers in 2009?[SQL]\nSELECT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE t2.paper_id IN ( SELECT t3.paper_id FROM paper AS t3 WHERE t3.year  =  2009 ) GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the top 3 affiliations that have the most papers in year 2009?[SQL]\nSELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id WHERE t2.paper_id IN ( SELECT t3.paper_id FROM paper AS t3 WHERE t3.year  =  2009 ) GROUP BY t1.affiliation_id ORDER BY count(*) DESC LIMIT 3
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Which 3 affiliations had the most papers in 2009?[SQL]\nSELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id WHERE t2.paper_id IN ( SELECT t2.paper_id FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id WHERE t1.year  =  2009 ) GROUP BY t1.name ORDER BY count(*) DESC LIMIT 3
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, How many papers does Columbia University have in or before 2009 ?[SQL]\nSELECT COUNT ( DISTINCT t2.paper_id ) FROM affiliation AS t3 JOIN author_list AS t1 ON t3.affiliation_id  =  t1.affiliation_id JOIN paper AS t2 ON t2.paper_id  =  t1.paper_id WHERE t3.name  =  "Columbia University" AND t2.year  <=  2009
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of papers Columbia University had during or prior to 2009 .[SQL]\nSELECT COUNT ( DISTINCT t2.paper_id ) FROM affiliation AS t3 JOIN author_list AS t1 ON t3.affiliation_id  =  t1.affiliation_id JOIN author AS t2 ON t2.author_id  =  t1.author_id WHERE t3.name  =  "Columbia University" AND t2.year  <=  2009
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, How many papers does Stanford University have between 2000 and 2009?[SQL]\nSELECT COUNT ( DISTINCT t3.paper_id ) FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  "Stanford University" AND t3.year  >=  2000 AND t3.year  <=  2009
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of papers Stanford University had between 2000 and 2009.[SQL]\nSELECT COUNT ( DISTINCT t3.paper_id ) FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t1.name  =  "Stanford University" AND t3.year  >=  2000 AND t3.year  <=  2009
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the title of the paper that has most number of authors?[SQL]\nSELECT t3.title FROM author_list AS t2 JOIN author AS t1 ON t2.author_id  =  t1.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id GROUP BY t2.paper_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Give the title of the paper with the most authors.[SQL]\nSELECT t2.title FROM author_list AS t1 JOIN paper AS t2 ON t1.paper_id  =  t2.paper_id GROUP BY t1.paper_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, How many collaborators has Mckeown , Kathleen had ?[SQL]\nSELECT COUNT ( DISTINCT t2.author_id ) FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id WHERE t1.name  =  "Mckeown , Kathleen";
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of collaborators that Mckeown , Kathleen has had .[SQL]\nSELECT COUNT ( DISTINCT t2.author_id ) FROM author AS t3 JOIN author_list AS t2 ON t3.author_id  =  t2.author_id JOIN paper AS t5 ON t5.paper_id  =  t2.paper_id JOIN citation AS t4 ON t5.paper_id  =  t4.cited_paper_id JOIN paper AS t1 ON t1.paper_id  =  t4.paper_id WHERE t3.name  =  "Mckeown , Kathleen" AND t1.year  =  2005;
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Who has the most papers co-authored with Mckeown , Kathleen ?[SQL]\nSELECT DISTINCT t3.name FROM author AS t3 JOIN author_list AS t1 ON t3.author_id  =  t1.author_id JOIN paper AS t2 ON t2.paper_id  =  t1.paper_id WHERE t3.email  =  "mckeown@uiuc.edu";
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?[SQL]\nSELECT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t3.title LIKE "%Mckeown , Kathleen%" GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the id of the papers whose title has the key word 'translation'.[SQL]\nSELECT paper_id FROM paper WHERE title LIKE '%translation%'
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids for papers with titles containing 'translation'?[SQL]\nSELECT paper_id FROM paper WHERE title LIKE '%translation%'
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the id and title of the papers that are never cited by others.[SQL]\nSELECT paper_id ,  title FROM paper WHERE paper_id NOT IN ( SELECT paper_id FROM citation )
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids and titles for papers that have never been cited?[SQL]\nSELECT paper_id ,  title FROM paper WHERE paper_id NOT IN ( SELECT paper_id FROM citation )
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.[SQL]\nSELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id GROUP BY t1.name HAVING COUNT ( DISTINCT t2.paper_id )  =  ( SELECT max ( COUNT ( DISTinct paper_id ) ) FROM author_list GROUP BY affiliation_id HAVING t1.name LIKE '%China%' )
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.[SQL]\nSELECT t1.name FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id WHERE t1.address LIKE "%China%" GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of papers published in different conferences each year.[SQL]\nSELECT DISTINCT COUNT ( t1.paper_id )  ,  t1.venue ,  t1.year FROM paper AS t1 GROUP BY t1.venue ,  t1.year ORDER BY t1.venue ,  t1.year"
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, How many papers are published in each venue in each year?[SQL]\nSELECT COUNT ( DISTINCT t2.paper_id )  ,  t2.venue ,  t2.year FROM paper AS t2 GROUP BY t2.venue ,  t2.year
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the total number of papers for each affiliation.[SQL]\nSELECT count(*) ,  T1.name FROM affiliation AS T1 JOIN author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.name
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, How many papers has each affiliation published?[SQL]\nSELECT t1.name ,  COUNT ( DISTINCT t3.paper_id ) FROM affiliation AS t1 JOIN author_list AS t2 ON t1.affiliation_id  =  t2.affiliation_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id GROUP BY t1.name
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the titles of papers that have more than 50 citations.[SQL]\nSELECT DISTINCT t2.title FROM paper AS t2 JOIN citation AS t1 ON t2.paper_id  =  t1.cited_paper_id GROUP BY t1.cited_paper_id HAVING COUNT ( DISTINCT t1.cited_paper_id )  >  50"
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles for papers with more than 50 citations?[SQL]\nSELECT DISTINCT t2.title FROM paper AS t2 JOIN citation AS t1 ON t2.paper_id  =  t1.cited_paper_id GROUP BY t1.cited_paper_id HAVING COUNT ( DISTINCT t1.cited_paper_id )  >  50
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of authors who did not publish any paper that is cited more than 50 times.[SQL]\n SELECT COUNT ( DISTINCT author_id ) FROM author WHERE author_id NOT IN ( SELECT t2.author_id FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id GROUP BY t2.author_id HAVING COUNT ( DISTINCT t1.paper_id )  >  50 )
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, How many authors have not published a paper with more than 50 citations?[SQL]\nSELECT COUNT ( DISTINCT author_id ) FROM author WHERE author_id NOT IN ( SELECT t2.author_id FROM paper AS t1 JOIN citation AS t2 ON t1.paper_id  =  t2.cited_paper_id GROUP BY t2.author_id HAVING COUNT ( DISTINCT t1.paper_id )  >  50 )
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the names of authors who published some paper on NAACL and ACL in the year 2009.[SQL]\nSELECT DISTINCT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t3.venue  =  "NAACL" AND t3.venue  =  "ACL" AND YEAR  =  2009
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of authors who published in both NAACL and ACL in 2009?[SQL]\nSELECT DISTINCT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t3.year  =  2009 AND t3.venue  =  "NAACL" INTERSECT SELECT DISTINCT t1.name FROM author AS t1 JOIN author_list AS t2 ON t1.author_id  =  t2.author_id JOIN paper AS t3 ON t2.paper_id  =  t3.paper_id WHERE t3.year  =  2009 AND t3.venue  =  "ACL"
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of authors who have never published a paper in ACL.[SQL]\nSELECT name FROM author WHERE author_id NOT IN (SELECT author_id FROM paper WHERE venue  =  "ACL")
### Database Schema\ n\n['CREATE TABLE `Affiliation` (  `affiliation_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `address` varchar(255) DEFAULT NULL,  PRIMARY KEY (`affiliation_id`))CREATE TABLE `Author` (  `author_id` integer NOT NULL,  `name` varchar(255) DEFAULT NULL,  `email` varchar(255) DEFAULT NULL,  PRIMARY KEY (`author_id`))CREATE TABLE `Author_list` (  `paper_id` varchar(25) NOT NULL,  `author_id` integer NOT NULL,  `affiliation_id` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`,`author_id`),  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`))CREATE TABLE `Citation` (  `paper_id` varchar(25) NOT NULL,  `cited_paper_id` varchar(25) NOT NULL,  PRIMARY KEY (`paper_id`,`cited_paper_id`),  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`))CREATE TABLE `Paper` (  `paper_id` varchar(25) NOT NULL,  `title` varchar(255) DEFAULT NULL,  `venue` varchar(255) DEFAULT NULL,  `year` integer DEFAULT NULL,  PRIMARY KEY (`paper_id`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of authors who have not published a paper in ACL?[SQL]\nSELECT name FROM author WHERE author_id NOT IN (SELECT t1.author_id FROM paper AS t2 JOIN author_list AS t1 ON t2.paper_id  =  t1.paper_id WHERE t2.venue  =  "ACL")
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many conferences are there?[SQL]\nSELECT count(*) FROM conference
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the total number of conferences?[SQL]\nSELECT count(*) FROM conference
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List all distinct conference names.[SQL]\nSELECT DISTINCT Conference_Name FROM conference
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the different conference names?[SQL]\nSELECT DISTINCT Conference_Name FROM conference
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List all conference name, year, and location.[SQL]\nSELECT Conference_Name ,  YEAR ,  LOCATION FROM conference
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names, years, and locations of all conferences?[SQL]\nSELECT Conference_Name ,  YEAR ,  LOCATION FROM conference
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show all conference names and the number of times each conference has.[SQL]\nSELECT T1.Conference_Name ,  COUNT(*) FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T1.Conference_Name
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, For each conference name, how many times has it occurred?[SQL]\nSELECT T2.Conference_Name ,  COUNT(*) FROM conference_participation AS T1 JOIN conference AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T2.Conference_Name ORDER BY COUNT(*) DESC'
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, show all years and the number of conferences in each year.[SQL]\nSELECT YEAR ,  COUNT(*) FROM conference GROUP BY YEAR
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many conferences occur every year?[SQL]\nSELECT COUNT(*) ,  YEAR FROM conference GROUP BY YEAR
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, which year has least number of conferences?[SQL]\nSELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What year had the fewest conferences?[SQL]\nSELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show all locations where at least two conferences are located.[SQL]\nSELECT LOCATION FROM conference GROUP BY LOCATION HAVING COUNT(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are all locations that have hosted at least two conferences?[SQL]\nSELECT LOCATION FROM conference GROUP BY LOCATION HAVING COUNT(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show the institution name, location and founded year of all institutions.[SQL]\nSELECT institution_name ,  LOCATION ,  founded FROM institution
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names, locations, and founding years for all institutions?[SQL]\nSELECT institution_name ,  LOCATION ,  founded FROM institution
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many institution are founded between 1850 and 1900?[SQL]\nSELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many institutions were founded between 1850 and 1900?[SQL]\nSELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show the institution name and location of institution that is most recently founded.[SQL]\nSELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and locations of the most recently-founded institution?[SQL]\nSELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 3
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show the institution name and the number of staff for each institution founded after 1800.[SQL]\nSELECT T1.Institution_Name ,  COUNT(*) FROM institution AS T1 JOIN staff AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Founded  >  1800 GROUP BY T1.Institution_Name
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names .[SQL]\nSELECT T1.name FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1800 GROUP BY T1.institution_id HAVING count(*)  >  25
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show institution name which there is no staff in our record.[SQL]\nSELECT Institution_Name FROM institution WHERE Institution_ID NOT IN (SELECT Institution_ID FROM staff)
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the institution with no staff in the records?[SQL]\nSELECT Institution_Name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show all staff name who are above the average age.[SQL]\nSELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all staff members who are older than average?[SQL]\nSELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the maximum and minimum age of all staff from the United States?[SQL]\nSELECT max(Age) ,  min(Age) FROM staff WHERE Nationality  =  'United States'
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the maximum and minimum ages for all staff?[SQL]\nSELECT max(age) ,  min(age) FROM staff
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show all conference names which the staff from Canada attends.[SQL]\nSELECT T3.Conference_Name FROM conference_participation AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id JOIN conference AS T3 ON T1.conference_ID  =  T3.Conference_ID WHERE T2.Nationality  =  'Canada'
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all the conferences that has staff from Canada attending?[SQL]\nSELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID JOIN staff AS T3 ON T2.staff_ID  =  T3.staff_ID WHERE T3.Nationality  =  'Canada'
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show all staff names who have been both speaker and sponsor in some conference.[SQL]\n SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'sponsor'
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the staff members who have been both a speaker and a sponsor at some conference?[SQL]\n SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'sponsor' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'speaker'
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show all names who have been in both ACL and Naccl.[SQL]\nSELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id JOIN conference AS T3 ON T2.conference_id  =  T3.conference_id WHERE T3.Conference_Name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id JOIN conference AS T3 ON T2.conference_id  =  T3.conference_id WHERE T3.Conference_Name  =  'NACCL'
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of everbody who has participated in both the ACL and NACCL conferences?[SQL]\nSELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id JOIN conference AS T3 ON T2.conference_id  =  T3.conference_id WHERE T3.Conference_Name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id JOIN conference AS T3 ON T2.conference_id  =  T3.conference_id WHERE T3.Conference_Name  =  'NACCL'
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show all staff names who attend a conference in 2003 or 2004.[SQL]\n SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.year  =  2003 OR T2.year  =  2004
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the staff names who participated in conferences between 2003 or 2004?[SQL]\nSELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.conference_id IN (SELECT T2.conference_id FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.year  =  2003 OR T1.year  =  2004)
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show the conference name and year and the number of participants for each conference.[SQL]\nSELECT T1.Conference_Name ,  T1.Year ,  COUNT(*) FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T1.Conference_ID
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, For each conference id, what are their names, year, and number of participants?[SQL]\nSELECT T1.Conference_Name ,  T1.Year ,  COUNT(*) FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T1.Conference_ID
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of the conferences that have the top 2 most number of attendants.[SQL]\nSELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T1.Conference_Name ORDER BY COUNT(*) DESC LIMIT 2
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the conferences that have the top 2 most people attending?[SQL]\nSELECT T1.Conference_Name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.Conference_ID  =  T2.Conference_ID GROUP BY T1.Conference_ID ORDER BY COUNT(*) DESC LIMIT 2
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name and nationality of the people who did not participate in any ACL conference.[SQL]\n\nSELECT t1.name ,  t1.nationality FROM staff AS t1 JOIN conference_participation AS t2 ON t1.staff_id  =  t2.staff_id WHERE t2.Conference_ID  !=  1'
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and nationalities of the people who did not participate in any ACL conferences?[SQL]\nSELECT name ,  Nationality FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM conference_participation WHERE Conference_ID  =  1)
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name and location of the universities that did not have any staff participated in any conference in 2004.[SQL]\nSELECT institution_name ,  LOCATION FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM conference_participation WHERE YEAR  =  2004)
### Database Schema\ n\n['CREATE TABLE "conference" ("Conference_ID" int,"Conference_Name" text,"Year" int,"Location" text,PRIMARY KEY ("Conference_ID"))CREATE TABLE institution ("Institution_ID" int,"Institution_Name" text,"Location" text,"Founded" int,PRIMARY KEY ("Institution_ID"))CREATE TABLE "staff" ("staff_ID" int,"name" text,"Age" int,"Nationality" text,"Institution_ID" int,PRIMARY KEY ("staff_ID"),FOREIGN KEY (`Institution_ID`) REFERENCES `institution`(`Institution_ID`))CREATE TABLE "conference_participation" ("Conference_ID" int,"staff_ID" int,"role" text,PRIMARY KEY ("staff_ID","Conference_ID"),FOREIGN KEY (`staff_ID`) REFERENCES `staff`(`staff_ID`),FOREIGN KEY (`Conference_ID`) REFERENCES `conference`(`Conference_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?[SQL]\nSELECT institution_name ,  LOCATION FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM conference_participation WHERE YEAR  =  2004)
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the oldest pilot?[SQL]\n SELECT pilot_name FROM PilotSkills ORDER BY age ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Return the name of the oldest pilot.[SQL]\n SELECT pilot_name FROM PilotSkills ORDER BY age ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of pilots whose age is below the average age, ordered by age?[SQL]\nSELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Return the names of pilots who are younger than average, ordered by age ascending.[SQL]\nSELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age ASC
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Find all information of on pilots whose age is less than 30.[SQL]\nSELECT * FROM PilotSkills WHERE age  <  30
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What is all the information about pilots who are younger than 30 ?[SQL]\nSELECT * FROM PilotSkills WHERE age  <  30
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Find the names of all pilots who have a plane named Piper Cub and is under 35.[SQL]\nSELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' AND age  <  35
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of pilots who are younger than 35 and have a plane named Piper Cub?[SQL]\nSELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Where is the plane F-14 Fighter located?[SQL]\nSELECT LOCATION FROM Hangar WHERE plane_name  =  'F-14 Fighter'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Return the location of the hangar in which F-14 Fighter is located.[SQL]\nSELECT location FROM Hangar WHERE plane_name  =  'F-14 Fighter'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, How many different places have some plane?[SQL]\nSELECT count(DISTINCT location) FROM Hangar
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of different locations of hangars.[SQL]\n SELECT count(DISTINCT location) FROM Hangar
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Which plane does the pilot Jones with age 32 has?[SQL]\nSELECT T2.plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.pilot_name  =  "Jones" AND T1.age  =  32
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of planes that the pilot Jones who is 32 has?[SQL]\nSELECT T2.plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.pilot_name  =  "Jones" AND T1.age  =  32
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, How many pilots who are older than 40?[SQL]\nSELECT count(*) FROM PilotSkills WHERE age  >  40
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of pilots with age greater than 40.[SQL]\nSELECT count(*) FROM PilotSkills WHERE age  >  40
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, How many plane B-52 Bomber owned by the pilot who is under 35?[SQL]\nSELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of B-52 Bombers owned by pilots under 35.[SQL]\nSELECT count(*) FROM PilotSkills WHERE plane_name  =  'B-52 Bomber' AND age  <  35
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Who is the youngest pilot to fly the plane Piper Cub?[SQL]\nSELECT min(age) FROM PilotSkills WHERE plane_name  =  'Piper Cub'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Return the name of the youngest pilot to fly Piper Cub.[SQL]\n SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the most popular plane?[SQL]\nSELECT plane_name FROM Hangar GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the plane that is flown the most often?[SQL]\nSELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the least popular plane?[SQL]\nSELECT plane_name FROM Hangar GROUP BY plane_name ORDER BY count(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the plane that is flown the least often?[SQL]\nSELECT plane_name FROM Hangar GROUP BY plane_name ORDER BY count(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, How many pilots whose planes are in Chicago?[SQL]\n SELECT count(*) FROM hangar AS T1 JOIN pilotskills AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.location  =  'Chicago'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of pilots who have planes in Chicago.[SQL]\n SELECT count(*) FROM hangar WHERE LOCATION  =  'Chicago' AND plane_name IN (SELECT plane_name FROM pilotskills)
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the planes owned by pilot Smith with age 41?[SQL]\nSELECT T2.plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.pilot_name  =  "Smith" AND T1.age  =  41
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Return the names of planes owned by the pilot whose name is Smith and is 41 years old.[SQL]\nSELECT T2.plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.pilot_name  =  "Smith" AND T1.age  =  41
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, How many distinct planes are owned across all pilots?[SQL]\nSELECT count(DISTINCT plane_name) FROM pilotskills
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of different plane names across all pilots.[SQL]\nSELECT count(DISTINCT plane_name) FROM pilotskills
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, How many planes are owned by the pilot whose name is Smith?[SQL]\nSELECT count(*) FROM PilotSkills WHERE pilot_name  =  'Smith'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of planes Smith owns.[SQL]\n SELECT count(*) FROM Hangar WHERE pilot_name  =  "Smith"
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, How many planes are controlled by the pilots whose age is older than 40?[SQL]\nSELECT count(*) FROM PilotSkills WHERE age  >  40
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of planes flown by pilots older than 40.[SQL]\n SELECT count(*) FROM PilotSkills WHERE age  >  40
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.[SQL]\nSELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of pilots between the ages of 30 and 40, ordered by age ascending?[SQL]\nSELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, List all pilot names sorted by their ages in the descending order.[SQL]\nSELECT pilot_name FROM PilotSkills ORDER BY age DESC
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of pilots, ordered by age descending?[SQL]\nSELECT pilot_name FROM PilotSkills ORDER BY age DESC
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Find all locations of planes sorted by the plane name.[SQL]\nSELECT T1.location FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name  =  T2.plane_name ORDER BY T2.plane_name
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the locations of the different planes, ordered by plane name?[SQL]\nSELECT T1.location FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name  =  T2.plane_name ORDER BY T1.plane_name
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, List all distinct types of planes owned by all pilots in alphabetic order?[SQL]\nSELECT DISTINCT plane_name FROM pilotskills
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the different plane names, ordered alphabetically?[SQL]\nSELECT plane_name FROM Hangar ORDER BY plane_name ASC
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, How many pilots who are older than 40 or younger than 30?[SQL]\nSELECT count(*) FROM PilotSkills WHERE age  >  40 OR age  <  30
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of pilots with age greater than 40 or less than 30.[SQL]\nSELECT count(*) FROM PilotSkills WHERE age  >  40 OR age  <  30
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?[SQL]\nSELECT pilot_name ,  age FROM PilotSkills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM PilotSkills WHERE plane_name  =  'F-14 Fighter' AND age  <  30
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.[SQL]\nSELECT T1.pilot_name ,  T1.age FROM PilotSkills AS T1 JOIN PlaneTypes AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.type_of_plane  =  'Piper Cub' AND T1.age  >  35 OR T2.type_of_plane  =  'F-14 Fighter' AND T1.age  <  30
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Find pilots who own plane Piper Cub but not B-52 Bomber.[SQL]\nSELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'B-52 Bomber'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?[SQL]\nSELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'B-52 Bomber'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Find pilots who own planes Piper Cub and B-52 Bomber.[SQL]\n\nSELECT DISTINCT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.plane_name  =  'Piper Cub' OR T2.plane_name  =  'B-52 Bomber'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of pilots who own both Piper Cub and the B-52 Bomber?[SQL]\nSELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location LIKE '%Piper Cub%' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location LIKE '%B-52 Bomber%'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the average and smallest ages of all pilots?[SQL]\nSELECT avg(age) ,  min(age) FROM PilotSkills
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Return the average and minimum ages across all pilots.[SQL]\nSELECT avg(age) ,  min(age) FROM PilotSkills
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of pilots who have planes in both Austin and Boston?[SQL]\nSELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Austin' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Boston'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Give the names of pilots who have planes in Austin and Boston.[SQL]\n\nSELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Austin' INTERSECT SELECT T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Boston'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Find the pilots who have either plane Piper Cub or plane F-14 Fighter.[SQL]\n\nSELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of pilots who have either the Piper Cub or the F-14 Fighter?[SQL]\nSELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What is the average age of pilots for different types of planes?[SQL]\nSELECT avg(age) ,  plane_name FROM PilotSkills GROUP BY plane_name
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Return the average age of pilots for each plane name.[SQL]\nSELECT plane_name ,  avg(age) FROM PilotSkills GROUP BY plane_name
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of planes for each type.[SQL]\nSELECT count(*) ,  plane_name FROM Hangar GROUP BY plane_name
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of entries for each plane name.[SQL]\nSELECT plane_name ,  count(*) FROM Hangar GROUP BY plane_name
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of the oldest pilot for each type of plane, and order the results by plane name.[SQL]\nSELECT T1.pilot_name ,  T1.plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T1.plane_name ORDER BY T2.location
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?[SQL]\nSELECT T2.plane_name ,  T1.pilot_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name ORDER BY T2.plane_name
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of oldest pilots for each type of plane?[SQL]\nSELECT T1.pilot_name ,  T1.plane_name FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT max(age) FROM pilotskills WHERE pilot_name  =  T1.pilot_name AND plane_name  =  T1.plane_name) GROUP BY T1.plane_name
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Return the names of the different planes, as well as the names of the oldest pilots who flew each.[SQL]\n SELECT T1.plane_name ,  T2.pilot_name FROM Hangar AS T1 JOIN PilotSkills AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T1.plane_name ORDER BY max(T2.age) ASC LIMIT 3
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Find the max age for each group of pilots with the same name.[SQL]\nSELECT pilot_name ,  max(age) FROM PilotSkills GROUP BY pilot_name
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the different pilot names, and what are the maximum ages of pilots for each?[SQL]\nSELECT pilot_name ,  max(age) FROM PilotSkills GROUP BY pilot_name
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, For each city, find the number and average age of pilots who have a plane.[SQL]\nSELECT count(*) ,  avg(age) ,  location FROM PilotSkills GROUP BY location
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?[SQL]\nSELECT T2.location ,  count(*) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of pilots for the plane types with average pilot age below 35.[SQL]\nSELECT count(*) ,  avg(age) FROM PilotSkills WHERE age  <  35 GROUP BY plane_name
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?[SQL]\nSELECT T2.plane_name ,  count(*) FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.plane_name HAVING avg(T1.age)  <  35
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Find the location of the plane that is owned by the youngest pilot.[SQL]\nSELECT T2.location FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name ORDER BY T1.age LIMIT 1
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What is the location of the plane that was flown by the pilot with the lowest age?[SQL]\nSELECT T2.location FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name ORDER BY T1.age LIMIT 1
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Find the name and age of pilots who have a plane in Austin.[SQL]\nSELECT T1.pilot_name ,  T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Austin'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and ages of pilots who have planes located in Austin?[SQL]\nSELECT T1.pilot_name ,  T1.age FROM PilotSkills AS T1 JOIN Hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Austin'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.[SQL]\nSELECT pilot_name FROM PilotSkills WHERE age  >  (SELECT max(age) FROM PilotSkills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.[SQL]\nSELECT pilot_name FROM PilotSkills WHERE age  >  (SELECT max(age) FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'Piper Cub')) ORDER BY pilot_name
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.[SQL]\nSELECT count(*) FROM PilotSkills WHERE age  <  (SELECT min(age) FROM PilotSkills WHERE plane_name  =  'F-14 Fighter')
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, How many pilots are younger than all pilots who own the F-14 Fighter?[SQL]\nSELECT count(*) FROM PilotSkills WHERE age  <  (SELECT min(age) FROM PilotSkills WHERE pilot_name IN (SELECT pilot_name FROM PilotSkills WHERE plane_name  =  'F-14'))
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Find all different planes whose names contain substring 'Bomber'.[SQL]\nSELECT DISTINCT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, What are the different plane names that contain the word Bomber?[SQL]\nSELECT plane_name FROM Hangar WHERE plane_name LIKE '%Bomber%'
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.[SQL]\nSELECT count(*) FROM pilotskills WHERE age  >  (SELECT max(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')
### Database Schema\ n\n['CREATE TABLE PilotSkills  (pilot_name CHAR(15) NOT NULL,  plane_name CHAR(15) NOT NULL,  age INTEGER,  PRIMARY KEY (pilot_name, plane_name),  FOREIGN KEY (plane_name) REFERENCES Hangar(plane_name)  )CREATE TABLE Hangar  (plane_name CHAR(15) NOT NULL PRIMARY KEY,   location CHAR(15)  )']\n\n\n### Task \n\nBased on the provided database schema information, How many pilots are older than the youngest pilot who has Piper Cub?[SQL]\nSELECT count(*) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of the district which has the largest area.[SQL]\nSELECT Name FROM district ORDER BY Area_km DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Select the area and government website of the district with the smallest population.[SQL]\nSELECT Area_km ,  Government_website FROM district ORDER BY Population ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the names and populations of the districts whose area is greater than the average area.[SQL]\nSELECT Name ,  Population FROM district WHERE Area_km  >  (SELECT avg(Area_km) FROM district)
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Give me the biggest and average areas of all districts.[SQL]\nSELECT max(Area_km) ,  avg(Area_km) FROM district
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the total population of the districts whose areas are in the top 3?[SQL]\nSELECT SUM(POPULATION) FROM district WHERE area_km IN (SELECT area_km FROM district ORDER BY area_km DESC LIMIT 3)
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the ids, names, and government websites of all districts sorted by population.[SQL]\nSELECT District_ID ,  Name ,  Government_website FROM district ORDER BY Population ASC
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the names of districts whose government links use a 'gov' domain.[SQL]\nSELECT Name FROM district WHERE Government_website LIKE '%.gov%')
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.[SQL]\nSELECT District_ID ,  Name FROM district WHERE Population  >  4000 OR Area_km  >  3000
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Find all spokesman's names and speech titles.[SQL]\nSELECT Name ,  Speach_title FROM spokesman
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the average points and average ages of all spokesmen whose rank position is 1.[SQL]\nSELECT avg(Points) ,  avg(Age) FROM spokesman WHERE Rank_position  =  1
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and points of spokesmen who are younger than 40?[SQL]\nSELECT Name ,  Points FROM spokesman WHERE Age  <  40
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Who is the oldest spokesman?[SQL]\n SELECT max(Age) FROM spokesman
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Which spokesman has lower points than the average?[SQL]\nSELECT Name FROM spokesman WHERE Points  <  (SELECT avg(Points) FROM spokesman)
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of the district which has greatest number of spokesmen.[SQL]\nSELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.district_id  =  t2.district_id GROUP BY t2.district_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the names of spokesmen who have served some district before 2004.[SQL]\nSELECT T1.Name FROM spokesman AS T1 JOIN spokesman_district AS T2 ON T1.Spokesman_ID  =  T2.Spokesman_ID WHERE T2.District_ID IN (SELECT District_ID FROM district WHERE Start_year  <  2004)
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of spokesmen for each district, and the show district names as well.[SQL]\nSELECT T1.Name ,  COUNT(*) FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID  =  T2.District_ID GROUP BY T1.District_ID
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the names of the districts which have had both spokesman with rank position 1 and 2.[SQL]\nSELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID  =  T2.District_ID WHERE T2.Rank_position  =  1 INTERSECT SELECT T1.Name FROM district AS T1 JOIN spokesman_district AS T2 ON T1.District_ID  =  T2.District_ID WHERE T2.Rank_position  =  2
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the names of districts which have more than one spokesman.[SQL]\nSELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.district_id  =  t2.district_id GROUP BY t2.district_id HAVING count(*)  >  1
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of districts which have no spokesmen.[SQL]\n SELECT count(*) FROM district WHERE District_ID NOT IN (SELECT District_ID FROM spokesman_district)
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of spokesmen who do not speak for any district.[SQL]\nSELECT Name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)
### Database Schema\ n\n['CREATE TABLE "district" ("District_ID" int,"Name" text,"Area_km" real,"Population" real,"Density_km" real,"Government_website" text,PRIMARY KEY ("District_ID"))CREATE TABLE "spokesman" ("Spokesman_ID" int,"Name" text,"Age" int,"Speach_title" text,"Rank_position" real,"Points" real,PRIMARY KEY ("Spokesman_ID"))CREATE TABLE "spokesman_district" ("Spokesman_ID" int,"District_ID" int,"Start_year" text,PRIMARY KEY ("Spokesman_ID"),FOREIGN KEY ("Spokesman_ID") REFERENCES "spokesman"("Spokesman_ID"),FOREIGN KEY ("District_ID") REFERENCES "district"("District_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Find the total and average population of the districts which have some spokesman.[SQL]\nSELECT sum(population) ,  avg(population) FROM district WHERE District_ID IN ( SELECT District_ID FROM spokesman_district )
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the title of the sculpture that was created in the most recent year ?[SQL]\n\nSELECT title FROM Sculptures WHERE YEAR  =  (SELECT max(YEAR) FROM Sculptures)
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the scuplture that was created most recently ?[SQL]\nSELECT title FROM sculptures ORDER BY year DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the title and location of the oldest painting ?[SQL]\n\nSELECT title ,  LOCATION FROM paintings ORDER BY YEAR ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the oldest painting and where is it located?[SQL]\n\nSELECT title ,  location FROM paintings ORDER BY YEAR LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the names of all sculptures located in gallery 226.[SQL]\nSELECT T2.title FROM SCULPTURES AS T1 JOIN PAINTINGS AS T2 ON T1.painterID  =  T2.painterID WHERE T2.location  =  'gallery 226'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all sculptures in gallery 226?[SQL]\nSELECT T2.title FROM SCULPTURES AS T1 JOIN PAINTINGS AS T2 ON T1.painterID  =  T2.painterID WHERE T2.location  =  'gallery 226'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, List the title and location of all paintings.[SQL]\n\nSELECT title ,  location FROM paintings
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the paintings called and where are they located?[SQL]\nSELECT title ,  location FROM paintings
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, List the title and location of all sculptures.[SQL]\n\nSELECT title ,  location FROM Sculptures
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the sculptures called and where are they located?[SQL]\nSELECT title ,  location FROM Sculptures
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the medium types of the painting with id = 80[SQL]\nSELECT medium FROM paintings WHERE paintingID  =  80
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What mediums were used for the painting with id 80 ?[SQL]\nSELECT medium FROM paintings WHERE paintingID  =  80
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the first and last names of all artists who were born after 1850.[SQL]\nSELECT fname ,  lname FROM artists WHERE birthyear  >  1850
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the full names of artists born after 1850?[SQL]\nSELECT fname ,  lname FROM Artists WHERE birthYear  >  1850
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the names and years of all sculptures that are not located in gallery 226.[SQL]\nSELECT title ,  year FROM Sculptures WHERE location != 'Gallery 226'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and dates created for all sculptures not located in gallery 226?[SQL]\nSELECT Title ,  YEAR FROM Sculptures WHERE location != 'Gallery 226'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the first and last names of all distinct artists who made sculptures before 1900?[SQL]\nSELECT DISTINCT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the first and last name of each distinct artists who made a sculpture before 1900?[SQL]\nSELECT DISTINCT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the birth years of all distinct artists who made sculptures after 1920?[SQL]\n\nSELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the birth year of each distinct artists who created sculptures after 1920?[SQL]\nSELECT DISTINCT T1.birthyear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid  =  T2.sculptorID WHERE T2.year  >  1920
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the first and last names of the artist who lived the longest?[SQL]\nSELECT fname , lname FROM artists ORDER BY birthYear ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Give the full name of the artist who lived the longest.[SQL]\nSELECT T2.lname ,  T2.fname FROM Artists AS T1 JOIN Artists AS T2 ON T1.birthYear  =  T2.birthYear WHERE T1.deathYear - T1.birthYear  =  T2.deathYear - T2.birthYear ORDER BY T1.deathYear - T1.birthYear DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the age of the artist who had the shortest life?[SQL]\nSELECT min(deathyear - birthyear) FROM artists
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, How old is the artist who lived the shortest life?[SQL]\nSELECT min(birthYear - deathYear) AS age FROM artists
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the first name and age of the artist who had the longest life?[SQL]\nSELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the first name and age of the artist who lived the longest?[SQL]\nSELECT fname ,  birthYear FROM artists ORDER BY birthYear DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, How many paintings are exhibited at gallery 240?[SQL]\nSELECT count(*) FROM paintings WHERE location  =  'gallery 240'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the total number of paintings exhibited in gallery 240?[SQL]\nSELECT count(*) FROM paintings WHERE location LIKE '%240%'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, How many paintings did the artist with the longest life make ?[SQL]\nSELECT count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T1.birthyear  =  (SELECT min(birthyear) FROM artists) AND T1.deathyear  =  (SELECT max(deathyear) FROM artists)"""
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the painting count of the artist with the longest life ?[SQL]\nSELECT COUNT(*) FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID WHERE T2.birthYear  =  (SELECT min(birthYear) FROM artists)
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Give me a list of names and years of paintings that were created by the artist whose first name is Mary.[SQL]\nSELECT T2.title ,  T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T1.fname  =  "Mary"
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name and year of each painting created by the artist whose first name is Mary?[SQL]\nSELECT T2.title ,  T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T1.fname  =  "Mary"
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the widths of the paintings that were created by the artist who was born before 1850?[SQL]\nSELECT t2.width_mm FROM paintings AS t2 JOIN artists AS t1 ON t2.painterID  =  t1.artistID WHERE t1.birthyear  <  1850
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, How wide were the paintings by the artist who was born prior to 1850?[SQL]\nSELECT max(width_mm) FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID WHERE T2.birthyear  <  1850
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the location and medium type of paintings that are created by the artist whose first name is Pablo?[SQL]\nSELECT T2.location ,  T2.medium FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T1.fname  =  "Pablo"
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, In what locations and on what mediums are the paintings created by the artist with the first name Pablo?[SQL]\nSELECT T2.location ,  T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T1.fname  =  "Pablo"
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the first and last names of the artists who have both works of paintings and sculptures?[SQL]\n\nSELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid INTERSECT SELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistid  =  T2.sculptorid
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Give the full names of artists who have created paintings and sculptures.[SQL]\n\nSELECT T1.fname ,  T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid UNION SELECT T1.fname ,  T1.lname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistid  =  T2.sculptorid
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?[SQL]\n\nSELECT DISTINCT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.medium  =  'oil' INTERSECT SELECT DISTINCT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.medium  =  'lithographic'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the first and last names of artists who have painted using both oil and lithographic mediums?[SQL]\nSELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  'oil' INTERSECT SELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  'lithographic'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the birth year of the artist who created a painting in 1884 that is on canvas?[SQL]\nSELECT T1.birthyear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.medium  =  'canvas' AND T2.year  =  1884
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, In what year was the artist who created a painting in 1884 born?[SQL]\nSELECT T2.birthyear FROM paintings AS T1 JOIN artists AS T2 ON T1.painterid  =  T2.artistid WHERE T1.year  =  1884
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the unique first names of the artists who had medium oil paintings located in gallery 241?[SQL]\nSELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.location  =  'gallery 241' AND T2.medium  =  'oil'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are first names of the artists with oil paintings in gallery 241?[SQL]\nSELECT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.location  =  'gallery 241' AND T2.medium  =  'oil'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the numbers of works for different medium type?[SQL]\n\nSELECT medium ,  count(*) FROM Paintings GROUP BY medium UNION SELECT medium ,  count(*) FROM Sculptures GROUP BY medium
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, How many works are there in each medium?[SQL]\nSELECT count(*) ,  medium FROM paintings GROUP BY medium
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the average height of paintings for different medium types?[SQL]\nSELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average height of paintings for different medium types?[SQL]\nSELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the numbers of paintings created before 1900 in different places?[SQL]\nSELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, How many paintings were created before 1900 in different locations?[SQL]\nSELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles of paintings that are created after 1910 and whose medium is oil?[SQL]\nSELECT title FROM paintings WHERE medium  =  'oil' AND YEAR  >  1910
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Give the names of all oil paintings created after 1910.[SQL]\n\nSELECT title FROM Paintings WHERE medium  =  'oil' AND YEAR  >  1910
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?[SQL]\nSELECT DISTINCT T1.artistid FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.medium  =  'oil' AND T2.location  =  'gallery 240'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the unique id of every painter who had a medium oil painting displayed at gallery 240?[SQL]\nSELECT DISTINCT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.medium  =  'oil' AND T2.location  =  'gallery 240'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the distinct titles of all the paintings that have a longer height than some painting on canvas?[SQL]\n\nSELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT max(height_mm) FROM paintings WHERE medium  =  'Canvas')
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the distinct titles of every painting that has a greater height than some painting on canvas?[SQL]\nSELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT max(height_mm) FROM paintings WHERE medium  =  'Canvas')
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the distinct ids of all paintings that are older than some painting at location gallery 240.[SQL]\nSELECT DISTINCT painterID FROM paintings WHERE location != 'gallery 240' AND YEAR  <  (SELECT MAX(YEAR) FROM paintings WHERE location  =  'gallery 240')
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the distinct ids of every painting that is older than some painting in gallery 240?[SQL]\nSELECT DISTINCT painterID FROM paintings WHERE year  <  (SELECT max(year) FROM paintings WHERE location  =  'Gallery 240')
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the id of the oldest painting.[SQL]\n\nSELECT painterID FROM paintings ORDER BY year ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the id of the oldest painting?[SQL]\nSELECT painterID FROM paintings ORDER BY year ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the first and last name of the artist who had a sculpture work whose title has the word “female” in it?[SQL]\n\nSELECT T2.lname ,  T2.fname FROM Sculptures AS T1 JOIN Artists AS T2 ON T1.sculptorID  =  T2.artistID WHERE T1.title LIKE '%female%'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the full name of the artist with a sculpture whose title includes the word "female"?[SQL]\nSELECT T2.lname ,  T2.fname FROM Sculptures AS T1 JOIN Artists AS T2 ON T1.sculptorID  =  T2.artistID WHERE T1.title LIKE '%female%'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of all distinct paintings in alphabetical order.[SQL]\nSELECT DISTINCT title FROM paintings ORDER BY title
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of every distinct painting in alphabetical order?[SQL]\nSELECT DISTINCT title FROM paintings ORDER BY title ASC
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of all distinct paintings ordered by length.[SQL]\nSELECT DISTINCT title FROM paintings ORDER BY LENGTH(title)
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of all distinct paintings from shortest to longest in height.[SQL]\nSELECT title FROM paintings ORDER BY height_mm ASC
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of both paintings and sculptures created between 1900 and 1950?[SQL]\nSELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of  paintings and scupltures created between 1900 and 1950?[SQL]\n SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM scupltures WHERE YEAR BETWEEN 1900 AND 1950
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the titles of paintings and sculpture works made by the artist whose id is 222?[SQL]\nSELECT T2.title FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID WHERE T2.artistID  =  222 UNION SELECT T3.title FROM sculptures AS T2 JOIN artists AS T3 ON T2.sculptorID  =  T3.artistID WHERE T3.artistID  =  222
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles of all paintings and sculpture works made by the artist whose id is 222?[SQL]\nSELECT T3.title FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID JOIN paintings AS T3 ON T3.painterID  =  T2.artistID WHERE T2.artistID  = 222 UNION SELECT T4.title FROM sculptures AS T4 JOIN artists AS T2 ON T4.sculptorID  =  T2.artistID WHERE T2.artistID  =  222
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the id of the artist who has the highest number of painting works before 1900?[SQL]\nSELECT T2.artistid FROM paintings AS T1 JOIN artists AS T2 ON T1.painterid  =  T2.artistid WHERE T1.year  <  1900 GROUP BY T2.artistid ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the id of the artist with the most paintings before 1900?[SQL]\nSELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the first name of the artist who has the highest number of sculptures?[SQL]\nSELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid  =  T2.sculptorid GROUP BY T1.fname ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the first name of the sculptor with the greatest number of works?[SQL]\nSELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid  =  T2.sculptorid GROUP BY T1.fname ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of paintings whose width is less than 600 or height is larger than 800?[SQL]\nSELECT title FROM paintings WHERE width_mm  <  600 OR height_mm >  800
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles of paintings that have a width less than 600 or a height taller taller than 800?[SQL]\nSELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Which locations have paintings created before 1885 or after 1930?[SQL]\nSELECT LOCATION FROM paintings WHERE YEAR  <  1885 UNION SELECT LOCATION FROM paintings WHERE YEAR  >  1930
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What locations have works painted before 1885 or after 1930?[SQL]\nSELECT LOCATION FROM Paintings WHERE YEAR  <  1885 UNION SELECT LOCATION FROM Paintings WHERE YEAR  >  1930
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the ids of paintings whose height is bigger than 500 and less than 2000?[SQL]\nSELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of paintings that are taller than 500 and shorter than 2000?[SQL]\nSELECT paintingID FROM paintings WHERE height_mm  >  500 AND width_mm  <  2000
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Which locations have paintings in the mediums of on panel and on canvas?[SQL]\n\nSELECT LOCATION FROM paintings WHERE medium  =  'on panel' INTERSECT SELECT LOCATION FROM paintings WHERE medium  =  'on canvas'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the locations that have paintings in the mediums of on panels and on canvas?[SQL]\n\nSELECT T2.location FROM paintings AS T1 JOIN SCULPTURES AS T2 ON T1.medium  =  'on panel' AND T1.medium  =  'canvas' WHERE T1.year  =  1905
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the locations that have paintings created before 1885 and after 1930?[SQL]\n\nSELECT LOCATION FROM paintings WHERE YEAR  <  1885 UNION SELECT LOCATION FROM paintings WHERE YEAR  >  1930
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the locations that have works painted before 1885 and after 1930?[SQL]\nSELECT LOCATION FROM paintings WHERE YEAR  <  1885 UNION SELECT LOCATION FROM paintings WHERE YEAR  >  1930
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the average height and width of paintings that are oil medium in the place of gallery 241?[SQL]\nSELECT avg(width_mm) ,  avg(height_mm) FROM paintings WHERE medium  =  'oil' AND location  =  'gallery 241'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average height and width of paintings that are oil medium in gallery 241?[SQL]\nSELECT avg(width_mm) ,  avg(height_mm) FROM paintings WHERE medium  =  'oil' AND location  =  'gallery 241'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the maximum height and id of paintings painted before 1900?[SQL]\nSELECT max(height_mm) ,  paintingID FROM Paintings WHERE year  <  1900;
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the height and id of the tallest painting created before 1900?[SQL]\nSELECT height_mm ,  paintingID FROM paintings WHERE YEAR  <  1900 ORDER BY height_mm DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the maximum height and width of paintings for each year?[SQL]\nSELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are largest height and width dimensions for paintings in each year?[SQL]\n\nSELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the average height and width of paintings grouped by painters and ordered by name?[SQL]\nSELECT AVG(height_mm) ,  AVG(width_mm) ,  T1.fname ,  T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid GROUP BY T1.fname ,  T1.lname ORDER BY T1.fname
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the average height and width of paintings grouped by painters and ordered by name[SQL]\nSELECT AVG(height_mm) ,  AVG(width_mm) ,  T1.fname ,  T1.lname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid GROUP BY T1.fname ,  T1.lname ORDER BY T1.fname
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the first names and number of works of all artists who have at least two paintings?[SQL]\n\nSELECT T2.fname ,  count(*) FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID GROUP BY T2.fname HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the first names of all artists who have at least two paintings, and how many works did each create?[SQL]\nSELECT T2.fname ,  COUNT(*) FROM paintings AS T1 JOIN artists AS T2 ON T1.painterID  =  T2.artistID GROUP BY T2.fname HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the death year of all artists who have at most 3 paintings?[SQL]\n\nSELECT deacyear FROM artists WHERE artistid IN (SELECT painterid FROM paintings GROUP BY painterid HAVING count(*)  <=  3)
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, When did each artist who created less than 4 paintings die ?[SQL]\n\nSELECT T1.lname ,  T1.fname ,  T1.birthyear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid GROUP BY T1.artistid HAVING count(*)  <  4 INTERSECT SELECT T1.lname ,  T1.fname ,  T1.birthyear FROM artists AS T1 JOIN scultures AS T2 ON T1.artistid  =  T2.sculptorid GROUP BY T1.artistid HAVING count(*)  <  4 INTERSECT SELECT lname ,  fname ,  birthyear FROM artists WHERE deathyear  >  (SELECT max(year) FROM paintings) INTERSECT SELECT lname ,  fname ,  birthyear FROM artists WHERE deathyear  >  (SELECT max(year
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the death year of the artist who made the least number of sculptures?[SQL]\n\nSELECT T1.deathyear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid  =  T2.sculptorid GROUP BY T1.artistid ORDER BY count(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, When did the artist who made the fewest sculptures die?[SQL]\nSELECT T1.deathyear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistid  =  T2.sculptorID GROUP BY T1.firstname ORDER BY count(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the id and height of the painting with the longest width in gallery 240?[SQL]\nSELECT paintingID ,  height_mm FROM paintings WHERE location = "gallery 240" ORDER BY width_mm DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Tell me the height and id number of the widest painting in gallery 240.[SQL]\nSELECT height_mm ,  paintingID FROM paintings WHERE location LIKE "gallery%240" ORDER BY width_mm DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of the paintings created before all of the paintings in gallery 240?[SQL]\nSELECT paintingID FROM paintings WHERE YEAR  <  (SELECT min(YEAR) FROM paintings WHERE location  =  'gallery 240')
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What is the id of every painting created before the oldest painting in gallery 240?[SQL]\nSELECT paintingID FROM paintings WHERE creation_date  <  (SELECT min(creation_date) FROM paintings WHERE location  =  'gallery 240')
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?[SQL]\nSELECT paintingID FROM paintings WHERE height_mm  >  (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, List the ids of all paintings that are taller than the longest painting created after 1900.[SQL]\nSELECT paintingID FROM paintings WHERE height_mm  >  (SELECT max(height_mm) FROM paintings WHERE year  >  1900)
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the top 3 artists who have the biggest number of painting works whose medium is oil?[SQL]\n\nSELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.medium  =  'oil' GROUP BY T1.artistid ORDER BY count(*) DESC LIMIT 3
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Which artists have the most paintings in oil?[SQL]\nSELECT T1.lname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistid  =  T2.painterid WHERE T2.medium  =  'oil' GROUP BY T1.artistid ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, List the painting id, location and title of the medium oil paintings ordered by year.[SQL]\n\nSELECT paintingID ,  LOCATION ,  title FROM paintings WHERE medium  =  'oil' ORDER BY YEAR
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Order all of the oil paintings by date of creation and list their ids, locations, and titles.[SQL]\nSELECT paintingID ,  LOCATION ,  title FROM Paintings WHERE medium  =  'oil' ORDER BY YEAR
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, List the year, location and title of paintings whose height is longer than 1000 ordered by title.[SQL]\nSELECT YEAR ,  LOCATION ,  title FROM Paintings WHERE height_mm  >  1000 ORDER BY title
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.[SQL]\nSELECT title ,  location ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the first and last name of artists who have painting but no sculpture work.[SQL]\n\nSELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Paintings AS T2 ON T1.artistid  =  T2.painterid EXCEPT SELECT T1.lname ,  T1.fname FROM Artists AS T1 JOIN Sculptures AS T2 ON T1.artistid  =  T2.sculptorid
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, What are the first and last names of the artists who did not sculpt but could paint.[SQL]\nSELECT fname ,  lname FROM artists WHERE artistid NOT IN (SELECT painterid FROM paintings)
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Find the locations that have paintings before 1885 and no work with medium on canvas?[SQL]\n\nSELECT location FROM paintings WHERE YEAR  <  1885 EXCEPT SELECT location FROM paintings WHERE medium  =  'canvas'
### Database Schema\ n\n['CREATE TABLE Artists (  artistID INTEGER,  lname TEXT,  fname TEXT,  birthYear INTEGER,  deathYear INTEGER,  PRIMARY KEY (artistID))CREATE TABLE Paintings (  paintingID INTEGER,  title TEXT,  year INTEGER,  height_mm INTEGER,  width_mm INTEGER,  medium TEXT,  mediumOn TEXT,  location TEXT,  painterID INTEGER,  PRIMARY KEY (paintingID),  FOREIGN KEY (painterID) REFERENCES Artists (artistID))CREATE TABLE Sculptures (  sculptureID INTEGER,  title TEXT,  year INTEGER,  medium TEXT,  location TEXT,  sculptorID INTEGER,  PRIMARY KEY (sculptureID),  FOREIGN KEY (sculptorID) REFERENCES Artists (artistID))']\n\n\n### Task \n\nBased on the provided database schema information, Where do you have paintings that were created before 1885 that are not on canvas?[SQL]\nSELECT title FROM paintings WHERE medium != 'Canvas' AND YEAR  <  1885
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many races are there?[SQL]\n SELECT count(*) FROM race
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of races.[SQL]\n SELECT count(*) FROM race
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List the winning drivers and winning teams of races in ascending alphabetical order of winning team.[SQL]\nSELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the winning drivers and teams of races, ordered alphabetically by team?[SQL]\nSELECT T1.Driver_name ,  T2.Team FROM driver AS T1 JOIN race AS T2 ON T1.driver_id = T2.driver_id WHERE T2.winning_driver = 'True' ORDER BY T2.Team ASC
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which winning drivers of races had pole position that is not "Junior Strous"?[SQL]\n\nSELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Return the winning drivers of races who did not have the pole position of Junior Strous.[SQL]\n\nSELECT Winning_driver FROM race WHERE pole_position != 'Junior Strous'
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Who are the constructors of drivers sorted by drivers' age in ascending order?[SQL]\nSELECT Constructor FROM driver ORDER BY Age ASC
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Return the different constructors of drivers, ordered by age ascending.[SQL]\nSELECT Constructor FROM driver ORDER BY Age ASC
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the distinct entrant types of drivers aged 20 or older?[SQL]\nSELECT DISTINCT Entrant FROM driver WHERE age  >=  20
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Give the different entrant types for drivers at least 20 years old.[SQL]\nSELECT Entrant FROM driver WHERE age  <  20 GROUP BY Entrant ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the maximum and minimum age of driver?[SQL]\nSELECT max(Age) ,  min(Age) FROM driver
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Return the maximum and minimum age across drivers.[SQL]\nSELECT max(Age) ,  min(Age) FROM driver
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many different engines are used by drivers with age older than 30 or younger than 20?[SQL]\nSELECT count(DISTINCT engine) FROM driver WHERE age  >  30 OR age  <  20
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of different engines used by drivers who had an age either over 30 or under 20.[SQL]\nSELECT count(DISTINCT engine) FROM driver WHERE age  >  30 OR age  <  20
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List all names of drivers in descending alphabetical order.[SQL]\nSELECT driver_name FROM driver ORDER BY driver_name DESC
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of drivers, ordered descending alphabetically?[SQL]\nSELECT driver_name FROM driver ORDER BY driver_name DESC
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Please show the names of drivers and the names of races they participate in.[SQL]\nSELECT T1.Driver_name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of drivers and the names of the races they took part in?[SQL]\nSELECT T1.Driver_name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Please show the names of drivers and the number of races they participate in.[SQL]\nSELECT T1.Driver_name ,  count(*) FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many races did each driver participate in?[SQL]\nSELECT T1.driver_id ,  count(*) FROM DRIVER AS T1 JOIN RACE AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Please show the age of the driver who participated in the most number of races.[SQL]\nSELECT T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the age of the driver who raced in the most races?[SQL]\nSELECT T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Please show the names and ages of the drivers who participated in at least two races.[SQL]\nSELECT T1.driver_name ,  T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and ages of drivers who raced in two or more races?[SQL]\nSELECT T1.driver_name ,  T1.age FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.driver_id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Please list the names of races with drivers aged 26 or older participating.[SQL]\nSELECT T1.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T2.age  >=  26
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of races in which drivers 26 or older took part?[SQL]\nSELECT T1.Race_Name FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T2.Age  >=  26
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of drivers whose constructor is not "Bugatti".[SQL]\nSELECT driver_name FROM driver WHERE constructor != 'Bugatti'
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names od drivers who did not have the constructor Bugatti?[SQL]\nSELECT Driver_name FROM driver EXCEPT SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id WHERE T2.constructor  =  'Bugatti'
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List different constructors and the number of drivers that use each constructor.[SQL]\nSELECT Constructor ,  COUNT(*) FROM driver GROUP BY Constructor
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many drivers use each constructor?[SQL]\nSELECT Constructor ,  count(*) FROM driver GROUP BY Constructor
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List the most common type of engine used by drivers.[SQL]\nSELECT Engine FROM driver GROUP BY Engine ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the most common type of engine?[SQL]\nSELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List the types of engines that are used by at least two drivers.[SQL]\nSELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the engine types that are used by two or more drivers?[SQL]\nSELECT Engine FROM driver GROUP BY Engine HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of drivers that do not participate in any race.[SQL]\nSELECT Driver_name FROM driver EXCEPT SELECT T1.Driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are names of drivers who did not take part in a race?[SQL]\nSELECT Driver_name FROM driver EXCEPT SELECT T1.Driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.[SQL]\nSELECT Constructor FROM driver WHERE age  <  20 INTERSECT SELECT Constructor FROM driver WHERE age  >  30
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?[SQL]\nSELECT Constructor FROM driver WHERE age  <  20 INTERSECT SELECT Constructor FROM driver WHERE age  >  30
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the teams that won more than once.[SQL]\nSELECT Constructor FROM race GROUP BY Constructor HAVING count(*)  >  1
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which teams won more than 1 race?[SQL]\nSELECT T1.Constructor FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Constructor HAVING count(*)  >  1
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the names of drivers who were in both "James Hinchcliffe" and "Carl Skerlong" pole positions before.[SQL]\nSELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id WHERE T2.pole_position  =  'James Hinchcliffe' INTERSECT SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id WHERE T2.pole_position  =  'Carl Skerlong'
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?[SQL]\nSELECT T1.Driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id WHERE T2.pole_position  =  'James Hinchcliffe' INTERSECT SELECT T1.Driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id WHERE T2.pole_position  =  'Carl Skerlong'
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, find the name of drivers who were never in "James Hinchcliffe" pole position before.[SQL]\nSELECT driver_name FROM driver EXCEPT SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id WHERE T2.pole_position  =  'James Hinchcliffe'
### Database Schema\ n\n['CREATE TABLE "driver" ("Driver_ID" int,"Driver_Name" text,"Entrant" text,"Constructor" text,"Chassis" text,"Engine" text,"Age" int,PRIMARY KEY ("Driver_ID"))CREATE TABLE "race" ("Road" int,"Driver_ID" int,"Race_Name" text,"Pole_Position" text,"Fastest_Lap" text,"Winning_driver" text,"Winning_team" text,"Report" text,PRIMARY KEY ("Road"),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of drivers except for those who had the pole position James Hinchcliffe?[SQL]\n\nSELECT driver_name FROM driver EXCEPT SELECT T1.driver_name FROM driver AS T1 JOIN race AS T2 ON T1.driver_id  =  T2.driver_id WHERE T2.pole_position  =  'James Hinchcliffe'
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, How many languages are there?[SQL]\nSELECT count(*) FROM languages
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of languages.[SQL]\n SELECT count(*) FROM languages
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, List the name of languages in ascending alphabetical order.[SQL]\nSELECT name FROM languages ORDER BY name ASC
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of languages, in alphabetical order?[SQL]\nSELECT name FROM languages ORDER BY name ASC
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of languages that contain the word "ish"?[SQL]\nSELECT name FROM languages WHERE name LIKE "%ish%"
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the names of langauges that contain the substring "ish".[SQL]\nSELECT name FROM languages WHERE name LIKE "%ish%"
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the names of countries in descending order of overall scores.[SQL]\nSELECT name FROM countries ORDER BY overall_score DESC
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the countries, ordered descending by overall score?[SQL]\nSELECT name FROM countries ORDER BY overall_score DESC
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average justice scores among countries?[SQL]\nSELECT avg(justice_score) FROM countries
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Give the average justice scores across all countries.[SQL]\nSELECT avg(justice_score) FROM countries
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the maximum and minimum health scores among countries that are not "Norway".[SQL]\nSELECT max(health_score) , min(health_score) FROM countries WHERE name != 'Norway'
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the maximum and minimum health scores across all countries other than Norway.[SQL]\nSELECT max(health_score) , min(health_score) FROM countries WHERE name != 'Norway'
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, How many different official languages are there?[SQL]\nSELECT count(DISTINCT language_id) FROM official_languages
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of different official languages.[SQL]\nSELECT count(DISTINCT language_id) FROM official_languages
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, List names of countries in descending order of education_score.[SQL]\nSELECT name FROM countries ORDER BY education_score DESC
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the countries, ordered descending by education score?[SQL]\nSELECT name FROM countries ORDER BY education_score DESC
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, List the name of the country with the biggest score in politics.[SQL]\nSELECT name FROM countries ORDER BY politics_score DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the country with the highest politics score?[SQL]\nSELECT name FROM countries ORDER BY politics_score DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the names of countries and their official languages.[SQL]\nSELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the countries, as well as the names of their official langauges?[SQL]\n SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the official languages and the number of countries speaking each language.[SQL]\nSELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T1.language_id
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the different official languages, as well as the number of countries that speak each?[SQL]\nSELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T1.language_id ORDER BY COUNT(*) DESC LIMIT 3
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the official language spoken by the most number of countries.[SQL]\nSELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T2.language_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the official language that is most common?[SQL]\nSELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T2.language_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the official languages spoken by at least two countries.[SQL]\nSELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T2.language_id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Which official languages are spoken in two or more countries?[SQL]\nSELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T2.language_id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the average overall scores of countries whose official language is "English".[SQL]\nSELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  'English'
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average overall score across countries with English as their official language?[SQL]\nSELECT avg(t1.overall_score) FROM countries AS t1 JOIN official_languages AS t2 ON t1.id  =  t2.country_id JOIN languages AS t3 ON t2.language_id  =  t3.id WHERE t3.name  =  'English'
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the three official languages that are most commonly spoken.[SQL]\nSELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T2.language_id ORDER BY count(*) DESC LIMIT 3
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the three official languages spoken in the most countries?[SQL]\nSELECT T1.name FROM Languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id GROUP BY T2.language_id ORDER BY count(*) DESC LIMIT 3
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the official languages sorted in descending order by the average overall scores among countries speaking them.[SQL]\nSELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id GROUP BY T2.language_id ORDER BY avg(T3.overall_score) DESC
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?[SQL]\nSELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id GROUP BY T2.language_id ORDER BY avg(T3.overall_score) DESC
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the name of the country that has the greatest number of official languages.[SQL]\nSELECT T1.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T2.country_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Which country has the greatest number of official languages?[SQL]\nSELECT T1.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T2.country_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of languages that are not the official language of any countries.[SQL]\nSELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of languages that are not the official language of any country?[SQL]\nSELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of countries that do not have any official language.[SQL]\nSELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of countries that do not have an official language?[SQL]\nSELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.[SQL]\nSELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id WHERE T3.overall_score  >  95 INTERSECT SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id WHERE T3.overall_score  <  90
### Database Schema\ n\n['CREATE TABLE "languages" ("id" integer,"name" text,PRIMARY KEY ("id"))CREATE TABLE "countries" ("id" integer,"name" text,"overall_score" real,"justice_score" real,"health_score" real,"education_score" real,"economics_score" real,"politics_score" real,PRIMARY KEY ("id"))CREATE TABLE "official_languages" ("language_id" integer,"country_id" integer,PRIMARY KEY ("language_id", "country_id"),FOREIGN KEY ("language_id") REFERENCES "languages"("id"),FOREIGN KEY ("country_id") REFERENCES "countries"("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?[SQL]\nSELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id WHERE T3.overall_score  >  95 INTERSECT SELECT T1.name FROM languages AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.language_id JOIN countries AS T3 ON T2.country_id  =  T3.id WHERE T3.overall_score  <  90
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Which countries and cities are included in addresses?[SQL]\nSELECT country ,  town_city FROM addresses
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the countries and cities for each address?[SQL]\nSELECT T1.country ,  T1.town_city FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id GROUP BY T1.address_id ORDER BY count(*) DESC
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, In which states are each of the the properties located?[SQL]\nSELECT T1.county_state_province FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id GROUP BY T1.county_state_province
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Give the states or provinces corresponding to each property.[SQL]\nSELECT T1.county_state_province FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id GROUP BY T1.county_state_province
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How is the feature rooftop described?[SQL]\nSELECT feature_description FROM FEATURES WHERE feature_name  =  'rooftop'
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the description of the feature 'rooftop'.[SQL]\nSELECT feature_description FROM FEATURES WHERE feature_name  =  'rooftop'
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the feature name and description of the most commonly seen feature across properties?[SQL]\nSELECT T1.feature_name ,  T1.feature_description FROM FEATURES AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ,  T1.feature_description ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Give the feature name and description for the most common feature across all properties.[SQL]\nSELECT T1.feature_name ,  T1.feature_description FROM FEATURES AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T2.feature_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What is the minimum number of rooms in a property?[SQL]\nSELECT min(room_size) FROM Rooms
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What is the lowest room count across all the properties?[SQL]\nSELECT min(room_count) FROM ROOMS
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many properties have 1 parking lot or 1 garage?[SQL]\nSELECT count(*) FROM Properties WHERE parking_lots  =  '1' OR garage_yn  =  '1'
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of properties that have 1 parking lot or 1 garage.[SQL]\nSELECT count(*) FROM Properties WHERE parking_lots  =  '1' OR garage_yn  =  '1'
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, For users whose description contain the string 'Mother', which age categories are they in?[SQL]\nSELECT age_category_code FROM USERS WHERE user_category_code  =  'Buyer' AND middle_name LIKE '%Mother%'
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the age categories for users whose description contains the string Mother?[SQL]\nSELECT age_category_code FROM Ref_Age_Categories WHERE age_category_description LIKE '%Mother%'
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What is the first name of the user who owns the greatest number of properties?[SQL]\nSELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id GROUP BY T1.user_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the first name of the user who owns the most properties.[SQL]\nSELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id GROUP BY T1.user_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, List the average room count of the properties with gardens.[SQL]\nSELECT avg(room_count) FROM Rooms WHERE room_type_code  =  'Garden'
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, On average, how many rooms do properties with garden features have?[SQL]\nSELECT avg(T2.room_count) FROM Property_Features AS T1 JOIN Rooms AS T2 ON T1.property_id  =  T2.property_id WHERE T1.feature_id  =  1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, In which cities are there any properties equipped with a swimming pool?[SQL]\nSELECT DISTINCT T1.town_city FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.parking_lots LIKE '%swimming pool%'
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the cities in which there exist properties that have swimming pools.[SQL]\nSELECT T1.town_city FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id JOIN Property_Features AS T3 ON T2.property_id  =  T3.property_id JOIN Features AS T4 ON T3.feature_id  =  T4.feature_id WHERE T4.feature_name  =  'Swimming Pool'
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Which property had the lowest price requested by the vendor? List the id and the price.[SQL]\nSELECT property_id ,  vendor_requested_price FROM PROPERTIES ORDER BY vendor_requested_price ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What is the id of the property that had the lowest requested price from the vendor, and what was that price?[SQL]\nSELECT property_id ,  vendor_requested_price FROM PROPERTIES ORDER BY vendor_requested_price ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, On average, how many rooms does a property have?[SQL]\nSELECT avg(room_count) FROM properties
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average number of rooms in a property?[SQL]\nSELECT avg(room_count) FROM Properties
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many kinds of room sizes are listed?[SQL]\nSELECT count(DISTINCT room_size) FROM Rooms
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the number of different room sizes.[SQL]\nSELECT count(DISTINCT room_size) FROM Rooms
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of users who have searched at least twice, and what did they search?[SQL]\nSELECT T1.login_name ,  T1.first_name ,  T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T2.search_seq  >=  2
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the ids of users who have performed two or more searches, as well as their search sequence.[SQL]\nSELECT user_id ,  search_seq FROM User_Searches GROUP BY user_id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, When was the time of the latest search by a user?[SQL]\nSELECT max(search_datetime) FROM User_Searches
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What was the time of the most recent search?[SQL]\nSELECT max(search_datetime) FROM User_Searches
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are all the user searches time and content? Sort the result descending by content.[SQL]\nSELECT T1.search_datetime ,  T1.search_string FROM User_Searches AS T1 JOIN Users AS T2 ON T1.user_id  =  T2.user_id ORDER BY T1.search_string DESC
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.[SQL]\nSELECT search_string ,  search_datetime FROM User_Searches ORDER BY search_string DESC
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the zip codes of properties which do not belong to users who own at most 2 properties?[SQL]\nSELECT T1.zip_postcode FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE property_id NOT IN ( SELECT T3.property_id FROM properties AS T3 JOIN users AS T4 ON T3.owner_user_id  =  T4.user_id GROUP BY T4.user_id HAVING count(*)  <=  2 )
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the zip codes for properties not belonging to users who own two or fewer properties.[SQL]\nSELECT T1.zip_postcode FROM addresses AS T1 JOIN properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.property_id NOT IN ( SELECT T3.property_id FROM properties AS T3 JOIN users AS T4 ON T3.owner_user_id  =  T4.user_id GROUP BY T4.user_id HAVING count(*)  <=  2 )
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the users making only one search? List both category and user id.[SQL]\nSELECT T1.user_category_code ,  T1.user_id FROM Ref_User_Categories AS T1 JOIN User_Searches AS T2 ON T1.user_category_code  =  T2.user_id GROUP BY T1.user_category_code HAVING count(*)  =  1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of users who have only made one search, and what are their category codes?[SQL]\nSELECT T1.user_id ,  T2.user_category_code FROM Users AS T1 JOIN Ref_User_Categories AS T2 ON T1.age_category_code  =  T2.age_category_code JOIN User_Searches AS T3 ON T1.user_id  =  T3.user_id GROUP BY T1.user_id HAVING count(*)  =  1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What is the age range category of the user who made the first search?[SQL]\nSELECT t2.age_category_description FROM Users AS t1 JOIN Ref_Age_Categories AS t2 ON t1.age_category_code  =  t2.age_category_code JOIN User_Searches AS t3 ON t1.user_id  =  t3.user_id ORDER BY t3.search_datetime LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the age category for the user who made the earliest search.[SQL]\nSELECT t3.age_category_code FROM users AS t1 JOIN User_Searches AS t2 ON t1.user_id  =  t2.user_id JOIN Ref_Age_Categories AS t3 ON t1.age_category_code  =  t3.age_category_code ORDER BY t2.search_datetime LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Find the login names of all senior citizen users ordered by their first names.[SQL]\nSELECT T1.login_name FROM USERS AS T1 JOIN ADDRESSES AS T2 ON T1.user_address_id  =  T2.address_id WHERE T1.age_category_code  =  'Senior' ORDER BY T1.first_name
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the login names of all senior citizens, sorted by first name?[SQL]\nSELECT T1.login_name FROM Users AS T1 JOIN Ref_Age_Categories AS T2 ON T1.age_category_code  =  T2.age_category_code WHERE T2.age_category_description  =  'Senior Citizen' ORDER BY T1.first_name ASC
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many searches do buyers make in total?[SQL]\nSELECT count(*) FROM users AS T1 JOIN user_searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of searches made by buyers.[SQL]\nSELECT count(*) FROM users AS T1 JOIN user_searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, When did the user with login name ratione register?[SQL]\nSELECT date_registered FROM Users WHERE login_name  =  "ratione"
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What was the registration date for the user whose login name is ratione?[SQL]\nSELECT date_registered FROM USERS WHERE login_name  =  "ratione"
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.[SQL]\nSELECT first_name ,  middle_name ,  last_name ,  login_name FROM USERS WHERE is_seller  =  1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the first, middle, last, and login names for all users who are sellers?[SQL]\nSELECT first_name ,  middle_name ,  last_name ,  login_name FROM USERS WHERE is_seller  =  1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Where do the Senior Citizens live? List building, street, and the city.[SQL]\nSELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T2.town_city FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.age_category_code  =  "Senior Citizen"
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the buildings, streets, and cities corresponding to the addresses of senior citizens?[SQL]\nSELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.age_category_code  =   "Senior Citizen"
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many properties are there with at least 2 features?[SQL]\nSELECT count(*) FROM Property_Features GROUP BY property_id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of properties with at least two features.[SQL]\nSELECT count(*) FROM Property_Features GROUP BY property_id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many photos does each property have?[SQL]\nSELECT T2.photo_filename ,  COUNT(*) FROM properties AS T1 JOIN property_photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of property photos each property has by id.[SQL]\nSELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many photos does each owner has of his or her properties? List user id and number of photos.[SQL]\nSELECT T1.user_id ,  count(*) FROM users AS T1 JOIN property_photos AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the user ids of property owners who have property photos, and how many do each of them have?[SQL]\nSELECT T1.user_id ,  COUNT(*) FROM users AS T1 JOIN property_photos AS T2 ON T1.user_id  =  T2.property_id GROUP BY T1.user_id
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What is the total max price of the properties owned by single mothers or students?[SQL]\nSELECT sum(vendor_requested_price) FROM users AS T1 JOIN properties AS T2 ON T1.user_id  =  T2.owner_user_id WHERE T1.user_category_code  =  'Single Mother' OR T1.user_category_code  =  'Student'
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Give the total max price corresponding to any properties owned by single mothers or students.[SQL]\nSELECT max(vendor_requested_price) FROM users AS T1 JOIN properties AS T2 ON T1.user_id  =  T2.owner_user_id WHERE T1.age_category_code  =  'Single Mother' OR T1.user_category_code  =  'Student'
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the date stamps and property names for each item of property history, ordered by date stamp?[SQL]\nSELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY T1.datestamp
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the date stamp and property name for each property history event, sorted by date stamp.[SQL]\nSELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY T1.datestamp
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What is the description of the most common property type? List the description and code.[SQL]\nSELECT t2.property_type_description ,  t1.property_type_code FROM properties AS t1 JOIN ref_property_types AS t2 ON t1.property_type_code  =  t2.property_type_code GROUP BY t1.property_type_code ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What is the most common property type, and what is its description.[SQL]\nSELECT t2.property_type_description FROM properties AS t1 JOIN ref_property_types AS t2 ON t1.property_type_code  =  t2.property_type_code GROUP BY t1.property_type_code ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What is the detailed description of the age category code 'Over 60'?[SQL]\nSELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60'
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Give the category description of the age category 'Over 60'.[SQL]\nSELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60'
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the different room sizes, and how many of each are there?[SQL]\nSELECT room_size ,  count(*) FROM Rooms GROUP BY room_size ORDER BY count(*) DESC
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the number of rooms with each different room size.[SQL]\nSELECT room_size ,  count(*) FROM Rooms GROUP BY room_size ORDER BY count(*) DESC
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, In which country does the user with first name Robbie live?[SQL]\nSELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  "Robbie"
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the country in which the user with first name Robbie lives.[SQL]\nSELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  "Robbie"
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the first, middle and last names of users who own the property they live in?[SQL]\nSELECT T2.first_name ,  T2.middle_name ,  T2.last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.age_category_code  =  (SELECT age_category_code FROM ADDRESSES AS T3 JOIN Properties AS T4 ON T3.address_id  =  T4.property_address_id WHERE T3.line_1_number_building  =  T1.property_address_id)
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the full names of users who live in properties that they own.[SQL]\nSELECT T3.first_name ,  T3.last_name FROM Properties AS T1 JOIN user_property_history AS T2 ON T1.property_id  =  T2.property_id JOIN Users AS T3 ON T2.user_id  =  T3.user_id WHERE T3.age_category_code  =  "Buyer" AND T1.owner_user_id  =  T2.user_id
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, List the search content of the users who do not own a single property.[SQL]\nSELECT T1.search_string FROM User_Searches AS T1 JOIN Users AS T2 ON T1.user_id  =  T2.user_id WHERE T2.user_category_code  =  'Buyer' EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What search strings were entered by users who do not own any properties?[SQL]\nSELECT search_string FROM user_searches WHERE user_id NOT IN (SELECT user_id FROM user_property_history)
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, List the last names and ids of users who have at least 2 properties and searched at most twice.[SQL]\nSELECT T2.last_name ,  T1.user_id FROM User_Property_History AS T1 JOIN Users AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  >=  2 INTERSECT SELECT T2.last_name ,  T1.user_id FROM User_Searches AS T1 JOIN Users AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2"
### Database Schema\ n\n['CREATE TABLE `Ref_Age_Categories` (`age_category_code` VARCHAR(15) PRIMARY KEY,`age_category_description` VARCHAR(80))CREATE TABLE `Ref_Property_Types` (`property_type_code` VARCHAR(15) PRIMARY KEY,`property_type_description` VARCHAR(80))CREATE TABLE `Ref_Room_Types` (`room_type_code` VARCHAR(15) PRIMARY KEY,`room_type_description` VARCHAR(80))CREATE TABLE `Ref_User_Categories` (`user_category_code` VARCHAR(15) PRIMARY KEY,`user_category_description` VARCHAR(80))CREATE TABLE `Addresses` (`address_id` INTEGER PRIMARY KEY,`line_1_number_building` VARCHAR(80),`line_2_number_street` VARCHAR(80),`line_3_area_locality` VARCHAR(80),`town_city` VARCHAR(80),`zip_postcode` VARCHAR(20),`county_state_province` VARCHAR(80),`country` VARCHAR(50),`other_address_details` VARCHAR(255))CREATE TABLE `Features` (`feature_id` INTEGER PRIMARY KEY,`feature_name` VARCHAR(80),`feature_description` VARCHAR(80))CREATE TABLE `Users` (`user_id` INTEGER PRIMARY KEY,`age_category_code` VARCHAR(15),`user_category_code` VARCHAR(15),`user_address_id` INTEGER NOT NULL,`is_buyer` VARCHAR(1),`is_seller` VARCHAR(1),`login_name` VARCHAR(25),`password` VARCHAR(8),`date_registered` DATETIME,`first_name` VARCHAR(80),`middle_name` VARCHAR(80),`last_name` VARCHAR(80),`other_user_details` VARCHAR(255))CREATE TABLE `Properties` (`property_id` INTEGER PRIMARY KEY,`property_address_id` INTEGER NOT NULL,`owner_user_id` INTEGER NOT NULL,`property_type_code` VARCHAR(15) NOT NULL,`date_on_market` DATETIME,`date_off_market` DATETIME,`property_name` VARCHAR(80),`property_description` VARCHAR(255),`garage_yn` VARCHAR(1),`parking_lots` VARCHAR(1),`room_count` VARCHAR(10),`vendor_requested_price` DOUBLE NULL,`price_min` DOUBLE NULL,`price_max` DOUBLE NULL,`other_property_details` VARCHAR(255),FOREIGN KEY (`owner_user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_address_id` ) REFERENCES `Addresses`(`address_id` ),FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` ))CREATE TABLE `Property_Features` (`property_id` INTEGER NOT NULL,`feature_id` INTEGER NOT NULL,`feature_value` VARCHAR(80),`property_feature_description` VARCHAR(80),FOREIGN KEY (`feature_id` ) REFERENCES `Features`(`feature_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Property_Photos` (`property_id` INTEGER NOT NULL,`photo_seq` INTEGER NOT NULL,`photo_title` VARCHAR(30),`photo_description` VARCHAR(255),`photo_filename` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `Rooms` (`property_id` INTEGER NOT NULL,`room_number` VARCHAR(10) NOT NULL,`room_type_code` VARCHAR(15) NOT NULL,`room_size` VARCHAR(20),`other_room_details` VARCHAR(255),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ),FOREIGN KEY (`room_type_code` ) REFERENCES `Ref_Room_Types`(`room_type_code` ))CREATE TABLE `User_Property_History` (`user_id` INTEGER NOT NULL,`property_id` INTEGER NOT NULL,`datestamp` DATETIME NOT NULL,FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ),FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` ))CREATE TABLE `User_Searches` (`user_id` INTEGER NOT NULL,`search_seq` INTEGER NOT NULL,`search_datetime` DATETIME,`search_string` VARCHAR(80),FOREIGN KEY (`user_id` ) REFERENCES `Users`(`user_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the last names and ids of users who have searched two or fewer times, and own two or more properties?[SQL]\nSELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Property_History AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id GROUP BY T1.user_id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, How many bikes are heavier than 780 grams?[SQL]\nSELECT count(*) FROM bike WHERE weight  >  780
### Database Schema\ n\n['CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, List the product names and weights of the bikes in ascending order of price.[SQL]\nSELECT product_name ,  weight FROM bike ORDER BY price ASC
### Database Schema\ n\n['CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, List the heat, name, and nation for all the cyclists.[SQL]\nSELECT heat ,  name ,  nation FROM cyclist
### Database Schema\ n\n['CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the maximum and minimum weight of all bikes?[SQL]\nSELECT max(weight) ,  min(weight) FROM bike
### Database Schema\ n\n['CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average price of the bikes made of material 'Carbon CC'?[SQL]\nSELECT avg(price) FROM bike WHERE material  =  'Carbon CC'
### Database Schema\ n\n['CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the name and result of the cyclists not from 'Russia' ?[SQL]\nSELECT name ,  result FROM cyclist WHERE nation != 'Russia'
### Database Schema\ n\n['CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the distinct ids and product names of the bikes that are purchased after year 2015?[SQL]\nSELECT DISTINCT id ,  product_name FROM bike WHERE purchase_year  >  2015
### Database Schema\ n\n['CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids and names of racing bikes that are purchased by at least 4 cyclists?[SQL]\nSELECT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id GROUP BY T1.id HAVING count(*)  >=  4
### Database Schema\ n\n['CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the id and name of the cyclist who owns the most bikes?[SQL]\nSELECT t1.id ,  t1.name FROM cyclist AS t1 JOIN cyclists_own_bikes AS t2 ON t1.id  =  t2.cyclist_id GROUP BY t1.id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?[SQL]\nSELECT DISTINCT T3.product_name FROM cyclists AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.name IN (SELECT name FROM cyclist WHERE nation  =  'Great Britain')
### Database Schema\ n\n['CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, How many different levels of heat are there for the cyclists?[SQL]\n SELECT COUNT(DISTINCT heat) FROM cyclist
### Database Schema\ n\n['CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, How many cyclists did not purchase any bike after year 2015?[SQL]\nSELECT COUNT(*) FROM cyclist WHERE id NOT IN ( SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year  >  2015 )
### Database Schema\ n\n['CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?[SQL]\nSELECT DISTINCT T3.product_name FROM cyclists_own_bikes AS T1 JOIN bike AS T3 ON T1.bike_id  =  T3.id JOIN cyclist AS T2 ON T1.cyclist_id  =  T2.id WHERE T2.result  >  '4:21.558' AND T3.material  =  'racing'
### Database Schema\ n\n['CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.[SQL]\nSELECT t1.product_name ,  t1.price FROM bike AS t1 JOIN cyclists_own_bikes AS t2 ON t1.id  =  t2.bike_id JOIN cyclist AS t3 ON t2.cyclist_id  =  t3.id WHERE t3.name  =  'Bradley Wiggins' INTERSECT SELECT t1.product_name ,  t1.price FROM bike AS t1 JOIN cyclists_own_bikes AS t2 ON t1.id  =  t2.bike_id JOIN cyclist AS t3 ON t2.cyclist_id  =  t3.id WHERE t3.name  =  'Antonio Tauler'
### Database Schema\ n\n['CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the name, nation and result for the cyclists who did not purchase any racing bike.[SQL]\n SELECT name ,  nation ,  RESULT FROM cyclist WHERE id NOT IN (SELECT cyclist_id FROM cyclists_own_bikes)
### Database Schema\ n\n['CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the bikes that have substring 'fiber' in their material?[SQL]\nSELECT product_name FROM bike WHERE material LIKE '%fiber%'
### Database Schema\ n\n['CREATE TABLE "bike" (    "id" int,    "product_name" text,    "weight" int,    "price" real,    "material" text,    primary key("id"))CREATE TABLE "cyclist" (    "id" int,    "heat" int,    "name" text,    "nation" text,    "result" real,    primary key("id"))CREATE TABLE "cyclists_own_bikes" (    "cyclist_id" int,    "bike_id" int,    "purchase_year" int,    primary key("cyclist_id", "bike_id"),    foreign key("cyclist_id") references `cyclist`("id"),    foreign key("bike_id") references `bike`("id"))']\n\n\n### Task \n\nBased on the provided database schema information, How many bikes does each cyclist own? Order by cyclist id.[SQL]\nSELECT COUNT(*) ,  T1.id FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id GROUP BY T1.id ORDER BY T1.id
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What is the most expensive cake and its flavor?[SQL]\nSELECT max(T1.price) ,  T2.flavor FROM goods AS T1 JOIN customertype AS T2 ON T1.id  =  T2.id WHERE T2.food  =  "cake"
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Give the id and flavor of the most expensive cake.[SQL]\nSELECT Id ,  Flavor FROM goods ORDER BY price DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What is the cheapest cookie and its flavor?[SQL]\nSELECT Flavor ,  min(price) FROM goods WHERE food  =  'cookie'
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What is the id and flavor of the cheapest cookie?[SQL]\nSELECT id ,  Flavor FROM goods ORDER BY price LIMIT 1
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Find the ids of goods that have apple flavor.[SQL]\nSELECT Id FROM goods WHERE Flavor  =  "Apple"
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids with apple flavor?[SQL]\nSELECT Id FROM goods WHERE Flavor  =  "Apple"
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of goods that cost less than 3 dollars?[SQL]\nSELECT id FROM goods WHERE price  <  3
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Give the ids of goods that cost less than 3 dollars.[SQL]\nSELECT id FROM goods WHERE price  <  3
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, List the distinct ids of all customers who bought a cake with lemon flavor?[SQL]\nSELECT DISTINCT T1.id FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt JOIN goods AS T3 ON T2.item = T3.id WHERE T3.flavor  =  "Lemon"
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the distinct ids of customers who bought lemon flavored cake?[SQL]\nSELECT DISTINCT T1.id FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt JOIN goods AS T3 ON T2.item = T3.id WHERE T3.Flavor  =  "Lemon"
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, For each type of food, tell me how many customers have ever bought it.[SQL]\nSELECT count(*) ,  T1.Food FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.item WHERE T1.food  =  'pizza'
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, How many customers have bought each food?[SQL]\nSELECT T3.Food ,  count(*) FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id JOIN receipts AS T3 ON T3.receipt  =  T1.receipt WHERE T2.food  =  T3.food GROUP BY T3.food'
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Find the id of customers who shopped at the bakery at least 15 times.[SQL]\nSELECT T1.id FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.customerid JOIN items AS T3 ON T2.receipt  =  T3.receipt WHERE T3.item  =  'bakery' GROUP BY T1.id HAVING count(*)  >=  15
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the customer ids of customers who have at least 15 receipts?[SQL]\nSELECT id FROM customers GROUP BY id HAVING count(*)  >=  15
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What is the last name of the customers who shopped at the bakery more than 10 times?[SQL]\nSELECT T2.LastName FROM items AS T1 JOIN customers AS T2 ON T1.customerid  =  T2.id JOIN receipts AS T3 ON T1.receipt  =  T3.receipt WHERE T3.date  =  (SELECT max(T4.date) FROM receipts AS T4 JOIN items AS T5 ON T4.receipt  =  T5.receipt WHERE T5.item  =  'bakery' GROUP BY T4.customerid HAVING count(*)  >  10)
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Give the last names of customers who have been to the bakery more than 10 times?[SQL]\nSELECT T2.LastName FROM items AS T1 JOIN customers AS T2 ON T1.customerid  =  T2.id JOIN goods AS T3 ON T1.item  =  T3.id WHERE T3.Food  =  'bread' GROUP BY T2.LastName HAVING count(*)  >  10
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, How many types of Cake does this bakery sell?[SQL]\nSELECT count(DISTINCT Flavor) FROM goods WHERE Food  =  'Cake'
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of types of cake this bakery sells.[SQL]\nSELECT count(DISTINCT Flavor) FROM goods WHERE Food  =  'Cake'
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, List all the flavors of Croissant available in this bakery.[SQL]\nSELECT Flavor FROM goods WHERE Food  =  'Croissant'
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are all the flavors of croissant?[SQL]\nSELECT Flavor FROM goods WHERE Food  =  'Croissant'
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Give me a list of all the distinct items bought by the customer number 15.[SQL]\nSELECT DISTINCT T2.item FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt WHERE T1.customerid = 15
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are all the distinct items bought by customer 15?[SQL]\nSELECT DISTINCT T2.item FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt WHERE T1.customerid = 15
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, For each type of food, what are the average, maximum and minimum price?[SQL]\nSELECT avg(price) ,  max(price) ,  min(price) ,  food FROM goods GROUP BY food
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the average, minimum and maximum prices for each food?[SQL]\nSELECT avg(T1.price) ,  min(T1.price) ,  max(T1.price) ,  T2.food FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item GROUP BY T2.food
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Find the receipt numbers where both Cake and Cookie were bought.[SQL]\nSELECT T1.receiptnumber FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  'Cake' INTERSECT SELECT T1.receiptnumber FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  'Cookie'
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the receipt numbers for instances where both cakes and cookies were purchased?[SQL]\nSELECT DISTINCT T1.receiptnumber FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  'Cake' INTERSECT SELECT DISTINCT T1.receiptnumber FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  'Cookie'
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.[SQL]\nSELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.Id WHERE T2.LastName  =  "LOGAN" AND T1.Date  =  (SELECT min(T1.Date) FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.Id WHERE T2.LastName  =  "LOGAN" AND T1.item  =  "Croissant")
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the receipt numbers for a customer with the last name Logan who purchased a croissant?[SQL]\nSELECT DISTINCT T1.receiptnumber FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt WHERE T2.item IN (SELECT T3.id FROM goods AS T3 WHERE T3.food  =  'croissant' ) AND T1.customerid IN (SELECT T4.id FROM receipts AS T4 JOIN customers AS T5 ON T4.customerid  =  T5.id WHERE T5.lastname  =  'Logan')
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What is the receipt number and date of the receipt in which the most expensive item was bought?[SQL]\nSELECT T1.receiptnumber ,  T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt ORDER BY T2.itemprice DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?[SQL]\nSELECT T1.receiptnumber ,  T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt ORDER BY T2.price DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What is the item that was bought the least number of times?[SQL]\nSELECT Item FROM items GROUP BY Item ORDER BY count(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Which item was bought the fewest times?[SQL]\nSELECT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id GROUP BY T1.item ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, How many goods are available for each food type?[SQL]\nSELECT Food ,  COUNT(*) FROM goods GROUP BY Food
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of goods for each food type.[SQL]\nSELECT Food ,  count(*) FROM goods GROUP BY Food
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average price for each food type?[SQL]\nSELECT avg(T2.Price) ,  T2.Food FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id GROUP BY T2.Food
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Give the average price for each food type.[SQL]\nSELECT avg(T2.price) ,  T1.food FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id GROUP BY T1.food
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?[SQL]\nSELECT id FROM goods WHERE Flavor  =  "Apricot" AND price  <  5
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.[SQL]\nSELECT id FROM goods WHERE Flavor  =  "Apricot" AND price  <  5
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Find flavor of cakes that cost more than 10 dollars.[SQL]\nSELECT T2.Flavor FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 AND T2.Food  =  "Cake"'
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the flavors of cakes that cost more than 10 dollars?[SQL]\nSELECT Flavor FROM goods WHERE price  >  10 AND Food  =  "Cake"
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Give me the distinct id and price for all goods whose price is below the average of all goods?[SQL]\nSELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the distinct ids and prices for goods that cost less than the average good?[SQL]\nSELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the distinct ids of all goods that are cheaper than some goods of type Tart?[SQL]\nSELECT DISTINCT id FROM goods WHERE price  <  (SELECT min(price) FROM goods WHERE Food  =  'Tart')
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Give the distinct ids for goods that cost less than any Tart.[SQL]\nSELECT DISTINCT id FROM goods WHERE price  <  (SELECT min(price) FROM goods WHERE food  =  'Tart')
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.[SQL]\nSELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.item IN (SELECT id FROM goods WHERE price  >  13)
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?[SQL]\nSELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.item IN (SELECT id FROM goods WHERE price  >  13)
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, On which date did some customer buy a good that costs more than 15 dollars?[SQL]\nSELECT T2.Date FROM receipts AS T2 JOIN items AS T1 ON T2.Receipt = T1.Receipt JOIN goods AS T3 ON T1.item = T3.id WHERE T3.price  >  15 LIMIT 1
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Which date corresponds to when a customer purchased a good costing over 15 dollars?[SQL]\nSELECT T2.Date FROM items AS T1 JOIN receipts AS T2 ON T1.Receipt = T2.Receipt JOIN goods AS T3 ON T1.item = T3.id WHERE T3.price  >  15
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Give me the list of ids of all goods whose id has "APP".[SQL]\nSELECT Id FROM goods WHERE Id LIKE "%APP%"
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are all the ids of goods with an id which contains "APP"?[SQL]\nSELECT Id FROM goods WHERE Id LIKE "%APP%"
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Which good has "70" in its id? And what is its price?[SQL]\nSELECT Price FROM goods WHERE Id  =  70
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the id and price for the good with "70" in its id?[SQL]\nSELECT Id ,  Price FROM goods WHERE Id LIKE "%70%"
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, List the last names of all customers in an alphabetical order.[SQL]\nSELECT LastName FROM customers ORDER BY LastName ASC
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the last names of the customers in alphabetical order?[SQL]\nSELECT lastname FROM customers ORDER BY lastname
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Return the ordered list of all good ids.[SQL]\nSELECT Id FROM goods ORDER BY Flavor ,  Food
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Order the distinct good ids.[SQL]\nSELECT DISTINCT Id FROM goods
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.[SQL]\nSELECT DISTINCT T1.receiptnumber FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt WHERE T2.item IN (SELECT T1.id FROM goods AS T1 WHERE T1.flavor  =  "apple") UNION SELECT T1.receiptnumber FROM receipts AS T1 JOIN customers AS T2 ON T1.customerid = T2.id WHERE T2.id  =  12
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?[SQL]\nSELECT DISTINCT T1.receiptnumber FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt WHERE T2.item IN (SELECT T1.id FROM goods AS T1 WHERE T1.flavor  =  "Apple" AND T1.food  =  "Pie") OR T1.customerid =  12
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Find all receipts which has the latest date. Also tell me that date.[SQL]\nSELECT Date FROM receipts ORDER BY date DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What is the receipt number with the latest date, and what is that date?[SQL]\nSELECT ReceiptNumber ,  DATE FROM receipts ORDER BY DATE DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Find all receipts which either has the earliest date or has a good with price above 10.[SQL]\nSELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.item IN (SELECT T1.id FROM goods AS T1 JOIN receipts AS T2 ON T1.receipt = T2.receipt ORDER BY T2.date ASC LIMIT 1) UNION SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Receipt JOIN goods AS T3 ON T2.item = T3.id WHERE T3.price > 10
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are all the receipt numbers that have a good with a price above 10 or have the earliest date?[SQL]\nSELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.item IN (SELECT T3.id FROM goods AS T3 WHERE T3.price  >  10) OR T1.date = (SELECT min(T4.date) FROM receipts AS T4)
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of Cookie and Cake that cost between 3 and 7 dollars.[SQL]\nSELECT Id FROM goods WHERE price BETWEEN 3 AND 7 AND Flavor = "Chocolate";
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.[SQL]\nSELECT Id FROM goods WHERE price BETWEEN 3 AND 7 AND Flavor LIKE "%Cookie%" OR Flavor LIKE "%Cake%"
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Find the first name and last name of a customer who visited on the earliest date.[SQL]\nSELECT T1.firstname ,  T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid ORDER BY T2.date LIMIT 1
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What is the full name of the customer who visited on the earliest date?[SQL]\nSELECT T1.firstname ,  T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid ORDER BY T2.date LIMIT 1
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What is average price of goods whose flavor is blackberry or blueberry?[SQL]\nSELECT avg(price) FROM goods WHERE Flavor  =  "blackberry" OR Flavor  =  "blueberry"
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the average prices of goods with blackberry or blueberry flavor?[SQL]\nSELECT avg(price) FROM goods WHERE Flavor  =  "Blackberry" OR Flavor  =  "Blueberry"
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Return the cheapest price for goods with cheese flavor.[SQL]\nSELECT min(price) FROM goods WHERE Flavor  =  "Cheese"
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What is the cheapest good with cheese flavor?[SQL]\nSELECT min(T1.price) ,  T1.Flavor FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item WHERE T1.Flavor  =  'cheese'
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are highest, lowest, and average prices of goods, grouped and ordered by flavor?[SQL]\nSELECT avg(price) ,  min(price) ,  max(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?[SQL]\nSELECT max(T1.Price) ,  min(T1.Price) ,  avg(T1.Price) ,  T2.Flavor FROM goods AS T1 JOIN goods AS T2 ON T1.Flavor  =  T2.Flavor GROUP BY T2.Flavor ORDER BY T2.Flavor
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Return the lowest and highest prices of goods grouped and ordered by food type.[SQL]\nSELECT min(price) ,  max(price) ,  Flavor ,  Food FROM goods GROUP BY Food ORDER BY Food
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the minimum and maximum prices of food goods, ordered by food?[SQL]\nSELECT min(T1.Price) ,  max(T1.Price) ,  T2.food FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item WHERE T2.item IN (SELECT T1.id FROM goods AS T1) ORDER BY T2.food
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Find the top three dates with the most receipts.[SQL]\nSELECT Date FROM receipts GROUP BY Date ORDER BY count(*) DESC LIMIT 3
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the three dates for which the most receipts were given?[SQL]\nSELECT Date FROM receipts GROUP BY Date ORDER BY count(*) DESC LIMIT 3
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Which customer shopped most often? How many times?[SQL]\nSELECT T1.firstname ,  T1.lastname ,  count(*) FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Give the customer id of the customer that made the most purchases, as well as the number of purchases made.[SQL]\nSELECT T1.customerid ,  COUNT(*) FROM receipts AS T1 JOIN items AS T2 ON T1.receipt = T2.receipt GROUP BY T1.customerid ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, For each date, return how many distinct customers visited on that day.[SQL]\nSELECT count(DISTINCT customerid) ,  date FROM receipts GROUP BY date
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, How many cusomters visited on each date?[SQL]\nSELECT count(*) ,  Date FROM receipts GROUP BY Date'
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Give me the first name and last name of customers who have bought apple flavor Tart.[SQL]\nSELECT DISTINCT T1.firstname ,  T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid JOIN items AS T3 ON T2.receipt = T3.receipt JOIN goods AS T4 ON T3.item = T4.id WHERE T4.Flavor  =  "apple" AND T4.Food  =  "Tart"
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the full names of customers who bought apple flavored Tarts?[SQL]\nSELECT T1.firstname ,  T1.lastname FROM customers AS T1 JOIN receipts AS T2 ON T1.id = T2.customerid JOIN items AS T3 ON T2.receipt = T3.receipt JOIN goods AS T4 ON T3.item = T4.id WHERE T4.Flavor  =  "apple" AND T4.Food  =  "Tarts"
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of Cookies whose price is lower than any Croissant?[SQL]\nSELECT id FROM goods WHERE food = "Croissant" EXCEPT SELECT id FROM goods WHERE food = "Cookies" AND price  <  (SELECT min(price) FROM goods WHERE food = "Cookies")
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Give the ids of cookes that are cheaper than any croissant.[SQL]\nSELECT T1.id FROM cookes AS T1 JOIN goods AS T2 ON T1.good_id  =  T2.id WHERE T2.food  =  'croissant' AND T2.price  <  (SELECT min(T2.price) FROM goods AS T2 WHERE T2.food  =  'croissant')
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Give me the ids of Cakes whose price is at least as much as the average price of Tart?[SQL]\nSELECT id FROM goods WHERE price  >=  (SELECT avg(price) FROM goods WHERE food  =  'Tart') AND flavor  =  'Cake'
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of cakes that are at least as expensive as the average Tart?[SQL]\nSELECT id FROM goods WHERE price  >=  (SELECT avg(price) FROM goods WHERE food  =  'Tart')
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of goods whose price is above twice the average price of all goods?[SQL]\nSELECT Id FROM goods WHERE price  >  (SELECT avg(price) FROM goods) * 2
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Give the ids of goods that are more than twice as expensive as the average good.[SQL]\nSELECT id FROM goods WHERE price  >  2 * (SELECT avg(price) FROM goods)
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, List the id, flavor and type of food of goods ordered by price.[SQL]\nSELECT id ,  Flavor ,  Food FROM goods ORDER BY price
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids, flavors, and food types of goods, ordered by price?[SQL]\nSELECT id ,  Flavor ,  Food FROM goods ORDER BY Price
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Return a list of the id and flavor for Cakes ordered by flavor.[SQL]\nSELECT Id ,  Flavor FROM goods WHERE Food = "Cake" ORDER BY Flavor
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids and flavors of cakes, ordered by flavor?[SQL]\nSELECT Id ,  Flavor FROM goods WHERE Food = "Cake" ORDER BY Flavor
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Find all the items that have chocolate flavor but were not bought more than 10 times.[SQL]\nSELECT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  'chocolate' EXCEPT SELECT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id GROUP BY T1.item HAVING count(*)  >  10
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the items with chocolate flavor that were purchased at most 10 times.[SQL]\nSELECT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  'chocolate' GROUP BY T1.item ORDER BY count(*) DESC LIMIT 10
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the flavors available for Cake but not for Tart?[SQL]\nSELECT Flavor FROM goods WHERE Food != 'Tart' EXCEPT SELECT Flavor FROM goods WHERE Food  =  'Cake'
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Give the flavors of Cakes that are not available for Tart.[SQL]\nSELECT Flavor FROM goods WHERE Food != 'Tart' EXCEPT SELECT Flavor FROM goods WHERE Food  =  'Cake'
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What is the three most popular goods in this bakery?[SQL]\nSELECT Food FROM goods ORDER BY Price DESC LIMIT 3
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Give the three most purchased items at this bakery.[SQL]\nSELECT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id GROUP BY T1.item ORDER BY count(*) DESC LIMIT 3
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Find the ids of customers who have spent more than 150 dollars in total.[SQL]\nSELECT T1.id FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.customerid JOIN items AS T3 JOIN goods AS T4 ON T3.item  =  T4.id WHERE T4.price  +  (SELECT sum(T5.price) FROM items AS T3 JOIN goods AS T4 ON T3.item  =  T4.id JOIN receipts AS T2 ON T2.receiptnumber  =  T3.receipt WHERE T1.id  =  T2.customerid)  >  150
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of customers who have spent over 150 dollars in total?[SQL]\nSELECT DISTINCT T1.id FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.customerid JOIN items AS T3 JOIN goods AS T4 ON T3.item  =  T4.id WHERE T4.price  +  (SELECT sum(T5.price) FROM items AS T3 JOIN goods AS T4 ON T3.item  =  T4.id JOIN receipts AS T2 ON T2.receiptnumber  =  T3.receipt WHERE T1.id  =  T2.customerid)  >  150
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, Find the ids of customers whose average spending for each good is above 5.[SQL]\nSELECT T2.id FROM receipts AS T1 JOIN customers AS T2 ON T1.customerid  =  T2.id JOIN items AS T3 ON T1.receipt  =  T3.receipt JOIN goods AS T4 ON T3.item  =  T4.id GROUP BY T2.id HAVING avg(T4.price)  >  5
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of customers who spend more than 5 on average for each good?[SQL]\nSELECT T1.id FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.customerid JOIN items AS T3 ON T2.receipt  =  T3.receipt GROUP BY T3.item HAVING avg(T3.price)  >  5
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, On which day did the bakery sell more than 100 dollars in total.[SQL]\nSELECT Date FROM receipts WHERE sum(T2.price)  >  100
### Database Schema\ n\n['CREATE TABLE "customers" (	"Id" INTEGER PRIMARY KEY,	"LastName" TEXT,	"FirstName" TEXT)CREATE TABLE "goods" (	"Id" TEXT PRIMARY KEY,	"Flavor" TEXT,	"Food" TEXT,	"Price" REAL)CREATE TABLE "items" (	"Receipt" INTEGER,	"Ordinal" INTEGER,	"Item" TEXT,	PRIMARY KEY(Receipt, Ordinal),	FOREIGN KEY (Item) REFERENCES goods(Id))CREATE TABLE "receipts" (	"ReceiptNumber" INTEGER PRIMARY KEY,	"Date" TEXT,	"CustomerId" INTEGER,	FOREIGN KEY(CustomerId) REFERENCES customers(Id))']\n\n\n### Task \n\nBased on the provided database schema information, On what dates did the bakery sell more than 100 dollars worth of goods in total?[SQL]\nSELECT T2.date FROM items AS T1 JOIN receipts AS T2 ON T1.receipt = T2.receipt JOIN goods AS T3 ON T1.item = T3.id GROUP BY T2.date HAVING sum(T3.price) > 100
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many drivers are there?[SQL]\nSELECT count(*) FROM driver
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the total number of drivers.[SQL]\nSELECT count(*) FROM driver
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of drivers whose points are greater than 150 for each make.[SQL]\nSELECT make ,  count(*) FROM driver WHERE points > 150 GROUP BY make
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many drivers receive points greater than 150 for each make? Show the make and the count.[SQL]\nSELECT T2.Make ,  COUNT(*) FROM team_driver AS T1 JOIN driver AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T2.Points  >  150 GROUP BY T2.Make
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the average age of drivers for each make.[SQL]\nSELECT avg(Age) ,  Make FROM driver GROUP BY Make
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average age of drivers for each make? Return the average age and make.[SQL]\nSELECT avg(Age) ,  Make FROM driver GROUP BY Make
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the average laps of all the drivers who are younger than 20?[SQL]\nSELECT avg(Laps) FROM driver WHERE age  <  20
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Compute the average laps of drivers under the age of 20.[SQL]\nSELECT avg(Laps) FROM driver WHERE age  <  20
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the managers and sponsors of teams? Sort the results by Car Owners.[SQL]\nSELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner ASC
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the manager and sponsor for each team and order them by the car owner.[SQL]\nSELECT T1.manager ,  T1.sponsor FROM team AS T1 ORDER BY T1.car_owner
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the make that has more than one team.[SQL]\nSELECT T1.make FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.make HAVING count(*)  >  1
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which make has more than one team?[SQL]\nSELECT Make FROM team GROUP BY Make HAVING COUNT(*)  >  1
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the makes of the teams with car owner "Buddy Arrington"?[SQL]\nSELECT T2.Make FROM team_driver AS T1 JOIN team AS T2 ON T1.Team_ID  =  T2.Team_ID WHERE T2.Car_Owner  =  "Buddy Arrington"
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the make of the team whose car owner is "Buddy Arrington".[SQL]\nSELECT T2.Make FROM team_driver AS T1 JOIN team AS T2 ON T1.Team_ID  =  T2.Team_ID JOIN driver AS T3 ON T3.Driver_ID  =  T1.Driver_ID WHERE T3.Car_Owner  =  'Buddy Arrington'
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the maximum and minimum points of drivers.[SQL]\nSELECT max(Points) ,  min(Points) FROM driver
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the highest and lowest points of drivers.[SQL]\nSELECT max(Points) ,  min(Points) FROM driver
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many drivers have points smaller than 150?[SQL]\nSELECT count(*) FROM driver WHERE points  <  150
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of drivers whose points are below 150.[SQL]\nSELECT count(*) FROM driver WHERE points  <  150
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List all the driver names in ascending order of age.[SQL]\nSELECT Driver FROM driver ORDER BY Age ASC
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Sort the driver names by age in ascending order.[SQL]\nSELECT Driver FROM Driver ORDER BY Age ASC
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List all the driver names in descending order of points.[SQL]\nSELECT Driver FROM driver ORDER BY Points DESC
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the list of drivers ordered by points in descending order?[SQL]\nSELECT Driver FROM driver ORDER BY Points DESC
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Please show the names of drivers, and countries they are from.[SQL]\nSELECT Driver ,  Country FROM driver
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, For each driver, return his or her name and country.[SQL]\nSELECT Driver ,  Country FROM driver
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show the maximum points of the drivers from countries with capital "Dublin"[SQL]\nSELECT max(T1.Points) FROM driver AS T1 JOIN country AS T2 ON T1.Country  =  T2.Country_ID WHERE T2.Capital  =  "Dublin"
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the maximum points of the drivers from a country whose capital is "Dublin"?[SQL]\nSELECT max(T1.Points) FROM driver AS T1 JOIN country AS T2 ON T1.Country  =  T2.Country_ID WHERE T2.Capital  =  "Dublin"
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average age of drivers from countries with official native language "English"[SQL]\nSELECT avg(age) FROM country AS T1 JOIN driver AS T2 ON T1.country_id  =  T2.country WHERE T1.official_native_language  =  'English'
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the average age of the drivers from the countries that use "English" as official native language.[SQL]\nSELECT avg(age) FROM country AS T1 JOIN driver AS T2 ON T1.country_id  =  T2.country WHERE T1.official_native_language  =  "English"
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the countries that have drivers with points larger than 150?[SQL]\nSELECT Country FROM driver WHERE Points  >  150
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find all the countries where some drivers have points above 150.[SQL]\nSELECT Country FROM driver WHERE Points  >  150
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the capital of the country where the driver with the most points is from?[SQL]\nSELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which country is the driver with the highest points from? Give me the capital of the country.[SQL]\nSELECT t1.capital FROM country AS t1 JOIN driver AS t2 ON t1.country_id  =  t2.country ORDER BY t2.points DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List each make with the number of drivers with that make.[SQL]\nSELECT Make ,  COUNT(*) FROM driver GROUP BY Make
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, For each make, return the make and the count of drivers with that make.[SQL]\nSELECT T1.make ,  count(*) FROM driver AS T1 JOIN team_driver AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.make
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List the make that are associated with most drivers.[SQL]\nSELECT T1.make FROM driver AS T1 JOIN team_driver AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.make ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which make does the most drivers have?[SQL]\nSELECT T1.make FROM driver AS T1 JOIN team AS T2 ON T1.make  =  T2.make GROUP BY T1.make ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List the driver makes that are associated with at least three drivers.[SQL]\nSELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which make is associated with 3 or more drivers?[SQL]\nSELECT T1.make FROM driver AS T1 JOIN team_driver AS T2 ON T1.driver_id  =  T2.driver_id GROUP BY T1.make HAVING count(*)  >=  3
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of teams that do not have any drivers.[SQL]\nSELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which team does not have drivers?[SQL]\nSELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which country has both drivers with make "Dodge" and drivers with make "Chevrolet"?[SQL]\nSELECT Country FROM driver WHERE Make  =  "Dodge" INTERSECT SELECT Country FROM driver WHERE Make  =  "Chevrolet"
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the countries in which there are both drivers with make "Dodge" and drivers with make "Chevrolet".[SQL]\nSELECT Country FROM driver WHERE Make  =  "Dodge" INTERSECT SELECT Country FROM driver WHERE Make  =  "Chevrolet"
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show total and average points of all drivers.[SQL]\nSELECT sum(Points) ,  avg(Points) FROM driver
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the total and average points of drivers?[SQL]\nSELECT sum(Points) ,  avg(Points) FROM driver
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the countries where no driver come from.[SQL]\nSELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which countries do not have any drivers?[SQL]\nSELECT Country FROM country WHERE Country_Id NOT IN (SELECT Country FROM driver)
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the manager and sponsor of the team that has the most drivers?[SQL]\nSELECT T1.manager ,  T1.sponsor FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the manager and sponsor of the team that has the most drivers.[SQL]\nSELECT T1.manager ,  T1.sponsor FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the manager and car owner of the team that has at least 2 drivers?[SQL]\nSELECT T1.manager ,  T1.car_owner FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "country" ("Country_Id" int,"Country" text,"Capital" text,"Official_native_language" text,"Regoin" text,PRIMARY KEY ("Country_Id"))CREATE TABLE `team` ("Team_ID" int,"Team" text,"Make" text,"Manager" text,"Sponsor" text,"Car_Owner" text,PRIMARY KEY ("Team_ID"))CREATE TABLE `driver` ("Driver_ID" int,"Driver" text,"Country" int,"Age" int,"Car_#" real,"Make" text,"Points" text,"Laps" real,"Winnings" text,PRIMARY KEY ("Driver_ID"),FOREIGN KEY (`Country`) REFERENCES `country`(`Country_ID`))CREATE TABLE `team_driver` ("Team_ID" int,"Driver_ID" int,PRIMARY KEY ("Team_ID","Driver_ID"),FOREIGN KEY (`Team_ID`) REFERENCES `team`(`Team_ID`),FOREIGN KEY (`Driver_ID`) REFERENCES `driver`(`Driver_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the team with two or more drivers and return the the manager and car owner of the team.[SQL]\nSELECT T1.manager ,  T1.car_owner FROM team AS T1 JOIN team_driver AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, How many institutions are there?[SQL]\nSELECT count(*) FROM institution
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of institutions.[SQL]\nSELECT count(*) FROM institution
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of institutions in ascending alphabetical order.[SQL]\nSELECT name FROM institution ORDER BY name ASC
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of institutions, ordered alphabetically?[SQL]\nSELECT name FROM institution ORDER BY name ASC
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of institutions in ascending order of founded year.[SQL]\nSELECT name FROM institution ORDER BY founded ASC
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of institutions, ordered by the years in which they were founded?[SQL]\nSELECT name FROM institution ORDER BY founded
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the cities and provinces of institutions?[SQL]\nSELECT city ,  province FROM institution
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the cities and provinces of institutions.[SQL]\nSELECT city ,  province FROM institution
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the maximum and minimum enrollment of all institutions?[SQL]\nSELECT max(enrollment) ,  min(enrollment) FROM institution
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the maximum and minimum enrollment across all institutions.[SQL]\nSELECT max(enrollment) ,  min(enrollment) FROM institution
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the affiliations of institutions that are not in city "Vancouver"?[SQL]\nSELECT affiliation FROM institution WHERE city != 'Vancouver'
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the affiliations of instituions that are not in the city of Vancouver.[SQL]\nSELECT affiliation FROM institution WHERE city != 'Vancouver'
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the stadiums of institutions in descending order of the capacity.[SQL]\nSELECT stadium FROM institution ORDER BY capacity DESC
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the stadiums of institutions, ordered by capacity descending.[SQL]\nSELECT stadium FROM institution ORDER BY capacity DESC
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the stadium of the institution with the largest enrollment?[SQL]\nSELECT stadium FROM institution ORDER BY enrollment DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Give the stadium of the institution which is the greatest enrollment.[SQL]\nSELECT stadium FROM institution ORDER BY enrollment DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and nicknames of institutions?[SQL]\nSELECT name ,  nickname FROM institution
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the names of institutions, as well as their nicknames.[SQL]\nSELECT name ,  nickname FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the nickname of the institution with the smallest enrollment?[SQL]\nSELECT nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY enrollment LIMIT 1
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the nickname of the institution with the lowest enrollment.[SQL]\nSELECT nickname FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY enrollment LIMIT 1
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of institutions in descending order of the number of championships.[SQL]\nSELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T2.institution_id ORDER BY count(*) DESC
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of institutions, ordered descending by their number of championships?[SQL]\nSELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id ORDER BY T2.number_of_championships DESC
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of institutions with at least one championship.[SQL]\nSELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T2.institution_id HAVING count(*)  >=  1
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of institutions that have 1 or more championships?[SQL]\nSELECT T1.name FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T2.institution_id HAVING count(*)  >=  1
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the total number of championship of institution with public affiliation?[SQL]\nSELECT count(*) FROM championship AS T1 JOIN institution AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.affiliation  =  'Public'
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the total number of championships of institutions that have a Public affiliation.[SQL]\nSELECT count(*) FROM institution AS T1 JOIN championship AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.affiliation  =  'Public'
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are different types of affiliations of institutions and the corresponding number of institutions?[SQL]\nSELECT count(*) ,  affiliation FROM institution GROUP BY affiliation
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, How many institutions are there for each type of affiliation?[SQL]\nSELECT count(*) ,  affiliation FROM institution GROUP BY affiliation
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the most common type of affiliation for institutions?[SQL]\nSELECT affiliation ,  count(*) FROM institution GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the most common type of affiliation across all institutions.[SQL]\nSELECT affiliation FROM institution GROUP BY affiliation ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, In which years were more than one institution founded?[SQL]\nSELECT YEAR_FOUNDED FROM institution GROUP BY YEAR_FOUNDED HAVING count(*)  >  1
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.[SQL]\nSELECT Founded FROM institution GROUP BY Founded HAVING count(*)  >  1
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the nicknames of institutions in descending order of capacity.[SQL]\nSELECT nickname FROM institution ORDER BY capacity DESC
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the nicknames of institutions, ordered descending by their capacities?[SQL]\nSELECT nickname FROM championship ORDER BY capacity DESC
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?[SQL]\nSELECT sum(enrollment) FROM institution WHERE city  =  'Vancouver' OR city  =  'Calgary'
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary .[SQL]\nSELECT enrollment FROM institution WHERE city  =  "Vancouver" OR city  =  "Calgary"
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.[SQL]\nSELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?[SQL]\n SELECT DISTINCT province FROM institution WHERE founded  <  1920 INTERSECT SELECT DISTINCT province FROM institution WHERE founded  >  1950
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, How many distinct provinces are the institutions in?[SQL]\nSELECT DISTINCT province FROM institution
### Database Schema\ n\n['CREATE TABLE "institution" ("Institution_ID" int,"Name" text,"Team" text,"City" text,"Province" text,"Founded" real,"Affiliation" text,"Enrollment" real,"Endowment" text,"Stadium" text,"Capacity" real,PRIMARY KEY ("Institution_ID"))CREATE TABLE "Championship" ("Institution_ID" int,"Nickname" text,"Joined" real,"Number_of_Championships" real,PRIMARY KEY ("Institution_ID"),FOREIGN KEY ("Institution_ID") REFERENCES `institution`("Institution_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of different provinces that have institutions.[SQL]\nSELECT count(DISTINCT province) FROM institution
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Select all details of all warehouses.[SQL]\nSELECT * FROM Warehouses
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What is all the information about the warehouses?[SQL]\nSELECT * FROM Warehouses
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find all different contents stored in New York.[SQL]\nSELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are all the different contents stored in boxes in New York?[SQL]\nSELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Select contents of all boxes with a value larger than $150.[SQL]\nSELECT Contents FROM Boxes WHERE value  >  150
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the contents of boxes with value greater than 150?[SQL]\nSELECT Contents FROM Boxes WHERE value  >  150
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Select the warehouse code and the average value of the boxes in each warehouse.[SQL]\nSELECT warehouse ,  avg(VALUE) FROM Boxes GROUP BY warehouse
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What is the average value of boxes for each warehouse?[SQL]\nSELECT avg(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the average and total values of all boxes.[SQL]\nSELECT avg(value) ,  sum(value) FROM Boxes
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the average and total values across all boxes?[SQL]\nSELECT avg(value) ,  sum(value) FROM Boxes
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the average and total capacity of all warehouses.[SQL]\nSELECT avg(capacity) ,  sum(capacity) FROM warehouses
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the average and total capacities across all warehouses?[SQL]\nSELECT avg(capacity) ,  sum(capacity) FROM warehouses
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the average and maximum value for each different content.[SQL]\nSELECT avg(VALUE) ,  max(VALUE) ,  CONTENTS FROM Boxes GROUP BY CONTENTS
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the average and maximum values for each type of content in boxes?[SQL]\nSELECT avg(VALUE) ,  max(VALUE) ,  CONTENTS FROM Boxes GROUP BY CONTENTS
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the content that has the highest total values in all boxes.[SQL]\nSELECT Contents FROM Boxes ORDER BY SUM(Value) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What is the content with the greatest value across all boxes?[SQL]\nSELECT Contents FROM Boxes ORDER BY VALUE DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Select the average value of all the boxes.[SQL]\nSELECT avg(VALUE) FROM Boxes
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What is the average value of boxes?[SQL]\nSELECT avg(VALUE) FROM Boxes
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Select all distinct contents in all the boxes.[SQL]\nSELECT DISTINCT Contents FROM Boxes
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the different contents in boxes?[SQL]\nSELECT DISTINCT Contents FROM Boxes
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of all distinct contents in all the boxes.[SQL]\nSELECT count(DISTINCT CONTENTS) FROM Boxes
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, How many different contents are stored in boxes?[SQL]\nSELECT count(DISTINCT contents) FROM boxes
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find all distinct locations of warehouses.[SQL]\nSELECT DISTINCT LOCATION FROM warehouses
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the different locations of warehouses?[SQL]\nSELECT DISTINCT LOCATION FROM warehouses
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the code of boxes that are stored at the warehouses located at Chicago or New York.[SQL]\nSELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the codes of boxes stored in warehouses in either Chicago or New York?[SQL]\nSELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the total value of boxes in the warehouses located at Chicago or New York.[SQL]\n\nSELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What is the total value of boxes located in Chicago or New York?[SQL]\nSELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find all contents present in warehouses located in Chicago and those located in New York.[SQL]\nSELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the contents that are stored in both Chicago and New York.[SQL]\nSELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the type of contents that are not in the warehouses located at New York.[SQL]\nSELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'New York'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What types of contents cannot be found in warehouses in New York?[SQL]\nSELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'New York'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the location of the warehouses which have contents Rocks but not Scissors.[SQL]\nSELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  'Rocks' EXCEPT SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  'Scissors'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the locations of warehouses that have boxes containing Rocks but not Scissors?[SQL]\nSELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  'Rocks' EXCEPT SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  'Scissors'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the warehouses which store contents Rocks or Scissors.[SQL]\nSELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.Contents  =  'Rocks' OR T2.Contents  =  'Scissors'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the distinct warehouses that have boxes with Rocks or Scissors as contents?[SQL]\nSELECT DISTINCT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  'Rocks' OR T2.contents  =  'Scissors'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the location of the warehouses which store contents Rocks and Scissors.[SQL]\nSELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.Contents  =  'Rocks' INTERSECT SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.Contents  =  'Scissors'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?[SQL]\nSELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.Contents  =  'Rocks' INTERSECT SELECT T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.Contents  =  'Scissors'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, List the code and contents of all boxes sorted by their values.[SQL]\nSELECT code ,  CONTENTS FROM Boxes ORDER BY VALUE
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the codes and corresponding contents of all the boxes, ordered by their values?[SQL]\nSELECT code ,  CONTENTS FROM Boxes ORDER BY VALUE
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the code and contents of the box with the lowest value.[SQL]\nSELECT code ,  CONTENTS FROM Boxes ORDER BY value LIMIT 1
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What is the code and contents for the box that has the smallest value?[SQL]\nSELECT code ,  CONTENTS FROM Boxes ORDER BY value LIMIT 1
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the unique contents of all boxes whose value is higher than the average value of all boxes.[SQL]\nSELECT DISTINCT Contents FROM BOXES WHERE value  >  (SELECT avg(value) FROM boxes)
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the different contents of boxes for which the value is higher than the average value across all boxes?[SQL]\nSELECT Contents FROM Boxes WHERE value  >  (SELECT avg(value) FROM Boxes)
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, List all different types of contents ordered by contents.[SQL]\nSELECT DISTINCT Contents FROM Boxes ORDER BY Contents
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the different contents of boxes, ordered alphabetically?[SQL]\nSELECT DISTINCT Contents FROM Boxes ORDER BY Contents ASC
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.[SQL]\nSELECT code FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE contents  =  'Rocks')
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?[SQL]\nSELECT code FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE contents  =  'Rocks')
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.[SQL]\nSELECT code ,  CONTENTS FROM Boxes WHERE value  >  (SELECT max(value) FROM Boxes WHERE contents  =  'Scissors')
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?[SQL]\nSELECT code FROM Boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE Contents  =  'Scissors')
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the total value of boxes stored in the warehouse with the largest capacity.[SQL]\nSELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What is the total value of boxes kept in the warehouse with the greatest capacity?[SQL]\nSELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.capacity  =  (SELECT max(capacity) FROM warehouses)
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.[SQL]\nSELECT avg(VALUE) ,  warehouse FROM Boxes GROUP BY warehouse HAVING avg(VALUE)  >  150
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the average values of boxes for each warehouse than has an average value greater than 150?[SQL]\nSELECT avg(value) ,  warehouse FROM BOXES GROUP BY warehouse HAVING avg(value)  >  150
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the total value and number of boxes for each content type.[SQL]\nSELECT Contents ,  sum(value) ,  count(*) FROM Boxes GROUP BY Contents
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, For each content, what is the total value and number of boxes?[SQL]\nSELECT sum(T1.value) ,  count(*) ,  T1.Contents FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T1.Contents
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the total, average, and maximum capacity for different locations.[SQL]\nSELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, For each location, what are the total, average, and maximum capacities of warehouses?[SQL]\nSELECT sum(capacity) ,  avg(capacity) ,  max(capacity) FROM warehouses GROUP BY LOCATION
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the total capacity of all warehouse locations.[SQL]\nSELECT sum(capacity) FROM warehouses
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What is the total capacity of all warehouses?[SQL]\nSELECT sum(capacity) FROM warehouses
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the value of the most expensive boxes saved in each warehouse location.[SQL]\nSELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, For each warehouse location, what is the value of the most expensive box?[SQL]\nSELECT max(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Athens'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Select the warehouse codes along with the number of boxes in each warehouse.[SQL]\nSELECT count(*) ,  T1.warehouse FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T1.warehouse
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, How many boxes are there with each warehouse ?[SQL]\nSELECT count(*) ,  T1.warehouse FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T1.warehouse
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of different locations where Rocks are stored.[SQL]\nSELECT count(DISTINCT T1.location) FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse WHERE T2.contents  =  "Rock"
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, In how many different warehouses are Rocks stored within boxes?[SQL]\nSELECT count(DISTINCT warehouse) FROM Boxes WHERE contents  =  'Rocks'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Select the code of each box, along with the name of the city the box is located in.[SQL]\nSELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the codes of all boxes, as well as the locations of the warehouses they are in?[SQL]\nSELECT T1.code ,  T2.location FROM Boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Select the codes of all the boxes located in Chicago.[SQL]\nSELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the codes of boxes stored in warehouses in Chicago?[SQL]\nSELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  "Chicago"
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of boxes saved in each warehouse.[SQL]\nSELECT count(*) ,  warehouse FROM Boxes GROUP BY warehouse
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, How many boxes are stored in each warehouse?[SQL]\nSELECT count(*) ,  warehouse FROM Boxes GROUP BY warehouse
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of distinct types of contents in each warehouse.[SQL]\nSELECT count(*) ,  T1.location FROM warehouses AS T1 JOIN boxes AS T2 ON T1.code  =  T2.warehouse GROUP BY T1.location
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, How many different types of contents are stored in each warehouse?[SQL]\nSELECT count(DISTINCT T1.Contents) ,  T1.warehouse FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T1.warehouse
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Select the codes of all warehouses that are above capacity.[SQL]\nSELECT code FROM warehouses WHERE capacity  >  (SELECT count(*) FROM boxes WHERE warehouse  =  code)
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What are the codes of warehouses that have more boxes than their capacity?[SQL]\nSELECT code FROM boxes GROUP BY warehouse HAVING count(*)  >  (SELECT capacity FROM warehouses WHERE code  =  warehouse)
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, Find the total values of boxes that are not in the warehouses located at Chicago.[SQL]\nSELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'
### Database Schema\ n\n['CREATE TABLE Warehouses (   Code INTEGER NOT NULL,   Location VARCHAR(255) NOT NULL ,   Capacity INTEGER NOT NULL,   PRIMARY KEY (Code) )CREATE TABLE Boxes (    Code CHAR(4) NOT NULL,    Contents VARCHAR(255) NOT NULL ,    Value REAL NOT NULL ,    Warehouse INTEGER NOT NULL,    PRIMARY KEY (Code),    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code) )']\n\n\n### Task \n\nBased on the provided database schema information, What is the total value of boxes contained in any location but Chicago?[SQL]\nSELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show name, city, and state for all universities in  alphabetical order of university name.[SQL]\nSELECT University_Name ,  city ,  state FROM university ORDER BY University_Name
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names, cities, and states of all universities in alphabetical order (by name of the university).[SQL]\nSELECT University_Name ,  City ,  State FROM university ORDER BY University_Name ASC
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many universities are in Illinois or Ohio?[SQL]\nSELECT count(*) FROM university WHERE city  =  "Illinois" OR city  =  "Ohio"
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the total number of universities located in Illinois or Ohio?[SQL]\nSELECT count(*) FROM university WHERE city  =  'Illinois' OR city  =  'Ohio'
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the maximum, average, and minimum enrollment for universities?[SQL]\nSELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM university
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the maximum, average, and minimum enrollment for all universities?[SQL]\nSELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM university
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List team name for all universities with enrollments above the average.[SQL]\nSELECT team_name FROM university WHERE enrollment  >  (SELECT avg(enrollment) FROM university)
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all teams from universities that have more people enrolled than average ?[SQL]\nSELECT team_name FROM university WHERE enrollment  >  (SELECT avg(enrollment) FROM university)
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show all home conferences.[SQL]\nSELECT DISTINCT home_conference FROM university
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the different home conferences from the university table?[SQL]\nSELECT DISTINCT home_conference FROM university
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show all home conferences and the number of universities in each conference.[SQL]\nSELECT count(*) ,  home_conference FROM university GROUP BY home_conference
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, For every home conference, how many universities attended that conference?[SQL]\nSELECT count(*) ,  home_conference FROM university GROUP BY home_conference
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which state has most number of universities?[SQL]\nSELECT state FROM university GROUP BY state ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the state with the most universities?[SQL]\nSELECT State FROM university GROUP BY State ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show all home conferences with average enrollment of universities above 2000.[SQL]\nSELECT home_conference FROM university WHERE enrollment  >  2000 GROUP BY home_conference HAVING avg(enrollment) > (SELECT avg(enrollment) FROM university)
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the home conferences that have an average university enrollment above 2000?[SQL]\nSELECT Home_Conference FROM university WHERE enrollment  >  2000 GROUP BY Home_Conference HAVING avg(enrollment)  >  2000
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which conference has the least number of total enrollment?[SQL]\nSELECT home_conference FROM university GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the home conferences with the fewest number of people enrolled?[SQL]\nSELECT home_conference FROM university GROUP BY home_conference ORDER BY sum(enrollment) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List all major name and major code in the order of their major code[SQL]\nSELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and codes for all majors ordered by their code?[SQL]\nSELECT Major_Name ,  Major_Code FROM major ORDER BY Major_Code ASC
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show all majors and major ranks for the university with name Augustana College.[SQL]\nSELECT T2.Major_Name ,  T1.rank FROM major_ranking AS T1 JOIN major AS T2 ON T1.Major_ID  =  T2.Major_ID WHERE university_name  =  'Augustana College'
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ranks and names of all majors at Augustana College?[SQL]\nSELECT t3.rank ,  t2.Major_Name FROM major AS t1 JOIN major_ranking AS t2 ON t1.Major_ID  =  t2.Major_ID JOIN university AS t3 ON t2.University_ID  =  t3.University_ID WHERE t3.University_name  =  "Augustana College" ORDER BY t2.Rank
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name, city, state of the university with a rank 1 on Accounting major?[SQL]\nSELECT t3.city ,  t3.state FROM overall_ranking AS t1 JOIN major_ranking AS t2 ON t1.university_id  =  t2.university_id JOIN university AS t3 ON t1.university_id  =  t3.university_id WHERE t2.major_id  =  (SELECT major_id FROM major WHERE major_name  =  'Accounting') ORDER BY t1.total DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name, city, and state of the university with number 1 ranked Accounting major?[SQL]\nSELECT t3.city ,  t3.state FROM major AS t1 JOIN major_ranking AS t2 ON t1.major_id  =  t2.major_id JOIN university AS t3 ON t2.university_id  =  t3.university_id WHERE t1.major_name  =  'Accounting' ORDER BY t2.rank LIMIT 1
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the university that has most number of majors with rank 1?[SQL]\nSELECT t3.University_Name FROM major_ranking AS T1 JOIN major AS T2 ON T1.Major_ID  =  T2.Major_ID JOIN university AS T3 ON T3.University_ID  =  T1.University_ID WHERE T1.rank  =  1 GROUP BY T3.University_Name ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the university with the most majors ranked number 1?[SQL]\nSELECT t1.University_Name FROM university AS t1 JOIN major_ranking AS t2 ON t1.University_ID  =  t2.University_ID GROUP BY t1.University_ID ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show all university names without a major with rank 1?[SQL]\nSELECT t1.University_Name FROM university AS t1 JOIN major_ranking AS t2 ON t1.University_ID  =  t2.University_ID WHERE t2.rank  =  1 UNION SELECT University_Name FROM university WHERE University_ID NOT IN (SELECT University_ID FROM major_ranking)
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all universities without any majors ranked number 1?[SQL]\nSELECT t1.University_Name FROM university AS t1 JOIN major_ranking AS t2 ON t1.University_ID  =  t2.University_ID WHERE t2.rank  =  1 GROUP BY t2.University_ID HAVING COUNT(*)  =  MAJOR_NAMES(SELECT DISTINCT Major_Name FROM major)'
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Show all university names with both major Accounting and major Urban Education.[SQL]\nSELECT t1.University_Name FROM university AS t1 JOIN major_ranking AS t2 ON t1.University_ID  =  t2.University_ID JOIN major AS t3 ON t2.Major_ID  =  t3.Major_ID WHERE t3.Major_Name  =  'Accounting' INTERSECT SELECT t1.University_Name FROM university AS t1 JOIN major_ranking AS t2 ON t1.University_ID  =  t2.University_ID JOIN major AS t3 ON t2.Major_ID  =  t3.Major_ID WHERE t3.Major_Name  =  'Urban Education'
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all universities that have both Accounting and Urban Education majors?[SQL]\nSELECT T1.University_Name FROM university AS T1 JOIN major AS T2 ON T1.University_ID  =  T2.University_ID WHERE T2.Major_Name  =  'Accounting' INTERSECT SELECT T1.University_Name FROM university AS T1 JOIN major AS T2 ON T1.University_ID  =  T2.University_ID WHERE T2.Major_Name  =  'Urban Education'
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name and overall ranking of universities in Wisconsin state?[SQL]\nSELECT u.University_Name ,  o.Total FROM university AS u JOIN overall_ranking AS o ON u.University_ID  =  o.University_ID WHERE u.State  =  "Wisconsin" ORDER BY o.Total DESC
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name and rank of every university in Wisconsin?[SQL]\nSELECT University_Name ,  Rank FROM university WHERE city  =  'Madison'
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the university name with highest research point?[SQL]\nSELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID ORDER BY Research_point DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the university with the most research points?[SQL]\nSELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID ORDER BY t2.Research_point DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List all university names in ascending order of their reputation points.[SQL]\nSELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID ORDER BY t2.Reputation_point ASC
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all universities in ascending order of reputation points?[SQL]\nSELECT t1.University_Name FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID ORDER BY t2.Reputation_point ASC
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of university with major Accounting ranked 3 or above?[SQL]\nSELECT t1.University_Name FROM university AS t1 JOIN major_ranking AS t2 ON t1.University_ID  =  t2.University_ID WHERE t2.Major_name  =  'Accounting' AND rank  >=  3
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the university with an Accounting major ranked 3 or higher?[SQL]\nSELECT T1.University_Name FROM university AS T1 JOIN major_ranking AS T2 ON T1.University_ID  =  T2.University_ID WHERE T2.Major_ID  =  (SELECT Major_ID FROM major WHERE Major_Name  =  'Accounting') ORDER BY T2.Total DESC LIMIT 3'
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the total enrollment of universities with a overall rank 5 or below?[SQL]\nSELECT sum(enrollment) FROM university AS T1 JOIN overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE rank  <=  5
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the total number of students enrolled in an university with a rank of 5 or below?[SQL]\nSELECT sum(Enrollment) FROM university WHERE university_id IN (SELECT university_id FROM overall_ranking WHERE rank  <=  5)
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name and Citation point of the universities whose reputation points are top 3 and above.[SQL]\nSELECT t1.University_Name ,  t2.Citation_point FROM university AS t1 JOIN overall_ranking AS t2 ON t1.University_ID  =  t2.University_ID WHERE t2.Reputation_point  >=  (SELECT min(Reputation_point) FROM overall_ranking) ORDER BY t2.Citation_point DESC LIMIT 3
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name and citation point of the unversities with the top 3 reputation points?[SQL]\nSELECT T1.University_Name ,  T1.Citation_point FROM overall_ranking AS T1 JOIN university AS T2 ON T1.University_ID  =  T2.University_ID ORDER BY Reputation_point DESC LIMIT 3
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, which states do have more than two universities with enrollment smaller than 3000?[SQL]\nSELECT DISTINCT STATE FROM university WHERE enrollment  <  3000 GROUP BY STATE HAVING count(*)  >  2
### Database Schema\ n\n['CREATE TABLE "university" ("University_ID" int,"University_Name" text,"City" text,"State" text,"Team_Name" text,"Affiliation" text,"Enrollment" int,"Home_Conference" text,PRIMARY KEY ("University_ID"))CREATE TABLE "overall_ranking" ("Rank" int,"University_ID" int,"Reputation_point" int,"Research_point" int,"Citation_point" int,"Total" int,PRIMARY KEY ("University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`))CREATE TABLE "major" ("Major_ID" int,"Major_Name" text,"Major_Code" int,PRIMARY KEY ("Major_ID"))CREATE TABLE "major_ranking" ("Rank" int,"University_ID" int,"Major_ID" int,PRIMARY KEY ("Rank","Major_ID","University_ID"),FOREIGN KEY (`University_ID`) REFERENCES `university`(`University_ID`),FOREIGN KEY (`Major_ID`) REFERENCES `major`(`Major_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the states that have more than 2 universities with an enrollment less than 3000?[SQL]\nSELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the titles of movies that don’t have any rating.[SQL]\nSELECT Title FROM Movies WHERE Rating IS NULL
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of movies that do not have any ratings?[SQL]\nSELECT title FROM movies WHERE rating IS NULL
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the names of movies whose rating is ‘G’.[SQL]\nSELECT title FROM movies WHERE rating  =  'G'
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What are names of movies that have a 'G' ratings?[SQL]\n SELECT title FROM movies WHERE rating  =  'G'
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the title of the movie that is played in the Odeon theater.[SQL]\n\nSELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code WHERE T1.Name  =  'Odeon'
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the movie titles for ones that are played in the Odeon theater?[SQL]\nSELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code WHERE T1.Name  =  'Odeon'
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the names of movies that are played in any theater and the name of the corresponding theater.[SQL]\nSELECT T2.Name ,  T1.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T1.Code
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the movies that are played in any theater and the name of the corresponding theater?[SQL]\nSELECT T2.Name ,  T1.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of movies whose rating is ‘G’.[SQL]\nSELECT count(*) FROM Movies WHERE Rating  =  'G'
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, How many movies had a 'G' rating?[SQL]\nSELECT count(*) FROM Movies WHERE Rating  =  'G'
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, How many movies are playing across all theaters?[SQL]\nSELECT count(DISTINCT T1.title) FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.code  =  T2.movie
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, How many movies are playing in theaters?[SQL]\nSELECT count(*) FROM MovieTheaters
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, How many distinct movies are on in theaters?[SQL]\nSELECT count(DISTINCT T1.title) FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.code  =  T2.movie
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, How many different movies are playing?[SQL]\nSELECT COUNT (DISTINCT title) FROM Movies
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, How many distinct movie theaters are there?[SQL]\nSELECT count(DISTINCT name) FROM MovieTheaters
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, How many different movie theaters exist?[SQL]\nSELECT count(*) FROM MovieTheaters
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the rating of the movie whose name includes the word ‘Citizen’.[SQL]\nSELECT T1.Rating FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code  =  T2.Movie WHERE T1.Title LIKE '%Citizen%'
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What is the rating of the movie what has a name including a word like 'Citizen'?[SQL]\nSELECT T1.Rating FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code  =  T2.Movie WHERE TITLE LIKE '%Citizen%'
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of the cinemas that are playing movies with either rating ‘G’ or rating ‘PG’.[SQL]\nSELECT T2.name FROM MovieTheaters AS T1 JOIN THEATERS AS T2 ON T1.Name  =  T2.code WHERE T1.movie IN (SELECT code FROM Movies WHERE rating  =  'G' OR rating  =  'PG')
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?[SQL]\nSELECT T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code  =  T2.Movie WHERE T1.Rating  =  'G' OR T1.Rating  =  'PG'
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of the movies that are played in either cinema Odeon or Imperial.[SQL]\n\nSELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code WHERE T1.Name  =  'Odeon' OR T1.Name  =  'Imperial'
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles of all the movies that played at the Odeon or Imperial theater?[SQL]\nSELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T1.Movie WHERE T1.Name  =  'Odeon' OR T1.Name  =  'Imperial'
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of the movie that is on in both Odeon and Imperial theaters.[SQL]\nSELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What movie is playing at both the Odeon and Imperial theater?[SQL]\n SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of all movies that are not played in Odeon theater.[SQL]\nSELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code WHERE T1.Name != 'Odeon'
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of every movie that is not playing at the Odeon theater?[SQL]\nSELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.Name  =  'Odeon'
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, List in alphabetical order the titles of all movies.[SQL]\n SELECT title FROM Movies ORDER BY title ASC
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the movie names in alphabetical order?[SQL]\nSELECT title FROM movies ORDER BY title
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the titles of all movies sorted by their ratings.[SQL]\n SELECT title FROM movies ORDER BY rating
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the movie names sorted by rating?[SQL]\n SELECT title FROM movies ORDER BY rating
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of the theater that is playing the most number of movies.[SQL]\n SELECT T2.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the theater playing the most movies?[SQL]\n SELECT T1.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of the movie that is played in the most number of theaters.[SQL]\nSELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the film playing at the most number of theaters?[SQL]\nSELECT T1.Title FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code  =  T2.Movie GROUP BY T1.Title ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of movies in each rating.[SQL]\n SELECT count(*) ,  Rating FROM Movies GROUP BY Rating
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, How many movies exist for each rating?[SQL]\n SELECT count(*) ,  Rating FROM Movies GROUP BY Rating
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of movies whose rating is not null.[SQL]\nSELECT count(*) FROM Movies WHERE Rating != "null"
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, How many movies have a rating that is not null?[SQL]\nSELECT count(*) FROM Movies WHERE Rating != "null"
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of theaters that has at least one movie playing.[SQL]\n SELECT T2.Name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.Movie  =  T2.Code
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of every theater with at least one movie playing?[SQL]\n SELECT T2.name FROM MovieTheaters AS T1 JOIN Theaters AS T2 ON T1.Name  =  T2.code WHERE T1.movie != "null"
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Select the name of all movie theaters that are not currently showing a movie.[SQL]\nSELECT name FROM MovieTheaters WHERE code NOT IN (SELECT movie FROM MovieTheaters)
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all cinemas not showing any movies?[SQL]\n SELECT name FROM movietheaters WHERE code NOT IN (SELECT movie FROM movietheaters)
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of the movie theaters that are playing the movies whose rating is ‘G’.[SQL]\nSELECT T2.name FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code WHERE T2.rating  =  'G'
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of theaters playing 'G' rated movies?[SQL]\n SELECT T2.Name FROM Movies AS T1 JOIN MovieTheaters AS T2 ON T1.Code  =  T2.Movie WHERE T1.Rating  =  'G'
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Select the title of all movies.[SQL]\n SELECT Title FROM Movies
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What are all of the movie names?[SQL]\nSELECT title FROM movies
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Show all the distinct ratings in the database.[SQL]\n SELECT DISTINCT Rating FROM Movies
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the different movie ratings?[SQL]\n SELECT DISTINCT Rating FROM Movies
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Show all information of all unrated movies.[SQL]\n SELECT * FROM Movies WHERE Rating IS NULL
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What is all the information about the unrated movies?[SQL]\n SELECT title FROM movies WHERE rating IS NULL
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, Show the titles of movies not currently being shown in any theaters.[SQL]\nSELECT title FROM movies WHERE code NOT IN (SELECT movie FROM movietheaters)
### Database Schema\ n\n['CREATE TABLE Movies (  Code INTEGER PRIMARY KEY,  Title VARCHAR(255) NOT NULL,  Rating VARCHAR(255) )CREATE TABLE MovieTheaters (  Code INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Movie INTEGER,      FOREIGN KEY (Movie) REFERENCES Movies(Code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the movies not being shown in any theaters?[SQL]\nSELECT Title FROM Movies EXCEPT SELECT T2.Title FROM MovieTheaters AS T1 JOIN Movies AS T2 ON T1.movie  =  T2.code
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, Who receieved the heaviest package?[SQL]\nSELECT T1.name FROM employee AS T1 JOIN package AS T2 ON T1.employeeid = T2.recipient ORDER BY T2.weight DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the client who received the heaviest package?[SQL]\nSELECT T1.Name FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient ORDER BY T2.Weight DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the total weight of all the packages that customer Leo Wong sent?[SQL]\nSELECT sum(T1.Weight) FROM package AS T1 JOIN sender AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  'Leo Wong'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the total weight for all packages that Leo Wong sent?[SQL]\nSELECT sum(T1.Weight) FROM package AS T1 JOIN sender AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name  =  "Leo Wong"
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the position of Amy Wong?[SQL]\nSELECT POSITION FROM Employee WHERE Name  =  'Amy Wong'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What position does Amy Wong have?[SQL]\nSELECT POSITION FROM Employee WHERE Name  =  'Amy Wong'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is Turanga Leela's salary and position?[SQL]\nSELECT Salary ,  POSITION FROM Employee WHERE Name  =  'Turanga Leela'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the salary and position of the employee named Turanga Leela?[SQL]\nSELECT Salary ,  POSITION FROM Employee WHERE Name  =  'Turanga Leela'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average salary of all intern jobs?[SQL]\nSELECT avg(Salary) FROM Employee WHERE POSITION  =  'Intern'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average salary of an intern?[SQL]\nSELECT avg(salary) FROM Employee WHERE POSITION  =  'Intern'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What level is Physician?[SQL]\nSELECT level FROM Has_clearance WHERE planet  =  1
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the clearance level of a physician?[SQL]\nSELECT level FROM has_clearance AS T1 JOIN employee AS T2 ON T1.employee  =  T2.EmployeeID WHERE T2.position  =  'Physician'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, List Package Number of all package sent by Leo Wong?[SQL]\nSELECT T1.PackageNumber FROM Package AS T1 JOIN Sender AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  'Leo Wong'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the number of all packages that Leo Wong sent?[SQL]\nSELECT count(*) FROM package AS T1 JOIN client AS T2 ON T1.sender = T2.AccountNumber WHERE T2.Name  =  "Leo Wong"
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, List all package numbers received by Leo Wong ?[SQL]\nSELECT T1.PackageNumber FROM package AS T1 JOIN shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN employee AS T3 ON T2.manager  =  T3.EmployeeID WHERE T3.Name  =  'Leo Wong'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are all of the package numbers received by Leo Wong?[SQL]\nSELECT T1.PackageNumber FROM Package AS T1 JOIN SHIPMENT AS T2 ON T1.Shipment  =  T2.Shipment JOIN Employee AS T3 ON T2.manager  =  T3.EmployeeID WHERE T3.Name  =  'Leo Wong'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, List all package sent or received by Leo Wong.[SQL]\nSELECT T1.Contents FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN Employee AS T3 ON T2.Manager  =  T3.EmployeeID WHERE T3.Name  =  'Leo Wong'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are all the different package numbers that Leo Wong sent or received?[SQL]\nSELECT T1.PackageNumber FROM Package AS T1 JOIN SHIPMENT AS T2 ON T1.Shipment  =  T2.Shipment JOIN Client AS T3 ON T2.Sender  =  T3.AccountNumber WHERE T3.Name  =  'Leo Wong' UNION SELECT T1.PackageNumber FROM Package AS T1 JOIN SHIPMENT AS T2 ON T1.Shipment  =  T2.Shipment JOIN Client AS T3 ON T2.Recipient  =  T3.AccountNumber WHERE T3.Name  =  'Leo Wong'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.[SQL]\nSELECT count(*) FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment JOIN client AS T3 ON T3.AccountNumber  =  T2.manager WHERE T2.Date  =   "2016-06-26 17:49:58" AND T3.Name  =  "Ogden Wernstrom" AND T1.recipient  =  T3.AccountNumber
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, How many packages sent by Ogden Wernstrom and received by Leo Wong?[SQL]\nSELECT count(*) FROM package AS T1 JOIN client AS T2 ON T1.sender = T2.AccountNumber JOIN client AS T3 ON T1.recipient = T3.AccountNumber WHERE T2.Name = "Ogden Wernstrom" AND T3.Name = "Leo Wong"
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the contents of package sent by John Zoidfarb?[SQL]\nSELECT T1.Contents FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN Client AS T3 ON T2.Sender  =  T3.AccountNumber WHERE T3.Name  =  'John Zoidfarb'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the package contents of all those sent by John Zoidfarb?[SQL]\nSELECT T1.Contents FROM Package AS T1 JOIN Sender AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  "John Zoidfarb"
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.[SQL]\nSELECT T1.PackageNumber ,  T1.Weight FROM Package AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE '%John%'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the package number and weight of the heaviest package that was sent by a client named John or something similar?[SQL]\nSELECT T1.packageNumber ,  T1.weight FROM package AS T1 JOIN sender AS T2 ON T1.sender  =  T2.accountNumber WHERE T2.name  =  'John' ORDER BY T1.weight DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, List package number and weight of top 3 lightest packages.[SQL]\nSELECT T1.PackageNumber ,  T1.Weight FROM package AS T1 JOIN (SELECT * FROM package ORDER BY WEIGHT LIMIT 3) AS T2 ON T1.PackageNumber  =  T2.PackageNumber
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the package number and weight of the 3 lightest packages?[SQL]\nSELECT T1.PackageNumber ,  T1.Weight FROM package AS T1 JOIN (SELECT MIN(weight) AS minkg FROM package) AS T2 ON T1.weight  =  T2.minkg
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, Who sent most number of packages? List client name and number of packages sent by that client.[SQL]\nSELECT T1.Name ,  count(*) FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the client who sent the most packages and how many were there?[SQL]\nSELECT T1.Name ,  count(*) FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, Who received least number of packages ? List client name and number of packages received by that client .[SQL]\nSELECT T1.Name ,  count(*) FROM CLIENT AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Recipient GROUP BY T1.Name ORDER BY count(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the smallest number of packages received and by whom ?[SQL]\nSELECT min(T1.packageNumber) ,  T2.name FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment WHERE T2.date  =  (SELECT max(date) FROM shipment) GROUP BY T2.name
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, Who sent more than one packages? List the client's name.[SQL]\nSELECT T1.Name FROM Client AS T1 JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name HAVING count(*)  >  1
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of all clients who sent more than one package?[SQL]\nSELECT T1.name FROM client AS T1 JOIN package AS T2 ON T1.accountnumber = T2.sender GROUP BY T1.accountnumber HAVING count(*)  >  1
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the Coordinates of planet Mars?[SQL]\nSELECT coordinates FROM planet WHERE name  =  'Mars'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the coordinates of the planet named Mars?[SQL]\nSELECT coordinates FROM planet WHERE name  =  'Mars'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, List all Planets' names and coordinates in alphabetical order of name.[SQL]\nSELECT name ,  coordinates FROM planet ORDER BY name ASC
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and coordinates of all planets in alphabetical order by name?[SQL]\nSELECT name ,  coordinates FROM planet ORDER BY name ASC
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, List all shipment id under Phillip J. Fry's management.[SQL]\nSELECT T1.shipmentid FROM shipment AS T1 JOIN employee AS T2 ON T1.manager = T2.employeeid WHERE T2.name  =  "Phillip J. Fry"
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the shipment IDs of every delivery managed by Phillip J Fry?[SQL]\nSELECT T1.shipmentid FROM shipment AS T1 JOIN employee AS T2 ON T1.manager = T2.employeeid WHERE T2.name  =  "Phillip J Fry"
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, List the dates of all shipments.[SQL]\nSELECT Date FROM shipment
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the dates of every shipment in the database?[SQL]\nSELECT date FROM shipment
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, List all shipment ids for the planet Mars.[SQL]\nSELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name  =  'Mars'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the shipment ids for the planet Mars?[SQL]\nSELECT T1.shipment FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name  =  'Mars'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, List all shipment ids for the planet Mars and under the management of Turanga Leela.[SQL]\nSELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name  =  'Mars' AND T1.manager  =  2
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?[SQL]\nSELECT T1.shipment FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid JOIN has_clearance AS T3 ON T2.planetid  =  T3.planet JOIN employee AS T4 ON T4.employeeid  =  T3.employee WHERE T2.name  =  'Mars' AND T4.name  =  'Turanga Leela'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, List all shipment ids on the planet Mars or under the management of Turanga Leela.[SQL]\nSELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name  =  'Mars' OR T1.manager  =  2
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids for all shipments on the planet Mars that Turanga Leela manages?[SQL]\nSELECT T1.shipmentid FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid WHERE T2.name  =  'Mars' AND T1.manager  =  2869
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the total shipments in each planet? List the planet name and total shipments.[SQL]\nSELECT T1.name ,  count(*) FROM planet AS T1 JOIN shipment AS T2 ON T1.planetid  =  T2.planet GROUP BY T1.name
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, How many shipments take place on each planet?[SQL]\nSELECT T2.name ,  count(*) FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid GROUP BY T2.name
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, Which planet has most shipments? List the planet name.[SQL]\nSELECT T1.name FROM planet AS T1 JOIN shipment AS T2 ON T1.planetid  =  T2.planet GROUP BY T2.planet ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the planet with the most shipments?[SQL]\nSELECT T1.name FROM planet AS T1 JOIN shipment AS T2 ON T1.planetid  =  T2.planet GROUP BY T1.planetid ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, List the manger's name and number of shipments under his management.[SQL]\nSELECT T1.name ,  count(*) FROM employee AS T1 JOIN shipment AS T2 ON T1.employeeid  =  T2.manager GROUP BY T1.employeeid
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the number of shipments managed and names of each manager?[SQL]\nSELECT count(*) ,  T1.name FROM employee AS T1 JOIN shipment AS T2 ON T1.employeeid  =  T2.manager GROUP BY T1.name
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, Calculate total weight of package shipped on Mars.[SQL]\nSELECT sum(T1.Weight) FROM package AS T1 JOIN shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN planet AS T3 ON T2.planet  =  T3.PlanetID WHERE T3.name  =  'Mars'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, what is the total weight of all packages shipped on Mars?[SQL]\nSELECT sum(T1.Weight) FROM package AS T1 JOIN shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN planet AS T3 ON T2.planet  =  T3.PlanetID WHERE T3.name  =  'Mars'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, Calculate total weight of package shipped in each planet . show the name of each planet .[SQL]\nSELECT T3.name ,  sum(weight) FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment JOIN planet AS T3 ON T2.planet  =  T3.planet GROUP BY T2.planet
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, what is the total package weight for each planet, list its name ?[SQL]\nSELECT T3.name ,  sum(T1.weight) FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment JOIN planet AS T3 ON T2.planet  =  T3.planet GROUP BY T2.planet'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, Which planet has total weight of shipment greater than 30? List planet name.[SQL]\nSELECT T1.name FROM planet AS T1 JOIN shipment AS T2 ON T1.planetid  =  T2.planet WHERE sum(T2.weight)  >  30
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all planets tjat have a total shipment weight greater than 30?[SQL]\nSELECT T2.name FROM shipment AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid GROUP BY T2.name HAVING sum(T1.weight)  >  30
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.[SQL]\nSELECT T1.packageNumber FROM Package AS T1 JOIN Shipment AS T2 ON T1.Shipment  =  T2.Shipment JOIN Employee AS T3 ON T2.manager  =  T3.EmployeeID JOIN Has_clearance AS T4 ON T4.planet  =  7 AND T4.employee  =  T3.EmployeeID SENDER Client AS T5 ON T5.AccountNumber  =  T1.Sender WHERE T5.name  =  'Zapp Brannigan'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?[SQL]\nSELECT count(*) FROM shipment AS T1 JOIN package AS T2 ON T1.shipmentid  =  T2.shipment WHERE T1.manager  =  (SELECT employeeid FROM employee WHERE name  =  'Zapp Brannigan') AND T2.planet  =  (SELECT planetid FROM planet WHERE name  =  'Omicron Persei 8')
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.[SQL]\nSELECT T1.packageNumber FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment JOIN employee AS T3 ON T2.manager  =  T3.EmployeeID JOIN has_clearance AS T4 ON T4.planet  =  7 AND T3.EmployeeID  =  T4.employee SELECT T1.packageNumber FROM package AS T1 JOIN shipment AS T2 ON T1.shipment  =  T2.shipment JOIN employee AS T3 ON T2.manager  =  T3.EmployeeID JOIN has_clearance AS T4 ON T4.planet  =  7 AND T3.EmployeeID  =  T4.employee'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?[SQL]\nSELECT count(*) FROM shipment AS T1 JOIN package AS T2 ON T1.shipment = T2.shipment WHERE T1.planet  =  3 OR T2.sender  =  4
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, Which packages have weight between 10 and 30? List the package number and weight.[SQL]\nSELECT PackageNumber ,  Weight FROM Package WHERE Weight BETWEEN 10 AND 30
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the package numbers and weights that are between 10 and 30?[SQL]\nSELECT T2.PackageNumber ,  T2.Weight FROM shipment AS T1 JOIN package AS T2 ON T1.ShipmentID  =  T2.Shipment WHERE T2.Weight BETWEEN 10 AND 30"
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, Which employees do not have clearance in Mars? List employee's name.[SQL]\nSELECT T1.name FROM Employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.planet WHERE T2.planet  =  mars
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all employees who don't have clearance on Mars?[SQL]\nSELECT name FROM employee EXCEPT SELECT T1.name FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee JOIN planet AS T3 ON T2.planet  =  T3.planetid WHERE T3.name  =  'Mars'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, Which employees have clearance in Omega III? List employees' name.[SQL]\nSELECT T1.name FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee WHERE T2.planet  =  3
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all employees with clearance on Omega III?[SQL]\nSELECT T1.name FROM employee AS T1 JOIN has_clearance AS T2 ON T1.employeeid  =  T2.employee WHERE T2.planet  =  (SELECT planetid FROM planet WHERE name  =  'Omega III')
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, Which planets that have exact one employee has clearance? List planets' name.[SQL]\nSELECT T2.name FROM has_clearance AS T1 JOIN planet AS T2 ON T1.planet  =  T2.planetid JOIN employee AS T3 ON T1.employee  =  T3.employeeid WHERE T3.position  =  'Manager'
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all planets with one employee that has clearance?[SQL]\nSELECT T2.Name FROM Has_clearance AS T1 JOIN Planet AS T2 ON T1.planet  =  T2.PlanetID JOIN Employee AS T3 ON T1.employee  =  T3.EmployeeID WHERE T1.level  =  1
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, Which employees have salaries between 5000 and 10000? List employees' name.[SQL]\nSELECT name FROM employee WHERE salary BETWEEN 5000 AND 10000
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the employees's names for those that have salaries between 5000 and 10000?[SQL]\nSELECT name FROM employee WHERE salary BETWEEN 5000 AND 10000
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of employees whose salary is above the average salary or more than 5000.[SQL]\nSELECT name FROM employee WHERE salary  >  (SELECT avg(salary) FROM employee)
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all employees who have a salary greater than average or more than 5000?[SQL]\nSELECT name FROM employee WHERE salary  >  (SELECT avg(salary) FROM employee) OR salary  >  5000
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of employees who do not have clearance in Mars .[SQL]\nSELECT count(*) FROM Employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet  =  3)
### Database Schema\ n\n['CREATE TABLE Employee (  EmployeeID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Position VARCHAR(255) NOT NULL,  Salary REAL NOT NULL,  Remarks VARCHAR(255))CREATE TABLE Planet (  PlanetID INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Coordinates REAL NOT NULL)CREATE TABLE Shipment (  ShipmentID INTEGER PRIMARY KEY,  Date DATE,  Manager INTEGER NOT NULL,  Planet INTEGER NOT NULL,  FOREIGN KEY (Manager) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Has_Clearance (  Employee INTEGER NOT NULL,  Planet INTEGER NOT NULL,  Level INTEGER NOT NULL,  PRIMARY KEY(Employee, Planet),  FOREIGN KEY (Employee) REFERENCES Employee(EmployeeID),  FOREIGN KEY (Planet) REFERENCES Planet(PlanetID))CREATE TABLE Client (  AccountNumber INTEGER PRIMARY KEY,  Name VARCHAR(255) NOT NULL)CREATE TABLE Package (  Shipment INTEGER NOT NULL,  PackageNumber INTEGER NOT NULL,  Contents VARCHAR(255) NOT NULL,  Weight REAL NOT NULL,  Sender INTEGER NOT NULL,  Recipient INTEGER NOT NULL,  PRIMARY KEY(Shipment, PackageNumber),  FOREIGN KEY (Shipment) REFERENCES Shipment(ShipmentID),  FOREIGN KEY (Sender) REFERENCES Client(AccountNumber),  FOREIGN KEY (Recipient) REFERENCES Client(AccountNumber))']\n\n\n### Task \n\nBased on the provided database schema information, What is the number of employees that do not have clearance on Mars ?[SQL]\nSELECT count(*) FROM Employee WHERE employeeid NOT IN (SELECT employee FROM has_clearance WHERE planet  =  'Mars')
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, How many games are there?[SQL]\nSELECT count(*) FROM game
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of games.[SQL]\n SELECT count(*) FROM game
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the Title and Developers of all games ordered by units sold from large to small.[SQL]\nSELECT title ,  developers FROM game ORDER BY units_sold_millions DESC
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles and developers of all games, sorted by units sold descending?[SQL]\nSELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average units sold in millions of the games that are not developed by Nintendo?[SQL]\nSELECT avg(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo'
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the average number of units sold in millions for games not developed by Nintendo.[SQL]\nSELECT avg(Units_sold_Millions) FROM game WHERE Developers != 'Nintendo'
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and market districts of all platforms?[SQL]\nSELECT Platform_name ,  Market_district FROM platform
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Return all platform names and corresponding market districts.[SQL]\nSELECT Platform_name ,  Market_district FROM platform
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and id of platforms whose download rank is 1?[SQL]\nSELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the names and ids of all platforms with the download rank of 1.[SQL]\nSELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the maximum and minimum rank of the year of players.[SQL]\nSELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Give the maximum and minimum rank of the year across all players.[SQL]\nSELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, How many players have rank of the year smaller than 3?[SQL]\n SELECT count(*) FROM player WHERE Rank_of_the_year  <  3
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of players that have a rank of year of at most 3.[SQL]\nSELECT count(*) FROM player WHERE Rank_of_the_year  <=  3
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List all player names in ascending alphabetical order.[SQL]\nSELECT Player_name FROM player ORDER BY Player_name ASC
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of all players in alphabetical order?[SQL]\nSELECT Player_name FROM player ORDER BY Player_name ASC
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List names and colleges of all players in descending order of rank of the year.[SQL]\nSELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and colleges of all players, ordered by rank of year descending?[SQL]\nSELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Please show the names and rank of players that have played the game titled "Super Mario World".[SQL]\nSELECT T2.Player_name ,  T1.Rank_of_the_year FROM game_player AS T1 JOIN player AS T2 ON T1.Player_ID  =  T2.Player_ID JOIN game AS T3 ON T1.Game_ID  =  T3.Game_ID WHERE T3.Title  =  "Super Mario World"
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names and ranks of players who have played the game with the title "Super Mario World"?[SQL]\nSELECT T2.Player_name ,  T1.Rank_of_the_year FROM game_player AS T1 JOIN player AS T2 ON T1.Player_ID  =  T2.Player_ID JOIN game AS T3 ON T1.Game_ID  =  T3.Game_ID WHERE T3.Title  =  "Super Mario World"
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the distinct developer of games played by players that go to college "Auburn".[SQL]\nSELECT DISTINCT Developers FROM game AS T1 JOIN game_player AS T2 ON T1.game_id  =  T2.game_id WHERE T2.player_id IN (SELECT player_id FROM player WHERE College  =  "Auburn")
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the different developers of games that are played by players that attend Auburn college?[SQL]\nSELECT T2.Developers FROM game_player AS T1 JOIN game AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T3.College  =  'Auburn'
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What is the average number of units sold in millions of games played by players with position "Guard"?[SQL]\nSELECT avg(T1.Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  "Guard"
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Return the average number of units sold in millions among games played by players who have the position Guard.[SQL]\nSELECT avg(T1.Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  'Guard'
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Please list the title and platform name of games.[SQL]\nSELECT T2.title ,  T1.platform_name FROM platform AS T1 JOIN game AS T2 ON T1.platform_id  =  T2.platform_id
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles and platform names of all games?[SQL]\nSELECT T2.title ,  T1.platform_name FROM platform AS T1 JOIN game AS T2 ON T1.platform_id  =  T2.platform_id
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Please list the title of games with platforms that have market district in Asia or USA.[SQL]\nSELECT T2.title FROM platform AS T1 JOIN game AS T2 ON T1.platform_id  =  T2.platform_id WHERE T1.market_district  =  'Asia' OR T1.market_district  =  'USA'
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles of games that have platforms in the market districts of Asia or the USA?[SQL]\nSELECT T2.title FROM platform AS T1 JOIN game AS T2 ON T1.platform_id  =  T2.platform_id WHERE T1.market_district  =  'Asia' OR T1.market_district  =  'USA'
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the name of each franchise and the number of games belonging to that franchise.[SQL]\nSELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, How many games are there from each Franchise?[SQL]\nSELECT count(*) ,  franchise FROM game GROUP BY franchise
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the name of franchise that have the most number of games.[SQL]\nSELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Which franchise has the most games?[SQL]\nSELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the names of franchises that have at least two games.[SQL]\nSELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of franchises that have two or more games?[SQL]\nSELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, List the name of players that do not play any game.[SQL]\nSELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of players who do not play any games?[SQL]\nSELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the title of games that are played by both players from college "Oklahoma" and players from college "Auburn".[SQL]\nSELECT T1.title FROM game AS T1 JOIN game_player AS T2 ON T1.game_id  =  T2.game_id JOIN player AS T3 ON T2.player_id  =  T3.player_id JOIN game_player AS T4 ON T4.game_id  =  T1.game_id JOIN player AS T5 ON T4.player_id  =  T5.player_id WHERE T3.College  =  "Oklahoma" INTERSECT SELECT T1.title FROM game AS T1 JOIN game_player AS T2 ON T1.game_id  =  T2.game_id JOIN player AS T3 ON T2.player_id  =  T3.player_id JOIN game_player AS T4 ON T4.game_id  =  T1.game_id JOIN player AS T5 ON T4
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles of games that are played by players from Oklahoma college or Auburn college?[SQL]\nSELECT T2.title FROM game_player AS T1 JOIN game AS T2 ON T1.game_id  =  T2.game_id JOIN player AS T3 ON T1.player_id  =  T3.player_id WHERE T3.College  =  'Oklahoma' OR T3.College  =  'Auburn'
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show all distinct franchises of games.[SQL]\nSELECT DISTINCT Franchise FROM game
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are all the distinct franchises?[SQL]\nSELECT DISTINCT Franchise FROM game
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, Show the title of games that are not played by any player who is in the Guard position.[SQL]\nSELECT title FROM game WHERE game_id NOT IN (SELECT game_id FROM game_player AS T1 JOIN player AS T2 ON T1.player_id  =  T2.player_id WHERE T2.Position  =  'Guard')
### Database Schema\ n\n['CREATE TABLE "platform" ("Platform_ID" int,"Platform_name" text,"Market_district" text,"Download_rank" int,PRIMARY KEY ("Platform_ID"))CREATE TABLE "game" ("Game_ID" int,"Title" text,"Release_Date" text,"Franchise" text,"Developers" text,"Platform_ID" int,"Units_sold_Millions" int,PRIMARY KEY ("Game_ID"),FOREIGN KEY ("Platform_ID") REFERENCES platform("Platform_ID"))CREATE TABLE "player" ("Player_ID" int,"Rank_of_the_year" int,"Player_name" text,"Position" text,"College" text,PRIMARY KEY ("Player_ID"))CREATE TABLE "game_player" ("Player_ID" int,"Game_ID" int,"If_active" bool,PRIMARY KEY ("Player_ID","Game_ID"),FOREIGN KEY ("Player_ID") REFERENCES player("Player_ID"),FOREIGN KEY ("Game_ID") REFERENCES game("Game_ID"))']\n\n\n### Task \n\nBased on the provided database schema information, What are the titles of games not played by any players who play the Guard position?[SQL]\nSELECT title FROM game EXCEPT SELECT T1.title FROM game AS T1 JOIN game_player AS T2 ON T1.game_id  =  T2.game_id JOIN player AS T3 ON T2.player_id  =  T3.player_id WHERE T3.Position  =  'Guard'
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, list all the names of press in descending order of the profit of the year.[SQL]\nSELECT name FROM press ORDER BY year_profits_billion DESC
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Sorted all the press by year profits in descending order, and return press names.[SQL]\nSELECT name FROM press ORDER BY year_profits_billion DESC
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?[SQL]\nSELECT name FROM press WHERE year_profits_billion  >  15 OR month_profits_billion  >  10 CONNECT BY LEVEL  -  1 LIMIT 1
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.[SQL]\nSELECT name FROM press WHERE year_profits_billion  >  15 OR month_profits_billion  >  1000000000
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, what are the average and maximum profit of a year for all presses?[SQL]\nSELECT avg(month_profits_billion) ,  max(month_profits_billion) FROM press
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the average and maximum yearly profit for each press.[SQL]\nSELECT max(YEAR_Profits_billion) ,  avg(YEAR_Profits_billion) FROM press GROUP BY name
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of the publisher whose monthly profit is the highest.[SQL]\nSELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which press has the largest monthly profit? Give me the press name.[SQL]\nSELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of the publisher whose monthly profit is the highest or the lowest.[SQL]\nSELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the names of the press that makes the highest monthly profit or the lowest monthly profit?[SQL]\nSELECT name FROM press ORDER BY month_profits_billion DESC LIMIT 1 UNION SELECT name FROM press ORDER BY month_profits_billion ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, how many authors are under age 30?[SQL]\nSELECT count(*) FROM author WHERE age  <  30
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of authors of age below 30.[SQL]\nSELECT count(*) FROM author WHERE age  <  30
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, find the average age of authors for each gender.[SQL]\nSELECT avg(age) ,  gender FROM author GROUP BY gender
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, For each gender, return gender and the average age of authors.[SQL]\nSELECT Gender ,  AVG(Age) FROM author GROUP BY Gender
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, find the number of authors who are older than 30 for each gender.[SQL]\nSELECT count(*) ,  Gender FROM author WHERE age  >  30 GROUP BY Gender
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many authors are of age above 30 for each gender?[SQL]\nSELECT count(*) ,  Gender FROM author WHERE age  >  30 GROUP BY Gender
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, List all book titles in the order of their release date from the most recent to the past.[SQL]\nSELECT Title FROM book ORDER BY Release_date DESC
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Sort all the books in descending order of release date, and return the book titles.[SQL]\nSELECT Title FROM book ORDER BY Release_date DESC
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of books for each series.[SQL]\nSELECT Book_Series ,  COUNT(*) FROM book GROUP BY Book_Series
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, How many books does each book series have? Return the counts and book series.[SQL]\nSELECT Book_Series ,  COUNT(*) FROM book GROUP BY Book_Series
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the titles and publish dates of the top 5 best sale books.[SQL]\nSELECT T1.title ,  T1.release_date FROM book AS T1 JOIN (SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5) AS T2 ON T1.title  =  T2.title AND T1.release_date  =  T2.release_date
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the 5 best books in terms of sale amount? Give me their titles and release dates.[SQL]\nSELECT T1.title ,  T1.release_date FROM book AS T1 JOIN (SELECT title ,  release_date ,  sum(sale_amount) AS total_sales FROM book GROUP BY title ,  release_date ORDER BY total_sales DESC LIMIT 5) AS T2 ON T1.title  =  T2.title AND T1.release_date  =  T2.release_date
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the book series that have some book selling more than 1000 and some book less 500.[SQL]\nSELECT T1.book_series FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id WHERE T1.sale_amount  >  1000 INTERSECT SELECT T1.book_series FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id WHERE T1.sale_amount  <  500
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which book series contain both books with sale amount above 1000 and books with sale amount below 500?[SQL]\nSELECT T1.book_series FROM book AS T1 JOIN book AS T2 ON T1.book_series = T2.book_series WHERE T1.sale_amount - 1000 > 0 AND T2.sale_amount - 500 < 0
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name of authors who publish their books in both "MM" and "LT" series.[SQL]\n\nSELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id WHERE T2.book_series  =  'MM' INTERSECT SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id WHERE T2.book_series  =  'LT'
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which authors publish books in both "MM" and "LT" series? Give me the author names.[SQL]\nSELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id WHERE T2.book_series  =  "MM" INTERSECT SELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id WHERE T2.book_series  =  "LT"
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name and age of the authors who do not have any book in the record.[SQL]\nSELECT Name ,  Age FROM author WHERE Author_ID NOT IN (SELECT Author_ID FROM book)
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which authors in the record have not published any books ? Give me their names .[SQL]\nSELECT name FROM author WHERE author_id NOT IN (SELECT author_id FROM book)
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the names of authors who have more than one book in the database.[SQL]\nSELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  1
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which authors have published more than 1 book according to the database? Give me their names.[SQL]\nSELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.name HAVING count(*)  >  1
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the title, author name, and publisher name for the top 3 best sales books.[SQL]\nSELECT T1.title ,  T2.name ,  T3.name FROM book AS T1 JOIN author AS T2 ON T1.author_id  =  T2.author_id JOIN press AS T3 ON T1.press_id  =  T3.press_id ORDER BY T1.sale_amount DESC LIMIT 3
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the 3 best selling books? Show their titles, author names, and press names.[SQL]\nSELECT T1.title ,  T2.name ,  T3.name FROM book AS T1 JOIN author AS T2 ON T1.author_id  =  T2.author_id JOIN press AS T3 ON T1.press_id  =  T3.press_id ORDER BY T1.sale_amount DESC LIMIT 3
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name and total book sale amount of each press.[SQL]\nSELECT T2.name ,  sum(T1.sale_amount) FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id GROUP BY T1.press_id
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What are the name and total book sale amount of each press?[SQL]\nSELECT T2.name ,  sum(T1.sale_amount) FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id GROUP BY T1.press_id
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the number of books that are sold more than 1000 for each publisher. List the press name as well.[SQL]\nSELECT count(*) ,  T2.name FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id WHERE T1.sale_amount  >  1000 GROUP BY T2.name
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, For each press, return its name and the number of books that have sale amount above 1000.[SQL]\nSELECT T2.name ,  count(*) FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id WHERE T1.sale_amount  >  1000 GROUP BY T2.press_id
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the author of best selling book?[SQL]\nSELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id WHERE T2.sale_amount  =  (SELECT max(sale_amount) FROM book)
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Who wrote the best selling book? Give me the author name.[SQL]\nSELECT T1.name FROM author AS T1 JOIN book AS T2 ON T1.author_id  =  T2.author_id ORDER BY T2.sale_amount DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, find the name and gender of the author who published the most books.[SQL]\nSELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Who wrote the largest number of books? Give me the author name and gender.[SQL]\nSELECT name ,  Gender FROM author ORDER BY sale_amount DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the names of the authors who did not have any book with the "Accor" press.[SQL]\nSELECT name FROM author WHERE author_id NOT IN (SELECT T1.author_id FROM book AS T1 JOIN press AS T2 ON T1.press_id  =  T2.press_id WHERE T2.name  =  'Accor')
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Which authors have never published under the "Accor" press? Give me their names.[SQL]\nSELECT name FROM author EXCEPT (SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  "Accor")
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the name and the yearly profit in billion for press that published more than two books.[SQL]\nSELECT t1.name ,  sum(t3.year_profits_billion) FROM press AS t1 JOIN book AS t2 ON t1.press_id  =  t2.press_id JOIN sales AS t3 ON t2.book_id  =  t3.book_id GROUP BY t1.press_id HAVING count(*)  >  2'
### Database Schema\ n\n['CREATE TABLE "author" ("Author_ID" int,"Name" text,"Age" int,"Gender" text,PRIMARY KEY ("Author_ID"))CREATE TABLE "press" ("Press_ID" int,"Name" text,"Month_Profits_billion" real,"Year_Profits_billion" real,PRIMARY KEY ("Press_ID"))CREATE TABLE "book" ("Book_ID" int,"Title" text,"Book_Series" text,"Author_ID" int,"Press_ID" int,"Sale_Amount" text,"Release_date" text,PRIMARY KEY ("Book_ID"),FOREIGN KEY (`Author_ID`) REFERENCES `author`(`Author_ID`),FOREIGN KEY (`Press_ID`) REFERENCES `press`(`Press_ID`))']\n\n\n### Task \n\nBased on the provided database schema information, Find the press that published more than two books, and return its name and yearly profit in billion.[SQL]\nSELECT t2.name ,  t2.year_profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, How many authors do we have?[SQL]\nSELECT count(*) FROM Authors
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show all author names.[SQL]\nSELECT author_name FROM Authors
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show the names and other details for all authors.[SQL]\nSELECT author_name ,  other_details FROM Authors
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show the other details for the author Addison Denesik.[SQL]\nSELECT other_details FROM Authors WHERE author_name  =  "Addison Denesik"
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show the number of documents.[SQL]\nSELECT count(*) FROM Documents
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Who is the author of the document with id 4?[SQL]\nSELECT T1.author_name FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name WHERE T2.document_id  =  4
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Who is the author of the document "Travel to Brazil"?[SQL]\nSELECT T1.author_name FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name WHERE T2.document_name  =  "Travel to Brazil"
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, How many documents does has the author Era Kerluke written?[SQL]\nSELECT count(*) FROM Documents AS T1 JOIN Authors AS T2 ON T1.author_name  =  T2.author_name WHERE T2.author_name  =  'Era Kerluke'
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show the names and descriptions for all documents.[SQL]\nSELECT document_name ,  document_description FROM Documents
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show the ids and names for all documents by author Bianka Cummings.[SQL]\nSELECT document_id ,  document_name FROM Documents WHERE author_name  =  "Bianka Cummings"
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show the author name and details for the document "Travel to China".[SQL]\nSELECT T1.author_name ,  T1.other_details FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name WHERE T2.document_name  =  "Travel to China"
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show all author names and number of documents corresponding to each.[SQL]\nSELECT T1.author_name ,  COUNT(*) FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name GROUP BY T1.author_name ORDER BY COUNT(*) DESC"}
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, What is the name of the author with most number of documents?[SQL]\nSELECT T1.author_name FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name GROUP BY T1.author_name ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show the names for authors with at least two documents.[SQL]\nSELECT T1.author_name FROM Authors AS T1 JOIN Documents AS T2 ON T1.author_name  =  T2.author_name GROUP BY T1.author_name HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, How many business processes do we have?[SQL]\nSELECT count(*) FROM Business_Processes
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show the next process id, process name, process description for process with id 9.[SQL]\nSELECT next_process_id ,  process_name ,  process_description FROM Business_Processes WHERE process_id  =  9
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, What is the process name for the next process of the process with id 9?[SQL]\nSELECT process_name FROM Business_Processes WHERE process_id = ( SELECT next_process_id FROM Business_Processes WHERE process_id = 9 )
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show the number of process outcomes.[SQL]\nSELECT count(*) FROM process_outcomes
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, List the codes and descriptions for all process outcomes.[SQL]\nSELECT process_outcome_code ,  process_outcome_description FROM Process_Outcomes
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, What is the description for the process outcome code working?[SQL]\nSELECT process_outcome_description FROM PROCESS_OUTCOMES WHERE process_outcome_code  =  'working'
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show the number of process status.[SQL]\nSELECT count(*) FROM process_status
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, List the codes and descriptions for all process status.[SQL]\nSELECT process_status_code ,  process_status_description FROM Process_Status
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, What is the description for process status code ct?[SQL]\nSELECT process_status_description FROM Process_Status WHERE process_status_code  =  'ct'
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, How many staff do we have?[SQL]\nSELECT count(*) FROM Staff
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show the ids and details for all staff.[SQL]\nSELECT staff_id ,  staff_details FROM Staff
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, What are the details for the staff member with id 100.[SQL]\nSELECT * FROM Staff WHERE staff_id = 100
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show the number of staff roles.[SQL]\nSELECT count(*) FROM Ref_Staff_Roles
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, List the codes and descriptions for all staff roles.[SQL]\nSELECT staff_role_code ,  staff_role_description FROM Ref_Staff_Roles
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, What is the description for staff role code HR?[SQL]\nSELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code  =  "HR"
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, How many documents have a process?[SQL]\nSELECT count(*) FROM Documents_Processes
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, List all process ids with a document.[SQL]\nSELECT process_id FROM Documents_Processes WHERE document_id  =  1
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show all document ids without a process.[SQL]\nSELECT document_id FROM Documents_Processes WHERE process_id IS NULL
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, List all process ids with no document.[SQL]\nSELECT process_id FROM Business_Processes WHERE process_id NOT IN ( SELECT process_id FROM Documents_Processes )
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, What is the process outcome description and process status description for the document with id 0?[SQL]\nSELECT T2.process_outcome_description ,  T3.process_status_description FROM Documents_processes AS T1 JOIN Process_Outcomes AS T2 ON T1.process_outcome_code = T2.process_outcome_code JOIN Process_Status AS T3 ON T1.process_status_code = T3.process_status_code WHERE document_id  =  0
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, What is the process name for the document "Travel to Brazil"?[SQL]\nSELECT T2.process_name FROM Documents_Processes AS T1 JOIN Business_Processes AS T2 ON T1.process_id  =  T2.process_id JOIN Documents AS T3 ON T1.document_id  =  T3.document_id WHERE T3.document_name  =  "Travel to Brazil"
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show all process ids and the number of documents in each process.[SQL]\nSELECT T2.process_id ,  count(*) FROM Documents_processes AS T1 JOIN Business_processes AS T2 ON T1.process_id  =  T2.process_id GROUP BY T2.process_id
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, How many staff are the document with id 0 and process with id 9.[SQL]\nSELECT count(*) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show all staff ids and the number of document processes for each staff.[SQL]\nSELECT T1.staff_id ,  count(*) FROM Staff_in_Processes AS T1 JOIN Documents_Processes AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.staff_id
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, Show all staff role codes and the number of document processes for each role.[SQL]\nSELECT T1.staff_role_code ,  count(*) FROM Staff_in_Processes AS T1 JOIN Business_Processes AS T2 ON T1.process_id  =  T2.process_id GROUP BY T1.staff_role_code
### Database Schema\ n\n['CREATE TABLE Staff (staff_id INTEGER NOT NULL,staff_details VARCHAR(255) NOT NULL,PRIMARY KEY (staff_id))CREATE TABLE Ref_Staff_Roles (staff_role_code CHAR(15) NOT NULL,staff_role_description VARCHAR(255) NOT NULL,PRIMARY KEY (staff_role_code))CREATE TABLE Process_Outcomes (process_outcome_code CHAR(15) NOT NULL,process_outcome_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_outcome_code))CREATE TABLE Process_Status (process_status_code CHAR(15) NOT NULL,process_status_description VARCHAR(255) NOT NULL,PRIMARY KEY (process_status_code))CREATE TABLE Authors (author_name VARCHAR(255) NOT NULL,other_details VARCHAR(255) NOT NULL,PRIMARY KEY (author_name))CREATE TABLE Documents (document_id INTEGER NOT NULL,author_name VARCHAR(255) NOT NULL,document_name VARCHAR(255) NOT NULL,document_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (document_id),FOREIGN KEY (author_name) REFERENCES Authors (author_name))CREATE TABLE Business_Processes (process_id INTEGER NOT NULL,next_process_id INTEGER,process_name VARCHAR(255) NOT NULL,process_description VARCHAR(255) NOT NULL,other_details VARCHAR(255),PRIMARY KEY (process_id))CREATE TABLE Documents_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,process_outcome_code CHAR(15) NOT NULL,process_status_code CHAR(15) NOT NULL,PRIMARY KEY (document_id, process_id),FOREIGN KEY (document_id) REFERENCES Documents (document_id),FOREIGN KEY (process_id) REFERENCES Business_Processes (process_id),FOREIGN KEY (process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code),FOREIGN KEY (process_status_code) REFERENCES Process_Status (process_status_code))CREATE TABLE Staff_in_Processes (document_id INTEGER NOT NULL,process_id INTEGER NOT NULL,staff_id INTEGER NOT NULL,staff_role_code CHAR(15) NOT NULL,date_from DATETIME,date_to DATETIME,other_details VARCHAR(255),PRIMARY KEY (document_id, process_id, staff_id),FOREIGN KEY (staff_id) REFERENCES Staff (staff_id),FOREIGN KEY (document_id, process_id) REFERENCES Documents_Processes (document_id,process_id),FOREIGN KEY (staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code))']\n\n\n### Task \n\nBased on the provided database schema information, How many different roles does the staff with id 3 have?[SQL]\nSELECT count(DISTINCT staff_role_code) FROM staff_in_processes WHERE staff_id = 3
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many agencies do we have?[SQL]\nSELECT count(*) FROM Agencies
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of agencies.[SQL]\nSELECT count(*) FROM Agencies
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show all agency ids and details.[SQL]\nSELECT agency_id ,  agency_details FROM Agencies
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are all the agency ids and details?[SQL]\nSELECT agency_id ,  agency_details FROM Agencies
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show the number of clients.[SQL]\nSELECT count(*) FROM Clients
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many clients are there?[SQL]\nSELECT count(*) FROM Clients
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, List all client ids and client details.[SQL]\nSELECT client_id ,  client_details FROM Clients
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are all the client ids and details?[SQL]\nSELECT client_id ,  client_details FROM Clients
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show agency ids and the number of clients for each agency.[SQL]\nSELECT T1.agency_id ,  count(*) FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many clients does each agency have?[SQL]\nSELECT T1.agency_id ,  count(*) FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What is the agency id and details with most number of clients?[SQL]\nSELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the agency id and details for the agency with the greatest number of clients.[SQL]\nSELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show agency ids and details with at least 2 clients.[SQL]\nSELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the agency ids and details agencies with at least 2 clients?[SQL]\nSELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show agency details for client with detail 'Mac'.[SQL]\nSELECT T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id WHERE T2.client_details  =  'Mac'
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the agency details for clients with the detail Mac?[SQL]\nSELECT T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id WHERE T2.client_details LIKE '%Mac%'
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show details for all clients and the details of their corresponding agents.[SQL]\nSELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the client details for each client and the corresponding details of their agencies?[SQL]\nSELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show all sic codes and the number of clients with each code.[SQL]\nSELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many clients are there for each sic code?[SQL]\nSELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show all client ids and details with sic code "Bad".[SQL]\nSELECT client_id ,  client_details FROM Clients WHERE sic_code  =  "Bad"
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the client ideas and details for clients with the sic code Bad?[SQL]\nSELECT client_details FROM Clients WHERE sic_code  =  'Bad'
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show all agency ids and details for agencies with a client.[SQL]\nSELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >  0
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the agency ids and agency details for all agencies who have a client?[SQL]\nSELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show all agency ids without any client.[SQL]\nSELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are ids of agencies that do not have any clients?[SQL]\nSELECT agency_id FROM Clients GROUP BY agency_id HAVING count(*)  =  0
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many invoices do we have?[SQL]\nSELECT count(*) FROM Invoices
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of invoices.[SQL]\nSELECT count(*) FROM Invoices
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show ids, status codes, and details for all invoices for clients.[SQL]\nSELECT T1.client_id ,  T1.sic_code ,  T2.invoice_status ,  T2.invoice_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids, statuses, and details for all invoices?[SQL]\nSELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show all client ids and the number of invoices for each client.[SQL]\nSELECT T1.client_id ,  count(*) FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many invoices are there for each client id?[SQL]\nSELECT count(*) ,  client_id FROM INVOICES GROUP BY client_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, List the client id and detail with most number of invoices.[SQL]\nSELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the client id and details for the client with the most invoices?[SQL]\nSELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are client ids for clients with at least 2 invoices.[SQL]\nSELECT client_id FROM INVOICES GROUP BY client_id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the client ids for clients with two or more invoices?[SQL]\nSELECT client_id FROM INVOICES GROUP BY client_id HAVING count(*)  >=  2
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show all invoice status codes and the number of invoices with each status.[SQL]\nSELECT invoice_status ,  COUNT(*) FROM Invoices GROUP BY invoice_status
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many invoices are there for each status code?[SQL]\nSELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What is the invoice status code with most number of invoices.[SQL]\nSELECT invoice_status FROM INVOICES GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the invoice status that has the most invoices.[SQL]\nSELECT invoice_status FROM INVOICES GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show all invoice status codes and details and the corresponding client id and details and agency id and details.[SQL]\nSELECT T1.invoice_status ,  T1.invoice_details ,  T1.client_id ,  T2.client_details ,  T1.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T1.agency_id  =  T3.agency_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?[SQL]\nSELECT invoice_status ,  invoice_details ,  client_id ,  client_details ,  agency_id ,  agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, List all meeting type codes and details.[SQL]\nSELECT meeting_type FROM MEETINGS GROUP BY meeting_type'
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are all meeting types and other details?[SQL]\nSELECT meeting_type ,  purpose_of_meeting FROM MEETINGS
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show all meeting outcomes and purposes.[SQL]\nSELECT meeting_outcome ,  purpose_of_meeting FROM MEETINGS
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are all meeting outcomes and purposes?[SQL]\nSELECT DISTINCT meeting_outcome ,  purpose_of_meeting FROM MEETINGS
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show all payment ids and details for invoices whose status is 'Working'.[SQL]\nSELECT T1.invoice_id ,  T1.invoice_details FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T1.invoice_status  =  'Working'
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are all payment ids and payment details for invoices with status Working?[SQL]\nSELECT T1.invoice_id ,  T1.invoice_details FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T1.invoice_status  =  'Working'
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show all invoice ids and statuses without a payment.[SQL]\nSELECT invoice_id ,  invoice_status FROM Invoices WHERE invoice_id NOT IN ( SELECT invoice_id FROM Payments )
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the invoice ids and statuses for invoices without a payment?[SQL]\nSELECT invoice_id ,  invoice_status FROM Invoices WHERE invoice_id NOT IN ( SELECT invoice_id FROM Payments )
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many payments do we have?[SQL]\nSELECT count(*) FROM PAYMENTS
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of payments.[SQL]\nSELECT count(*) FROM Payments
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, List all payment ids and its corresponding invoice ids and details.[SQL]\nSELECT payment_id ,  invoice_id ,  invoice_details FROM Invoices
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the payment ids, invoice ids, and payment details for all payments?[SQL]\nSELECT payment_id ,  invoice_id ,  payment_details FROM PAYMENTS
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show all the different invoice ids and statuses of the payments[SQL]\nSELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the distinct invoice ids and statuses for all payments?[SQL]\nSELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show all invoice ids and the number of payments for each invoice.[SQL]\nSELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many payments are there for each invoice?[SQL]\nSELECT count(*) ,  T1.invoice_id FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What is the invoice id, status code, and details for the invoice with most number of payments.[SQL]\nSELECT T1.invoice_id ,  T1.invoice_status ,  T1.invoice_details FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the invoice ids, statuses, and details for invoices with the most payments?[SQL]\nSELECT T1.invoice_id ,  T1.invoice_status ,  T1.invoice_details FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many staff do we have?[SQL]\nSELECT count(*) FROM Staff
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of staff.[SQL]\nSELECT count(*) FROM Staff
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show the agency ids and the number of staff in each agent?[SQL]\nSELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the agency ids and number of staff in each.[SQL]\nSELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What is the agent id and details for the agency with most staff?[SQL]\nSELECT agency_id ,  agency_details FROM Agencies ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the id and detail for the agency with the most staff.[SQL]\nSELECT agency_id ,  agency_details FROM Agencies ORDER BY count(*) DESC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show meeting outcome codes and the number of meeting in each outcome.[SQL]\nSELECT meeting_outcome ,  COUNT(*) FROM Meetings GROUP BY meeting_outcome
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many meetings had each meeting outcome?[SQL]\nSELECT meeting_outcome ,  count(*) FROM MEETINGS GROUP BY meeting_outcome
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, List the client ids and the number of meeting for each client.[SQL]\nSELECT T1.client_id  ,  count(*) FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many meetings are there for each client id?[SQL]\nSELECT T1.client_id ,  count(*) FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show the meeting type codes and the number of meeting for each client.[SQL]\nSELECT T1.meeting_type ,  count(*) FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.meeting_type
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many meetings are there for each meeting type?[SQL]\nSELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.[SQL]\nSELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?[SQL]\nSELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T3.client_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Staff_in_Meetings AS T3 ON T1.meeting_id  =  T3.meeting_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show the meeting ids and the number of staff in each meeting.[SQL]\nSELECT T1.meeting_id ,  count(*) FROM meetings AS T1 JOIN staff_in_meetings AS T2 ON T1.meeting_id  =  T2.meeting_id GROUP BY T1.meeting_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of staff in each meeting by meeting id.[SQL]\nSELECT meeting_id ,  count(*) FROM Staff_in_Meetings GROUP BY meeting_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.[SQL]\nSELECT T1.staff_id ,  COUNT(*) FROM Staff_in_Meetings AS T1 JOIN Meetings AS T2 ON T1.meeting_id  =  T2.meeting_id GROUP BY T1.staff_id ORDER BY COUNT(*) ASC LIMIT 1
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What is the staff id of the staff who attended the least meetings but attended some meeting?[SQL]\nSELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1'
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many staff have attended a meeting?[SQL]\nSELECT count(*) FROM Staff_in_Meetings
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the number of distinct staff who have attended a meeting?[SQL]\nSELECT count(DISTINCT T1.staff_id) FROM Staff AS T1 JOIN Meetings AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.meeting_outcome  =  'Attended'
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, How many staff did not attend any meeting?[SQL]\nSELECT count(*) FROM staff WHERE staff_id NOT IN ( SELECT staff_id FROM meetings )
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Count the number of staff who did not attend any meeting.[SQL]\nSELECT count(*) FROM staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings )
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids and details of the clients who have attended any meeting or have any invoice?[SQL]\nSELECT client_id ,  client_details FROM Clients WHERE client_id IN ( SELECT client_id FROM Meetings UNION SELECT client_id FROM Invoices )
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the ids and details of clients who have attended a meeting or had an invoice.[SQL]\nSELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN Invoices AS T2 ON T1.client_id  =  T2.client_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?[SQL]\nSELECT T1.staff_id ,  T1.staff_details FROM Staff AS T1 JOIN Meetings AS T2 ON T1.staff_id  =  T2.staff_id WHERE T1.staff_details LIKE '%s%' GROUP BY T1.staff_id HAVING count(*)  >=  1
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?[SQL]\nSELECT T1.staff_id ,  T1.staff_details FROM Staff AS T1 JOIN Meetings AS T2 ON T1.staff_id  =  T2.staff_id WHERE T1.staff_details LIKE '%s%' GROUP BY T1.staff_id HAVING count(*)  >=  1
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.[SQL]\nSELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INNER JOIN Invoices AS T3 ON T1.client_id  =  T3.client_id'
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.[SQL]\nSELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM Clients AS T1 JOIN Meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 JOIN Invoices AS T3 ON T1.client_id  =  T3.client_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, List the start time, end time of each meeting, and the corresponding client detail and staff detail.[SQL]\nSELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T3.staff_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Staff AS T3 ON T1.staff_id  =  T3.staff_id
### Database Schema\ n\n['CREATE TABLE `Agencies` (`agency_id` INTEGER PRIMARY KEY,`agency_details` VARCHAR(255) NOT NULL)CREATE TABLE `Staff` (`staff_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`staff_details` VARCHAR(255) NOT NULL)CREATE TABLE `Clients` (`client_id` INTEGER PRIMARY KEY,`agency_id` INTEGER NOT NULL,`sic_code` VARCHAR(10) NOT NULL,`client_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`agency_id` ) REFERENCES `Agencies`(`agency_id` ))CREATE TABLE `Invoices` (`invoice_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`invoice_status` VARCHAR(10) NOT NULL,`invoice_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Meetings` (`meeting_id` INTEGER PRIMARY KEY,`client_id` INTEGER NOT NULL,`meeting_outcome` VARCHAR(10) NOT NULL,`meeting_type` VARCHAR(10) NOT NULL,`billable_yn` VARCHAR(1),`start_date_time` DATETIME,`end_date_time` DATETIME,`purpose_of_meeting` VARCHAR(255),`other_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`client_id` ) REFERENCES `Clients`(`client_id` ))CREATE TABLE `Payments` (`payment_id` INTEGER NOT NULL ,`invoice_id` INTEGER NOT NULL,`payment_details` VARCHAR(255) NOT NULL,FOREIGN KEY (`invoice_id` ) REFERENCES `Invoices`(`invoice_id` ))CREATE TABLE `Staff_in_Meetings` (`meeting_id` INTEGER NOT NULL,`staff_id` INTEGER NOT NULL,FOREIGN KEY (`meeting_id` ) REFERENCES `Meetings`(`meeting_id` ),FOREIGN KEY (`staff_id` ) REFERENCES `Staff`(`staff_id` ))']\n\n\n### Task \n\nBased on the provided database schema information, What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?[SQL]\nSELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T3.staff_details FROM Meetings AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Staff AS T3 ON T1.staff_id  =  T3.staff_id
